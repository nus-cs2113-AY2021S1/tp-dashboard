[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-eventTest` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* A skeleton JUnit eventTest (`src/eventTest/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "-": 62
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Elizabeth | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jinran | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chan Xu Hui | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andre Wong | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alicia Ho | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "untitle4": 1,
      "AndreWongZH": 1,
      "durianpancakes": 1,
      "-": 4,
      "elizabethcwt": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "# Plan\u0026Score"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "to plan and track their classes, CCAs and test dates."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This enables the students to remember their schedule, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "to plan and track their classes, CCAs and eventTest dates."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This enables the students to remember their schedule, "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "1. Ensure that you have Java ```11``` or above installed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "2. Down the latest version of `Plan\u0026score` from [here](https://github.com/AY2021S1-CS2113T-W12-4/tp/releases)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "3. Run the program by entering `java -jar plan.jar` in a terminal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "## List of Features "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Shows all available commands to the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Hello! Here is a list of commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   1. Add class: add class /n [name of class] /s [start date-time of class] /e [end date-time of class]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   2. Delete class: delete class /n [class number]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   3. Add eventCca: add eventCca /n [name of eventCca] /s [start date-time of eventCca] /e [end date-time of eventCca]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   4. Delete eventCca: type delete eventCca /n [eventCca number]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   5. Add eventTest: type add eventTest /n [name of eventTest] /s [start date-time of eventTest] /e [end date-time of eventTest]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   6. Delete eventTest: type delete eventTest /n [eventTest number]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   7. Delete all: delete all"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Please enter the date-time in the following format: YYYY-MM-DD [time in 24hr format]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    e.g. 2020-08-19 1300"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Adding a class: `add class`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Adds a new class with a name, date and time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `add class /n [name of class] /s [start date-time of class] /e [end date-time of class]`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[name of class]` can be in a natural language format and "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "cannot contain \u0027/\u0027 .  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[start date-time of class]`, `[end date-time of class]` must be in "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "yyyy-mm-dd HHMM format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `add class /n Math /s 2020-08-19 1300 /e 2020-08-19 1400`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Got it. I\u0027ve added this class:`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    [CLASS] [NOT DONE] Math from 19th August 2020, 01:00 pm to 19th August 2020, 02:00 pm"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Now you have 1 class in the list.`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Deleting a class: `delete class`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Deleting a class based on its index in the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `delete class [class number]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[class number]` must be written in numerals. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `delete class 1`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Noted. I\u0027ve removed this class:`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    [CLASS] [NOT DONE] Math from 19th August 2020, 01:00 pm to 19th August 2020, 02:00 pm"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Now you have 0 classes in the list.`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "### Adding a eventCca: `add eventCca`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Adds a new eventCca with a name, date and time"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `add eventCca /n [name of eventCca] /s [start date-time of eventCca] /e [end date-time of eventCca]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[name of eventCca]` can be in a natural language format and "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "cannot contain \u0027/\u0027 .  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[start date-time of eventCca]`, `[end date-time of eventCca]` must be in "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": "yyyy-mm-dd HHMM format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Examples: `add eventCca /n Basketball training /s 2020-09-19 1900 /e 2020-09-19 2100`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Got it. I\u0027ve added this eventCca:`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    [CCA] [NOT DONE] Basketball training from 19th September 2020, 07:00 pm to 19th September 2020, 09:00 pm"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Now you have 1 eventCca in the list.`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "### Deleting a eventCca: `delete eventCca`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Deleting a eventCca based on its index in the list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `delete eventCca [eventCca number]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[eventCca number]` must be written in numerals. "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Examples: `delete eventCca 1`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Noted. I\u0027ve removed this eventCca:`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    [CCA] [NOT DONE] Basketball training from 19th September 2020, 07:00 pm to 19th September 2020, 09:00 pm"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "untitle4"
        },
        "content": "`Now you have 0 ccas in the list.`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "untitle4"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "### Adding a eventTest: `add eventTest`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Adds a new eventTest with a name, date and time"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `add eventTest /n [name of eventTest] /s [start date-time of eventTest] /e [end date-time of eventTest]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[name of eventTest]` can be in a natural language format and "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "cannot contain \u0027/\u0027 .  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[start date-time of eventTest]`, `[end date-time of eventTest]` must be in "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "yyyy-mm-dd HHMM format."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Examples: `add eventTest /n Math eventTest /s 2020-10-3 1300 /e 2020-10-3 1400`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Got it. I\u0027ve added this eventTest:`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    [TEST] [NOT DONE] Math eventTest from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Now you have 1 eventTest in the list.`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "### Deleting a eventTest: `delete eventTest`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Deleting a eventTest date based on its index in the list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `delete eventTest [eventTest number]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[eventTest number]` must be written in numerals. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Examples: `delete eventTest 1`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Noted. I\u0027ve removed this eventTest:`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    [TEST] [NOT DONE] Math eventTest from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Now you have 0 tests in the list.`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Setting an event as done: `done`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Setting a class, eventTest or eventCca event as done based on its index in the list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* For class: `done class [class number]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* For eventTest: `done eventTest [eventTest number]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* For eventCca: `done eventCca [eventCca number]`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[eventTest number]` must be in numerals. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Examples: `done eventTest 1`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Nice! I\u0027ve marked this eventTest as done:`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    [TEST] [DONE] Math eventTest from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "`Now you have 1 eventTest in the list.`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### List out schedule: `list`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "List out the entire schedule for classes, ccas and tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Classes:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1. Math from 19th Aug, 1pm to 19th Aug , 2pm "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    2. Science from 19th Aug, 3pm to 19th Aug , 4pm "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    CCA:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1. Basketball Camp from 21st Sep, 1pm to 22nd Sep, 3pm"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    2. Frisbee from 19th Sep, 1pm to 19th Sep, 3pm"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Test:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    1. Math eventTest from 26th Sep, 11am to 26th Sep, 1pm"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "**A**: Shift the event.txt file to the same directory as the java file."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "-------|--------|--------"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "help|`help`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "add|`add \u003ccategory\u003e /n \u003cdescription\u003e /s \u003cstart-date-time\u003e /e \u003cend date-time\u003e`|`add class /n Math /s 2020-09-06 1300 /e 2020-09-06 1400`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "delete|`delete \u003ccategory\u003e \u003citem number\u003e`|`delete class 1`, `delete eventTest 1`, `delete eventCca 1`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "done|`done \u003ccategory\u003e \u003citem number\u003e`|`done class 1`, `done eventTest 1`, `done eventCca 1`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "list|`list`"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 74,
      "untitle4": 27,
      "AndreWongZH": 25,
      "durianpancakes": 5,
      "-": 31,
      "elizabethcwt": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.ControlManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String EVENT_FILE_NAME \u003d \"/events.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String QUIZ_FILE_NAME \u003d \"/quiz.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventStorageManager eventStorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizStorageManager quizStorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean active;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventStorageManager \u003d new EventStorageManager(EVENT_FILE_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        quizStorageManager \u003d new QuizStorageManager(QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventParameter eventParameter \u003d eventStorageManager.loadData();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventManager eventManager \u003d new EventManager(eventParameter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizStorageManager.loadData());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ContactManager contactManager \u003d new ContactManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        active \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        model \u003d new Model(eventManager, contactManager, quizManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showWelcomeMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        while (active) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String line \u003d userInterface.getUserCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (!line.trim().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                ControlManager controlManager \u003d new ControlManager(line, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                CommandType commandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                checkIfProgramEnds(commandType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            refreshEvents();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            refreshQuizzes();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        // Exit Message"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_BYE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void checkIfProgramEnds(CommandType commandType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            active \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void refreshEvents() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(model.getEventManager().getCcaManager().getCcaList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(model.getEventManager().getTestManager().getTestList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(model.getEventManager().getClassManager().getClasses());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(model.getEventManager().getTuitionManager().getTuitions());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventStorageManager.saveData(events);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void refreshQuizzes() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d model.getQuizManager().getQuizList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizStorageManager.saveData(quizzes, QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "untitle4": 8,
      "AndreWongZH": 55,
      "durianpancakes": 19,
      "-": 11,
      "elizabethcwt": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String DONE_STATUS \u003d \"[DONE]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String NOT_DONE_STATUS \u003d \"[NOT DONE]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private String start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Event(String description, String start, String end) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Event(String description, String start, String end, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String getStart() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String getEnd() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (isDone ? DONE_STATUS : NOT_DONE_STATUS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return getStatus() + \" \" + description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (obj \u003d\u003d null || obj.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Event otherEvent \u003d (Event) obj;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.description.equals(otherEvent.description)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.isDone \u003d\u003d otherEvent.isDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 24,
      "untitle4": 7,
      "AndreWongZH": 11,
      "durianpancakes": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/ListSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListSchedule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final String CATEGORY_TUITIONS \u003d \"Tuitions: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final String CATEGORY_CLASSES \u003d \"Classes: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final String CATEGORY_TESTS \u003d \"Tests: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final String CATEGORY_CCAS \u003d \"CCAs: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ListSchedule(ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        ArrayList\u003cEvent\u003e tests, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns an array list of strings of all the classes, ccas and tests."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Array list of strings to be printed out."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyListException If there are no schedule at all."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getAllEventsPrinted() throws EmptyListException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"starting to convert events instance to strings\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (hasNoSchedule()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"schedule is empty\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyListException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveClasses()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting class events\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(\"Classes:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printArrayPaddedNumbers(printedEvents, classes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveCcas()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting CCA events\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(\"CCAs:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printArrayPaddedNumbers(printedEvents, ccas);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTests()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting test events\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(\"Tests:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printArrayPaddedNumbers(printedEvents, tests);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (haveTuitions()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"converting tuition events\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            printedEvents.add(\"Tuitions:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            printArrayPaddedNumbers(printedEvents, tuitions);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cString\u003e getAllEventsPrintedDate(String userInput) throws EmptyListException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedClasses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedTests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedCcas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedTuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"starting to convert events instance to strings\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (hasNoSchedule()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"schedule is empty\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new EmptyListException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (haveClasses()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.INFO, \"converting class events\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printArrayPaddedNumbersDate(printedClasses, classes, userInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            listNotEmpty(printedClasses, printedEvents, CATEGORY_CLASSES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (haveCcas()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.INFO, \"converting CCA events\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printArrayPaddedNumbersDate(printedCcas, ccas, userInput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            listNotEmpty(printedCcas, printedEvents, CATEGORY_CCAS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (haveTests()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.INFO, \"converting test events\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printArrayPaddedNumbersDate(printedTests, tests, userInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            listNotEmpty(printedTests, printedEvents, CATEGORY_TESTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (haveTuitions()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.INFO, \"converting tuition events\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printArrayPaddedNumbersDate(printedTuitions, tuitions, userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            listNotEmpty(printedTuitions, printedEvents, CATEGORY_TUITIONS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveClasses() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes.size() !\u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveCcas() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas.size() !\u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTests() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests.size() !\u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean haveTuitions() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions.size() !\u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean hasNoSchedule() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return (!haveClasses() \u0026\u0026 !haveCcas() \u0026\u0026 !haveTests() \u0026\u0026 !haveTuitions());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Converts event instances into strings representation padded with numbers."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * PrintedEvents cannot be null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * EventArr cannot be empty or null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param printedEvents Array list of strings to be printed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param eventArr Array list of event instances to be converted."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void printArrayPaddedNumbers(ArrayList\u003cString\u003e printedEvents, ArrayList\u003cEvent\u003e eventArr) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert printedEvents !\u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr !\u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr.size() !\u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArr.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(i + 1 + \". \" + eventArr.get(i));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void printArrayPaddedNumbersDate(ArrayList\u003cString\u003e printedEvents, ArrayList\u003cEvent\u003e eventArr,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                                             String userInput) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert printedEvents !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventArr !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventArr.size() !\u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArr.size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            String[] listDate \u003d eventArr.get(i).getStart().split(\" \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (dateTimeParser.isDateEqual(listDate[0], userInput)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printedEvents.add(i + 1 + \". \" + eventArr.get(i));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void listNotEmpty(ArrayList\u003cString\u003e printedList, ArrayList\u003cString\u003e printedEvents, String categoryName) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (printedList.size() \u003e 0) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printedEvents.add(categoryName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            for (int i \u003d 0; i \u003c printedList.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printedEvents.add(printedList.get(i));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 68,
      "AndreWongZH": 86,
      "durianpancakes": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/LogManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class LogManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static LogManager logManager \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"log\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private LogManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"./logfile.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INITIALIZATION_LOGGER_FAILED);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static LogManager getLoggerInstance() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (logManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logManager \u003d new LogManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return logManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Logger getLogger() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return LOGGER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 33,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Intro related messages"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO_FROM_DUKE \u003d \"Hello from\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + Messages.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_NAME \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO \u003d \"Hello \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_COMMAND \u003d \"What can we do for you? \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"(Enter \u0027help\u0027 for the list of available commands!)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_EMPTY_SCHEDULE_LIST \u003d \"Schedule is empty. Add some!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // General error messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_READ_ERROR \u003d \"There was an error loading your files.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_INITIALIZATION_ERROR \u003d \"STORAGE: There was an error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INITIALIZATION_LOGGER_FAILED \u003d \"Failed to set up logger\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027 inputs!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please enter valid date and time in format yyyy-mm-dd HHMM!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Contact related classes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SUBJECT_NOT_FOUND \u003d \"Subject not found\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_NAME_NOT_FOUND \u003d \"Name not found\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PHONE_NUMBER_NOT_FOUND \u003d \"Phone number not found\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_EMAIL_ADDRESS_NOT_FOUND \u003d \"Email address not found\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this contact: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this contact: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTACT_INDEX \u003d \"☹ OOPS!!! Please indicate a valid contact index!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_EMPTY_CONTACT_LIST \u003d \"Contact list is empty. Add some!!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Class related classes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this class: \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this class: \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this class as done:\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS_INDEX \u003d \"☹ OOPS!!! Please indicate a valid class index!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Cca related classes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this cca: \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this cca: \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this cca as done:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_CCA_INDEX \u003d \"☹ OOPS!!! Please indicate a valid cca index!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Test related classes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this test: \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this test: \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this test as done:\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_TEST_INDEX \u003d \"☹ OOPS!!! Please indicate a valid test index!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Tuition related classes"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_SUFFIX \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 suffixes!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_INPUT \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 inputs!\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this tuition: \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this tuition: \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this tuition as done:\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_TUITION_INDEX \u003d \"☹ OOPS!!! Please indicate a valid tuition index!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Quiz related classes"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_QUIZ_INDEX \u003d \"☹ OOPS!!! Please indicate a valid quiz index!\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Hello! Here is a list of commands you can try:\\n\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t1. Add class: \u0027add class /n [name of class] /s [start date-time of class] /e\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \" [end date-time of class]\u0027\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t2. Delete class: \u0027delete class [class number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t3. Add cca: \u0027add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]\u0027\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t4. Delete cca: \u0027delete cca [cca number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t5. Add test: \u0027add test /n [name of test] /s [start date-time of test] /e \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"[end date-time of test]\u0027\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t6. Delete test: \u0027delete test [test number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t7. Add tuition: \u0027add tuition /n [name of tuition] /s [start date-time of tuition] /e \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"start date-time of tuition] /l [location of tuition]\u0027\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t8. Delete tuition: \u0027delete tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t9. List events (class, test, cca, tuition): \u0027list\u0027\\n\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t10. Set class as done: \u0027done class [class number]\u0027\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t11. Set test as done: \u0027done test [test number]\u0027\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t12. Set cca as done: \u0027done cca [cca number]\u0027\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t13. Set tuition as done: \u0027done tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t14. Find relevant event(s): \u0027find [keyword(s)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t15. Add contact: \u0027add contact /sub [subject] /n [name of contact person] /hp [phone number]\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \" /e [email address]\u0027\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t16. Delete contact: \u0027delete contact [contact number]\u0027\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t17. List contact: \u0027list contact\u0027\\n\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t18. Take Mathematics quiz: \u0027quiz [no. of questions (10, 20 or 30)]\u0027\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t19. List quiz questions: \u0027list quiz\u0027\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t20. Add quiz question: \u0027add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3]\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \" /o4 [option 4] /a [option answer] /exp [explanation]\u0027\\n\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t21. Exit program: \u0027bye\u0027\\n\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\n\\tNOTE:\\n\\t1. Please enter the date-time in the following format: YYYY-MM-DD \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"[time in 24hr format]\\n\\te.g. 2020-08-19 1300\\n\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"\\t2. For command 20 (Add quiz question), the \u0027explanation\u0027 field is OPTIONAL\\n\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"BYE BYE! SEE YOU NEXT TIME! :3\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 135
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/ControlManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactEmptyStringException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyTuitionInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidTuitionInputException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.command.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.command.CommandFactory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ControlManager {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ControlManager(String userInput, Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType runLogic() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType modelType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d new CommandParser(userInput).extractCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            Command actionableCommand \u003d new CommandFactory(commandType, userInput).generateActionableCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return commandType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d new ModelParser(userInput).extractModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            DataManager dataModel \u003d new ModelExtractor(model, modelType).retrieveModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (modelType \u003d\u003d ModelType.EVENT) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ListCommand().execute(model.getEventManager());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                actionableCommand.execute(dataModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidClassInputException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (TestParamException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (TestEmptyStringException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (CcaParamException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (CcaEmptyStringException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyTuitionInputException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidTuitionInputException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ContactEmptyStringException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidHelpCommandException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ContactParamException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (QuizParamException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"☹ Oops! I did not recognize that command! Enter \u0027help\u0027 if needed!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidModelException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"No such model\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 15,
      "AndreWongZH": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/ModelExtractor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelExtractor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ModelType modelType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelExtractor(Model model, ModelType modelType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.modelType \u003d modelType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DataManager retrieveModel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelType \u003d\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CLASS:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getClassManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CCA:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getCcaManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TEST:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTestManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TUITION:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTuitionManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getQuizManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CONTACT:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getContactManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactEmptyStringException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyTuitionInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidTuitionInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public AddCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(DataManager dataModel) throws EmptyTuitionInputException, ContactEmptyStringException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            TestParamException, ContactParamException, InvalidTuitionInputException, InvalidClassInputException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            CcaParamException, CcaEmptyStringException, TestEmptyStringException, QuizParamException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        dataModel.add(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 11,
      "AndreWongZH": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactEmptyStringException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyTuitionInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidTuitionInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected final String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInput \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected Command(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public abstract void execute(DataManager dataModel) throws InvalidClassInputException, TestParamException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            TestEmptyStringException, CcaParamException, CcaEmptyStringException, EmptyTuitionInputException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            InvalidTuitionInputException, ContactParamException, ContactEmptyStringException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            InvalidHelpCommandException, QuizParamException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 12,
      "AndreWongZH": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/CommandFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandFactory {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandFactory(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Command generateActionableCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new HelpCommand(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        //        case LIST_QUIZ:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        //            return new ListQuizCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        //        case LIST_CONTACT:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        //            return new ListContactCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // fall through"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(DataManager dataModel) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        dataModel.delete(userInput.split(\" \"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(DataManager dataModel) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventDataManager eventDataModel \u003d (EventDataManager) dataModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventDataModel.setDone(userInput.split(\" \"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(DataManager dataModel) throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * \u003ch2\u003ehandleHelp()\u003c/h2\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Prints out all available features users can use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @exception InvalidHelpCommandException to inform the user if their help input is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void handleHelp() throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] userInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (userInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"printing out all features users can use\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_HELP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"invalid help command\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(EventManager eventManager) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventManager.listSchedule();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(DataManager dataModel) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        dataModel.list();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/ListContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListContactCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(DataManager dataModel) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        dataModel.getContactManager().listContacts();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/ListQuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListQuizCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(DataManager dataModel) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        dataModel.getQuizManager().listQuiz();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandParser(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        commandType \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType extractCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting command now...\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[MAIN_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_ADD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DELETE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DONE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DONE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_LIST:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length !\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.LIST;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_BYE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_HELP:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible commands available to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ADD, DELETE, DONE, HELP, LIST, BYE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * To configure the Date and Time of the events from yyyy-mm-dd HHMM format to dd suffix mm yyyy, hh:mm aa format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String changeDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising changing of date and time to new format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int divider \u003d dateTime.indexOf(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"split string into date and time\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String date \u003d dateTime.substring(0, divider);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"generating day suffix\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String[] dayInput \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int dayInteger \u003d Integer.parseInt(dayInput[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String dayNumberSuffix \u003d getDayNumberSuffix(dayInteger);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"changing date format\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        LocalDate oldDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String changedDate \u003d oldDate.format(formatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"changing time format\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String time \u003d dateTime.substring(divider + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateFormat inputDateTimeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateFormat outputDateTimeFormat \u003d new SimpleDateFormat(\"hh:mm aa\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Date oldTime \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String changedTime \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        oldTime \u003d inputDateTimeFormat.parse(time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        changedTime \u003d outputDateTimeFormat.format(oldTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"generating day\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String dayString \u003d String.valueOf(dayInteger);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return dayString + dayNumberSuffix + \" \" + changedDate + \" , \" + changedTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    ref to: https://stackoverflow.com/questions/4011075/how-do-you-format-the-day"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    -of-the-month-to-say-11th-21st-or-23rd-ordinal"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private String getDayNumberSuffix(int day) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert day \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert day \u003c 31;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (day \u003e\u003d 11 \u0026\u0026 day \u003c\u003d 13) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        switch (day % 10) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"st\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"nd\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"rd\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean isDateEqual(String listInput, String userInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listDay \u003d LocalDate.parse(listInput, formatter).getDayOfMonth();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userDay \u003d LocalDate.parse(userInput, formatter).getDayOfMonth();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listYear \u003d LocalDate.parse(listInput, formatter).getYear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userYear \u003d LocalDate.parse(userInput, formatter).getYear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Month listMonth \u003d LocalDate.parse(listInput, formatter).getMonth();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Month userMonth \u003d LocalDate.parse(userInput, formatter).getMonth();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return ((listDay \u003d\u003d userDay)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listMonth.equals(userMonth))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listYear \u003d\u003d userYear));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 89,
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TEST \u003d \"test\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CCA \u003d \"cca\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TUITION \u003d \"tuition\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_CONTACT \u003d \"contact\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int SUB_COMMAND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ModelType modelType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelParser(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelType \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelType extractModel() throws InvalidModelException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting model now...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[SUB_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CLASS:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CLASS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CCA:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CCA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TEST:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TEST;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TUITION:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TUITION;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_CONTACT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CONTACT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_QUIZ:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.QUIZ;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_EVENT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.EVENT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return modelType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/CcaEmptyStringException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class CcaEmptyStringException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/CcaParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class CcaParamException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ContactEmptyStringException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class ContactEmptyStringException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ContactParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class ContactParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyListException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyTuitionInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EmptyTuitionInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidClassInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class InvalidClassInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidHelpCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class InvalidHelpCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidModelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class InvalidModelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidTuitionInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidTuitionInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidValueException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 1,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/QuizParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TestEmptyStringException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class TestEmptyStringException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "untitle4": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TestParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class TestParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "untitle4": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/DataManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class DataManager implements Interactable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Interactable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactEmptyStringException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyTuitionInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidTuitionInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface Interactable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void add(String userInput) throws InvalidTuitionInputException, EmptyTuitionInputException,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            CcaEmptyStringException, CcaParamException, InvalidClassInputException, TestEmptyStringException,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            TestParamException, ContactEmptyStringException, ContactParamException, QuizParamException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void delete(String[] userInputs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 11,
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    EventManager eventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ContactManager contactManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    QuizManager quizManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Model(EventManager eventManager, ContactManager contactManager, QuizManager quizManager) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contactManager \u003d contactManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizManager \u003d quizManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager getEventManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ContactManager getContactManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return contactManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager getQuizManager() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ModelType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum ModelType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    CLASS, CCA, TEST, TUITION, QUIZ, CONTACT, EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String phoneNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Contact(String subject, String name, String phoneNumber, String email) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getPhoneNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return phoneNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject + \" teacher: \" + name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nPhone number: \" + phoneNumber"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nemail address: \" + email + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 37,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/ContactManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactEmptyStringException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ContactManager extends DataManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private ArrayList\u003cContact\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ContactManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getContactListSize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assert contacts !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return contacts.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws ContactEmptyStringException, ContactParamException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (!userInput.contains(\"/s\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_SUBJECT_NOT_FOUND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (!userInput.contains(\"/n\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NAME_NOT_FOUND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (!userInput.contains(\"/p\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_PHONE_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (!userInput.contains(\"/e\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMAIL_ADDRESS_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] seperatedInputs \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into subject, name, phone number\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"and email address.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String subject \u003d seperatedInputs[1].substring(1).trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String name \u003d seperatedInputs[2].substring(1).trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String phoneNumber \u003d seperatedInputs[3].substring(1).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String emailAddress \u003d seperatedInputs[4].substring(1).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (subject.equals(\"\") || name.equals(\"\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || phoneNumber.equals(\"\") || emailAddress.equals(\"\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"subject/name/phone number/email address is empty\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactEmptyStringException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.add(new Contact(subject, name, phoneNumber, emailAddress));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_ADD_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                contacts.get(getContactListSize() - 1).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int contactIndex \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            contactIndex \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((contactIndex \u003c\u003d 0) || (contactIndex \u003e getContactListSize())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                contacts.get(contactIndex - 1).toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.remove(contactIndex - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void listContacts() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (contacts.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_CONTACT_LIST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c getContactListSize(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"Contact \" + (i + 1) + \":\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        contacts.get(i).toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getContactStatement() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String contactStatement \u003d getContactListSize() \u003c\u003d 1 ? \" contact\" : \" contacts\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getContactListSize() + contactStatement + \" in your list.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 83,
      "AndreWongZH": 10,
      "durianpancakes": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventDataManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class EventDataManager extends DataManager implements EventInteractable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface EventInteractable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setDone(String[] userInputs);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.ListSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuitionManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventClassManager eventClassManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventTestManager eventTestManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventCcaManager eventCcaManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventTuitionManager eventTuitionManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager(EventParameter eventParameter) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager \u003d new EventClassManager(eventParameter.getClasses());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager \u003d new EventTestManager(eventParameter.getTests());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager \u003d new EventCcaManager(eventParameter.getCcas());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTuitionManager \u003d new EventTuitionManager(eventParameter.getTuitions());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventClassManager getClassManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventClassManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTestManager getTestManager() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventTestManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCcaManager getCcaManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventCcaManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTuitionManager getTuitionManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventTuitionManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void listSchedule() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ListSchedule listSchedule \u003d new ListSchedule("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventClassManager.getClasses(), eventCcaManager.getCcaList(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventTestManager.getTestList(), eventTuitionManager.getTuitions());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ArrayList\u003cString\u003e printedEvents \u003d listSchedule.getAllEventsPrinted();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printArray(printedEvents);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void listDate(String[] userInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (userInput[2].contains(\"today\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                listDateInputDate(LocalDate.now().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                listDateInputDate(userInput[2]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM or today!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void listDateInputDate(String userInput) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            ListSchedule listSchedule \u003d new ListSchedule("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    eventClassManager.getClasses(), eventCcaManager.getCcaList(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    eventTestManager.getTestList(), eventTuitionManager.getTuitions());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            ArrayList\u003cString\u003e printedEvents \u003d listSchedule.getAllEventsPrintedDate(userInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (printedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printArray(printedEvents);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                System.out.println(\"No events are due.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM or today!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static void printArray(ArrayList\u003cString\u003e printedEvents) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert printedEvents !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (String line : printedEvents) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 56,
      "AndreWongZH": 32,
      "durianpancakes": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventParameter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventParameter() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventParameter(ArrayList\u003cEvent\u003e ccas, ArrayList\u003cEvent\u003e tests,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                          ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcas() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTests() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 34,
      "durianpancakes": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCca.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventCca extends Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String CCA_ICON \u003d \"[CCA]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCca(String description, String start, String end) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCca(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d CCA_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ParseException parseException) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCca otherEventCca \u003d (EventCca) obj;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventCca.getStart())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventCca.getEnd());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 21,
      "untitle4": 8,
      "AndreWongZH": 4,
      "durianpancakes": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCcaManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventCcaManager extends EventDataManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e cca;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCcaManager(ArrayList\u003cEvent\u003e inputList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        cca \u003d inputList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcaList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return cca;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getCcaListSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assert cca !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return cca.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws CcaEmptyStringException, CcaParamException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a cca\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new CcaParamException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] ccaDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaDescription \u003d ccaDetails[1].substring(1).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStartDate \u003d ccaDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaEndDate \u003d ccaDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (ccaDescription.equals(\"\") || ccaStartDate.equals(\"\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || ccaEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new CcaEmptyStringException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(ccaStartDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(ccaEndDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            cca.add(new EventCca(ccaDescription, ccaStartDate, ccaEndDate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"date\u0026time is not valid or in wrong format\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"added cca to ArrayList\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CCA_ADD_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                cca.get(getCcaListSize() - 1).toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getCcaStatement();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((ccaIndex \u003c\u003d 0) || (ccaIndex \u003e getCcaListSize())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                cca.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        cca.remove(ccaIndex - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getCcaStatement();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting cca as done\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((ccaIndex \u003c\u003d 0) || (ccaIndex \u003e getCcaListSize())) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        cca.get(ccaIndex - 1).setDone();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"set cca as done from Arraylist\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CCA_DONE_SUCCESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                cca.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getCcaStatement() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStatement \u003d getCcaListSize() \u003c\u003d 1 ? \" cca\" : \" ccas\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getCcaListSize() + ccaStatement + \" in the list.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 13,
      "untitle4": 85,
      "AndreWongZH": 14,
      "durianpancakes": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClass class\u003c/h2\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains constructors, getters, toString and equals methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventClass#toString()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventClass#equals(Object)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventClass extends Event {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String CLASS_ICON \u003d \"[CLASS]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventClass(String description, String start, String end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventClass(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d CLASS_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventClass otherEventClass \u003d (EventClass) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventClass.getStart())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventClass.getEnd());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 23,
      "AndreWongZH": 4,
      "durianpancakes": 7,
      "elizabethcwt": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClassManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClassManager class\u003c/h2\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Stores user\u0027s classes in an ArrayList of Event class, named classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains methods which allow:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAttaining class list size\u003c/li\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAdding new classes into ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eDeleting classes from ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eSetting class as {@code DONE}\u003c/li\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventClassManager#getClassListSize()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventClassManager#add(String)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventClassManager#delete(String[])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventClassManager#setDone(String[])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventClassManager extends EventDataManager {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Initialising ArrayList to store classes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Initialising Logger with name \"Class\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventClassManager(ArrayList\u003cEvent\u003e classes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassListSize()\u003c/h2\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Attains the size of the user\u0027s classes ArrayList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @return int - Classes ArrayList size"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public int getClassListSize() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assertion to test assumption that ArrayList is not null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert classes !\u003d null : \"classes ArrayList should not be null\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003eaddClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Adds new class to classes ArrayList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInput To take in the String consisting of the class name, start date-time and end date-time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception InvalidClassInputException if user input does not meet the requirements."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws InvalidClassInputException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a class\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checks if user input contains the 3 required parameters (/n, /s and /e)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\")) || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new InvalidClassInputException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Splitting /n, /s and /e info. via a String array called classDetails"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        final String[] classDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"splitting the user input into class description, start date-time and end \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"date-time\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String classDescription \u003d classDetails[1].substring(1).trim().replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String classStartDate \u003d classDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String classEndDate \u003d classDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if any of the 3 required parameters are empty"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (classDescription.equals(\"\") || classStartDate.equals(\"\") || classEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time is\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new InvalidClassInputException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking and converting user\u0027s date-time input into format of expected output"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(classStartDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(classEndDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            classes.add(new EventClass(classDescription, classStartDate, classEndDate));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"adding the new class to the ArrayList\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CLASS_ADD_SUCCESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                classes.get(getClassListSize() - 1).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003edeleteClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Deletes a class from the classes ArrayList."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs To take in the class index of the class to be deleted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            int classIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assertion to test assumption that classIndex should be a positive integer"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert classIndex \u003e 0 : \"classIndex should be a positive integer\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.get(classIndex - 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    classes.get(classIndex - 1).toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.remove(classIndex - 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"deletion of class from ArrayList\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            getClassStatement();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"absence of class index for deletion\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CLASS_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid class index entered for deletion\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"non-integer class index entered for deletion\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassStatement()\u003c/h2\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints statement to update the user once class has been added or deleted."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void getClassStatement() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStatement \u003d getClassListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getClassListSize() + classStatement + \" in the list.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003esetClassDone()\u003c/h2\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Sets class as done."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs To take in the class index of the class to be set as done."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception IndexOutOfBoundsException when user input is an invalid class index integer."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        int classNumber;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting class as done\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            classNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((classNumber \u003c\u003d 0) || (classNumber \u003e getClassListSize())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        classes.get(classNumber - 1).setDone();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_SUCCESS,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"  \" + classes.get(classNumber - 1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 22,
      "AndreWongZH": 18,
      "durianpancakes": 21,
      "elizabethcwt": 137
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTest extends Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String TEST_ICON \u003d \"[TEST]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, String start, String end) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d TEST_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTest otherEventTest \u003d (EventTest) obj;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTest.getStart())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTest.getEnd());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 29,
      "AndreWongZH": 4,
      "durianpancakes": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTestManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTestManager extends EventDataManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTestManager(ArrayList\u003cEvent\u003e inputList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        test \u003d inputList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTestList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public int getTestListSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert test !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return test.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws TestEmptyStringException, TestParamException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new TestParamException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInput.replaceAll(\"\\\\s+\",\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String[] testDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testDescription \u003d testDetails[1].substring(1).trim().replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testStartDate \u003d testDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testEndDate \u003d testDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (testDescription.equals(\"\") || testStartDate.equals(\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || testEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new TestEmptyStringException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(testStartDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(testEndDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            test.add(new EventTest(testDescription, testStartDate, testEndDate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"date\u0026time is not valid or in wrong format\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"added test to ArrayList\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TEST_ADD_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"  \" + test.get(getTestListSize() - 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising deleting of a test\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((testNumber \u003c\u003d 0) || (testNumber \u003e getTestListSize())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"  \" + test.get(testNumber - 1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        test.remove(testNumber - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"deleted test from ArrayList\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void getTaskStatement() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((getTestListSize() - 1 \u003d\u003d 0) || (getTestListSize() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" task in the list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting test as done\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((testNumber \u003c\u003d 0) || (testNumber \u003e getTestListSize())) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        test.get(testNumber - 1).setDone();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"set test as done from ArrayList\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TEST_DONE_SUCCESS,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"  \" + test.get(testNumber - 1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 107,
      "untitle4": 3,
      "AndreWongZH": 14,
      "durianpancakes": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTuition extends EventClass {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String TUITION_ICON \u003d \"[TUITION]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTuition(String description, String start, String end, String location) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTuition(String description, boolean isDone, String start, String end, String location) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, isDone, start, end);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d TUITION_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd()) + \" at \" + getLocation();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTuition otherEventTuition \u003d (EventTuition) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTuition.getStart())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTuition.getEnd())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.location.equals(otherEventTuition.getLocation());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 21,
      "AndreWongZH": 2,
      "durianpancakes": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuitionManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.EmptyTuitionInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidTuitionInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTuitionManager extends EventDataManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e tuitionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTuitionManager(ArrayList\u003cEvent\u003e tuitionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.tuitionList \u003d tuitionList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitionList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getTuitionListSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitionList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws InvalidTuitionInputException, EmptyTuitionInputException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initializing adding of a tuition\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String descriptionPrefix \u003d \"/n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String startPrefix \u003d \"/s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String endPrefix \u003d \"/e\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String locationPrefix \u003d \"/l\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((!userInput.contains(descriptionPrefix)) || (!userInput.contains(startPrefix))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                || (!userInput.contains(endPrefix)) || (!userInput.contains(locationPrefix))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new InvalidTuitionInputException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfDescriptionPrefix \u003d userInput.indexOf(descriptionPrefix);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfStartPrefix \u003d userInput.indexOf(startPrefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfEndPrefix \u003d userInput.indexOf(endPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfLocationPrefix \u003d userInput.indexOf(locationPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description \u003d userInput.substring(indexOfDescriptionPrefix, indexOfStartPrefix)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(descriptionPrefix, \"\").trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d userInput.substring(indexOfStartPrefix, indexOfEndPrefix)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(startPrefix, \"\").trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d userInput.substring(indexOfEndPrefix, indexOfLocationPrefix)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(endPrefix, \"\").trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d userInput.substring(indexOfLocationPrefix)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(locationPrefix, \"\").trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isEmptyString(description) || isEmptyString(start) || isEmptyString(end) || isEmptyString(location)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new EmptyTuitionInputException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            parseLocalDateTime(start);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            parseLocalDateTime(end);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventTuition eventTuition \u003d new EventTuition(description, start, end, location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            tuitionList.add(eventTuition);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Tuition added successfully\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_ADD_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    eventTuition.toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    getTuitionStatement());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            int tuitionIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Assertion to test assumption that classIndex should be a positive integer"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            assert tuitionIndex \u003e 0 : \"tuitionIndex should be a positive integer\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitionList.get(tuitionIndex - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"Noted. I\u0027ve removed this tuition class: \","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    tuitionList.get(tuitionIndex - 1).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitionList.remove(tuitionIndex - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Deletion of tuition class from ArrayList\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(getTuitionStatement());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_TUITION_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int tuitionNumber;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initialising setting tuition as done\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tuitionNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"Wrong number format entered\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((tuitionNumber \u003c\u003d 0) || (tuitionNumber \u003e getTuitionListSize())) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitionList.get(tuitionNumber - 1).setDone();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_SUCCESS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"  \" + tuitionList.get(tuitionNumber - 1),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                getTuitionStatement());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getTuitionStatement() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String tuitionStatement \u003d getTuitionListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"Now you have \" + getTuitionListSize() + tuitionStatement + \" in the list\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean isEmptyString(String string) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return string.equals(\"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private LocalDateTime parseLocalDateTime(String localDateTimeString) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return LocalDateTime.parse(localDateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "AndreWongZH": 13,
      "durianpancakes": 139
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/Quiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private String explanation \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4, String answer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                String answer, String explanation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.explanation \u003d explanation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption1() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption2() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption3() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption4() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getExplanation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return explanation;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"|\" + option1 + \"|\" + option2 + \"|\" + option3 + \"|\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + option4 + \"|\" + answer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"|\" + option1 + \"|\" + option2 + \"|\" + option3 + \"|\" + option4"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"|\" + answer + \"|\" + explanation;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return question + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"Explanation: \" + explanation + \"\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 62,
      "AndreWongZH": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/QuizManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.DataManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class QuizManager extends DataManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e quizzes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager(ArrayList\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizzes \u003d quizzes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e getQuizList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getQuizListSize() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert quizzes !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        int quizIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please indicate in NUMERALS, which cca you\u0027d like to delete!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please indicate which cca you\u0027d like to delete!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((quizIndex \u003c\u003d 0) || (quizIndex \u003e getQuizListSize())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this quiz: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        System.out.println(quizzes.get(quizIndex - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        quizzes.remove(quizIndex - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getQuizStatement();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // format: add quiz /q question /o1 option 1 /o2 option 2 /o3 option 3 /o4 option 4 /a answer /exp explanation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void add(String userInput) throws QuizParamException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(\" /q \")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"question not found\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new QuizParamException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(\" /a \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"answer not found\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new QuizParamException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(\" /o1 \") \u0026\u0026 !userInput.contains(\" /o2 \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 !userInput.contains(\" /o3 \") \u0026\u0026 !userInput.contains(\" /o4 \")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"options not provided\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new QuizParamException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        //todo add exceptions here (index out of bounds)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String question \u003d separatedInputs[1].substring(1).trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option1 \u003d separatedInputs[2].substring(2).trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option2 \u003d separatedInputs[3].substring(2).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option3 \u003d separatedInputs[4].substring(2).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option4 \u003d separatedInputs[5].substring(2).trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String answer \u003d separatedInputs[6].substring(1).trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (separatedInputs.length \u003e 7) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            String explanation \u003d separatedInputs[7].substring(3).trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            quizzes.add(new Quiz(question, option1, option2, option3, option4, answer, explanation));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizzes.add(new Quiz(question, option1, option2, option3, option4, answer));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        System.out.println(\"Quiz question added!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void listQuiz() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (quizzes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            System.out.println(\"Quiz list is empty. Add some!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"Question \" + (i + 1) + \":\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(quizzes.get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getQuizStatement() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String quizStatement \u003d getQuizListSize() \u003d\u003d 1 ? \" quiz\" : \" quizzes\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(\"Now you have \" + getQuizListSize() + quizStatement + \" in the quiz list.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 63,
      "AndreWongZH": 39,
      "elizabethcwt": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactEmptyStringException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyTuitionInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidTuitionInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String INPUT_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TEST \u003d \"test\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CCA \u003d \"cca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String INPUT_SCHEDULE_TUITION \u003d \"tuition\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String INPUT_CONTACT \u003d \"contact\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String INPUT_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int SUB_COMMAND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final QuizManager quizManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ContactManager contactManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public CommandParser(String userInput, EventManager eventManager,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                         QuizManager quizManager, ContactManager contactManager) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizManager \u003d quizManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.contactManager \u003d contactManager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        commandType \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType parseCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            extractCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            executeCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidHelpCommandException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            System.out.println(\"☹ Oops! If you\u0027re trying to ask for help, simply enter \u0027help\u0027!\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            System.out.println(\"☹ Oops! I did not recognize that command! Enter \u0027help\u0027 if needed!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void extractCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_HELP)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CLASS)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD_CLASS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_TEST)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD_TEST;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CCA)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD_CCA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_CONTACT)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            commandType \u003d CommandType.ADD_CONTACT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_TUITION)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            commandType \u003d CommandType.ADD_TUITION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CLASS)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE_CLASS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_TEST)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE_TEST;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CCA)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE_CCA;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_QUIZ)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            commandType \u003d CommandType.DELETE_QUIZ;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_CONTACT)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            commandType \u003d CommandType.DELETE_CONTACT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_LIST)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 separatedInputs.length \u003e 1"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_QUIZ)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            commandType \u003d CommandType.LIST_QUIZ;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_LIST)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 separatedInputs.length \u003e 1"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_CONTACT)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            commandType \u003d CommandType.LIST_CONTACT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_LIST)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 separatedInputs.length \u003e 1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_DATE)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            commandType \u003d CommandType.LIST_DATE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_LIST)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 separatedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.LIST;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_BYE)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DONE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_TEST)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            commandType \u003d CommandType.DONE_TEST;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DONE)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CLASS)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            commandType \u003d CommandType.DONE_CLASS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DONE)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CCA)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            commandType \u003d CommandType.DONE_CCA;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_QUIZ)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD_QUIZ;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void executeCommand() throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            handleHelp(separatedInputs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD_CLASS:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getClassManager().add(userInput);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } catch (InvalidClassInputException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                System.out.println(\"☹ OOPS! Remember to include ALL \u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027 inputs!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD_CCA:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getCcaManager().add(userInput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (CcaEmptyStringException | CcaParamException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027 inputs!\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD_TEST:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getTestManager().add(userInput);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } catch (TestEmptyStringException | TestParamException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027 inputs!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        case ADD_CONTACT:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                contactManager.add(userInput);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (ContactEmptyStringException | ContactParamException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Remember to include ALL \u0027/s\u0027, \u0027/n\u0027, \u0027/p\u0027, \u0027/e\u0027 inputs!\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        case ADD_TUITION:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getTuitionManager().add(userInput);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (InvalidTuitionInputException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 suffixes!\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (EmptyTuitionInputException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 inputs!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE_CLASS:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getClassManager().delete(separatedInputs);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid class index!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE_CCA:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getCcaManager().delete(separatedInputs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid cca index!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE_TEST:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getTestManager().delete(separatedInputs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid test index!\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        case DELETE_QUIZ:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                quizManager.delete(separatedInputs);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid quiz index!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        case DELETE_CONTACT:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                contactManager.delete(separatedInputs);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid contact index!\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        case DONE_CLASS:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getClassManager().setDone(separatedInputs);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid class index!\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case DONE_TEST:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getTestManager().setDone(separatedInputs);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid test index!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        case DONE_CCA:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                eventManager.getCcaManager().setDone(separatedInputs);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"☹ OOPS!!! Please indicate a valid test index!\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD_QUIZ:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                quizManager.add(userInput);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } catch (QuizParamException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.listSchedule();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        case LIST_QUIZ:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            quizManager.listQuiz();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        case LIST_CONTACT:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            contactManager.listContacts();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case LIST_DATE:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventManager.listDate(separatedInputs);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003ehandleHelp()\u003c/h2\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints out all available features users can use."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInputs to check if user input for \u0027help\u0027 is in a valid format."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception InvalidHelpCommandException to inform the user if their help input is invalid."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static void handleHelp(String[] userInputs) throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (userInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"printing out all features users can use\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"Hello! Here is a list of commands you can try:\\n\\n\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t1. Add class: \u0027add class /n [name of class] /s [start date-time of class] /e\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" [end date-time of class]\u0027\\n\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t2. Delete class: \u0027delete class [class number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t3. Add cca: \u0027add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]\u0027\\n\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t4. Delete cca: \u0027delete cca [cca number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t5. Add test: \u0027add test /n [name of test] /s [start date-time of test] /e \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"[end date-time of test]\u0027\\n\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t6. Delete test: \u0027delete test [test number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t7. Add tuition: \u0027add tuition /n [name of tuition] /s [start date-time of tuition] /e \""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"start date-time of tuition] /l [location of tuition]\u0027\\n\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t8. Delete tuition: \u0027delete tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t9. List events (class, test, cca, tuition): \u0027list\u0027\\n\\n\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t10. Set class as done: \u0027done class [class number]\u0027\\n\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t11. Set test as done: \u0027done test [test number]\u0027\\n\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t12. Set cca as done: \u0027done cca [cca number]\u0027\\n\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t13. Set tuition as done: \u0027done tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t14. Find relevant event(s): \u0027find [keyword(s)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t15. Add contact: \u0027add contact /sub [subject] /n [name of contact person] /hp [phone number]\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" /e [email address]\u0027\\n\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t16. Delete contact: \u0027delete contact [contact number]\u0027\\n\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t17. List contact: \u0027list contact\u0027\\n\\n\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t18. Take Mathematics quiz: \u0027quiz [no. of questions (10, 20 or 30)]\u0027\\n\""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t19. List quiz questions: \u0027list quiz\u0027\\n\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t20. Add quiz question: \u0027add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3]\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" /o4 [option 4] /a [option answer] /exp [explanation]\u0027\\n\\n\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t21. Exit program: \u0027bye\u0027\\n\\n\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\n\\tNOTE:\\n\\t1. Please enter the date-time in the following format: YYYY-MM-DD \""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"[time in 24hr format]\\n\\te.g. 2020-08-19 1300\\n\\n\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"\\t2. For command 20 (Add quiz question), the \u0027explanation\u0027 field is OPTIONAL\\n\\n\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid help command\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 51,
      "untitle4": 83,
      "AndreWongZH": 107,
      "durianpancakes": 3,
      "elizabethcwt": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible commands available to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    ADD_CLASS, ADD_CCA, ADD_TEST, ADD_QUIZ, ADD_CONTACT, ADD_TUITION,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    DELETE_CLASS, DELETE_CCA, DELETE_TEST, DELETE_QUIZ, DELETE_CONTACT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    DONE_TEST, DONE_CLASS, DONE_CCA, LIST_QUIZ, LIST_CONTACT, LIST_DATE, BYE, LIST, HELP"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "untitle4": 2,
      "AndreWongZH": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListDecoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListDecoder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e decodeEventList(ArrayList\u003cString\u003e encodedEventList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final ArrayList\u003cEvent\u003e decodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String encodedEvent : encodedEventList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            decodedEvents.add(decodeEventFromString(encodedEvent));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return decodedEvents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Event decodeEventFromString(String encodedEvent) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String[] data \u003d encodedEvent.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventCca.CCA_ICON:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseCca(data);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventClass.CLASS_ICON:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseClass(data);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventTest.TEST_ICON:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTest(data);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventTuition.TUITION_ICON:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTuition(data);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private EventCca parseCca(String[] data) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventCca(description, isDone, start, end);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private EventClass parseClass(String[] data) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventClass(description, isDone, start, end);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private EventTest parseTest(String[] data) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventTest(description, isDone, start, end);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private EventTuition parseTuition(String[] data) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d eventInfo[3];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidTuition(description, start, end, location);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventTuition(description, isDone, start, end, location);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void isValidParams(String description, String start, String end) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !description.equals(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !start.equals(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !end.equals(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void isValidTuition(String description, String start, String end, String location) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert location !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !location.equals(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 16,
      "durianpancakes": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListEncoder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cString\u003e encodeEventList(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            encodedEvents.add(encodeEventToString(event));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return encodedEvents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String encodeEventToString(Event event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventCca eventCca \u003d (EventCca) event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidCca(eventCca);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventCca.CCA_ICON + \"|\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.isDone() + \"|\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.getDescription() + \"|\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.getStart() + \"|\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.getEnd();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventTest eventTest \u003d (EventTest) event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidTest(eventTest);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventTest.TEST_ICON + \"|\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.isDone() + \"|\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.getDescription() + \"|\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.getStart() + \"|\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.getEnd();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventTuition newEventTuition \u003d (EventTuition) event;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidTuition(newEventTuition);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventTuition.TUITION_ICON + \"|\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.isDone() + \"|\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getDescription() + \"|\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getStart() + \"|\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getEnd() + \"|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getLocation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventClass newEventClass \u003d (EventClass) event;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidClass(newEventClass);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventClass.CLASS_ICON + \"|\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.isDone() + \"|\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.getDescription() + \"|\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.getStart() + \"|\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.getEnd();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidCca(EventCca eventCca) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(eventCca.getDescription(), eventCca.getStart(), eventCca.getEnd());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidClass(EventClass inputEventClass) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(inputEventClass.getDescription(), inputEventClass.getStart(), inputEventClass.getEnd());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidTest(EventTest eventTest) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(eventTest.getDescription(), eventTest.getStart(), eventTest.getEnd());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidTuition(EventTuition eventTuition) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(eventTuition.getDescription(), eventTuition.getStart(), eventTuition.getEnd());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventTuition.getLocation() !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert !eventTuition.getLocation().equals(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void isValidParams(String description, String start, String end) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !description.equals(\"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !start.equals(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !end.equals(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 47,
      "durianpancakes": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventListEncoder eventListEncoder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventListDecoder eventListDecoder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventStorageManager(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventListEncoder \u003d new EventListEncoder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventListDecoder \u003d new EventListDecoder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void saveData(ArrayList\u003cEvent\u003e eventList) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e encodedEventList \u003d eventListEncoder.encodeEventList(eventList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + fileName), encodedEventList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventParameter loadData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        File eventFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                Scanner sc \u003d new Scanner(eventFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                ArrayList\u003cEvent\u003e eventList \u003d eventListDecoder.decodeEventList(data);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return separateEventsIntoList(eventList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new EventParameter();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private EventParameter separateEventsIntoList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                ccas.add(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tuitions.add(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                classes.add(event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                tests.add(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventParameter(ccas, tests, classes, tuitions);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 8,
      "AndreWongZH": 68,
      "durianpancakes": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListDecoder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e decodeQuizList(ArrayList\u003cString\u003e encodedQuizList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final ArrayList\u003cQuiz\u003e decodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (String encodedQuiz : encodedQuizList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            decodedQuizzes.add(decodeQuizFromString(encodedQuiz));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return decodedQuizzes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private Quiz decodeQuizFromString(String encodedQuiz) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] data \u003d encodedQuiz.trim().split(\"\\\\|\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String question \u003d data[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option1 \u003d data[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option2 \u003d data[2];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option3 \u003d data[3];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option4 \u003d data[4];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String answer \u003d data[5];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new Quiz(question, option1, option2, option3, option4, answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 21,
      "AndreWongZH": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListEncoder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cString\u003e encodeQuizList(ArrayList\u003cQuiz\u003e quizList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (Quiz quiz: quizList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            encodedQuizzes.add(quiz.convertToData());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return encodedQuizzes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 17,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class QuizStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizListEncoder quizListEncoder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizListDecoder quizListDecoder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizStorageManager(String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListEncoder \u003d new QuizListEncoder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListDecoder \u003d new QuizListDecoder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cQuiz\u003e loadData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        File quizFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                Scanner sc \u003d new Scanner(quizFile);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return quizListDecoder.decodeQuizList(data);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void saveData(ArrayList\u003cQuiz\u003e quizList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizList \u003d quizListEncoder.encodeQuizList(quizList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + filePath), encodedQuizList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 32,
      "AndreWongZH": 23,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class StorageManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String EMPTY_FILE_NAME \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected static String DIRECTORY_FOLDER_PATH \u003d new File(\"data\").getAbsolutePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected String fileName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLoggerInstance().getLogger();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public StorageManager(String fileName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert !fileName.equals(EMPTY_FILE_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected boolean createDataFile() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        File file \u003d new File(DIRECTORY_FOLDER_PATH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDirectoryCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        file \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isDirectoryCreated) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory not found, creating...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory found...\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 13,
      "durianpancakes": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UserInterface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static UserInterface userInterface \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static UserInterface getInstance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (userInterface \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return userInterface;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_HELLO_FROM_DUKE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_PROMPT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String userName \u003d getUserCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser(Messages.MESSAGE_HELLO + userName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_PROMPT_COMMAND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showToUser(String... message) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printArray(ArrayList\u003cString\u003e stringArrayList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert stringArrayList !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String line : stringArrayList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 54
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class AddEventCcaJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void addCcaToList() throws CcaEmptyStringException, CcaParamException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball camp \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1500\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String actualOutputs \u003d cca.get(0).description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedOutputs \u003d \"basketball camp\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "untitle4": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddEventClassJUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    void addClassToList() throws InvalidClassInputException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Math /s 2020-08-19 1300 /e 2020-08-19 1400\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "elizabethcwt": 18
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddTestJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void addTestToList() throws TestEmptyStringException, TestParamException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 21,
      "untitle4": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventCcaJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void deleteCcaInList() throws CcaEmptyStringException, CcaParamException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"delete cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.delete(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutput \u003d eventCcaManager.getCcaListSize();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedOutput \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "untitle4": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.exception.InvalidClassInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventClassJUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    void addClassToList() throws InvalidClassInputException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n English lesson \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Science lesson \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String [] userInput \u003d \"delete class 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventClassManager.delete(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 7,
      "elizabethcwt": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteTestJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    void deleteTestFromList() throws TestParamException, TestEmptyStringException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"delete test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.delete(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 35,
      "untitle4": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/DoneEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DoneEventCcaJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void setCcaDone() throws CcaEmptyStringException, CcaParamException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"done cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.setDone(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        boolean actualOutputs \u003d cca.get(0).isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "untitle4": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/DoneTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class DoneTestJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    void setTestDoneFromList() throws TestParamException, TestEmptyStringException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"done test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.setDone(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean actualOutputs \u003d test.get(0).isDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/ListScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ListScheduleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getAllEventsPrinted_emptySchedule_expectException() throws EmptyListException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(EmptyListException.class, listSchedule::getAllEventsPrinted);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getAllEventsPrinted_classSchedule_classList() throws EmptyListException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        classes.add(new EventClass(\"Math\", \"2019-02-26 1400\", \"2019-02-27 1500\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getAllEventsPrinted();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                List.of(\"Classes:\", \"1. [CLASS] [NOT DONE] Math from 26th Feb 2019 , \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                        + \"02:00 PM to 27th Feb 2019 , 03:00 PM\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 26,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    public void constructor_noTxtExtension_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        assertThrows(InvalidValueException.class, () -\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //                new EventStorageManager(\"test\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    public void constructor_nullFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //                new EventStorageManager(\"test\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    public void load_validFormat() throws InvalidValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        EventStorageManager eventStorageManager \u003d new EventStorageManager(\"test\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        assertEquals(getEventList(), eventStorageManager.getEventList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventCca(\"Basketball training \","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-21 1800 \","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-21 1900\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventClass(\"Math tuition \","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-22 1400 \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-22-1600\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventTest(\"CS2113T Finals \","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-04 1500 \","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-04 1600\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventTuition(\"English\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-05 1600\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-05 1800\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"home\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 8,
      "untitle4": 1,
      "AndreWongZH": 17,
      "durianpancakes": 24
    }
  },
  {
    "path": "test/ValidData.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|Basketball training |2020-09-21 1800 |2020-09-21 1900"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "[CLASS]|false|Math eventTuition |2020-09-22 1400 |2020-09-22-1600"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|CS2113T Finals |2020-12-04 1500 |2020-12-04 1600"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TUITION]|false|English|2020-12-05 1600|2020-12-05 1800|home"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "durianpancakes": 3
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "-": 1
    }
  }
]
