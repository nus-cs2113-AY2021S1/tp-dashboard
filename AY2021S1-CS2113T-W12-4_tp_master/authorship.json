[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-eventTest` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* A skeleton JUnit eventTest (`src/eventTest/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "-": 62
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Elizabeth | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jinran | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chan Xu Hui | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andre Wong | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alicia Ho | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "untitle4": 1,
      "AndreWongZH": 1,
      "durianpancakes": 1,
      "-": 4,
      "elizabethcwt": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![diagram](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The `Duke` class is responsible for,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* At app launch: Initializes the main components in the correct sequence and read data from our data files"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* At shut down: Terminates the continuous loop and shut down the components"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "`Common` represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `UserInterface`: The user interface of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Controller`: User input parser and command executor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Model`: Holds the data of the App in memory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The interaction between them is defined in an interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Exposes its functionality using a concrete {Component Name}Manager class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### UserInterface component"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Controller component"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![controllercomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ControllerComponent.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "API: ControlManager.java"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Controller component,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Receives user input from the user interface."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Extracts the command and model type from the user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Generate the required command from the CommandFactory.java class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Extract the required model to be accessed and modified."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Executes the command with the corresponding model."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Model component"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![modelcomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ModelComponent.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "API: Model.java"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Model component,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Holds all the in-memory data of type event, quiz and contact."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Each data type has a corresponding manager that the controller can interface with. This is named as \u003cdatatype\u003eManager.java."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* During a command execution, the manager will handle the modification and reading of its data type."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* After the execution, the corresponding output is then passed on to the User Interface component to be shown to the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Storage component"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### List feature"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### List contact / quiz"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The list command will invoke the `QuizManager` or `ContactManager` class’s list() method."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If the ArrayList is empty, it will inform the user that there is no data to display. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The method will then loop through the ArrayList and convert it into its string representation. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The diagram below shows the execution flow explained below."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![listcontact](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ListContact.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### List event (\u003cdate\u003e / today / week)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The execution of the ListCommand will cause the `EventManager` class to invoke `EventManager#listSchedule()`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This will then create an instance of the `ListSchedule` class, with all the classes, ccas, tests and tuitions data"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "as its attributes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Inside this `EventManager#listSchedule()`, we then call the `ListSchedule#getPrintableEvents()` and this will start "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "to convert ArrayList of type Event into its corresponding `toString()` representation."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This is then padded with numbers and an ArrayList of type string is returned to `EventManager#listSchedule()`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "It is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The diagram below shows the execution flow explained below."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![listevent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ListEvent2.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Special parameters:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "In the case where the parameters passed in is ‘today’, the `ListSchedule#checkAndConvertToday()` will "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "check if the user passed in ‘today’ as a parameter. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If that is true, then it converts the userInput attribute to `LocalDate.now()`, which is the current date. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "When filtering the events to be converted, the start time of the event is compared with the parameter date. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If it is equal, the event will be converted and be printed out."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 103,
      "-": 32
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "# Plan\u0026Score"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "to plan and track their classes, CCAs and test dates."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This enables the students to remember their schedule, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "to plan and track their classes, CCAs and eventTest dates."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This enables the students to remember their schedule, "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "- [1. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "- [2. Features](#list-of-features)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Help:](#viewing-help-help) `help`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Add a class:](#adding-a-class-add-class) `add class`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Delete a task:](#deleting-a-class-delete-class) `delete class`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Add a cca:](#adding-a-cca-add-cca) `add cca`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Delete a cca:](#deleting-a-cca-delete-cca) `delete cca`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Add a test:](#adding-a-test-add-test) `add test`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Delete a test:](#deleting-a-test-delete-test) `delete test`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Toogle task done:](#toggling-task-done-done) `done`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [List schedule:](#list-out-schedule-list-event) `list event`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Find a task by keyword or date:](#find-tasks-find) `find`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "- [3. FAQ](#faq)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "- [4. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "1. Ensure that you have Java ```11``` or above installed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "2. Down the latest version of `Plan\u0026score` from [here](https://github.com/AY2021S1-CS2113T-W12-4/tp/releases)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "3. Run the program by entering `java -jar plan.jar` in a terminal."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "4. You can exit the program by running `bye`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "## List of Features "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Shows all available commands to the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Hello! Here is a list of commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   1. Add class: add class /n [name of class] /s [start date-time of class] /e [end date-time of class]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   2. Delete class: delete class /n [class number]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   3. Add eventCca: add eventCca /n [name of eventCca] /s [start date-time of eventCca] /e [end date-time of eventCca]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   4. Delete eventCca: type delete eventCca /n [eventCca number]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   5. Add eventTest: type add eventTest /n [name of eventTest] /s [start date-time of eventTest] /e [end date-time of eventTest]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "   6. Delete eventTest: type delete eventTest /n [eventTest number]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   7. Delete all: delete all"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Please enter the date-time in the following format: YYYY-MM-DD [time in 24hr format]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    e.g. 2020-08-19 1300"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Adding a class: `add class`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Adds a new class with a name, date and time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `add class /n [name of class] /s [start date-time of class] /e [end date-time of class]`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[name of class]` can be in a natural language format and "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "cannot contain \u0027/\u0027 .  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[start date-time of class]`, `[end date-time of class]` must be in "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "yyyy-mm-dd HHMM format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `add class /n Math /s 2020-08-19 1300 /e 2020-08-19 1400`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Got it. I\u0027ve added this class:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    [CLASS] [NOT DONE] Math from 19th August 2020, 01:00 pm to 19th August 2020, 02:00 pm"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Now you have 1 class in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Deleting a class: `delete class`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Deleting a class based on its index in the list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `delete class [class number]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[class number]` must be written in numerals. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `delete class 1`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Noted. I\u0027ve removed this class:`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    [CLASS] [NOT DONE] Math from 19th August 2020, 01:00 pm to 19th August 2020, 02:00 pm"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Now you have 0 classes in the list.`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Adding a Cca: `add Cca`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Adds a new Cca with a name, date and time"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `add Cca /n [name of Cca] /s [start date-time of Cca] /e [end date-time of Cca]`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[name of Cca]` can be in a natural language format and "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "cannot contain \u0027/\u0027 .  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[start date-time of Cca]`, `[end date-time of Cca]` must be in "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": "yyyy-mm-dd HHMM format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `add Cca /n Basketball training /s 2020-09-19 1900 /e 2020-09-19 2100`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Got it. I\u0027ve added this Cca:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    [CCA] [NOT DONE] Basketball training from 19th September 2020, 07:00 pm to 19th September 2020, 09:00 pm"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Now you have 1 eventCca in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "untitle4"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Deleting a cca: `delete cca`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Deleting a cca based on its index in the list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `delete cca [cca number]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[cca number]` must be written in numerals. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `delete cca 1`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Noted. I\u0027ve removed this cca:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    [CCA] [NOT DONE] Basketball training from 19th September 2020, 07:00 pm to 19th September 2020, 09:00 pm"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Now you have 0 ccas in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "untitle4"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Adding a test: `add test`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Adds a new test with a name, date and time"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `add test /n [name of test] /s [start date-time of test] /e [end date-time of test]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[name of test]` can be in a natural language format and "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "cannot contain \u0027/\u0027 .  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[start date-time of test]`, `[end date-time of test]` must be in "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "yyyy-mm-dd HHMM format."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `add test /n Math test /s 2020-10-3 1300 /e 2020-10-3 1400`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Got it. I\u0027ve added this test:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    [TEST] [NOT DONE] Math test from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "`Now you have 1 test in the list.`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Deleting a test: `delete test`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Deleting a test date based on its index in the list"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `delete test [test number]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[test number]` must be written in numerals. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `delete test 1`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "`Noted. I\u0027ve removed this test:`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    [TEST] [NOT DONE] Math test from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "`Now you have 0 tests in the list.`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Setting an event as done: `done \u003cclass/cca/test\u003e`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Setting a class, test or cca event as done based on its index in the list"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* For class: `done class [class number]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* For test: `done test [test number]`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* For cca: `done cca [cca number]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[test number]` must be in numerals. "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `done test 1`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Nice! I\u0027ve marked this test as done:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    [TEST] [DONE] Math test from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Now you have 1 test in the list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### List out schedule: `list event`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "List out the entire schedule for classes, ccas and tests"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output: "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Classes:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1. Math from 19th Aug, 1pm to 19th Aug , 2pm "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    2. Science from 19th Aug, 3pm to 19th Aug , 4pm "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    CCA:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1. Basketball Camp from 21st Sep, 1pm to 22nd Sep, 3pm"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    2. Frisbee from 19th Sep, 1pm to 19th Sep, 3pm"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Test:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    1. Math eventTest from 26th Sep, 11am to 26th Sep, 1pm"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "**A**: Shift the event.txt file to the same directory as the java file."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "-------|--------|--------"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "help|`help`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "add|`add \u003ccategory\u003e /n \u003cdescription\u003e /s \u003cstart-date-time\u003e /e \u003cend date-time\u003e`|`add class /n Math /s 2020-09-06 1300 /e 2020-09-06 1400`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "delete|`delete \u003ccategory\u003e \u003citem number\u003e`|`delete class 1`, `delete test 1`, `delete cca 1`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "done|`done \u003ccategory\u003e \u003citem number\u003e`|`done class 1`, `done test 1`, `done cca 1`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "list|`list event`"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 33,
      "untitle4": 25,
      "AndreWongZH": 97,
      "durianpancakes": 4,
      "-": 32,
      "elizabethcwt": 60
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String EVENT_FILE_NAME \u003d \"/events.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String QUIZ_FILE_NAME \u003d \"/quiz.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventStorageManager eventStorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizStorageManager quizStorageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static UserInterface userInterface;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean active;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Duke() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventStorageManager \u003d new EventStorageManager(EVENT_FILE_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        quizStorageManager \u003d new QuizStorageManager(QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        active \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ContactManager contactManager \u003d new ContactManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizStorageManager.loadData());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventParameter eventParameter \u003d eventStorageManager.loadData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventManager eventManager \u003d new EventManager(eventParameter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        model \u003d new Model(eventManager, contactManager, quizManager);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            new Duke().run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (StorageCorruptedException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_CORRUPTED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showWelcomeMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        while (active) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            active \u003d userInterface.runUI(model, eventStorageManager, quizStorageManager);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        // Exit Message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_BYE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "untitle4": 2,
      "AndreWongZH": 26,
      "durianpancakes": 18,
      "-": 10,
      "elizabethcwt": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/LogManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the objects that logs all the processes of the program at each step."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class LogManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String LOG_FILE_LOCATION \u003d \"./logfile.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static LogManager logManager \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"log\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * The constructor here is only called once when program runs to initialize a new LogManager instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private LogManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(LOG_FILE_LOCATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // set log level, defaults to Level.INFO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // prevents printing of log messages to console"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // redirects log messages to a file instead"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INITIALIZATION_LOGGER_FAILED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns an instance of the LogManager class for users to get the logger instance."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return LogManager instance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static LogManager getLogManagerInstance() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (logManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logManager \u003d new LogManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return logManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns a logger instance that the programmer can use to log process info."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A logger instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Logger getLogger() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return LOGGER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 61,
      "durianpancakes": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Intro related messages"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \" ------   -                          -----\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|   _  | | |                        | ____|\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  | | | | |                        | |___\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  |_| | | |  -----     -----    \u0026  |____ |  ------   -----   -----   -----\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|      | | | /  -  \\\\   |  _  |          | | | _____| /  -  \\\\ /  ___\\\\ /  -- \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  ----  | | | | | |   | | | |       ___| | | |      | | | | | /     |  ___|\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"| |      | | | |_|  \\\\  | | | |      |     | | |____  | |_| | | |     | |____\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|_|      |_| \\\\____/\\\\_\\\\ |_| |_|      |_____| |______| \\\\_____/ |_|     \\\\_____/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO_FROM_DUKE \u003d \"Hello from\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + Messages.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_NAME \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO \u003d \"Hello \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_COMMAND \u003d \"What can we do for you? \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"(Enter \u0027help\u0027 for the list of available commands!)\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_EMPTY_SCHEDULE_LIST \u003d \"Schedule is empty. Add some!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // General error messages"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_READ_ERROR \u003d \"There was an error loading your files.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_INITIALIZATION_ERROR \u003d \"STORAGE: There was an error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INITIALIZATION_LOGGER_FAILED \u003d \"Failed to set up logger\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027 inputs!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_EMPTY_PARAMETERS \u003d \"☹ OOPS!!! Ensure ALL parameters are filled up!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please enter valid date and time in format yyyy-mm-dd HHMM!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_CORRUPTED \u003d \"): Storage file corrupted. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please delete your data directory and relaunch.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_LIST_PARAMETERS \u003d \"Please tell me what you want to be listed! \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"You can either \u0027list event\u0027 or \u0027list quiz\u0027\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from CalendarWeekRenderer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MONDAY_LABEL \u003d \"[MON]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUESDAY_LABEL \u003d \"[TUE]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_WEDNESDAY_LABEL \u003d \"[WED]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_THURSDAY_LABEL \u003d \"[THU]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_FRIDAY_LABEL \u003d \"[FRI]\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SATURDAY_LABEL \u003d \"[SAT]\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SUNDAY_LABEL \u003d \"[SUN]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Contact related classes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SUBJECT_NOT_FOUND \u003d \"Subject not found\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_NAME_NOT_FOUND \u003d \"Name not found\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PHONE_NUMBER_NOT_FOUND \u003d \"Phone number not found\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_EMAIL_ADDRESS_NOT_FOUND \u003d \"Email address not found\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this contact: \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this contact: \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTACT_INDEX \u003d \"☹ OOPS!!! Please indicate a valid contact index!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_EMPTY_CONTACT_LIST \u003d \"Contact list is empty. Add some!!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Class related classes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this class: \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this class: \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this class as done:\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS_INDEX \u003d \"☹ OOPS!!! Please indicate a valid class index!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Cca related classes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this cca: \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this cca: \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this cca as done:\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_CCA_INDEX \u003d \"☹ OOPS!!! Please indicate a valid cca index!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Test related classes"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this test: \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this test: \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this test as done:\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_TEST_INDEX \u003d \"☹ OOPS!!! Please indicate a valid test index!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Tuition related classes"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_SUFFIX \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 suffixes!\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_INPUT \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 inputs!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this tuition: \";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this tuition: \";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this tuition as done:\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN \u003d \"☹ OOPS!!! \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_TUITION_INDEX \u003d \"☹ OOPS!!! Please indicate a valid tuition index!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Quiz related classes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_QUIZ_DELETE_ERROR_NON_NUMBER \u003d \"☹ OOPS!!! Please indicate in NUMERALS, \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"which quiz you\u0027d like to delete!\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_HELP_COMMAND \u003d \"☹ OOPS!!! Are you trying to take a quiz or add/delete a\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" quiz question? Enter \u0027help\u0027 to check the correct format!\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_NUM_OF_QUIZ_QUESTIONS \u003d \"☹ OOPS!!! You can only take quizzes in sets of\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" 10, 20 or 30 questions!\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_QUES_LESS_THAN_10 \u003d \"OOPS! You wanted to take a quiz with \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + QuizManager.noOfQues + \" questions, but your current quiz only has %s question(s).\\nPlease add more\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" questions to your quiz via the \u0027add quiz\u0027 command!\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_QUES_MORE_THAN_10 \u003d \"OOPS! You wanted to take a quiz with \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + QuizManager.noOfQues + \" questions, but your current quiz only has %s question(s).\\nPlease either add\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"more questions to your quiz via the \u0027add quiz\u0027 command, or try a quiz with less questions!\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Hello! Here is a list of commands you can try:\\n\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t1. Add class: \u0027add class /n [name of class] /s [start date-time of class] /e\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" [end date-time of class]\u0027\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t2. Delete class: \u0027delete class [class number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t3. Add cca: \u0027add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]\u0027\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t4. Delete cca: \u0027delete cca [cca number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t5. Add test: \u0027add test /n [name of test] /s [start date-time of test] /e \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"[end date-time of test]\u0027\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t6. Delete test: \u0027delete test [test number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t7. Add tuition: \u0027add tuition /n [name of tuition] /s [start date-time of tuition] /e \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"start date-time of tuition] /l [location of tuition]\u0027\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t8. Delete tuition: \u0027delete tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t9. List events (class, test, cca, tuition): \u0027list\u0027\\n\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t10. Set class as done: \u0027done class [class number]\u0027\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t11. Set test as done: \u0027done test [test number]\u0027\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t12. Set cca as done: \u0027done cca [cca number]\u0027\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t13. Set tuition as done: \u0027done tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t14. Find relevant event(s): \u0027find [keyword(s)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t15. Add contact: \u0027add contact /sub [subject] /n [name of contact person] /hp [phone number]\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" /e [email address]\u0027\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t16. Delete contact: \u0027delete contact [contact number]\u0027\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t17. List contact: \u0027list contact\u0027\\n\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t18. Take Mathematics quiz: \u0027quiz [no. of questions (10, 20 or 30)]\u0027\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t19. List quiz questions: \u0027list quiz\u0027\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t20. Add quiz question: \u0027add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3]\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" /o4 [option 4] /a [option answer] /exp [explanation]\u0027\\n\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t21. Exit program: \u0027bye\u0027\\n\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\n\\tNOTE:\\n\\t1. Please enter the date-time in the following format: YYYY-MM-DD \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"[time in 24hr format]\\n\\te.g. 2020-08-19 1300\\n\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t2. For command 20 (Add quiz question), the \u0027explanation\u0027 field is OPTIONAL\\n\\n\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"BYE BYE! SEE YOU NEXT TIME! :3\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_EXTRA_HELP_PARAM \u003d \"OOPS! Were you trying to ask for help? Just enter \u0027help\u0027!\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_NO_EVENTS_FOUND \u003d \"Sorry but your searches yield no results!\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_NO_QUIZZES_FOUND \u003d \"Sorry but there is not such a quiz in your list!\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "durianpancakes": 118,
      "elizabethcwt": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/ControlManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.controller.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.controller.command.CommandFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelExtractor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ControlManager {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventStorageManager eventStorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizStorageManager quizStorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ControlManager(String userInput, Model model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                          EventStorageManager eventStorageManager, QuizStorageManager quizStorageManager) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventStorageManager \u003d eventStorageManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizStorageManager \u003d quizStorageManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType runLogic() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType modelType \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain dataModel \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d new CommandParser(userInput).extractCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            final Command actionableCommand \u003d new CommandFactory(commandType, userInput).generateActionableCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return commandType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (doesRequireModel(commandType)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                modelType \u003d new ModelParser(userInput).extractModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dataModel \u003d new ModelExtractor(model, modelType).retrieveModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            checkInvalidModels(commandType, modelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            actionableCommand.execute(dataModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidHelpCommandException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EXTRA_HELP_PARAM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ContactParamException | QuizParamException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"☹ Oops! I did not recognize that command! Enter \u0027help\u0027 if needed!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidModelException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"Invalid model\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (MissingParameterException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_MISSING_PARAMETERS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyParameterException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_PARAMETERS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IncompleteListCommandException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INCOMPLETE_LIST_PARAMETERS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            refreshEvents();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            refreshQuizzes();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void checkInvalidModels(CommandType commandType, ModelType modelType) throws InvalidModelException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if ((commandType \u003d\u003d CommandType.ADD || commandType \u003d\u003d CommandType.DELETE || commandType \u003d\u003d CommandType.DONE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 modelType \u003d\u003d ModelType.EVENT) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean doesRequireModel(CommandType commandType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isAdd \u003d commandType \u003d\u003d CommandType.ADD;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isDelete \u003d commandType \u003d\u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isDone \u003d commandType \u003d\u003d CommandType.DONE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isList \u003d commandType \u003d\u003d CommandType.LIST;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isFind \u003d commandType \u003d\u003d CommandType.FIND;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return isAdd || isDelete || isDone || isList || isFind;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void refreshEvents() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getCcaManager().getCcas());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getTestManager().getTests());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getClassManager().getClasses());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getTuitionManager().getTuitions());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventStorageManager.saveData(events);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void refreshQuizzes() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d model.getQuizManager().getQuizList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            quizStorageManager.saveData(quizzes, Duke.QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 90,
      "durianpancakes": 38,
      "elizabethcwt": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for adding a class, cca, test, tuition, quiz and contact."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public AddCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws ContactParamException, QuizParamException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelManager modelManager \u003d (ModelManager) modelMain;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelManager.add(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 2,
      "AndreWongZH": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the base of all command types."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected final String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Runs if the execution requires passing the user input to the model."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput String given from the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected Command(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public abstract void execute(ModelMain modelMain) throws ContactParamException, InvalidHelpCommandException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizParamException, EmptyParameterException, MissingParameterException, IncompleteListCommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 3,
      "AndreWongZH": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/CommandFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a generator that returns the corresponding Command class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * based on the commandType."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandFactory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandFactory(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert commandType !\u003d null : \"commandType must not be null\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns a Command class back to the ControlManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * based on the commandType."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Command class which is to be executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Command generateActionableCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new HelpCommand(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new ListCommand(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new FindCommand(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new QuizCommand(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // bye does not have a corresponding Command class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            assert false : \"all commandType should be handled\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for deleting a class, cca, test, tuition, quiz and contact."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelManager modelManager \u003d (ModelManager) modelMain;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelManager.delete(userInput.split(INPUT_SPACE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for setting class, cca, test and tuition to be done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventDataManager eventDataModel \u003d (EventDataManager) modelMain;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventDataModel.setDone(userInput.split(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for searching via event description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws MissingParameterException, IncompleteListCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new IncompleteListCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain instanceof EventManager) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EventManager eventManager \u003d (EventManager) modelMain;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.find(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof QuizManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizManager.find(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof ContactManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ContactManager contactManager \u003d (ContactManager) modelMain;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            contactManager.find(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003ehandleHelp()\u003c/h2\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints out all available features users can use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception InvalidHelpCommandException to inform the user if their help input is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void handleHelp() throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String[] userInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (userInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"printing out all features users can use\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_HELP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid help command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 25,
      "elizabethcwt": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for listing events, quizzes and contacts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ListCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws IncompleteListCommandException, MissingParameterException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new IncompleteListCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain instanceof EventManager) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EventManager eventManager \u003d (EventManager) modelMain;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.list(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof QuizManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizManager.find(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof ContactManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ContactManager contactManager \u003d (ContactManager) modelMain;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            contactManager.list();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/QuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public QuizCommand(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(INPUT_SPACE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        quizManager.takeQuiz(separatedInputs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 8,
      "elizabethcwt": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the process of extracting out the commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACES \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int LENGTH_SINGLE_WORD \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandParser(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(INPUT_SPACES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        commandType \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if the first word in the input string matches any command word."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If it contains any command word, returns the respective commandType."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return CommandType corresponding to the command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidCommandException If no command word matches the first word."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType extractCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting command now...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[MAIN_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_ADD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DELETE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DONE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DONE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_LIST:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.LIST;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_BYE:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_HELP:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_FIND:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.FIND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_QUIZ:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.QUIZ;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 86
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible commands available to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ADD, DELETE, DONE, HELP, LIST, BYE, QUIZ, FIND"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * To configure the Date and Time of the events from yyyy-mm-dd HHMM format to dd suffix mm yyyy, hh:mm aa format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String changeDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising changing of date and time to new format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int divider \u003d dateTime.indexOf(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"split string into date and time\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String date \u003d dateTime.substring(0, divider);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"generating day suffix\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String[] dayInput \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int dayInteger \u003d Integer.parseInt(dayInput[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String dayNumberSuffix \u003d getDayNumberSuffix(dayInteger);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"changing date format\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        LocalDate oldDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String changedDate \u003d oldDate.format(formatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"changing time format\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String time \u003d dateTime.substring(divider + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateFormat inputDateTimeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateFormat outputDateTimeFormat \u003d new SimpleDateFormat(\"hh:mm aa\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Date oldTime \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String changedTime \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        oldTime \u003d inputDateTimeFormat.parse(time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        changedTime \u003d outputDateTimeFormat.format(oldTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"generating day\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String dayString \u003d String.valueOf(dayInteger);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return dayString + dayNumberSuffix + \" \" + changedDate + \" , \" + changedTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    ref to: https://stackoverflow.com/questions/4011075/how-do-you-format-the-day"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    -of-the-month-to-say-11th-21st-or-23rd-ordinal"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private String getDayNumberSuffix(int day) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert day \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert day \u003c 31;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (day \u003e\u003d 11 \u0026\u0026 day \u003c\u003d 13) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        switch (day % 10) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"st\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"nd\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"rd\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean isDateEqual(String listInput, String userInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listDay \u003d LocalDate.parse(listInput, formatter).getDayOfMonth();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userDay \u003d LocalDate.parse(userInput, formatter).getDayOfMonth();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listYear \u003d LocalDate.parse(listInput, formatter).getYear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userYear \u003d LocalDate.parse(userInput, formatter).getYear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Month listMonth \u003d LocalDate.parse(listInput, formatter).getMonth();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Month userMonth \u003d LocalDate.parse(userInput, formatter).getMonth();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return ((listDay \u003d\u003d userDay)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listMonth.equals(userMonth))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listYear \u003d\u003d userYear));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cString\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e dateStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        switch (calendar.get(Calendar.DAY_OF_WEEK)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.MONDAY:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.TUESDAY:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.WEDNESDAY:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.THURSDAY:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -3);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.FRIDAY:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -4);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.SATURDAY:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -5);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.SUNDAY:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -6);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            int dayOfMonth \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            int month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            int year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            String date \u003d year + \"-\" + (month + 1) + \"-\" + dayOfMonth;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            dateStrings.add(date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return dateStrings;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 130,
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelExtractor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a extractor that returns the corresponding Model Manager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * based on the modelType."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelExtractor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ModelType modelType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelExtractor(Model model, ModelType modelType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.modelType \u003d modelType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns the Model Manager based on the modelType."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns null if modelType is EVENT or null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Model Manager to be read or modified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If modelType does not match any of the Model Managers."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelMain retrieveModel() throws InvalidModelException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelType \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CLASS:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getClassManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CCA:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getCcaManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TEST:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTestManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TUITION:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTuitionManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getQuizManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CONTACT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getContactManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the process of extracting out the model to be performed on."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TEST \u003d \"test\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CCA \u003d \"cca\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TUITION \u003d \"tuition\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_CONTACT \u003d \"contact\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int SUB_COMMAND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACES \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ModelType modelType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelParser(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(INPUT_SPACES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelType \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if the second word in the input string matches any model word."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If it contains any model word, returns the respective modelType."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return ModelType corresponding to the model."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If the second word does not match any model word."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelType extractModel() throws InvalidModelException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting model now...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs[MAIN_COMMAND_INDEX].equals(\"quiz\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.QUIZ;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[SUB_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CLASS:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CLASS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CCA:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CCA;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TEST:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TEST;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TUITION:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TUITION;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_CONTACT:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CONTACT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_QUIZ:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.QUIZ;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_EVENT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.EVENT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return modelType;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible models available to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum ModelType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    CLASS, CCA, TEST, TUITION, QUIZ, CONTACT, EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ContactParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class ContactParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyListException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/IncompleteListCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class IncompleteListCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidHelpCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class InvalidHelpCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidModelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class InvalidModelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidValueException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 1,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class MissingParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/QuizParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/StorageCorruptedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageCorruptedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/StorageSeparatorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageSeparatorException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Interactable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface Interactable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void add(String userInput) throws MissingParameterException, EmptyParameterException,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizParamException, ContactParamException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void delete(String[] userInputs);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 2,
      "AndreWongZH": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a model object that stores volatile memory of the program data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * This consist of the eventManager, contactManager and quizManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    EventManager eventManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ContactManager contactManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    QuizManager quizManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Model(EventManager eventManager, ContactManager contactManager, QuizManager quizManager) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contactManager \u003d contactManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizManager \u003d quizManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager getEventManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ContactManager getContactManager() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return contactManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager getQuizManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ModelMain.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class ModelMain {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class ModelManager extends ModelMain implements Interactable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String phoneNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Contact(String subject, String name, String phoneNumber, String email) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getPhoneNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return phoneNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject + \" teacher: \" + name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nPhone number: \" + phoneNumber"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nemail address: \" + email + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 37,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/ContactInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface ContactInteractable extends Interactable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/ContactManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.ContactParamException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ContactManager extends ModelManager implements ContactInteractable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cContact\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ContactManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getContactListSize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return contacts.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws ContactParamException, EmptyParameterException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (!userInput.contains(\"/s\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_SUBJECT_NOT_FOUND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (!userInput.contains(\"/n\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NAME_NOT_FOUND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (!userInput.contains(\"/p\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_PHONE_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (!userInput.contains(\"/e\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMAIL_ADDRESS_NOT_FOUND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new ContactParamException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] seperatedInputs \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into subject, name, phone number\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"and email address.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String subject \u003d seperatedInputs[1].substring(1).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String name \u003d seperatedInputs[2].substring(1).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String phoneNumber \u003d seperatedInputs[3].substring(1).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String emailAddress \u003d seperatedInputs[4].substring(1).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (subject.equals(\"\") || name.equals(\"\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || phoneNumber.equals(\"\") || emailAddress.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"subject/name/phone number/email address is empty\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.add(new Contact(subject, name, phoneNumber, emailAddress));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_ADD_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                contacts.get(getContactListSize() - 1).toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int contactIndex \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            contactIndex \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((contactIndex \u003c\u003d 0) || (contactIndex \u003e getContactListSize())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                contacts.get(contactIndex - 1).toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.remove(contactIndex - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (contacts.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_CONTACT_LIST);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c getContactListSize(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"Contact \" + (i + 1) + \":\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        contacts.get(i).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getContactStatement() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String contactStatement \u003d getContactListSize() \u003c\u003d 1 ? \" contact\" : \" contacts\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getContactListSize() + contactStatement + \" in your list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 79,
      "AndreWongZH": 16,
      "durianpancakes": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String DONE_STATUS \u003d \"[DONE]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String NOT_DONE_STATUS \u003d \"[NOT DONE]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected String start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected String end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Event(String description, String start, String end) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Event(String description, String start, String end, boolean isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String getStart() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String getEnd() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (isDone ? DONE_STATUS : NOT_DONE_STATUS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return getStatus() + \" \" + description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (obj \u003d\u003d null || obj.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Event otherEvent \u003d (Event) obj;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.description.equals(otherEvent.description)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.isDone \u003d\u003d otherEvent.isDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 21,
      "untitle4": 7,
      "AndreWongZH": 19,
      "durianpancakes": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventDataManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class EventDataManager extends ModelManager implements EventInteractable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface EventInteractable extends Interactable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setDone(String[] userInputs);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuitionManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a handler that manages the four different event managers."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * This provides access to each individual event managers and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * also performs listing and searches for the entire events data set."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventManager extends ModelMain implements EventManagerInteractable {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int USER_INPUT_OFFSET \u003d 10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventClassManager eventClassManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventTestManager eventTestManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventCcaManager eventCcaManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static EventTuitionManager eventTuitionManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager(EventParameter eventParameter) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager \u003d new EventClassManager(eventParameter.getClasses());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager \u003d new EventTestManager(eventParameter.getTests());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager \u003d new EventCcaManager(eventParameter.getCcas());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTuitionManager \u003d new EventTuitionManager(eventParameter.getTuitions());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventClassManager getClassManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventClassManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTestManager getTestManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventTestManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCcaManager getCcaManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventCcaManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTuitionManager getTuitionManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return eventTuitionManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void list(String userInput) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            String dateParam \u003d userInput.split(\" \").length \u003d\u003d 2 ? null : userInput.split(\" \")[2];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ListSchedule listSchedule \u003d new ListSchedule(dateParam, eventClassManager.getClasses(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    eventCcaManager.getCcas(), eventTestManager.getTests(), eventTuitionManager.getTuitions());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (userInput.contains(\"week\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printedEvents \u003d listSchedule.getPrintableEventsWeek();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printedEvents \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printArray(printedEvents);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd or today!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cArrayList\u003cEvent\u003e\u003e getCurrentWeekEventMasterList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e eventMasterList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e daysOfWeek \u003d dateTimeParser.getDaysOfWeek();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result.add(getDayEventList(eventMasterList, daysOfWeek.get(i)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e getDayEventList(ArrayList\u003cEvent\u003e masterList, String date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : masterList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String[] listDate \u003d event.getStart().split(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (dateTimeParser.isDateEqual(date, listDate[0])) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                result.add(event);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventMasterList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d eventCcaManager.getCcas();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d eventTestManager.getTests();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d eventClassManager.getClasses();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d eventTuitionManager.getTuitions();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e masterList \u003d new ArrayList\u003c\u003e(ccas);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        masterList.addAll(tests);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        masterList.addAll(classes);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        masterList.addAll(tuitions);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return masterList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Prints to user all the found events that matches with keyword provided."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput Input supplied by the user that contains the keywords."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If input supplied does not contain any keywords"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(param, eventClassManager.getClasses(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                eventCcaManager.getCcas(), eventTestManager.getTests(), eventTuitionManager.getTuitions());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e filteredEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (filteredEvents.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_EVENTS_FOUND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface.printArray(filteredEvents);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 31,
      "AndreWongZH": 63,
      "durianpancakes": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventManagerInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface EventManagerInteractable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list(String userInput);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventParameter {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventParameter() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventParameter(ArrayList\u003cEvent\u003e ccas, ArrayList\u003cEvent\u003e tests,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                          ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcas() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTests() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 32,
      "durianpancakes": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/FindSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a process dedicated to filter out events based on given keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class FindSchedule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACES \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cString\u003e filteredEvents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindSchedule(String userInput, ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        ArrayList\u003cEvent\u003e tests, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput.length() !\u003d 0 : \"user input should not be missing\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        filteredEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns all the events whose description matches with the provided keywords."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Merges all the event types into one single arraylist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An Arraylist of type String to be printed out."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getFilteredEvents() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Combining all arraylist into one main arraylist\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(classes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(ccas);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(tests);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(tuitions);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        filterEvents(events);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Loops through event list to checks if the event\u0027s description matches with the keywords."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Both strings are first converted to lowercase before comparison."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If description matches, add the event into the filteredEvents arraylist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param events An ArrayList of type Event to be checked against"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void filterEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"loop through all the keywords to check if in event description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(INPUT_SPACES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            for (String keyword : separatedInputs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                if (event.getDescription().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    filteredEvents.add(event.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 74
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/ListSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListSchedule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_TUITIONS \u003d \"Tuitions: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_CLASSES \u003d \"Classes: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_TESTS \u003d \"Tests: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_CCAS \u003d \"CCAs: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ListSchedule(String userInput, ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        ArrayList\u003cEvent\u003e tests, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getPrintableEvents() throws EmptyListException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"starting to convert events instance to strings\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedClasses;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedTests;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedCcas;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedTuitions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        checkAndConvertToday();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveClasses()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting class events\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedClasses \u003d parseEventWithNumberPad(classes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedClasses, printedEvents, CATEGORY_CLASSES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveCcas()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting CCA events\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedCcas \u003d parseEventWithNumberPad(ccas);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedCcas, printedEvents, CATEGORY_CCAS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTests()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting test events\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedTests \u003d parseEventWithNumberPad(tests);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedTests, printedEvents, CATEGORY_TESTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTuitions()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting tuition events\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedTuitions \u003d parseEventWithNumberPad(tuitions);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedTuitions, printedEvents, CATEGORY_TUITIONS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (hasNoSchedule() || printedEvents.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"schedule is empty\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyListException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getPrintableEventsWeek() throws EmptyListException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"starting to convert events instance to strings\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e masterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        checkAndConvertToday();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveClasses()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"adding class events\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            masterList.addAll(getMasterList(classes));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveCcas()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"adding CCA events\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            masterList.addAll(getMasterList(ccas));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTests()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"adding test events\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            masterList.addAll(getMasterList(tests));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTuitions()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"adding tuition events\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            masterList.addAll(getMasterList(tuitions));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (hasNoSchedule() || masterList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"schedule is empty\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyListException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d getListWeek(masterList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ArrayList\u003cString\u003e getListWeek(ArrayList\u003cEvent\u003e masterList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e daysOfTheWeek \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e dateArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        daysOfTheWeek \u003d dateTimeParser.getDaysOfWeek();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (int i \u003d 0; i \u003c daysOfTheWeek.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateArrayList.add(\"MONDAY:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateArrayList.add(\"TUESDAY:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateArrayList.add(\"WEDNESDAY:\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateArrayList.add(\"THURSDAY:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateArrayList.add(\"FRIDAY:\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateArrayList.add(\"SATURDAY:\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateArrayList.add(\"SUNDAY:\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            for (int j \u003d 0; j \u003c masterList.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                String[] listDate \u003d masterList.get(j).getStart().split(\" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                if (dateTimeParser.isDateEqual(daysOfTheWeek.get(i), listDate[0])) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    dateArrayList.add(counter + \". \" + masterList.get(j));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            dateArrayList \u003d checkCounter(counter, dateArrayList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return dateArrayList;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ArrayList\u003cString\u003e checkCounter(int counter, ArrayList\u003cString\u003e dateArrayList) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (counter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            dateArrayList.remove(dateArrayList.size() - 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return dateArrayList;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ArrayList\u003cEvent\u003e getMasterList(ArrayList\u003cEvent\u003e eventArr) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr !\u003d null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr.size() !\u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e masterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArr.size(); i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            masterList.add(eventArr.get(i));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return masterList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveClasses() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes.size() !\u003d 0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveCcas() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas.size() !\u003d 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTests() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests.size() !\u003d 0;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTuitions() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tuitions.size() !\u003d 0;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean hasNoSchedule() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (!haveClasses() \u0026\u0026 !haveCcas() \u0026\u0026 !haveTests() \u0026\u0026 !haveTuitions());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void checkAndConvertToday() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (userInput !\u003d null \u0026\u0026 (userInput.contains(\"today\") || userInput.contains(\"week\"))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInput \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Converts event instances into strings representation padded with numbers."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * PrintedEvents cannot be null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * EventArr cannot be empty or null."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param eventArr Array list of event instances to be converted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ArrayList\u003cString\u003e parseEventWithNumberPad(ArrayList\u003cEvent\u003e eventArr) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr !\u003d null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr.size() !\u003d 0;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        // todo might have a problem here"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArr.size(); i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            String[] listDate \u003d eventArr.get(i).getStart().split(\" \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (userInput \u003d\u003d null || dateTimeParser.isDateEqual(listDate[0], userInput)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                printedEvents.add(i + 1 + \". \" + eventArr.get(i));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void addToMainList(ArrayList\u003cString\u003e subEvents, ArrayList\u003cString\u003e printedEvents, String categoryName) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (subEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(categoryName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.addAll(subEvents);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 232
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCca.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventCca extends Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String CCA_ICON \u003d \"[CCA]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCca(String description, String start, String end) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCca(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return CCA_ICON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d CCA_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ParseException parseException) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCca otherEventCca \u003d (EventCca) obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventCca.getStart())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventCca.getEnd());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 21,
      "untitle4": 8,
      "AndreWongZH": 4,
      "durianpancakes": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCcaManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventCcaManager extends EventDataManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventCcaManager(ArrayList\u003cEvent\u003e inputList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas \u003d inputList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcas() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getCcaListSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert ccas !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a cca\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] ccaDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaDescription \u003d ccaDetails[1].substring(1).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStartDate \u003d ccaDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaEndDate \u003d ccaDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (ccaDescription.equals(\"\") || ccaStartDate.equals(\"\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || ccaEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(ccaStartDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(ccaEndDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ccas.add(new EventCca(ccaDescription, ccaStartDate, ccaEndDate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"date\u0026time is not valid or in wrong format\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"added cca to ArrayList\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CCA_ADD_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                ccas.get(getCcaListSize() - 1).toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getCcaStatement();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        int ccaIndex;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    ccas.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ccas.remove(ccaIndex - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            getCcaStatement();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"absence of class index for deletion\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CLASS_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting cca as done\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((ccaIndex \u003c\u003d 0) || (ccaIndex \u003e getCcaListSize())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas.get(ccaIndex - 1).setDone();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"set cca as done from Arraylist\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CCA_DONE_SUCCESS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                ccas.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getCcaStatement() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStatement \u003d getCcaListSize() \u003c\u003d 1 ? \" cca\" : \" ccas\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getCcaListSize() + ccaStatement + \" in the list.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 12,
      "untitle4": 65,
      "AndreWongZH": 38,
      "durianpancakes": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClass class\u003c/h2\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains constructors, getters, toString and equals methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClass#toString()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClass#equals(Object)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class EventClass extends Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String CLASS_ICON \u003d \"[CLASS]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClass(String description, String start, String end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClass(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return CLASS_ICON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            result \u003d CLASS_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        EventClass otherEventClass \u003d (EventClass) obj;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventClass.getStart())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventClass.getEnd());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 3,
      "elizabethcwt": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClassManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClassManager class\u003c/h2\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Stores user\u0027s classes in an ArrayList of Event class, named classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains methods which allow:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAttaining class list size\u003c/li\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAdding new classes into ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eDeleting classes from ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eSetting class as {@code DONE}\u003c/li\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#getClassListSize()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#add(String)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#delete(String[])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#setDone(String[])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class EventClassManager extends EventDataManager {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Initialising Logger with name \"Class\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClassManager(ArrayList\u003cEvent\u003e classes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassListSize()\u003c/h2\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Attains the size of the user\u0027s classes ArrayList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @return int - Classes ArrayList size"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public int getClassListSize() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assertion to test assumption that ArrayList is not null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert classes !\u003d null : \"classes ArrayList should not be null\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003eaddClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Adds new class to classes ArrayList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInput To take in the String consisting of the class name, start date-time and end date-time."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception MissingParameterException if user input does not meet the requirements."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a class\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checks if user input contains the 3 required parameters (/n, /s and /e)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\")) || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new MissingParameterException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Splitting /n, /s and /e info. via a String array called classDetails"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        final String[] classDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"splitting the user input into class description, start date-time and end \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"date-time\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classDescription \u003d classDetails[1].substring(1).trim().replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStartDate \u003d classDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classEndDate \u003d classDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if any of the 3 required parameters are empty"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (classDescription.equals(\"\") || classStartDate.equals(\"\") || classEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time is\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking and converting user\u0027s date-time input into format of expected output"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            LocalDateTime.parse(classStartDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            LocalDateTime.parse(classEndDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.add(new EventClass(classDescription, classStartDate, classEndDate));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"adding the new class to the ArrayList\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CLASS_ADD_SUCCESS,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                classes.get(getClassListSize() - 1).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003edeleteClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Deletes a class from the classes ArrayList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInputs To take in the class index of the class to be deleted."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            int classIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.get(classIndex - 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    classes.get(classIndex - 1).toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.remove(classIndex - 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"deletion of class from ArrayList\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            getClassStatement();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"absence of class index for deletion\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CLASS_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid class index entered for deletion\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"non-integer class index entered for deletion\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassStatement()\u003c/h2\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints statement to update the user once class has been added or deleted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void getClassStatement() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStatement \u003d getClassListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getClassListSize() + classStatement + \" in the list.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003esetClassDone()\u003c/h2\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Sets class as done."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInputs To take in the class index of the class to be set as done."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception IndexOutOfBoundsException when user input is an invalid class index integer."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int classNumber;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting class as done\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((classNumber \u003c\u003d 0) || (classNumber \u003e getClassListSize())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        classes.get(classNumber - 1).setDone();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_SUCCESS,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \"  \" + classes.get(classNumber - 1));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "AndreWongZH": 6,
      "durianpancakes": 2,
      "elizabethcwt": 186
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTest extends Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String TEST_ICON \u003d \"[TEST]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, String start, String end) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return TEST_ICON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d TEST_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTest otherEventTest \u003d (EventTest) obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTest.getStart())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTest.getEnd());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 29,
      "AndreWongZH": 4,
      "durianpancakes": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTestManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTestManager extends EventDataManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTestManager(ArrayList\u003cEvent\u003e inputList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests \u003d inputList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTests() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public int getTestListSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert tests !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInput.replaceAll(\"\\\\s+\",\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String[] testDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testDescription \u003d testDetails[1].substring(1).trim().replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testStartDate \u003d testDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testEndDate \u003d testDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (testDescription.equals(\"\") || testStartDate.equals(\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || testEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(testStartDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            LocalDateTime.parse(testEndDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tests.add(new EventTest(testDescription, testStartDate, testEndDate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"date\u0026time is not valid or in wrong format\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"added test to ArrayList\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TEST_ADD_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \"  \" + tests.get(getTestListSize() - 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising deleting of a test\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    \"  \" + tests.get(testNumber - 1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tests.remove(testNumber - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.INFO, \"deleted test from ArrayList\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            getTaskStatement();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CLASS_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void getTaskStatement() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((getTestListSize() - 1 \u003d\u003d 0) || (getTestListSize() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" task in the list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting test as done\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((testNumber \u003c\u003d 0) || (testNumber \u003e getTestListSize())) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests.get(testNumber - 1).setDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"set test as done from ArrayList\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TEST_DONE_SUCCESS,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \"  \" + tests.get(testNumber - 1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 87,
      "untitle4": 3,
      "AndreWongZH": 37,
      "durianpancakes": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventTuition extends Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String TUITION_ICON \u003d \"[TUITION]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTuition(String description, String start, String end, String location) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return TUITION_ICON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTuition(String description, boolean isDone, String start, String end, String location) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d TUITION_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + new DateTimeParser().changeDateTime(super.getStart())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \" to \" + new DateTimeParser().changeDateTime(super.getEnd()) + \" at \" + getLocation();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"☹ OOPS!!! Please enter valid date and time in format yyyy-mm-dd HHMM!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTuition otherEventTuition \u003d (EventTuition) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTuition.getStart())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTuition.getEnd())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.location.equals(otherEventTuition.getLocation());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 19,
      "AndreWongZH": 6,
      "durianpancakes": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuitionManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTuitionManager extends EventDataManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventTuitionManager(ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getTuitionListSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tuitions.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initializing adding of a tuition\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String descriptionPrefix \u003d \"/n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String startPrefix \u003d \"/s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String endPrefix \u003d \"/e\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String locationPrefix \u003d \"/l\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((!userInput.contains(descriptionPrefix)) || (!userInput.contains(startPrefix))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                || (!userInput.contains(endPrefix)) || (!userInput.contains(locationPrefix))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfDescriptionPrefix \u003d userInput.indexOf(descriptionPrefix);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfStartPrefix \u003d userInput.indexOf(startPrefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfEndPrefix \u003d userInput.indexOf(endPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfLocationPrefix \u003d userInput.indexOf(locationPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description \u003d userInput.substring(indexOfDescriptionPrefix, indexOfStartPrefix)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(descriptionPrefix, \"\").trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d userInput.substring(indexOfStartPrefix, indexOfEndPrefix)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(startPrefix, \"\").trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d userInput.substring(indexOfEndPrefix, indexOfLocationPrefix)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(endPrefix, \"\").trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d userInput.substring(indexOfLocationPrefix)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(locationPrefix, \"\").trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isEmptyString(description) || isEmptyString(start) || isEmptyString(end) || isEmptyString(location)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            parseLocalDateTime(start);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            parseLocalDateTime(end);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventTuition eventTuition \u003d new EventTuition(description, start, end, location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tuitions.add(eventTuition);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Tuition added successfully\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_ADD_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    eventTuition.toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    getTuitionStatement());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            int tuitionIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tuitions.get(tuitionIndex - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"Noted. I\u0027ve removed this tuition class: \","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    tuitions.get(tuitionIndex - 1).toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tuitions.remove(tuitionIndex - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Deletion of tuition class from ArrayList\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(getTuitionStatement());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_TUITION_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int tuitionNumber;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initialising setting tuition as done\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tuitionNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"Wrong number format entered\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((tuitionNumber \u003c\u003d 0) || (tuitionNumber \u003e getTuitionListSize())) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tuitions.get(tuitionNumber - 1).setDone();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_SUCCESS,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \"  \" + tuitions.get(tuitionNumber - 1),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                getTuitionStatement());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getTuitionStatement() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String tuitionStatement \u003d getTuitionListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"Now you have \" + getTuitionListSize() + tuitionStatement + \" in the list\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean isEmptyString(String string) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return string.equals(\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private LocalDateTime parseLocalDateTime(String localDateTimeString) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return LocalDateTime.parse(localDateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "AndreWongZH": 29,
      "durianpancakes": 122
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/FindQuiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class FindQuiz {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e quizzes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cString\u003e filteredQuizzes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public FindQuiz(String userInput, ArrayList\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assert userInput.length() !\u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizzes \u003d quizzes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        filteredQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cString\u003e filterQuizzes() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"loop through all the keywords to check if in quiz description\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] seperatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (Quiz quiz : quizzes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (String keyword: seperatedInputs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                if (quiz.getQuestion().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    filteredQuizzes.add(quiz.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return filteredQuizzes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 36,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/Quiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String option4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private String explanation \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4, String answer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                String answer, String explanation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.explanation \u003d explanation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption1() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption2() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption3() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getOption4() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return option4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getExplanation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return explanation;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"|\" + option1 + \"|\" + option2 + \"|\" + option3 + \"|\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + option4 + \"|\" + answer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"|\" + option1 + \"|\" + option2 + \"|\" + option3 + \"|\" + option4"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"|\" + answer + \"|\" + explanation;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return question + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"Explanation: \" + explanation + \"\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String printQuizQuestion() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return question + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(4) \" + option4 + \"\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 62,
      "AndreWongZH": 25,
      "elizabethcwt": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/QuizInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface QuizInteractable extends Interactable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/QuizManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.QuizParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.UserAnswerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class QuizManager extends ModelManager implements QuizInteractable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final int USER_INPUT_OFFSET \u003d 9;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e quizzes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static int noOfQues;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager(ArrayList\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizzes \u003d quizzes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e getQuizList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    UserAnswerManager userAnswerManager \u003d new UserAnswerManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getQuizListSize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert quizzes !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void takeQuiz(String[] separatedInputs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            noOfQues \u003d Integer.parseInt(separatedInputs[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (!((noOfQues \u003d\u003d 10) || (noOfQues \u003d\u003d 20) || (noOfQues \u003d\u003d 30))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user inputs an invalid number of quiz questions (not 10, 20 or 30)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_INVALID_NUM_OF_QUIZ_QUESTIONS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user inputs a valid number of quiz questions (either 10, 20 or 30)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else if ((noOfQues \u003e getQuizListSize()) \u0026\u0026 (getQuizListSize() \u003c 10)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user wants to try more questions than he/she has in the current quiz, and has less than 10"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // questions"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(String.format(Messages.MESSAGE_INSUFFICIENT_QUES_LESS_THAN_10,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        getQuizListSize()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else if (noOfQues \u003e getQuizListSize() \u0026\u0026 (getQuizListSize() \u003e\u003d 10)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user wants to try more questions than he/she has in the current quiz, but has at least 10"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // questions"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(String.format(Messages.MESSAGE_INSUFFICIENT_QUES_MORE_THAN_10,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        getQuizListSize()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user enters a valid number of questions"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                if (noOfQues \u003c\u003d getQuizListSize()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    // Create a new list of the question indexes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    List\u003cInteger\u003e quizIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        quizIndexes.add(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    // Shuffle the question indexes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    Collections.shuffle(quizIndexes);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    // Print out each question"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    for (int j \u003d 0; j \u003c noOfQues; j++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        System.out.println();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        System.out.println(\"Question \" + (j + 1) + \": \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        System.out.println(quizzes.get(quizIndexes.get(j)).printQuizQuestion());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        // Create a Scanner object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        // Store user\u0027s quiz answers into ArrayList"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        //TODO handle invalid answer input"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        userAnswerManager.getUserAnswers().add(Integer.parseInt(in.nextLine()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    // Initialising counter for correctly answered questions"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    int correctCounter \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    // Compare and note if students\u0027 answers are correct"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    for (int k \u003d 0; k \u003c noOfQues; k++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        if (userAnswerManager.getUserAnswers().get(k).equals(Integer.parseInt(quizzes.get(quizIndexes"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                                .get(k)).getAnswer()))) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                            userAnswerManager.getCorrectness().add(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                            correctCounter++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                            userAnswerManager.getCorrectness().add(false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    // TODO Print results, questions, user\u0027s answers, correct answers and explanations"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    System.out.println(\"\\nYou scored \" + correctCounter + \" out of \" + noOfQues + \"!\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    // Empty userAnswers ArrayList and correctness ArrayList"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    userAnswerManager.getUserAnswers().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    userAnswerManager.getCorrectness().clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_HELP_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int quizIndex;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            quizIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((quizIndex \u003c\u003d 0) || (quizIndex \u003e getQuizListSize())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(\"Noted. I\u0027ve removed this quiz question: \\n\" + quizzes.get(quizIndex - 1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        quizzes.remove(quizIndex - 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getQuizStatement();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // format: add quiz /q question /o1 option 1 /o2 option 2 /o3 option 3 /o4 option 4 /a answer /exp explanation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void add(String userInput) throws QuizParamException, EmptyParameterException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (!userInput.contains(\" /q \")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(\"question not found\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new QuizParamException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (!userInput.contains(\" /a \")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(\"answer not found\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new QuizParamException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (!userInput.contains(\" /o1 \") \u0026\u0026 !userInput.contains(\" /o2 \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 !userInput.contains(\" /o3 \") \u0026\u0026 !userInput.contains(\" /o4 \")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(\"options not provided\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new QuizParamException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String question \u003d separatedInputs[1].substring(1).trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String option1 \u003d separatedInputs[2].substring(2).trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String option2 \u003d separatedInputs[3].substring(2).trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String option3 \u003d separatedInputs[4].substring(2).trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String option4 \u003d separatedInputs[5].substring(2).trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String answer \u003d separatedInputs[6].substring(1).trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (question.equals(\" \") || option1.equals(\" \") || option2.equals(\" \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                || option3.equals(\" \") || option4.equals(\" \") || answer.equals(\" \")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"question or options or answer is empty\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (separatedInputs.length \u003e 7) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            String explanation \u003d separatedInputs[7].substring(3).trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            quizzes.add(new Quiz(question, option1, option2, option3, option4, answer, explanation));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            quizzes.add(new Quiz(question, option1, option2, option3, option4, answer));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(\"Quiz question added!\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new MissingParameterException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        FindQuiz findQuiz \u003d new FindQuiz(param, quizzes);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cString\u003e filteredQuizzes \u003d findQuiz.filterQuizzes();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (filteredQuizzes.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_QUIZZES_FOUND);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.printArray(filteredQuizzes);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (quizzes.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(\"Quiz list is empty. Add some!\\n\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(\"Question \" + (i + 1) + \":\\n\" + quizzes.get(i));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void getQuizStatement() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String quizStatement \u003d getQuizListSize() \u003d\u003d 1 ? \" quiz\" : \" quizzes\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getQuizListSize() + quizStatement + \" in the quiz list.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 20,
      "AndreWongZH": 15,
      "elizabethcwt": 183
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/UserAnswerManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class UserAnswerManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cInteger\u003e userAnswers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cBoolean\u003e correctness;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public UserAnswerManager() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.userAnswers \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.correctness \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cInteger\u003e getUserAnswers() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return userAnswers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getCorrectness() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return correctness;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //  public String printPostQuiz() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListDecoder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListDecoder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e decodeEventList(ArrayList\u003cString\u003e encodedEventList) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final ArrayList\u003cEvent\u003e decodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String encodedEvent : encodedEventList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            decodedEvents.add(decodeEventFromString(encodedEvent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return decodedEvents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Event decodeEventFromString(String encodedEvent) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String[] data \u003d encodedEvent.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventCca.CCA_ICON:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseCca(data);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventClass.CLASS_ICON:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseClass(data);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventTest.TEST_ICON:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTest(data);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case EventTuition.TUITION_ICON:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTuition(data);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventCca parseCca(String[] data) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventCca(description, isDone, start, end);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventClass parseClass(String[] data) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventClass(description, isDone, start, end);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventTest parseTest(String[] data) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventTest(description, isDone, start, end);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventTuition parseTuition(String[] data) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 4) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d eventInfo[3];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidTuition(description, start, end, location);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventTuition(description, isDone, start, end, location);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void isValidParams(String description, String start, String end) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !description.equals(\"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !start.equals(\"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !end.equals(\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void isValidTuition(String description, String start, String end, String location) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isValidParams(description, start, end);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert location !\u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !location.equals(\"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 12,
      "AndreWongZH": 1,
      "durianpancakes": 119
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListEncoder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cString\u003e encodeEventList(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            encodedEvents.add(encodeEventToString(event));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return encodedEvents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String encodeEventToString(Event event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventCca eventCca \u003d (EventCca) event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidCca(eventCca);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventCca.CCA_ICON + \"|\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.isDone() + \"|\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.getDescription() + \"|\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.getStart() + \"|\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventCca.getEnd();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventTest eventTest \u003d (EventTest) event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidTest(eventTest);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventTest.TEST_ICON + \"|\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.isDone() + \"|\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.getDescription() + \"|\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.getStart() + \"|\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + eventTest.getEnd();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventTuition newEventTuition \u003d (EventTuition) event;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidTuition(newEventTuition);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventTuition.TUITION_ICON + \"|\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.isDone() + \"|\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getDescription() + \"|\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getStart() + \"|\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getEnd() + \"|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventTuition.getLocation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventClass newEventClass \u003d (EventClass) event;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            assertValidClass(newEventClass);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            result \u003d EventClass.CLASS_ICON + \"|\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.isDone() + \"|\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.getDescription() + \"|\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.getStart() + \"|\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + newEventClass.getEnd();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidCca(EventCca eventCca) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(eventCca.getDescription(), eventCca.getStart(), eventCca.getEnd());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidClass(EventClass inputEventClass) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(inputEventClass.getDescription(), inputEventClass.getStart(), inputEventClass.getEnd());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidTest(EventTest eventTest) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(eventTest.getDescription(), eventTest.getStart(), eventTest.getEnd());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void assertValidTuition(EventTuition eventTuition) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        isValidParams(eventTuition.getDescription(), eventTuition.getStart(), eventTuition.getEnd());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventTuition.getLocation() !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert !eventTuition.getLocation().equals(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void isValidParams(String description, String start, String end) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !description.equals(\"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !start.equals(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !end.equals(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 47,
      "AndreWongZH": 1,
      "durianpancakes": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventListEncoder eventListEncoder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventListDecoder eventListDecoder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventStorageManager(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventListEncoder \u003d new EventListEncoder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventListDecoder \u003d new EventListDecoder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void saveData(ArrayList\u003cEvent\u003e eventList) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e encodedEventList \u003d eventListEncoder.encodeEventList(eventList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + fileName), encodedEventList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventParameter loadData() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        File eventFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                Scanner sc \u003d new Scanner(eventFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                ArrayList\u003cEvent\u003e eventList \u003d eventListDecoder.decodeEventList(data);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return separateEventsIntoList(eventList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (StorageSeparatorException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Storage corrupted\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new EventParameter();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private EventParameter separateEventsIntoList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                ccas.add(event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tuitions.add(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                classes.add(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                tests.add(event);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventParameter(ccas, tests, classes, tuitions);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 8,
      "AndreWongZH": 68,
      "durianpancakes": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListDecoder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e decodeQuizList(ArrayList\u003cString\u003e encodedQuizList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final ArrayList\u003cQuiz\u003e decodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (String encodedQuiz : encodedQuizList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            decodedQuizzes.add(decodeQuizFromString(encodedQuiz));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return decodedQuizzes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private Quiz decodeQuizFromString(String encodedQuiz) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] data \u003d encodedQuiz.trim().split(\"\\\\|\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String question \u003d data[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option1 \u003d data[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option2 \u003d data[2];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option3 \u003d data[3];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option4 \u003d data[4];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String answer \u003d data[5];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new Quiz(question, option1, option2, option3, option4, answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 21,
      "AndreWongZH": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListEncoder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cString\u003e encodeQuizList(ArrayList\u003cQuiz\u003e quizList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (Quiz quiz: quizList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            encodedQuizzes.add(quiz.convertToData());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return encodedQuizzes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 17,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class QuizStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizListEncoder quizListEncoder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizListDecoder quizListDecoder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizStorageManager(String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListEncoder \u003d new QuizListEncoder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListDecoder \u003d new QuizListDecoder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cQuiz\u003e loadData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        File quizFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                Scanner sc \u003d new Scanner(quizFile);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return quizListDecoder.decodeQuizList(data);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void saveData(ArrayList\u003cQuiz\u003e quizList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizList \u003d quizListEncoder.encodeQuizList(quizList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + filePath), encodedQuizList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 32,
      "AndreWongZH": 23,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class StorageManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String EMPTY_FILE_NAME \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected static String DIRECTORY_FOLDER_PATH \u003d new File(\"data\").getAbsolutePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected String fileName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public StorageManager(String fileName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert !fileName.equals(EMPTY_FILE_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected boolean createDataFile() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        File file \u003d new File(DIRECTORY_FOLDER_PATH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDirectoryCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        file \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isDirectoryCreated) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory not found, creating...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory found...\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 13,
      "durianpancakes": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CalendarWeekRenderer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class CalendarWeekRenderer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final int [] eventCounters \u003d {1, 1, 1, 1, 1, 1, 1};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public CalendarWeekRenderer(EventManager eventManager) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        renderWeekSchedule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void renderWeekSchedule() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e weekMasterList \u003d eventManager.getCurrentWeekEventMasterList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e daysOfWeek \u003d dateTimeParser.getDaysOfWeek();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        CalendarWeekRendererUtils utils \u003d new CalendarWeekRendererUtils(weekMasterList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // 17 spaces per day"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Printing DAY headers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // 6 spaces before each DAY_LABEL"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder dayLabelString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(getSpaces(6));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(utils.getDayLabel(i));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(getSpaces(6));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(dayLabelString.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Printing DATE headers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder dateHeaderString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(getSpaces(5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(getDateLabel(daysOfWeek, i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(getSpaces(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(dateHeaderString.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        while (!utils.isThereNothingLeftToPrint()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Print in order of ICON -\u003e DESCRIPTION -\u003e START-END TIMES"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // NOTE: DOES NOT SUPPORT TUITION LOCATION YET"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder eventParamsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventParamsString.append(getEventIcons(utils, weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(eventParamsString.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventParamsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventParamsString.append(getDescriptions(utils, weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(eventParamsString.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventParamsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventParamsString.append(getStartEndTime(utils, weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(eventParamsString.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getEventIcons(CalendarWeekRendererUtils utils, ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder eventIconsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (utils.getCounter(counterIndex) !\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String iconString \u003d events.get(eventCounters[counterIndex] - 1).getIcon();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(indexString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(iconString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(getSpaces(17 - iconString.length() - indexString.length()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(getSpaces(17));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return eventIconsString.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getDescriptions(CalendarWeekRendererUtils utils, ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder descriptionsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (utils.getCounter(counterIndex) !\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String descriptionString \u003d events.get(eventCounters[counterIndex] - 1).getDescription();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (descriptionString.length() \u003e 14) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                descriptionString \u003d descriptionString.substring(0, 11) + \"...\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(descriptionString);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(17 - descriptionString.length() - indexStringLength));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(17));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return descriptionsString.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getStartEndTime(CalendarWeekRendererUtils utils, ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder startEndTimesString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (utils.getCounter(counterIndex) !\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String startString \u003d events.get(eventCounters[counterIndex] - 1).getStart();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String[] splitStartString \u003d startString.split(\" \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String endString \u003d events.get(eventCounters[counterIndex] - 1).getEnd();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String[] splitEndString \u003d endString.split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String startEndString \u003d splitStartString[1] + \"-\" + splitEndString[1];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(startEndString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(17 - startEndString.length() - indexStringLength));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            utils.reduceCounter(counterIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventCounters[counterIndex]++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(17));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return startEndTimesString.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getSpaces(int num) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \" \".repeat(Math.max(0, num));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getDateLabel(ArrayList\u003cString\u003e daysOfWeek, int num) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[\" + daysOfWeek.get(num).substring(5) + \"]\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 147
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CalendarWeekRendererUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class CalendarWeekRendererUtils {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final int[] numEventsCounter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public CalendarWeekRendererUtils(ArrayList\u003cArrayList\u003cEvent\u003e\u003e weekMasterList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        numEventsCounter \u003d new int[7];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[0] \u003d weekMasterList.get(0).size();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[1] \u003d weekMasterList.get(1).size();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[2] \u003d weekMasterList.get(2).size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[3] \u003d weekMasterList.get(3).size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[4] \u003d weekMasterList.get(4).size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[5] \u003d weekMasterList.get(5).size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[6] \u003d weekMasterList.get(6).size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void reduceCounter(int counterIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        numEventsCounter[counterIndex]--;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getCounter(int counterIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return numEventsCounter[counterIndex];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean isThereNothingLeftToPrint() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return numEventsCounter[0] \u003d\u003d 0 \u0026\u0026 numEventsCounter[1] \u003d\u003d 0 \u0026\u0026 numEventsCounter[2] \u003d\u003d 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 numEventsCounter[3] \u003d\u003d 0 \u0026\u0026 numEventsCounter[4] \u003d\u003d 0 \u0026\u0026 numEventsCounter[5] \u003d\u003d 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 numEventsCounter[6] \u003d\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDayLabel(int num) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (num) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_MONDAY_LABEL;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_TUESDAY_LABEL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_WEDNESDAY_LABEL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_THURSDAY_LABEL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_FRIDAY_LABEL;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_SATURDAY_LABEL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_SUNDAY_LABEL;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UserInterface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.ControlManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static UserInterface userInterface \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static UserInterface getInstance() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (userInterface \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return userInterface;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_HELLO_FROM_DUKE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_PROMPT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String userName \u003d getUserCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser(Messages.MESSAGE_HELLO + userName,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_PROMPT_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showToUser(String... message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Note: Written by Andre"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printArray(ArrayList\u003cString\u003e stringArrayList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert stringArrayList !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String line : stringArrayList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Note: Written by Andre"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean checkIfProgramEnds(CommandType commandType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return commandType !\u003d CommandType.BYE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Note: Written by Andre"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean runUI(Model model,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                         EventStorageManager eventStorageManager,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                         QuizStorageManager quizStorageManager) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String line \u003d getUserCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (!line.trim().isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            ControlManager controlManager \u003d new ControlManager(line, model, eventStorageManager, quizStorageManager);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            commandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return checkIfProgramEnds(commandType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 80
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class AddEventCcaJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addCcaToList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball camp \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1500\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String actualOutputs \u003d cca.get(0).getDescription();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedOutputs \u003d \"basketball camp\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "untitle4": 16,
      "AndreWongZH": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddEventClassJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addClassToList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Math /s 2020-08-19 1300 /e 2020-08-19 1400\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "AndreWongZH": 4,
      "elizabethcwt": 16
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddTestJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addTestToList() throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 21,
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventCcaJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void deleteCcaInList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"delete cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.delete(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutput \u003d eventCcaManager.getCcaListSize();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedOutput \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "untitle4": 26,
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventClassJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addClassToList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n English lesson \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Science lesson \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String [] userInput \u003d \"delete class 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventClassManager.delete(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 7,
      "AndreWongZH": 4,
      "elizabethcwt": 27
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteTestJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void deleteTestFromList() throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"delete test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.delete(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 34,
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/DoneEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DoneEventCcaJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setCcaDone() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"done cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.setDone(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean actualOutputs \u003d cca.get(0).isDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "untitle4": 26,
      "AndreWongZH": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/DoneTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class DoneTestJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setTestDoneFromList() throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"done test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.setDone(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean actualOutputs \u003d test.get(0).isDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 35,
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    public void constructor_noTxtExtension_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        assertThrows(InvalidValueException.class, () -\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //                new EventStorageManager(\"test\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    public void constructor_nullFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //                new EventStorageManager(\"test\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    public void load_validFormat() throws InvalidValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        EventStorageManager eventStorageManager \u003d new EventStorageManager(\"test\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //        assertEquals(getEventList(), eventStorageManager.getEventList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventCca(\"Basketball training \","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-21 1800 \","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-21 1900\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventClass(\"Math tuition \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-22 1400 \","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-22-1600\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventTest(\"CS2113T Finals \","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-04 1500 \","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-04 1600\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        events.add(new EventTuition(\"English\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-05 1600\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-05 1800\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"home\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 8,
      "untitle4": 1,
      "AndreWongZH": 18,
      "durianpancakes": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/ModelExtractorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelExtractor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ModelExtractorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void retrieveModel_typeClass_eventClassManager() throws InvalidModelException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d initializeModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelExtractor modelExtractor \u003d new ModelExtractor(model, ModelType.CLASS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain actualModel \u003d modelExtractor.retrieveModel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(EventClassManager.class, actualModel.getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void retrieveModel_typeNull_null() throws InvalidModelException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d initializeModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelExtractor modelExtractor \u003d new ModelExtractor(model, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain actualModel \u003d modelExtractor.retrieveModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Model initializeModel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new Model(new EventManager(new EventParameter()), new ContactManager(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new QuizManager(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/command/CommandFactoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class CommandFactoryTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void generateActionableCommand_addType_addCommandClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Command actualCommand \u003d new CommandFactory(CommandType.ADD, \"\").generateActionableCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(AddCommand.class, actualCommand.getClass());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void generateActionableCommand_nullType_addCommandClass() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Command actualCommand \u003d new CommandFactory(CommandType.BYE, \"\").generateActionableCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/parser/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_deleteString_deleteCommandType() throws InvalidCommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualType \u003d new CommandParser(\"delete 22\").extractCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(CommandType.DELETE, actualType);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_singleDoneString_expectException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser(\"done\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(InvalidCommandException.class, commandParser::extractCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_randomString_expectException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser(\"random string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(InvalidCommandException.class, commandParser::extractCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 27
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/parser/ModelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ModelParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_singleString_expectNull() throws InvalidModelException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType actualType \u003d new ModelParser(\"single\").extractModel();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualType);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_getTuitionString_expectException() throws InvalidModelException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType actualType \u003d new ModelParser(\"add tuition\").extractModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(ModelType.TUITION, actualType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_invalidString_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelParser modelParser \u003d new ModelParser(\"random string\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(InvalidModelException.class, modelParser::extractModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/contact/ContactTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ContactTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/ListScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ListScheduleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_emptySchedule_expectException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(EmptyListException.class, listSchedule::getPrintableEvents);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_classSchedule_allClasses() throws EmptyListException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", \"2019-02-26 1400\", \"2019-02-27 1500\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \", \"1. [CLASS] [NOT DONE] Math from 26th Feb 2019 , \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        + \"02:00 PM to 27th Feb 2019 , 03:00 PM\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_allSchedule_allEvents() throws EmptyListException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", \"2019-02-26 1400\", \"2019-02-27 1500\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas.add(new EventCca(\"Basketball\", \"2019-02-26 1400\", \"2019-02-27 1500\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests.add(new EventTest(\"Science\", \"2019-02-26 1400\", \"2019-02-27 1500\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tuitions.add(new EventTuition(\"English\", \"2019-02-26 1400\", \"2019-02-27 1500\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \"Choa Chu Kang Avenue 5 Block 433\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [CLASS] [NOT DONE] Math from 26th Feb 2019 , 02:00 PM to 27th Feb 2019 , 03:00 PM\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"CCAs: \","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [CCA] [NOT DONE] Basketball from 26th Feb 2019 , 02:00 PM to 27th Feb 2019 , 03:00 PM\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"Tests: \","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [TEST] [NOT DONE] Science from 26th Feb 2019 , 02:00 PM to 27th Feb 2019 , 03:00 PM\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"Tuitions: \","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [TUITION] [NOT DONE] English from 26th Feb 2019 , 02:00 PM to 27th Feb 2019 , 03:00 PM\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                                + \" at Choa Chu Kang Avenue 5 Block 433\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_classScheduleToday_oneClass() throws EmptyListException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", todayDate.toString() + \" 1400\", \"2019-02-27 1500\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(\"today\", classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String formattedDate \u003d todayDate.format(DateTimeFormatter.ofPattern(\"MMM yyyy\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                List.of(\"Classes: \", String.format(\"1. [CLASS] [NOT DONE] Math from %srd %s ,\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        + \" 02:00 PM to 27th Feb 2019 , 03:00 PM\", todayDate.getDayOfMonth(), formattedDate)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 81,
      "durianpancakes": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/QuizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class QuizTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 12
    }
  },
  {
    "path": "test/ValidData.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|Basketball training |2020-09-21 1800 |2020-09-21 1900"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "[CLASS]|false|Math eventTuition |2020-09-22 1400 |2020-09-22-1600"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|CS2113T Finals |2020-12-04 1500 |2020-12-04 1600"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TUITION]|false|English|2020-12-05 1600|2020-12-05 1800|home"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "durianpancakes": 3
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "-": 1
    }
  }
]
