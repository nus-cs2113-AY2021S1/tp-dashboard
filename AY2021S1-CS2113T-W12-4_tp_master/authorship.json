[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Elizabeth | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jinran | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chan Xu Hui | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andre Wong | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alicia Ho | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "untitle4": 1,
      "AndreWongZH": 1,
      "durianpancakes": 1,
      "-": 4,
      "elizabethcwt": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Cca.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class Cca extends Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    protected String start;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    protected String end;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Cca(String description, String start, String end) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Cca(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getStart() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getEnd() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTypeIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[CCA]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[CCA] \" + super.toString() + \"from \" + start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"to \" + end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Cca otherCca \u003d (Cca) obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.start.equals(otherCca.getStart())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.end.equals(otherCca.getEnd());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 18,
      "durianpancakes": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/CcaManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class CcaManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e cca;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public CcaManager(ArrayList\u003cEvent\u003e inputList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        cca \u003d inputList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcaList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return cca;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private int getCcaListSize() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return cca.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void addCca(String userInput) throws CcaEmptyStringException, CcaParamException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new CcaParamException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] ccaDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaDescription \u003d ccaDetails[1].substring(2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStartDate \u003d ccaDetails[2].substring(2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaEndDate \u003d ccaDetails[3].substring(2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (ccaDescription.equals(\"\") || ccaStartDate.equals(\"\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || ccaEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new CcaEmptyStringException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        cca.add(new Cca(ccaDescription, ccaStartDate, ccaEndDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this cca: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(cca.get(getCcaListSize() - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getCcaStatement();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void deleteCca(String[] userInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this cca: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(cca.get(ccaIndex - 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        cca.remove(ccaIndex - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getCcaStatement();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setCcaDone(String[] userInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex \u003d Integer.parseInt(userInput[2]) - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        cca.get(ccaIndex).setDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        System.out.println(cca.get(ccaIndex).getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getCcaStatement() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStatement \u003d getCcaListSize() \u003d\u003d 1 ? \" cca\" : \" ccas\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        System.out.println(\"Now you have \" + getCcaListSize() + ccaStatement + \" in the list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 62,
      "AndreWongZH": 2,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/Class.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class Class extends Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected String start;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected String end;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public Class(String description, String start, String end) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Class(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getStart() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getEnd() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTypeIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[CLASS]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[Class] \" + super.toString() + \"from \" + start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"to \" + end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Class otherClass \u003d (Class) obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.start.equals(otherClass.getStart())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.end.equals(otherClass.getEnd());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 28,
      "elizabethcwt": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/ClassManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class ClassManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ClassManager(ArrayList\u003cEvent\u003e inputList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        classes \u003d inputList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private int getClassListSize() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void addClass(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        final String[] classDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classDescription \u003d classDetails[1].substring(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStartDate \u003d classDetails[2].substring(2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classEndDate \u003d classDetails[3].substring(2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        classes.add(new Class(classDescription, classStartDate, classEndDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this class: \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        System.out.println(classes.get(getClassListSize() - 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void deleteClass(String[] userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int classIndex \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this class: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        System.out.println(classes.get(classIndex - 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        classes.remove(classIndex - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void getClassStatement() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStatement \u003d getClassListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        System.out.println(\"Now you have \" + getClassListSize() + classStatement + \" in the list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 2,
      "durianpancakes": 4,
      "elizabethcwt": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.event.EventManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.parser.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.parser.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String DATA_STRING \u003d \"data\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String FILE_STRING \u003d \"/events.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventManager eventManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static boolean active \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static void main(String[] args) throws InvalidValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        storageManager \u003d new StorageManager(DATA_STRING, FILE_STRING);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventManager \u003d new EventManager(storageManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        System.out.println(\"What can we do for you?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        while (active) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            CommandType commandType \u003d new CommandParser(line, eventManager).parseCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            checkIfProgramEnds(commandType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            refreshEvents();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        //Exit Message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        System.out.println(\"BYE BYE! SEE YOU NEXT TIME! :3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static void checkIfProgramEnds(CommandType commandType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            active \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static class InvalidHelpCommandException extends Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static void refreshEvents() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(eventManager.getCcaManager().getCcaList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(eventManager.getTestManager().getTestList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(eventManager.getClassManager().getClasses());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            storageManager.save(events, FILE_STRING);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"STORAGE: There was an error\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "untitle4": 3,
      "AndreWongZH": 23,
      "durianpancakes": 18,
      "-": 21,
      "elizabethcwt": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Event(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return (isDone ? \"[DONE]\" : \"[NOT DONE]\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return getStatus() + \" \" + description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Event otherEvent \u003d (Event) obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.description.equals(otherEvent.description)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.isDone \u003d\u003d otherEvent.isDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 9,
      "untitle4": 8,
      "durianpancakes": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/ListSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListSchedule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(\"List\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ListSchedule(ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas, ArrayList\u003cEvent\u003e tests) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns an array list of strings of all the classes, ccas and tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Array list of strings to be printed out."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyListException If there are no schedule at all."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getAllEventsPrinted() throws EmptyListException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"starting to convert events instance to strings\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (hasNoSchedule()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"schedule is empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyListException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveClasses()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting class events\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(\"Classes:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printArrayPaddedNumbers(printedEvents, classes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveCcas()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting CCA events\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(\"CCAs:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printArrayPaddedNumbers(printedEvents, ccas);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTests()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting test events\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(\"Tests:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printArrayPaddedNumbers(printedEvents, tests);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveClasses() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes.size() !\u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveCcas() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas.size() !\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTests() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests.size() !\u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean hasNoSchedule() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (!haveClasses() \u0026\u0026 !haveCcas() \u0026\u0026 !haveTests());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Converts event instances into strings representation padded with numbers."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * PrintedEvents cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * EventArr cannot be empty or null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param printedEvents Array list of strings to be printed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param eventArr Array list of event instances to be converted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void printArrayPaddedNumbers(ArrayList\u003cString\u003e printedEvents, ArrayList\u003cEvent\u003e eventArr) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert printedEvents !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert eventArr.size() !\u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArr.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(i + 1 + \". \" + eventArr.get(i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 87
    }
  },
  {
    "path": "src/main/java/seedu/duke/Test.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class Test extends Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    protected String start;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    protected String end;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Test(String description, String start, String end) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Test(String description, boolean isDone, String start, String end) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getStart() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getEnd() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTypeIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[TEST]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[TEST] \" + super.toString() + \"from \" + start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"to \" + end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Test otherTest \u003d (Test) obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.start.equals(otherTest.getStart())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.end.equals(otherTest.getEnd());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 17,
      "durianpancakes": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/TestManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class TestManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public TestManager(ArrayList\u003cEvent\u003e inputList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        test \u003d inputList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTestList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public int getTestListSize() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return test.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void addTest(String userInput) throws TestEmptyStringException, TestParamException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new TestParamException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInput.replaceAll(\"\\\\s+\",\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String[] testDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testDescription \u003d testDetails[1].substring(1).trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testStartDate \u003d testDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testEndDate \u003d testDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (testDescription.equals(\"\") || testStartDate.equals(\"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || testEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new TestEmptyStringException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        test.add(new Test(testDescription, testStartDate, testEndDate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this test:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        System.out.println(\"  \" + test.get(getTestListSize() - 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void deleteTest(String[] userInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((testNumber \u003c\u003d 0) || (testNumber \u003e\u003d getTestListSize())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        System.out.println(\"  \" + test.get(testNumber - 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        test.remove(testNumber - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void getTaskStatement() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((getTestListSize() - 1 \u003d\u003d 0) || (getTestListSize() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"Now you have \" + getTestListSize() + \" task in the list.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            System.out.println(\"Now you have \" + getTestListSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 69,
      "untitle4": 3,
      "AndreWongZH": 1,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/EventManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ClassManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.TestManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.CcaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ListSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static ClassManager classManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static TestManager testManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static CcaManager ccaManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager(StorageManager storageManager) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classManager \u003d new ClassManager(storageManager.getClassList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        testManager \u003d new TestManager(storageManager.getTestList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccaManager \u003d new CcaManager(storageManager.getCcaList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ClassManager getClassManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public TestManager getTestManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return testManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CcaManager getCcaManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccaManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void listSchedule() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ListSchedule listSchedule \u003d new ListSchedule("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                classManager.getClasses(), testManager.getTestList(), ccaManager.getCcaList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ArrayList\u003cString\u003e printedEvents \u003d listSchedule.getAllEventsPrinted();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printArray(printedEvents);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"Schedule is empty. Add some!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static void printArray(ArrayList\u003cString\u003e printedEvents) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert printedEvents !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (String line : printedEvents) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 51,
      "durianpancakes": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/CcaEmptyStringException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class CcaEmptyStringException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/CcaParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class CcaParamException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyListException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidValueException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 1,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TestEmptyStringException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class TestEmptyStringException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "untitle4": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TestParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class TestParamException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "untitle4": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.event.EventManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.Duke.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.CcaEmptyStringException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.CcaParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TEST \u003d \"test\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CCA \u003d \"cca\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int SUB_COMMAND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandParser(String userInput, EventManager eventManager) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        commandType \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType parseCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            extractCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            executeCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidHelpCommandException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"Oops! If you\u0027re trying to ask for help, simply enter \u0027help\u0027!\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"Oops! I did not recognize that command! Enter \u0027help\u0027 if needed!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void extractCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CLASS)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD_CLASS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_TEST)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD_TEST;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_ADD)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CCA)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD_CCA;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE_CLASS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_TEST)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE_TEST;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_DELETE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 separatedInputs[SUB_COMMAND_INDEX].equals(INPUT_SCHEDULE_CCA)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE_CCA;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_LIST)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.LIST;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (separatedInputs[MAIN_COMMAND_INDEX].equals(INPUT_BYE)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void executeCommand() throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            handleHelp(separatedInputs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD_CLASS:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.getClassManager().addClass(userInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD_CCA:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                eventManager.getCcaManager().addCca(userInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } catch (CcaEmptyStringException | CcaParamException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                System.out.println(\"OOPS!!! The description of a cca cannot be empty.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD_TEST:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                eventManager.getTestManager().addTest(userInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } catch (TestEmptyStringException | TestParamException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE_CLASS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.getClassManager().deleteClass(separatedInputs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE_CCA:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.getCcaManager().deleteCca(separatedInputs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE_TEST:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                eventManager.getTestManager().deleteTest(separatedInputs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.listSchedule();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static void handleHelp(String[] userInputs) throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (userInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            System.out.println(\"Hello! Here is a list of commands you can try:\\n\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"\\t1. Add class: add class /n [name of class] /s [start date-time of class] /e\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \" [end date-time of class]\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"\\t2. Delete class: delete class /n [class number]\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"\\t3. Add cca: add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"\\t4. Delete cca: type delete cca /n [cca number]\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"\\t5. Add test: type add test /n [name of test] /s [start date-time of test] /e \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"[end date-time of test]\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"\\t6. Delete test: type delete test /n [test number]\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    + \"\\t7. Delete all: delete all\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // \"\\n\\tPlease enter the date-time in the following format: YYYY-MM-DD [time in 24hr format]\\n\" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // \"\\te.g. 2020-08-19 1300\\n\\n);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 7,
      "untitle4": 4,
      "AndreWongZH": 120,
      "durianpancakes": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible commands available to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ADD_CLASS, ADD_CCA, ADD_TEST, DELETE_CLASS, DELETE_CCA, DELETE_TEST, BYE, LIST, HELP"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Cca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Class;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListDecoder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListDecoder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e decodeEventList(ArrayList\u003cString\u003e encodedEventList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final ArrayList\u003cEvent\u003e decodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String encodedEvent : encodedEventList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            decodedEvents.add(decodeEventFromString(encodedEvent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return decodedEvents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Event decodeEventFromString(String encodedEvent) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String[] data \u003d encodedEvent.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case \"[CCA]\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseCca(data);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case \"[CLASS]\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseClass(data);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case \"[TEST]\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTest(data);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Cca parseCca(String[] data) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Cca(description, isDone, start, end);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Class parseClass(String[] data) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Class(description, isDone, start, end);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Test parseTest(String[] data) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Test(description, isDone, start, end);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 74
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Cca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Class;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListEncoder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListEncoder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cString\u003e encodeEventList(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            encodedEvents.add(encodeEventToString(event));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return encodedEvents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String encodeEventToString(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (event instanceof Cca) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Cca cca \u003d (Cca) event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d cca.getTypeIcon() + \"|\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + cca.isDone() + \"|\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + cca.getDescription() + \"|\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + cca.getStart() + \"|\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + cca.getEnd();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof Test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Test test \u003d (Test) event;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d test.getTypeIcon() + \"|\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + test.isDone() + \"|\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + test.getDescription() + \"|\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + test.getStart() + \"|\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + test.getEnd();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof Class) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Class newClass \u003d (Class) event;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d newClass.getTypeIcon() + \"|\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newClass.isDone() + \"|\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newClass.getDescription() + \"|\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newClass.getStart() + \"|\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newClass.getEnd();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Cca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Class;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static String storage_directory_path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventListEncoder eventListEncoder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventListDecoder eventListDecoder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private File eventFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e eventList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e ccaList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e testList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e classList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public StorageManager(String directoryPath, String filePath) throws InvalidValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListEncoder \u003d new EventListEncoder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListDecoder \u003d new EventListDecoder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.ccaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.classList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        storage_directory_path \u003d new File(directoryPath).getAbsolutePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (!isFilePathValid(filePath)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new InvalidValueException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        initializeStorageManager(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcaList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return ccaList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTestList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return testList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClassList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return classList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void initializeStorageManager(String filePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        eventFile \u003d new File(storage_directory_path + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            boolean fileCreated \u003d createDataFile(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Scanner sc \u003d new Scanner(eventFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventList \u003d eventListDecoder.decodeEventList(data);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                separateEventsIntoList(eventList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"There was an error loading your files.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void separateEventsIntoList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (event instanceof Cca) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                ccaList.add(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof Class) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                classList.add(event);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof Test) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testList.add(event);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean isFilePathValid(String filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int filePathLength \u003d filePath.length();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (!filePath.substring(filePathLength - 4).equals(\".txt\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @SuppressWarnings(\"ResultOfMethodCallIgnored\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean createDataFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File file \u003d new File(storage_directory_path);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        file.mkdir();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        file \u003d new File(storage_directory_path + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return file.createNewFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void save(ArrayList\u003cEvent\u003e eventList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEventList \u003d eventListEncoder.encodeEventList(eventList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Files.write(Path.of(storage_directory_path + filePath), encodedEventList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 2,
      "durianpancakes": 111
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddTestJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void addTestToList() throws TestEmptyStringException, TestParamException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        TestManager testManager \u003d new TestManager(test);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        testManager.addTest(\"add test /n Math test \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 26-09-2020 1400 /e 26-09-2020 1500\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d testManager.getTestListSize();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 21,
      "untitle4": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestEmptyStringException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.TestParamException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteTestJUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void addTestToList() throws TestParamException, TestEmptyStringException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        TestManager testManager \u003d new TestManager(test);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        testManager.addTest(\"add test /n Math test \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 26-09-2020 1400 /e 26-09-2020 1500\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        testManager.addTest(\"add test /n Science test \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 23-09-2020 1600 /e 23-09-2020 1800\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"delete test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            testManager.deleteTest(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d testManager.getTestListSize();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 33,
      "untitle4": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/ListScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ListScheduleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getAllEventsPrinted_emptySchedule_expectException() throws EmptyListException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(EmptyListException.class, listSchedule::getAllEventsPrinted);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getAllEventsPrinted_classSchedule_classList() throws EmptyListException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new Class(\"Math \", \"26/2/2019 \", \"27/2/2019\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(classes, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getAllEventsPrinted();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes:\", \"1. [Class] [NOT DONE] Math from 26/2/2019 to 27/2/2019\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(InvalidValueException.class, () -\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                new StorageManager(\"test\", \"file\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                new StorageManager(\"test\", null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void load_validFormat() throws InvalidValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(\"test\", \"/ValidData.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertEquals(getEventList(), storageManager.getEventList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private ArrayList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new Cca(\"Basketball training \","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-21 1800 \","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-21 1900\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new Class(\"Math tuition \","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-22 1400 \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-09-22-1600\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new seedu.duke.Test(\"CS2113T Finals \","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-04 1500 \","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"2020-12-04 1600\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 3,
      "durianpancakes": 43
    }
  },
  {
    "path": "test/ValidData.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|Basketball training |2020-09-21 1800 |2020-09-21 1900"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CLASS]|false|Math tuition |2020-09-22 1400 |2020-09-22-1600"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|CS2113T Finals |2020-12-04 1500 |2020-12-04 1600"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 3
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "-": 1
    }
  }
]
