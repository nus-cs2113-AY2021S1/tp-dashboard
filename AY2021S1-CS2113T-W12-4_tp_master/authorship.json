[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-eventTest` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* A skeleton JUnit eventTest (`src/eventTest/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "-": 62
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    compile \"com.dorkbox:Notify:3.7\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 2,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Elizabeth | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jinran | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chan Xu Hui | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andre Wong | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alicia Ho | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "untitle4": 1,
      "AndreWongZH": 1,
      "durianpancakes": 1,
      "-": 4,
      "elizabethcwt": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Purpose"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This document describes the architecture and system design of Plan\u0026Score, which will evolve throughout future releases. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Each release will have an edition of the document, and the current edition of the document for the first public release is v2.0."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The goal of this document is to cover the high-level system architecture and design. This document is divided into three major parts: design, implementation, product proposition. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![diagram](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 1. Architecture Diagram"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The `Main` class is responsible for,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* At app launch: Initializes the main components in the correct sequence and read data from our data files"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* At shut down: Terminates the continuous loop and shut down the components"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "`Common` represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `UserInterface`: The user interface of the App."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Controller`: User input parser and command executor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Model`: Holds the data of the App in memory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The interaction between them is defined in an interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Exposes its functionality using a concrete {Component Name}Manager class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### UserInterface component"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![userinterfacecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/UserInterfaceComponent.png)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 2. Class Diagram of the UserInterface component"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: UserInterface.java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UserInterface component,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Prompts commands from the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Execute user commands using the Controller component."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Displays information based on changes to Model data."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Prints the user’s events of the week in a timetable format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This component uses the singleton design, meaning that there is only an instance required throughout the entire lifetime of the application, obtained with the following command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`UserInterface userInterface \u003d UserInterface.getInstance()`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Controller component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![controllercomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ControllerComponent.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 3. Class Diagram of the Controller component"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "API: ControlManager.java"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Controller component,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Receives user input from the user interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Extracts the command and model type from the user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Generate the required command from the CommandFactory.java class"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Extract the required model to be accessed and modified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Executes the command with the corresponding model."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Model component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![modelcomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ModelComponent.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 4. Class Diagram of the Model component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "API: Model.java"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Model component,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Holds all the in-memory data of type event, quiz and contact."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Each data type has a corresponding manager that the controller can interface with. This is named as \u003cdatatype\u003eManager.java."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* During a command execution, the manager will handle the modification and reading of its data type."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* After the execution, the corresponding output is then passed on to the User Interface component to be shown to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Storage component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![storagecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/StorageComponent.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 5. Class Diagram of the Storage component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: StorageManager.java"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Storage component,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Creates the necessary data files for the operation of Plan\u0026Score."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Reads encoded data from Plan\u0026Score’s data files."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Writes encoded data to Plan\u0026Score’s data files."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "There are 3 categories of data stored by Plan\u0026Score: `event`, `quiz` and `config`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Plan\u0026Score loads data automatically from .txt files in the `data` directory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Each `StorageManager` reads in their respective data files through a `decoder` and writes to the same file through an `encoder`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Event Storage"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![eventstorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/EventStorageManager.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Figure 6. Class Diagram of EventStorageManager"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: EventStorageManager.java"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`EventStorageManager` is responsible for the reading and writing of data from Plan\u0026Score’s `events.txt` file, located in the `{root}/data` directory."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It utilises a decoder (`EventListDecoder.java`) for the reading of data, and an encoder (`EventListEncoder.java`) for the writing of data. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "###### Reading events"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`EventListDecoder` is responsible for the decoding of data from `events.txt`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It returns an `EventParameter` to `EventStorageManager`. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![eventreadstorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/EventStorageReadSequence.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 7. Sequence Diagram of the reading of data"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "###### Writing events"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`EventListEncoder` is responsible for the creation of the encoded strings for `EventStorageManager` to write to `events.txt`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It returns a `String` to `EventStorageManager` for further writing. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![eventwritestorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/EventStorageSaveSequence.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 8. Sequence Diagram of the writing of data"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Quiz Storage"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: QuizStorageManager.java"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![quizwritestorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/QuizWriteStorage.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 9. Sequence Diagram of the writing of data"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![quizreadstorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/QuizReadStorage.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 10. Sequence Diagram of the reading of data"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Quiz Storage,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Checks existence of the quiz data file in the `data` directory. If the file does not exist, create a new data file for quiz storage."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `quizListEncoder` class to encode the ArrayList of type Quiz into its String representations and writes them into the quiz data file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `quizListDecoder` class to decode the String representations of quizzes in the quiz data file and add the quizzes back into the ArrayList of type Quiz."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Config Storage"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: ConfigStorageManager.java"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![configstoragecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ConfigStorage.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 11. Class Diagram of the ConfigStorageManager"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Config Storage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Checks existence of the config data file in the `data` directory. If the file does not exist, create a new data file for config storage."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `configEncoder` class to encode the String of user name, the integer number of recommended hours and finally, the boolean which checks if the program has run before. The encoded string is written into a config data file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `configDecoder` class to decode the String user name, the integer number of recommended hours and the boolean which checks if the program has run before from a config data file. The three variables are used to show a different welcome message."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Config Parameter,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Helps to store the String of user name, the integer number of recommended hours and finally, the boolean which checks if the program has run before."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Contents stored in the parameter are subsequently used by configEncoder to encode them into a string. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "---"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### User Interface"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The user interface of Plan\u0026Score uses the singleton design. There is only one instance of UserInterface to be used throughout the application. The API for the user interface is UserInterface.java."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Printing to user"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Instead of using the default method `System.out.println()` provided by Java to display messages to the user, use `showToUser(String …)` where multiple strings can be added into the arguments. Each string provided that is separated by `,` will be printed on the next line."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example input:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "String string1 \u003d \"Hello\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "String string2 \u003d \"How are you?\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "userInterface.showToUser(string1, string2);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "How are you?"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Code:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public void showToUser(String... message) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   for (String m : message) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "       out.println(m);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Printing arrays to user"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The method `printArray(ArrayList\u003cString\u003e stringArrayList)` is provided for the printing of any arraylists."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example input:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "ArrayList\u003cString\u003e stringArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "// Adding items into the stringArrayList"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "stringArrayList.add(\"Hello\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "stringArrayList.add(\"How are you?);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "// Obtaining user interface instance"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "userInterface.printArray(stringArrayList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "How are you?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Code:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public void printArray(ArrayList\u003cString\u003e stringArrayList) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   assert stringArrayList !\u003d null;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   for (String line : stringArrayList) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "       userInterface.showToUser(line);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Help feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![helpcomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/Help.png)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 12. Sequence Diagram of the help feature"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "When a user enters ‘help’, the input will be read in by the UI class."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UI class will then parse the user input into the ControlManager class, which calls the runLogic() method."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The extractCommand() method of the CommandParser class is then called, extracting and returning the command type based on the user’s input."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "In this case, the command type would be ‘help’."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The corresponding actionableCommand will be generated via the generateActionableCommand() method in the CommandFactory class."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Lastly, the execute() method in the HelpCommand class is called, which in turn calls its own handleHelp() method."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This displays the help message via the showToUser() method of the userInterface."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Add feature"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![addcomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/Add.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 13. Sequence Diagram of the add feature"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Firstly, when the user enters add .. /n .. /s .. /e .. , the input will be read in by the UI class."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UI class will then parse the user input into the ControlManager class where the command will be extracted and processed by the CommandParser class."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "According to which category they belong to i.e class,cca,test,tuition etc, they are sent to their respective category managers."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "In each manager, the user input is processed and made into a new Event item by the Event class."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The result is subsequently outputted by the UI class to the user. "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Delete feature"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![deletecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/DeleteFeatureDiagram.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 14. Sequence Diagram of the delete feature"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Firstly, when the user enters delete \u003cevent\u003e \u003cnumber\u003e, the input will be read in by the UI class."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UI class will then parse the user input into the ControlManager class where the command will be extracted and processed by the CommandParser class. The result is passed into ModelExtractor Class."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "According to which category they belong to i.e. class, cca, test, tuition etc, they are sent to their respective category managers. In each manager, the user input is processed and the Event item would be deleted by the Event class."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The result is subsequently outputted by the UI class to the user. "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### List feature"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### List contact / quiz"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![listcontact](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ListContact.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 15. Sequence diagram for listing quizzes"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The list command will invoke the `ContactManager` or `QuizManager` class’s list() method respectively."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If the ArrayList is empty, it will inform the user that there is no data to display."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The method will then loop through the ArrayList and convert it into its string representation."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### List event (\u003cdate\u003e / today / week)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "While the back-end data processing is the same for all three types of list requests, the list event week request requires a different front-end class to display to the user."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "As such, we divide this section into 2 sub-sections, with List event (\u003cdate\u003e/today) in the first subsection, and List event week in the next subsection."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The execution of the ListCommand will cause the `EventManager` class to invoke `EventManager#listSchedule()`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This will then create an instance of the `ListSchedule` class, with all the classes, ccas, tests and tuitions data"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "as its attributes."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### List event (\u003cdate\u003e / today)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![listevent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ListEvent.png)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 16. Sequence diagram for listing out events."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Inside this `EventManager#listSchedule()`, we then call the `ListSchedule#getPrintableEvents()` and this will start"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "to convert ArrayList of type Event into its corresponding `toString()` representation."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This is then padded with numbers and an ArrayList of type string is returned to `EventManager#listSchedule()`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Special parameters:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "In the case where the parameters passed in is ‘today’, the `ListSchedule#checkAndConvertToday()` will"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "check if the user passed in ‘today’ as a parameter."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If that is true, then it converts the userInput attribute to `LocalDate.now()`, which is the current date."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "When filtering the events to be converted, the start time of the event is compared with the parameter date."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If it is equal, the event will be converted and be printed out."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### List event week"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Inside this `EventManager#listSchedule()`, we then call the `UserInterface#printWeekSchedule(EventManager)`, passing in the current instance of EventManager into this method. "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`UserInterface#printWeekSchedule(EventManager)` will then construct an instance of `CalendarWeekRenderer(EventManager)` which will display the week schedule to the user."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "As of V2.0, the CalendarWeekRenderer does not support printing the location parameter of the Tuition class and is expected to be introduced in V2.1. "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example code snippet:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "userInterface.printWeekSchedule(this); // the EventManager instance is passed into the method call"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Find feature"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Find contact / quiz"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The find feature will invoke the `ContactManager` or `QuizManager` class’s find() method respectively."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Find event \u003ckeyword(s)\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The execution of FindCommand will cause the `EventManager` class to invoke `EventManager#findSchedule()`. Inside this `EventManager#findSchedule()`, it creates an instance of the `FindSchedule` class, with all the classes, ccas, tests and tuitions data as its attributes. "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We then call the `FindSchedule#getFilteredEvents()` and this will start to convert ArrayList of type Event into its corresponding `toString()` representation. An ArrayList of type String is returned to `EventManager#findSchedule()`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The diagram below shows the execution flow explained below."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![findevent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/FindEvent.png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 17. Sequence diagram for finding events."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Find quiz \u003ckeyword(s)\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The execution of FindCommand will cause the `QuizManager` class to create an instance of the `FindQuiz` class, with all the quizzes data as its attributes. "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We then call the `findQuiz#filterQuizzes()` and this will start to convert ArrayList of type Quiz into its corresponding `toString()` representation. An ArrayList of type String is returned to `QuizManager#find()`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The diagram below shows the execution flow explained below."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![findquiz](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/FindQuiz.png)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 18. Sequence diagram for finding quizzes."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Quiz feature"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Take quiz"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This execution of the quiz command will invoke the QuizManager class’s quiz() method."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The variable correctCounter will be initialized to be 0."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "If the input \u003cnumber\u003e is:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Less than 1 (including negative numbers), or"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "More than the total number of questions in the current quiz list,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "the program will inform the user that their input is invalid, and provide the range of questions the user can attempt."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "If the input is not an integer, the program will inform the user that their input is of the wrong format, and probe them to enter a value of integer type."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The method will then randomly select the input number of quiz questions in the quiz ArrayList and convert it into its string representation."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This is then passed to the UserInterface#printArray() to be printed out to the user."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "When each quiz question is printed, the user needs to input an answer to this question."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The input answer will then be compared to the answer of that quiz question."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "If the answers are the same, the variable correctCounter in QuizManager() will be incremented by 1. "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " Target User Profile:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Is a Primary 6 student with a packed schedule"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "One-stop application for Primary 6 students to plan their schedule and do revision tests at the same time."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|As a forgetful Primary 6 Student|to be able to remember all the classes I have in school|plan my class schedule accordingly|"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|to be able to remember all the extra-curricular activities I have in school |Plan my cca schedule accordingly. |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|to be able to remember all the tuition classes I have outside of school and remember the locations of my tuition centres  |Plan my tuition schedule accordingly and would not get lost. |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I have many class tests and examinations leading up to PSLE, and would like to keep track of all my upcoming test dates|I know the test dates in advance and can plan my revision schedule well.|"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I would like to list all my classes, extra-curricular activities, tuition classes and test dates|I can have a overview of what I schedules I have|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I would like to be able to remember all the commands used in this program|I do not need to refer to the user guide all the time|"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I would like to be able to remember all the commands used in this program|I do not need to refer to the user guide all the time|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v2.0|Primary 6 student|to remember the contact details of my teachers|I can contact them in case there is an emergency.|"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v2.0|Primary 6 student|to see the list of questions I have added|I can keep track of the questions I need.|"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v2.0|Primary 6 student|to practice via short and interactive online trivia|I can revise in an entertaining manner.|"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Should work on any Windows, Mac and Linux operating system with Java 11 installed."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Should update the storage every time a command changes the data."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Users should be able to view the output of their command within 10 seconds"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Accessing and loading of data should take less than 5 seconds when we have less than 10000 data entries."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Data entries "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "\tEvent, Quiz or contact data that are either in storage or in their respective Manager class"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Given below are instructions to test the app manually"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Adding of CCAs"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user that the model type is missing."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add cca`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user to include all /n /s and /e inputs."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add cca /n abc /s date1 /e date 2`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to enter a valid date time format."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add test /n Math test /s 2020-10-3 1300 /e 2020-10-3 1400`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user that cca has been added. Running `list event` command will show the added cca inside."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add test /n Math test /s 2020-10-3 1300 /e 2020-10-3 1000`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user that start time is later than end time."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Listing of events"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to list either event, quiz or contact"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Show a list of events and categorized into its event type. If there are no events, inform the user that the schedule is empty."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event 2020-10-3`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Show a  list of events that matches with the specified date. If no events that match, inform the user that the schedule is not found."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event date`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to enter a valid date time format."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event 2020-10-3 2pm`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user not to enter extra parameters."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Finding of contacts"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `find`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to find either event, quiz or contact"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list contact math`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Show a list of contacts that matches the keywords. If there are no contacts found , inform the user that the search has no result."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `find event`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Remind the user to include the keyword in the command."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `find testing`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform user that the program does not recognise the model."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Dealing with missing data files"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "There are two ways we use to define a missing file: "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "When the “data” directory in the project root directory is missing."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "When any of the critical data .txt files (i.e events.txt, quiz.txt) are missing from the “data” directory."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We can simulate this by deleting any of the critical data .txt file, or the “data” directory \tas a whole. "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Expected: The “data” directory as well as “event.txt“ and “quiz.txt” are recreated."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "However, any prior data stored will be lost. \t"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Dealing with corrupted data files"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We define a file to be corrupted when our decoders are unable to decode the data .txt files."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We can simulate this by changing the encoded text in the file. For example, a Class that has the follow parameters:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Description: Math tutorial"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "isDone: false"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Start: 2020-09-21 1500"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "End: 2020-09-21 1600"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "should be encoded as “[CLASS]|false|Math tutorial|2020-09-21 1500|2020-09-21 1600” in the events.txt file. "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Corrupted forms can be in the following forms, but not limited to:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "“[CLASS]|Math tutorial|2020-09-21 1500|2020-09-21 1600”: the isDone parameter is missing from the encoded string."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "“[CLASS]|false|Math tutorial|2020-09-21 1600”: one of the date-time parameter is missing from the encoded string"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "“[CLASS]+false+Math tutorial+2020-09-21 1500+2020-09-21 1600”: the parameter separator “+” is not recognized by our decoder."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Expected: the program will not be able to start, with the error message “): Storage file corrupted. Please delete your data directory and relaunch.” shown."
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 147,
      "durianpancakes": 339,
      "-": 25
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "# Plan\u0026Score"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "to plan and track their classes, CCAs and test dates."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This enables the students to remember their schedule, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [1. Introduction](#introduction)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [2. About this User Guide](#about-this-user-guide)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "- [3. How to user this User Guide](#how-to-use-this-user-guide)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [4. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [5. Commands](#commands)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Command Format](#command-format)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Category Types](#category-types)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [Help:](#viewing-help-help) `help`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [PLAN component of Plan\u0026Score](#plan-component-of-planscore)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Class Category](#category-class)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Add a class:](#adding-a-class-add-class) `add class`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Delete a task:](#deleting-a-class-delete-class) `delete class`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Cca Category](#category-cca)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Add a cca:](#adding-a-cca-add-cca) `add cca`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Delete a cca:](#deleting-a-cca-delete-cca) `delete cca`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Test Category](#category-test)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Add a test:](#adding-a-test-add-test) `add test`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Delete a test:](#deleting-a-test-delete-test) `delete test`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    - [Tuition Category](#category-tuition)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "      - [Add a tuition:](#adding-a-tuition-add-tuition) `add tuition`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "      - [Delete a tuition:](#deleting-a-tuition-delete-tuition) `delete tuition`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [List schedule:](#listing-out-schedule-list-event) `list event`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Find event:](#finding-an-event-find-event) `find event`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [SCORE component of Plan\u0026Score:](#score-component-of-planscore)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Take a quiz:](#taking-a-quiz-quiz)`quiz`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Add a quiz question:](#adding-a-quiz-question-add-quiz) `add quiz`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Delete a quiz question:](#deleting-a-quiz-question-delete-quiz) `delete quiz`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [List quiz questions:](#listing-out-all-quiz-questions-list-quiz) `list quiz`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Find a quiz by keyword:](#finding-a-quiz-find-quiz) `find quiz`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Search for former incorrect quiz questions:](#searching-for-former-incorrect-quiz-questions-quiz-record) `quiz record`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [Contact component of Plan\u0026Score:](#contact-component-of-planscore)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Add a contact:](#adding-a-contact-add-contact) `add contact`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Delete a contact:](#deleting-a-contact-delete-contact) `delete contact`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [List a contact:](#listing-out-contacts-list-contact) `list contact`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Find a contact:](#finding-a-contact-find-contact) `find contact`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  - [Exit the program:](#exits-program-bye) `bye`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [6. Saving Data](#saving-data)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [7. FAQ](#faq)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [8. Troubleshooting](#troubleshooting)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [9. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Plan\u0026Score is an application consisting of 2 key components:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Event scheduler"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Quiz component"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "and a sub-component:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Contact list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "These components aim to tackle the issue of poor planning and revision most Primary 6 students in Singapore face."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "This application uses a command line interface, meaning that you operate the application by typing commands into a Command Box."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![initialization](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/initialization.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Figure 1. The graphical user interface for Plan\u0026Score"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## About this User Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "This User Guide serves to provide an in-depth explanation of Plan\u0026Score’s usage and functionalities, as well as troubleshooting steps you can take if problems are encountered."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## How to use this User Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "To navigate to the contents of your desired feature, simply click on the hyperlinks provided in the contents page above."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The highlights and symbols used in this document are as follow:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![information](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/information.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![warning](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/warning.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "`Add class`  A grey highlight is used to denote text to be entered into the  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "           command line."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "1. Ensure that you have Java `11` or above installed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "2. Download the latest version of `Plan\u0026Score` from [here](https://github.com/AY2021S1-CS2113T-W12-4/tp/releases)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "3. Run the program by entering `java -jar plan.jar` in your terminal."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "4. You can exit the program by running `bye`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Command Format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* A command can contain multiple parameters."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "  * A `test` contains a `description`, `start` and `end`, where"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "  * `description`, `start` and `end` are parameters that make up a `test`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category Types"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* Plan\u0026Score has the following categories types: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  1. `event`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `class`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `cca`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `test`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `tuition`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "  2. `contact`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "  3. `quiz`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* The category type often follows after the command word (E.g `class` follows after `add` to form `add class`)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Shows all available commands that you can use"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Firstly, type ‘help’ in the command line as seen below, and press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![help1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/help1.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The output containing all the different commands is seen in the console."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![help2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/help2.png)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Hello! Here is a list of commands you can try:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t1. Add class: \u0027add class /n [name of class] /s [start date-time of class] /e [end date-time of class]\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t2. Delete class: \u0027delete class [class number]\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t3. Add cca: \u0027add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t4. Delete cca: \u0027delete cca [cca number]\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t5. Add test: \u0027add test /n [name of test] /s [start date-time of test] /e [end date-time of test]\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t6. Delete test: \u0027delete test [test number]\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t7. Add tuition: \u0027add tuition /n [name of tuition] /s [start date-time of tuition] /e start date-time of tuition] /l [location of tuition]\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t8. Delete tuition: \u0027delete tuition [tuition number]\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t9. List events (class, test, cca, tuition): \u0027list\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t10. Find relevant event(s): \u0027find [keyword(s)]\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t11. Add contact: \u0027add contact /s [subject] /n [name of contact person] /p [phone number] /e [email address]\u0027"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t12. Delete contact: \u0027delete contact [contact number]\u0027"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t13. List contact: \u0027list contact\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    14. Find contact: \u0027find contact [keyword(s)]\u0027"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t15. Take Mathematics quiz: \u0027quiz [no. of questions]\u0027"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t16. Add quiz question: \u0027add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3] /o4 [option 4] /a [option answer] /exp (explanation)\u0027"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t17. Delete quiz question: \u0027delete quiz [question number]\u0027"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t18. List quiz questions: \u0027list quiz\u0027"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t19. Find quiz questions: \u0027find quiz [keyword(s)]\u0027"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t20. Display former incorrect quiz question records: \u0027quiz record\u0027"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t21. Exit program: \u0027bye\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\tNOTE:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\t1. Please enter the date-time in the following format: YYYY-MM-DD [time in 24hr format]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\te.g. 2020-08-19 1300"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t2. For command 16 (Add quiz question), the \u0027explanation\u0027 field is OPTIONAL"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Plan component of Plan\u0026Score"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "It allows you to plan and track the following category types:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Class"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Cca"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Tuitions"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![indexinfo](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/indexinfo.png)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category: Class"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Adding a class: `add class`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to add a new class with a name, date and time."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Firstly, type `add` in the command line as seen below, followed by the category type which is the class. Afterwards, key in the description of the class as well as its start and end date and time. Press `Enter` to execute it."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![addclass1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/addclass1.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![addclass2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/addclass2.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `add class /n [name of class] /s [start date-time of class] /e [end date-time of class]`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[name of class]` can be in a natural language format and"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "cannot contain \u0027/\u0027. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[start date-time of class]` and `[end date-time of class]` must be in"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "yyyy-mm-dd HHMM format with HHMM in 24-hour format."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![invalid date](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_class_invalid_date_given.PNG)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `add class /n Math /s 2020-08-19 1300 /e 2020-08-19 1400`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Got it. I\u0027ve added this class:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       [CLASS] Math from 19th August 2020, 01:00 pm to 19th August 2020, 02:00 pm"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Now you have 1 class in the list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Deleting a class: `delete class`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to delete a class based on its index in the list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `delete class [class number]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[class number]` must be written in numerals."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `delete class 1`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Noted. I\u0027ve removed this class:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       [CLASS] Math from 19th August 2020, 01:00 pm to 19th August 2020, 02:00 pm"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Now you have 0 classes in the list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category: Cca"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Adding a cca: `add cca`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allow you to add a new cca with a name, date and time."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `add cca /n Basketball training /s 2020-09-19 1900 /e 2020-09-19 2100`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Got it. I\u0027ve added this cca:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [CCA] Basketball training from 19th September 2020, 07:00 pm to 19th September 2020, 09:00 pm"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Now you have 1 cca in the list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "untitle4"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Deleting a cca: `delete cca`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to delete a cca based on its index in the list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `delete cca [cca number]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[cca number]` must be written in numerals."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `delete cca 1`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Noted. I\u0027ve removed this cca:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [CCA] Basketball training from 19th September 2020, 07:00 pm to 19th September 2020, 09:00 pm"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Now you have 0 ccas in the list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "untitle4"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category: Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Adding a test: `add test`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to add a new test with a name, date and time."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `add test /n [name of test] /s [start date-time of test] /e [end date-time of test]`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `add test /n Math test /s 2020-10-3 1300 /e 2020-10-3 1400`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Got it. I\u0027ve added this test:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [TEST] Math test from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Now you have 1 test in the list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Deleting a test: `delete test`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Allows you to delete a test event based on its index in the list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `delete test [test number]`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `[test number]` must be written in numerals."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `delete test 1`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Noted. I\u0027ve removed this test:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [TEST] Math test from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Now you have 0 tests in the list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Category: Tuition"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Adding a tuition: `add tuition`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Allows you to add a new test with a name, date, time, location."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `add tuition /n [name of tuition] /s [start date-time of test] /e [end date-time of test] /l [location of tuition]`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Examples: `add test /n Math test /s 2020-10-3 1300 /e 2020-10-3 1400 /l home`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Got it. I\u0027ve added this test:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   [TUITION] Math test from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm at home"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Now you have 1 tuition in the list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Deleting a tuition: `delete tuition`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Allows you to delete a tuition based on its index in the list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `delete tuition [tuition number]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `[tuition number]` must be written in numerals."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Examples: `delete tuition 1`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Noted. I\u0027ve removed this tuition:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   [TUITION] Math tuition from 3rd October 2020, 01:00 pm to 3rd October 2020, 02:00 pm at home"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Now you have 0 tuitions in the list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Listing out schedule: `list event`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to list out the entire schedule for classes, ccas and tests."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "You can also choose to list today\u0027s schedule, the schedule"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "for the week or the schedule for a specific date."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `list event`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "   Classes:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   1. [CLASS] Math from 19th Aug, 01:00 PM to 19th Aug , 02:00 PM"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   2. [CLASS] Science from 19th Aug, 03:00 PM to 19th Aug , 04:00 PM"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "   "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "   CCA:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   1. [CCA] Frisbee from 19th Sep, 06:00 PM to 19th Sep, 07:00 PM"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   2. [CCA] Basketball Camp from 21st Sep, 01:00 PM to 22nd Sep, 03:00 PM"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "   Test:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   1. [TEST] Math from 26th Sep, 11:00 AM to 26th Sep, 12:00 PM"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "```"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `list event today`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output: For date, 2020-08-19"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "```   Classes:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       1. [CLASS] Math from 19th Aug, 01:00 PM to 19th Aug , 02:00 PM"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       2. [CLASS] Science from 19th Aug, 03:00 PM to 19th Aug , 04:00 PM"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "       "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "       CCA:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       1. [CCA] Frisbee from 19th Aug, 06:00 PM to 19th Aug, 07:00 PM"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "      "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "       Test:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       1. [TEST] Math from 19th Aug, 11:00 AM to 19th Aug, 12:00 PM"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "```"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `list event week`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output: For a particular week, 2020-10-19 to 2020-10-25"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "```"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "TUESDAY:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "1. [CCA] Basketball from 20th Oct 2020 , 01:00 pm to 21st Oct 2020 , 02:00 pm"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WEDNESDAY:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "1. [TEST] English from 21st Oct 2020 , 02:00 pm to 21st Oct 2020 , 03:00 pm  "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `list event [date]`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output: For date, 2020-08-19"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```   Classes:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       1. [CLASS] Math from 19th Aug, 01:00 PM to 19th Aug , 02:00 PM"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       2. [CLASS] Science from 19th Aug, 03:00 PM to 19th Aug , 04:00 PM"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       CCA:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       1. [CCA] Frisbee from 19th Aug, 06:00 PM to 19th Aug, 07:00 PM"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "      "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       Test:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "       1. [TEST] Math from 19th Aug, 11:00 AM to 19th Aug, 12:00 PM"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Finding an event: `find event`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to look for classes, ccas and tests and tuitions that match your given keyphrase."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "In the case when you have many events in your schedule and you need to find a specific event to check the date. You can use the `find event` command to look for the event you want by entering keywords related to it."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Let\u0027s say we need to find out when my vocabulary test is on."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "We can first type `find event vocabulary` into the command box, and press Enter to execute it."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![find1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find1.JPG)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The output can then be seen in the console."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![find2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find2.JPG)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "And we can find the date we are looking for over here."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![find3](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find3.JPG)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find%20note.jpg\" width\u003d\"500\"  alt\u003d\"findnote\"/\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `find event [KEYPHRASE]`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `find event math`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [CLASS] Math from 19th Aug, 01:00 PM to 19th Aug , 02:00 PM"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [TEST] Math from 26th Sep, 11:00 AM to 26th Sep, 12:00 PM"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Score component of Plan\u0026Score"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Enables the following category type:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "quiz"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The quiz feature enables you to spend the extra time resulting from your productive scheduling to hone your Mathematics for your upcoming PSLE."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Taking a Quiz: `quiz`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Taking a Mathematics quiz with any number of questions you want, ranging from just 1 question to the total number of questions in the quiz list."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `quiz [number of questions]`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `quiz 15`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Question 1: What is 1 + 1?"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (1) 0"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (2) 1"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (3) 2"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (4) 3"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    ... 14 more questions in the same format once you enter your answer for each question ..."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Adding a Quiz Question: `add quiz`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to add a Mathematic multiple-choice quiz question to the quiz list."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Note that the `/e (explanation)` is an optional parameter. You can add a quiz question with or without an explanation."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3] /o4 [option 4] /a [option answer]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/e (explanation)`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `add quiz /q What is 1+1? /o1 0 /o2 1 /o3 2 /o4 3 /a 3`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Quiz question added!"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Deleting a Quiz Question: `delete quiz`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to delete a quiz question from the quiz list."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `delete quiz [quiz question]`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `delete quiz 11`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Noted. I\u0027ve removed this quiz question:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    What is 1+1?"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (1) 0"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (2) 1"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (3) 2"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (4) 3"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Now you have 10 quizzes in the quiz list."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Listing out All Quiz Questions: `list quiz`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to list out all the questions in the quiz list."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `list quiz`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Here are the questions in your quiz list:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Question 1:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1+1\u003d?"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (1) 1"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (2) 2"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (3) 3"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (4) 4"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Explanation: one plus one must be equal to two!"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Question 2:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1+1\u003d?"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (1) 1"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (2) 2"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (3) 3"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (4) 4"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Finding a quiz: `find quiz`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Look for quizzes that match the given keyword(s) that you want."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Note that searches are case-insensitive and user can provide multiple words to compare with"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `find quiz [keyword(s)]`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `find quiz 1+1`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Question 1:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1+1\u003d?"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (1) 1"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (2) 2"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (3) 3"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (4) 4"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Explanation: one plus one must be equal to two!"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Question 2:"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1+1\u003d?"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (1) 1"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (2) 2"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (3) 3"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (4) 4"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Searching for former incorrect quiz questions: `quiz record`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to list out the incorrect quizzes in your last quiz attempt."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `record quiz`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Here are the incorrect quizzes in your last quiz attempt:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    1+1\u003d?"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (1) 1"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (2) 2"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (3) 3"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    (4) 4"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Your answer: (1)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    Correct answer: (2)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Contact component of Plan\u0026Score"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Note that our current implementation of contact does not store the contact details in any file storage."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This will come in version 2.1."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Adding a contact `add contact`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Allows you to add a teacher\u0027s contact details to the contact list."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `add contact /s [subject] /n [name of contact person] /p [phone number] /e [email address]`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `add contact /s math /n thomas /p 91779977 /e thomas@gmail.com`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Got it. I\u0027ve added this contact: "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    math teacher: thomas"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Phone number: 91779977"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    email address: thomas@gmail.com"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Now you have 1 contact in your list."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Deleting a contact `delete contact`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Allows you to delete a contact from the contact list."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `delete contact [contact list number]`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `delete contact 1`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Noted. I\u0027ve removed this contact: "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    math teacher: thomas"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Phone number: 91779977"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    email address: thomas@gmail.com"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Now you have 0 contact in your list."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Listing out contacts `list contact`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Allows you to list out all the contacts in the contact list"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `list contact`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Contact 1:"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    math teacher: thomas"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Phone number: 91779977"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    email address: thomas@gmail.com"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Finding a contact `find contact`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Look for contacts that match the given keywords you want."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Format: `find contact [keyword(s)]`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Examples: `find contact math`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    math teacher: thomas"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    Phone number: 91779977"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    email address: thomas@gmail.com"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Exits Program: `bye`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Exits the program once you have finished using it."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "```"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "BYE BYE! SEE YOU NEXT TIME! :3"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "```"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## Saving Data"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Plan\u0026Score saves all your data automatically after every command. There is no need to save manually."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "**A**: We recommend you to transfer the entire folder containing plan.jar and the `data` directory. Then, follow instructions given in our `Quick Start` section to set up Plan\u0026Score."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "## Troubleshooting"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "**Q**: Plan\u0026Score is unable to start. How can I fix this?"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "**A**: Your data files might have been corrupted. To fix this, you can attempt the following steps:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "**We recommend adult supervision for this process.**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Locate the `data` directory. It should be in the same directory as where Plan\u0026Score is located."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Open the `events.txt` file."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Check if any of the data are violating our decoding formats:"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  * For class/cca/test, the format should be: `[IDENTIFIER]|[true/false]|[DESCRIPTION]|[DATE IN YYYY-MM-DD HHMM]|[DATE IN YYYY-MM-DD HHMM]`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  * For tuition, the format should be: `[IDENTIFIER]|[true/false]|[DESCRIPTION]|[DATE IN YYYY-MM-DD HHMM]|[DATE IN YYYY-MM-DD HHMM]|location`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Edit the file to the correct formats shown above"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Launch Plan\u0026Score"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Confirm that Plan\u0026Score runs without any error"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "In the unfortunate event where the error persists, please reset Plan\u0026Score to factory settings."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We recommend keeping a duplicate of the contents in `events.txt` to assist with the re-adding of events."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Ensure you have duplicated `events.txt`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Delete `events.txt`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Launch Plan\u0026Score"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Confirm that Plan\u0026Score runs without any error"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. `events.txt` should appear in the `data` directory"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Copy any unaffected events from the duplicated file in Step 1"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Re-add affected events through the command line interface"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "-------|--------|--------"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "help|`help`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "add|`add [category] /n [description] /s [start-date-time] /e [end date-time]` `add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3] /o4 [option 4] /a [option answer] /e (explanation)` `add contact /s [subject] /n [name of contact person] /p [phone number] /e [email address]`|`add class /n Math /s 2020-09-06 1300 /e 2020-09-06 1400`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "delete|`delete [category] [item number]`|`delete class 1`, `delete test 1`, `delete cca 1`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "quiz|`quiz [no of questions]`|`quiz 15`"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "list| `list quiz` `list event (date)` `list contact`|`list event (\u003cdate/today/week\u003e)`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Find|`find event [keyword(s)]` `find quiz [keyword(s)]` `find contact [keyword(s)]`|`find event English`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "bye|`bye`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 49,
      "untitle4": 18,
      "AndreWongZH": 210,
      "durianpancakes": 70,
      "-": 34,
      "elizabethcwt": 362
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.ConfigStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String EVENT_FILE_NAME \u003d \"/events.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String QUIZ_FILE_NAME \u003d \"/quiz.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String CONFIG_FILE_NAME \u003d \"/config.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventStorageManager eventStorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizStorageManager quizStorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private final ConfigStorageManager configStorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private final ConfigParameter configParameter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static UserInterface userInterface;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean active;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Duke() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventStorageManager \u003d new EventStorageManager(EVENT_FILE_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        quizStorageManager \u003d new QuizStorageManager(QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        configStorageManager \u003d new ConfigStorageManager(CONFIG_FILE_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        configParameter \u003d configStorageManager.loadData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        active \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ContactManager contactManager \u003d new ContactManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizStorageManager.loadData());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventParameter eventParameter \u003d eventStorageManager.loadData();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventManager eventManager \u003d new EventManager(eventParameter, configParameter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        model \u003d new Model(eventManager, contactManager, quizManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            new Duke().run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (StorageCorruptedException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_CORRUPTED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void run() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getIntroductoryVariables(configParameter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        configStorageManager.saveData(configParameter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInterface.showWelcomeMessage(configParameter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        while (active) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            active \u003d userInterface.runUI(model, eventStorageManager, quizStorageManager);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        // Exit Message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_BYE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private ConfigParameter getIntroductoryVariables(ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (configParameter.getHasProgramRan() \u003d\u003d false) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_PROMPT_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            String userName \u003d userInterface.getUserCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter.setName(userName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_HELLO + userName, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            int recommendedHours;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_PROMPT_HOURS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                recommendedHours \u003d Integer.parseInt(userInterface.getUserCommand());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } while (recommendedHours \u003c\u003d 0 || recommendedHours \u003e 12);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter.setRecommendedHours(recommendedHours);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter.setHasProgramRan(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return configParameter;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 32,
      "untitle4": 2,
      "AndreWongZH": 25,
      "durianpancakes": 17,
      "-": 11,
      "elizabethcwt": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/LogManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the objects that logs all the processes of the program at each step."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class LogManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String LOG_FILE_LOCATION \u003d \"./logfile.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static LogManager logManager \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"log\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * The constructor here is only called once when program runs to initialize a new LogManager instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private LogManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(LOG_FILE_LOCATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // set log level, defaults to Level.INFO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // prevents printing of log messages to console"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // redirects log messages to a file instead"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INITIALIZATION_LOGGER_FAILED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns an instance of the LogManager class for users to get the logger instance."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return LogManager instance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static LogManager getLogManagerInstance() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (logManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logManager \u003d new LogManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return logManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns a logger instance that the programmer can use to log process info."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A logger instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Logger getLogger() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return LOGGER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 61,
      "durianpancakes": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Intro related messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \" ------   -                          -----\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|   _  | | |                        | ____|\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  | | | | |                        | |___\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  |_| | | |  -----     -----    \u0026  |____ |  ------   -----   -----   -----\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|      | | | /  -  \\\\   |  _  |          | | | _____| /  -  \\\\ /  ___\\\\ /  -- \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  ----  | | | | | |   | | | |       ___| | | |      | | | | | /     |  ___|\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"| |      | | | |_|  \\\\  | | | |      |     | | |____  | |_| | | |     | |____\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|_|      |_| \\\\____/\\\\_\\\\ |_| |_|      |_____| |______| \\\\_____/ |_|     \\\\_____/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO_FROM_DUKE \u003d \"Hello from\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + Messages.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_NAME \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_PROMPT_HOURS \u003d \"Key in the number of hours you would like \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"to study each day (not more than 12)?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_SHOW_HOURS \u003d \"This is your recommended hours per day: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO \u003d \"Hello \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_COMMAND \u003d \"What can we do for you? \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"(Enter \u0027help\u0027 for the list of available commands!)\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_EMPTY_SCHEDULE_LIST \u003d \"Schedule is %s. Add some!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // General error messages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_READ_ERROR \u003d \"There was an error loading your files.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_INITIALIZATION_ERROR \u003d \"STORAGE: There was an error\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_CORRUPTED \u003d \"): Storage file corrupted. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please delete your data directory and relaunch.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_LIST_PARAMETERS \u003d \"Please tell me what you want to be listed! \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"You can either \u0027list event\u0027 or \u0027list quiz\u0027 or \u0027list contact\u0027\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_INITIALIZATION_LOGGER_FAILED \u003d \"Failed to set up logger\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_MISSING_MODEL \u003d \":( Oops! Model type is missing! \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            + \"Enter \u0027help\u0027 if needed!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_FIND_PARAMETERS \u003d \"Please tell me what you want to be listed! \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            + \"You can either \u0027find event\u0027 or \u0027find quiz\u0027 or \u0027find contact\u0027\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Remember to include ALL %s inputs!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_EMPTY_PARAMETERS \u003d \":( OOPS!!! Ensure ALL parameters are filled up!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_LIST_INVALID_DATE \u003d \":( OOPS!!! Please enter today/week/valid date\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"and time in format yyyy-mm-dd!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please enter valid date and time in format yyyy-mm-dd HHMM!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \":( Oops! I did not recognize that command! \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Enter \u0027help\u0027 if needed!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_MODEL \u003d \":( Oops! I did not recognize that model type! \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Enter \u0027help\u0027 if needed!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_LIST_EXTRA_PARAM \u003d \":( OOPS!!! Please do not enter extra inputs\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from CalendarWeekRenderer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MONDAY_LABEL \u003d \"[MON]\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUESDAY_LABEL \u003d \"[TUE]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_WEDNESDAY_LABEL \u003d \"[WED]\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_THURSDAY_LABEL \u003d \"[THU]\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_FRIDAY_LABEL \u003d \"[FRI]\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SATURDAY_LABEL \u003d \"[SAT]\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SUNDAY_LABEL \u003d \"[SUN]\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    // Messages from Contact related classes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this contact: \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this contact: \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate in NUMERALS, which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTACT_INDEX \u003d \":( OOPS!!! Please indicate a valid contact index!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_EMPTY_CONTACT_LIST \u003d \"Contact list is empty. Add some!!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Messages from Class related classes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this class: \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this class: \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this class as done:\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS_INDEX \u003d \":( OOPS!!! Please indicate a valid class index!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    // Messages from Cca related classes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this cca: \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this cca: \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this cca as done:\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_INVALID_CCA_INDEX \u003d \":( OOPS!!! Please indicate a valid cca index!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    // Messages from Test related classes"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this test: \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this test: \";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this test as done:\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_INVALID_TEST_INDEX \u003d \":( OOPS!!! Please indicate a valid test index!\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Tuition related classes"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_SUFFIX \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 suffixes!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_INPUT \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 inputs!\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this tuition: \";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this tuition: \";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this tuition as done:\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_TUITION_INDEX \u003d \":( OOPS!!! Please indicate a valid tuition index!\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Messages from Quiz related classes"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! Please indicate in NUMERALS, \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"which quiz you\u0027d like to delete!\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_HELP_COMMAND \u003d \":( OOPS!!! Are you trying to take a quiz or add/delete a\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" quiz question? Enter \u0027help\u0027 to check the correct format!\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_EMPTY_QUIZ_LIST \u003d \"Quiz list is empty. Add some!\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_INDEX_OUT_OF_BOUND \u003d \"There is not such a question in your quiz list!\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static String invalid_number_of_quiz_questions_message(int size) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return \":( OOPS!!! Please enter a valid number of quiz questions to attempt! (1~\" + size + \")\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_MISSING_QUIZ_PARAM \u003d \"Please indicate the command you would like to apply on\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" quiz!\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_NON_NUMBER \u003d \"Please enter a valid number or \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"enter \u0027quiz record\u0027 to see your incorrect questions in your previous quiz!\\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static String print_quiz_score(int correctCounter, int noOfQues) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return \"You scored \" + correctCounter + \" out of \" + noOfQues + \"!\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"Scroll up to review your quiz.\\n\\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Hello! Here is a list of commands you can try:\\n\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t1. Add class: \u0027add class /n [name of class] /s [start date-time of class] /e\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" [end date-time of class]\u0027\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t2. Delete class: \u0027delete class [class number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t3. Add cca: \u0027add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]\u0027\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t4. Delete cca: \u0027delete cca [cca number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t5. Add test: \u0027add test /n [name of test] /s [start date-time of test] /e \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"[end date-time of test]\u0027\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t6. Delete test: \u0027delete test [test number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t7. Add tuition: \u0027add tuition /n [name of tuition] /s [start date-time of tuition] /e \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"start date-time of tuition] /l [location of tuition]\u0027\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t8. Delete tuition: \u0027delete tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t9. List events (class, test, cca, tuition): \u0027list\u0027\\n\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t10. Find relevant event(s): \u0027find [keyword(s)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t11. Add contact: \u0027add contact /sub [subject] /n [name of contact person] /hp [phone number]\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" /e [email address]\u0027\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t12. Delete contact: \u0027delete contact [contact number]\u0027\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t13. List contact: \u0027list contact\u0027\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t14. Find contact: \u0027find contact [keyword(s)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t15. Take Mathematics quiz: \u0027quiz [no. of questions]\u0027\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t16. Add quiz question: \u0027add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3]\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" /o4 [option 4] /a [option answer] /exp (explanation)\u0027\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t17. Delete quiz question: \u0027delete quiz [question number]\u0027\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t18. List quiz questions: \u0027list quiz\u0027\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t19. Find quiz questions: \u0027find quiz [keyword(s)]\u0027\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t20. Display former incorrect quiz question records: \u0027quiz record\u0027\\n\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t21. Exit program: \u0027bye\u0027\\n\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\n\\tNOTE:\\n\\t1. Please enter the date-time in the following format: YYYY-MM-DD \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"[time in 24hr format]\\n\\te.g. 2020-08-19 1300\\n\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t2. For command 16 (Add quiz question), the \u0027explanation\u0027 field is OPTIONAL\\n\\n\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"BYE BYE! SEE YOU NEXT TIME! :3\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_EXTRA_HELP_PARAM \u003d \"OOPS! Were you trying to ask for help? Just enter \u0027help\u0027!\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_NO_EVENTS_FOUND \u003d \"Sorry but your searches yield no results!\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_NO_QUIZZES_FOUND \u003d \"Sorry but there is not such a quiz in your list!\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 18,
      "untitle4": 26,
      "AndreWongZH": 7,
      "durianpancakes": 57,
      "elizabethcwt": 94
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/ControlManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.controller.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.controller.command.CommandFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelExtractor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteFindCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingModelException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Manages the parsing of commands and models and the execution of commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ControlManager {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventStorageManager eventStorageManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizStorageManager quizStorageManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ControlManager(String userInput, Model model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                          EventStorageManager eventStorageManager, QuizStorageManager quizStorageManager) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput !\u003d null : \"ControlManager must not accept null userInput\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventStorageManager \u003d eventStorageManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizStorageManager \u003d quizStorageManager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Executes generated command class with a model."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return CommandType back to user interface to determine if program exits."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType runLogic() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType modelType \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain dataModel \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"Running controller logic now\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"Extracting command\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d new CommandParser(userInput).extractCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            final Command actionableCommand \u003d new CommandFactory(commandType, userInput).generateActionableCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"User terminates program\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return commandType;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // Only extract model for certain commands(add, delete, list, find, quiz, done)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (doesRequireModel(commandType)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Extracting model\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                modelType \u003d new ModelParser(userInput).extractModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dataModel \u003d new ModelExtractor(model, modelType).retrieveModel();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            checkInvalidModels(commandType, modelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"Executing command\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            actionableCommand.execute(dataModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidHelpCommandException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EXTRA_HELP_PARAM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidModelException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_MODEL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (MissingParameterException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(String.format(Messages.MESSAGE_MISSING_PARAMETERS, e.getMessage()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyParameterException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_PARAMETERS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IncompleteListCommandException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INCOMPLETE_LIST_PARAMETERS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (MissingModelException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_MISSING_MODEL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IncompleteFindCommandException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INCOMPLETE_FIND_PARAMETERS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            refreshEvents();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            refreshQuizzes();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if user entered an invalid model after the command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Commands such as add, delete and done cannot be paired with a model type event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param commandType Command Type to be checked."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param modelType Model Type to be compared against."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If add, delete or done is followed after event model."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void checkInvalidModels(CommandType commandType, ModelType modelType) throws InvalidModelException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if ((commandType \u003d\u003d CommandType.ADD || commandType \u003d\u003d CommandType.DELETE || commandType \u003d\u003d CommandType.DONE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 modelType \u003d\u003d ModelType.EVENT) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if a modelType is required to be extracted out."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Help and Bye command need not require any model."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param commandType The command type to be checked."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Boolean to inform a need for model extraction."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean doesRequireModel(CommandType commandType) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isAdd \u003d commandType \u003d\u003d CommandType.ADD;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isDelete \u003d commandType \u003d\u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isDone \u003d commandType \u003d\u003d CommandType.DONE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isList \u003d commandType \u003d\u003d CommandType.LIST;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isFind \u003d commandType \u003d\u003d CommandType.FIND;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isQuiz \u003d commandType \u003d\u003d CommandType.QUIZ;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return isAdd || isDelete || isDone || isList || isFind || isQuiz;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void refreshEvents() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getCcaManager().getCcas());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getTestManager().getTests());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getClassManager().getClasses());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getTuitionManager().getTuitions());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventStorageManager.saveData(events);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void refreshQuizzes() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d model.getQuizManager().getQuizList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            quizStorageManager.saveData(quizzes, Duke.QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "AndreWongZH": 131,
      "durianpancakes": 36,
      "elizabethcwt": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for adding a class, cca, test, tuition, quiz and contact."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public AddCommand(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelManager modelManager \u003d (ModelManager) modelMain;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelManager.add(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteFindCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the base of all command types."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected final String userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Runs if the execution requires passing the user input to the model."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput String given from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected Command(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public abstract void execute(ModelMain modelMain) throws InvalidHelpCommandException,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EmptyParameterException, MissingParameterException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            IncompleteListCommandException, IncompleteFindCommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 1,
      "AndreWongZH": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/CommandFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a generator that returns the corresponding Command class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * based on the commandType."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandFactory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandFactory(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert commandType !\u003d null : \"commandType must not be null\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns a Command class back to the ControlManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * based on the commandType."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Command class which is to be executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Command generateActionableCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new HelpCommand(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new ListCommand(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new FindCommand(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new QuizCommand(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // bye does not have a corresponding Command class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            assert false : \"all commandType should be handled\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for deleting a class, cca, test, tuition, quiz and contact."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelManager modelManager \u003d (ModelManager) modelMain;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelManager.delete(userInput.split(INPUT_SPACE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for setting class, cca, test and tuition to be done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventDataManager eventDataModel \u003d (EventDataManager) modelMain;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventDataModel.setDone(userInput.split(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteFindCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for searching via event description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws MissingParameterException, IncompleteFindCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new IncompleteFindCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain instanceof EventManager) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EventManager eventManager \u003d (EventManager) modelMain;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.find(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof QuizManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizManager.find(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof ContactManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ContactManager contactManager \u003d (ContactManager) modelMain;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            contactManager.find(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003ehandleHelp()\u003c/h2\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints out all available features users can use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception InvalidHelpCommandException to inform the user if their help input is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void handleHelp() throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String[] userInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (userInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"printing out all features users can use\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_HELP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid help command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 25,
      "elizabethcwt": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for listing events, quizzes and contacts."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ListCommand(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws IncompleteListCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new IncompleteListCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain instanceof EventManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EventManager eventManager \u003d (EventManager) modelMain;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.list(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof QuizManager) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizManager.list();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof ContactManager) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ContactManager contactManager \u003d (ContactManager) modelMain;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            contactManager.list();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 35
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/QuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static seedu.duke.common.Messages.MESSAGE_MISSING_QUIZ_PARAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static seedu.duke.common.Messages.MESSAGE_QUIZ_NON_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public QuizCommand(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(INPUT_SPACE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (separatedInputs[1].equals(\"record\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                quizManager.recordedQuizzes();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                quizManager.checkQuizSizeValidity(separatedInputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            System.out.println(MESSAGE_MISSING_QUIZ_PARAM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            System.out.println(MESSAGE_QUIZ_NON_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 14,
      "AndreWongZH": 8,
      "elizabethcwt": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingModelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the process of extracting out the commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACES \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int LENGTH_SINGLE_WORD \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandParser(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(INPUT_SPACES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        commandType \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if the first word in the input string matches any command word."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If it contains any command word, returns the respective commandType."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return CommandType corresponding to the command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidCommandException If no command word matches the first word."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType extractCommand() throws InvalidCommandException, MissingModelException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting command now...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[MAIN_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_ADD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new MissingModelException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DELETE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new MissingModelException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DONE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new MissingModelException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DONE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_LIST:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.LIST;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_BYE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_HELP:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_FIND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.FIND;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_QUIZ:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.QUIZ;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 87
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible commands available to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ADD, DELETE, DONE, HELP, LIST, BYE, QUIZ, FIND"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "//@@author Aliciaho"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * To configure the Date and Time of the events from yyyy-mm-dd HHMM format to dd suffix mm yyyy, hh:mm aa format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Get the suffix for each day."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * ref to: https://stackoverflow.com/questions/4011075/how-do-you-format-the-day-of-the-month-to-say-11th-21st-or-23rd-ordinal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param day day number of the month"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return respective suffix for the day inputted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private String getDayNumberSuffix(int day) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert day \u003e 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert day \u003c 31;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (day \u003e\u003d 11 \u0026\u0026 day \u003c\u003d 13) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        switch (day % 10) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"st\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"nd\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"rd\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert time from HH:mm format to hh:mma format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time inputted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return the time in hh:mma format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String parseTime(Calendar calendar) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting time to hh:mma\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"hh:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert day and month into MM-yyyy format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time inputted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return the date in MM-yyyy format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String parseDayAndMonth(Calendar calendar) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting date to MM-yyyy\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"MM-yyyy\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert a string input to date time format yyyy-MM-dd HHmm in Calendar form."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param string user input string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return calendar date time in yyyy-MM-dd HHmm in Calendar form"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception ParseException exception thrown when valid date and time is not inputted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Calendar convertStringToCalendar(String string) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting string to calendar\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Date date \u003d sdf.parse(string);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert a string input to date time format yyyy-MM-dd in Calendar form."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param string user input string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return calendar date time in yyyy-MM-dd in Calendar form"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception ParseException exception thrown when valid date and time is not inputted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Calendar convertStringToCalendarByDate(String string) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting string to calendar\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Date date \u003d sdf.parse(string);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert a Calendar form in date time format yyyy-MM-dd HHmm to String."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time input in Calendar form"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return calendar date time input in String form"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String convertCalendarToString(Calendar calendar) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting calendar to string\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Add day suffix to date time string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time in calendar form"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return date time string with day suffix"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String obtainFormattedDateTimeString(Calendar calendar) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting to MMM yyyy, hh:mma format\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"MMM yyyy, hh:mma\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int dayOfMonth \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting day suffix\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String dayOfMonthString \u003d dayOfMonth + getDayNumberSuffix(dayOfMonth);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String monthAndYearString \u003d sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return dayOfMonthString + \" \" + monthAndYearString;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert date time from Calendar form to dd-MM-yyyy, hh:mma format in String form."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time in Calendar form"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return dd-MM-yyyy, hh:mma format in String form"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String obtainFormattedDateString(Calendar calendar) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting to dd-MM-yyyy, hh:mma format\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd-MM-yyyy, hh:mma\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert date time in Calendar form to dd-MM in String form."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time in Calendar form"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return dd-MM in String form"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String obtainFormattedDayAndMonthString(Calendar calendar) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting to dd-MM format\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd-MM\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Check if two dates are equal."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param listInput date time input from List"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInput date time input by user"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return true if both dates are equal"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @throws DateTimeParseException if valid datetime is not inputted"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean isDateEqual(Calendar listInput, Calendar userInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"checking if dates are equal\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listDay \u003d listInput.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userDay \u003d userInput.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listMonth \u003d listInput.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userMonth \u003d userInput.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listYear \u003d listInput.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userYear \u003d userInput.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return (listDay \u003d\u003d userDay)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listMonth \u003d\u003d userMonth)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listYear \u003d\u003d userYear);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Get the dates for this week."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return dateCalendars ArrayList containing the dates for this week"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cCalendar\u003e getDaysOfWeek(Calendar calendar) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting days of the week\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cCalendar\u003e dateCalendars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        switch (calendar.get(Calendar.DAY_OF_WEEK)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.MONDAY:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.TUESDAY:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.WEDNESDAY:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -2);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.THURSDAY:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -3);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.FRIDAY:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -4);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.SATURDAY:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -5);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.SUNDAY:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -6);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"adding days of week to dateCalendars\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar newCalendar \u003d (Calendar) calendar.clone();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            dateCalendars.add(newCalendar);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return dateCalendars;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Get duration between two Calendar dates."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param startDateCalendar starting date"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param endDateCalendar ending date"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return duration between the two dates in minutes"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public long getDuration(Calendar startDateCalendar, Calendar endDateCalendar) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting duration between two dates\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        long timeDurationInMinutes \u003d 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        timeDurationInMinutes \u003d Duration.between(startDateCalendar.toInstant(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                endDateCalendar.toInstant()).toMinutes();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return timeDurationInMinutes;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cCalendar\u003e getCurrentDaysOfWeek() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cCalendar\u003e getNextDaysOfWeek() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        calendar.add(Calendar.DAY_OF_MONTH, 7);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 258,
      "AndreWongZH": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelExtractor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a extractor that returns the corresponding Model Manager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * based on the modelType."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelExtractor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ModelType modelType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelExtractor(Model model, ModelType modelType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.modelType \u003d modelType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns the Model Manager based on the modelType."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns null if modelType is EVENT or null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Model Manager to be read or modified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If modelType does not match any of the Model Managers."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelMain retrieveModel() throws InvalidModelException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelType \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CLASS:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getClassManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CCA:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getCcaManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TEST:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTestManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TUITION:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTuitionManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getQuizManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CONTACT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getContactManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the process of extracting out the model to be performed on."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TEST \u003d \"test\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CCA \u003d \"cca\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TUITION \u003d \"tuition\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_CONTACT \u003d \"contact\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int SUB_COMMAND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACES \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ModelType modelType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelParser(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.split(INPUT_SPACES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelType \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if the second word in the input string matches any model word."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If it contains any model word, returns the respective modelType."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return ModelType corresponding to the model."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If the second word does not match any model word."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelType extractModel() throws InvalidModelException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting model now...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs[MAIN_COMMAND_INDEX].equals(\"quiz\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return modelType \u003d ModelType.QUIZ;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[SUB_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CLASS:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CLASS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CCA:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CCA;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TEST:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TEST;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TUITION:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TUITION;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_CONTACT:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CONTACT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_QUIZ:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.QUIZ;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_EVENT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.EVENT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return modelType;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible models available to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum ModelType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    CLASS, CCA, TEST, TUITION, QUIZ, CONTACT, EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyListException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EmptyListException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/IncompleteFindCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class IncompleteFindCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/IncompleteListCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class IncompleteListCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final InvalidDateType errorType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public InvalidDateException(InvalidDateType errorType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.errorType \u003d errorType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public InvalidDateType getErrorType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.errorType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "durianpancakes": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidDateType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public enum InvalidDateType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    START_AFTER_END, START_EQUALS_END"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidHelpCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class InvalidHelpCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidModelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class InvalidModelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidValueException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 1,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingModelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class MissingModelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class MissingParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public MissingParameterException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/StorageCorruptedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageCorruptedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/StorageSeparatorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageSeparatorException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ConfigParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigParameter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private int recommendedHours;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private boolean hasProgramRan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ConfigParameter(String name, int recommendedHours, boolean hasProgramRan) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.recommendedHours \u003d recommendedHours;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.hasProgramRan \u003d hasProgramRan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ConfigParameter() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.recommendedHours \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.hasProgramRan \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getRecommendedHours() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return recommendedHours;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setRecommendedHours(int recommendedHours) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.recommendedHours \u003d recommendedHours;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean getHasProgramRan() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return hasProgramRan;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void setHasProgramRan(boolean hasProgramRan) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.hasProgramRan \u003d hasProgramRan;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 13,
      "durianpancakes": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Interactable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods across all ModelManager that the controller can call."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface Interactable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Adds an object to a ModelManager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If command is missing parameters prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyParameterException If no parameter inputs are found after the prefix."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void add(String userInput) throws MissingParameterException, EmptyParameterException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Deletes an object from a ModelManager."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void delete(String[] userInputs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a model object that stores volatile memory of the program data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * This consist of the eventManager, contactManager and quizManager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    EventManager eventManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ContactManager contactManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    QuizManager quizManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Model(EventManager eventManager, ContactManager contactManager, QuizManager quizManager) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contactManager \u003d contactManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizManager \u003d quizManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager getEventManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ContactManager getContactManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return contactManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager getQuizManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ModelMain.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the main model class which is inherited by all Managers."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.event.EventManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see ModelManager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class ModelMain {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the main model class which is inherited by Contact, Quiz, Class, Test, CCA, Tuition Manager."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.contact.ContactManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.quiz.QuizManager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.event.classlesson.EventClassManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class ModelManager extends ModelMain implements Interactable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * \u003ch2\u003e Class class \u003c/h2\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * Contains details of contact."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String phoneNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Contact(String subject, String name, String phoneNumber, String email) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getPhoneNumber() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return phoneNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject + \" teacher: \" + name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nPhone number: \" + phoneNumber"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nemail address: \" + email + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 42,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/ContactInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for ContactManager that the controller can call."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface ContactInteractable extends Interactable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * List all contacts in ContactManager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Find a list of contacts that matches with the keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If keyword is missing from the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/ContactManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ContactManager extends ModelManager implements ContactInteractable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int USER_INPUT_OFFSET \u003d 12;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cContact\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ContactManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getContactListSize() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return contacts.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Adds a contact with provided details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws EmptyParameterException if no parameter are provided for each section."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws MissingParameterException if sections symbols are missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void add(String userInput) throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (!userInput.contains(\"/s\") || !userInput.contains(\"/n\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || !userInput.contains(\"/p\") || !userInput.contains(\"/e\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new MissingParameterException(\"\u0027/s\u0027, \u0027/n\u0027, \u0027/p\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] seperatedInputs \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into subject, name, phone number\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"and email address.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String subject \u003d seperatedInputs[1].substring(1).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String name \u003d seperatedInputs[2].substring(1).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String phoneNumber \u003d seperatedInputs[3].substring(1).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String emailAddress \u003d seperatedInputs[4].substring(1).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (subject.equals(\"\") || name.equals(\"\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || phoneNumber.equals(\"\") || emailAddress.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"subject/name/phone number/email address is empty\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.add(new Contact(subject, name, phoneNumber, emailAddress));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_ADD_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                contacts.get(getContactListSize() - 1).toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Delete a contact indicated by the user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput the input provided by the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws IndexOutOfBoundsException if there is not such a contact in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void delete(String[] userInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int contactIndex \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            contactIndex \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((contactIndex \u003c\u003d 0) || (contactIndex \u003e getContactListSize())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                contacts.get(contactIndex - 1).toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.remove(contactIndex - 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Provide a list of contacts for the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (contacts.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_CONTACT_LIST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c getContactListSize(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Contact \" + (i + 1) + \":\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        contacts.get(i).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Prints to user all the found events that matches with keyword provided."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If input supplied does not contain any keywords."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException(\"keywords as\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e filteredContacts \u003d filterContacts(userInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (filteredContacts.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_EVENTS_FOUND);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface.printArray(filteredContacts);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Searches for a match in the contacts list against the keyword."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An ArrayList of contacts after filtering."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ArrayList\u003cString\u003e filterContacts(String userInput) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e filteredContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Contact contact : contacts) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            for (String keyword: separatedInputs) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchName \u003d contact.getName().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchEmail \u003d contact.getEmail().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchSubject \u003d contact.getSubject().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchPhoneNumber \u003d contact.getPhoneNumber().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                if (matchName || matchEmail || matchSubject || matchPhoneNumber) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    filteredContacts.add(contact.toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return filteredContacts;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * A simple method to show contact(s) in the text box."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getContactStatement() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String contactStatement \u003d getContactListSize() \u003c\u003d 1 ? \" contact\" : \" contacts\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getContactListSize() + contactStatement + \" in your list.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 107,
      "AndreWongZH": 64,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String DONE_STATUS \u003d \"[DONE]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String NOT_DONE_STATUS \u003d \"[NOT DONE]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected Calendar start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected Calendar end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public Event(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Event(String description, Calendar start, Calendar end, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Calendar getStart() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Calendar getEnd() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (isDone ? DONE_STATUS : NOT_DONE_STATUS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (obj \u003d\u003d null || obj.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Event otherEvent \u003d (Event) obj;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.description.equals(otherEvent.description)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.isDone \u003d\u003d otherEvent.isDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int compareTo(Event otherEvent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (this.getStart().before(otherEvent.start)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 13,
      "untitle4": 8,
      "AndreWongZH": 6,
      "durianpancakes": 45,
      "elizabethcwt": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventDataManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the model class which is inherited by Class, Test, CCA, Tuition Manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class EventDataManager extends ModelManager implements EventInteractable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for Class, CCA, Test and Tuition Manager that the controller can call."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface EventInteractable extends Interactable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Set a particular event to be done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setDone(String[] userInputs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.InvalidDateType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuitionManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.ConfigStorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.ui.CalendarWeekRenderer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a handler that manages the four different event managers."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * This provides access to each individual event managers and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * also performs listing and searches for the entire events data set."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventManager extends ModelMain implements EventManagerInteractable {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int USER_INPUT_OFFSET \u003d 10;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INPUT_LENGTH_NO_PARAMS \u003d 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INPUT_LENGTH_ONE_PARAM \u003d 3;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int DATE_PARAM_INDEX \u003d 2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventClassManager eventClassManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventTestManager eventTestManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventCcaManager eventCcaManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventTuitionManager eventTuitionManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ConfigParameter configParameter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager(EventParameter eventParameter, ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventClassManager \u003d new EventClassManager(eventParameter.getClasses(), this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventTestManager \u003d new EventTestManager(eventParameter.getTests(), this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventCcaManager \u003d new EventCcaManager(eventParameter.getCcas(), this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventTuitionManager \u003d new EventTuitionManager(eventParameter.getTuitions(), this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.configParameter \u003d configParameter;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventClassManager getClassManager() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventClassManager;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventTestManager getTestManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventTestManager;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventCcaManager getCcaManager() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventCcaManager;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventTuitionManager getTuitionManager() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventTuitionManager;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Prints to user all the found events that matches with keyword provided."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput Input supplied by the user that contains the keywords."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If input supplied does not contain any keywords."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException(\"keywords as\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(param, eventClassManager.getClasses(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                eventCcaManager.getCcas(), eventTestManager.getTests(), eventTuitionManager.getTuitions());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e filteredEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (filteredEvents.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_EVENTS_FOUND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface.printArray(filteredEvents);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void list(String userInput) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // check if user entered extra parameters"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003e INPUT_LENGTH_ONE_PARAM) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_LIST_EXTRA_PARAM);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            String dateParam \u003d  separatedInputs.length \u003d\u003d INPUT_LENGTH_NO_PARAMS"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    ? null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    : separatedInputs[DATE_PARAM_INDEX];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ListSchedule listSchedule \u003d new ListSchedule(dateParam, eventClassManager.getClasses(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    eventCcaManager.getCcas(), eventTestManager.getTests(), eventTuitionManager.getTuitions());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (userInput.contains(\"nextweek\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.printWeekSchedule(this, ListWeekCommand.NEXT_WEEK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else if (userInput.contains(\"week\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.printWeekSchedule(this, ListWeekCommand.CURRENT_WEEK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                printedEvents \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.printArray(printedEvents);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(String.format(Messages.MESSAGE_EMPTY_SCHEDULE_LIST, e.getMessage()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_LIST_INVALID_DATE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"valid datetime not inputted\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_LIST_INVALID_DATE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cArrayList\u003cEvent\u003e\u003e getCurrentWeekEventMasterList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e eventMasterList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cCalendar\u003e daysOfWeek \u003d dateTimeParser.getCurrentDaysOfWeek();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result.add(getDayEventList(eventMasterList, daysOfWeek.get(i)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cArrayList\u003cEvent\u003e\u003e getNextWeekEventMasterList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e eventMasterList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cCalendar\u003e daysOfWeek \u003d dateTimeParser.getNextDaysOfWeek();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result.add(getDayEventList(eventMasterList, daysOfWeek.get(i)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Adds the relevant events whose date correspond to the date inputted in the masterList."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param masterList ArrayList containing all the events"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param date Date inputted to filter out the corresponding events"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return result ArrayList contain the relevant events for that date"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private ArrayList\u003cEvent\u003e getDayEventList(ArrayList\u003cEvent\u003e masterList, Calendar date) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert masterList.size() \u003e\u003d 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (Event event : masterList) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar startCalendar \u003d event.getStart();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (dateTimeParser.isDateEqual(date, startCalendar)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                result.add(event);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Adds all the ccas, classes, tests and tuitions into one Master ArrayList."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return masterList ArrayList containing all the events"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventMasterList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting all ccas, classes, tests and tuitions\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d eventCcaManager.getCcas();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d eventTestManager.getTests();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d eventClassManager.getClasses();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d eventTuitionManager.getTuitions();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e masterList \u003d new ArrayList\u003c\u003e(ccas);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(tests);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(classes);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(tuitions);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"added all ccas, classes, tests and tuitions\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return masterList;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e checkEventClash(Event event) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e relevantEvents \u003d getDayEventList(getEventMasterList(), event.getStart());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (Event e : relevantEvents) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (isTimeClash(e, event)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                results.add(e);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void processInvalidDateException(InvalidDateType errorCode) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        switch (errorCode) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case START_AFTER_END:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(\"The start time given is later than the end time given!\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    \"Please check your inputs again!\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case START_EQUALS_END:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(\"The start time given is the same as the end time given!\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    \"Please check your inputs again!\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            // No default cases needed here"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    // Check if start time given is before end time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void checkValidTimeGiven(Event inputEvent) throws InvalidDateException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar startCalendar \u003d inputEvent.getStart();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar endCalendar \u003d inputEvent.getEnd();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (startCalendar.equals(endCalendar)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new InvalidDateException(InvalidDateType.START_EQUALS_END);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (startCalendar.after(endCalendar)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new InvalidDateException(InvalidDateType.START_AFTER_END);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    // Check if there are any clashes with other events"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private boolean isTimeClash(Event referenceEvent, Event inputEvent) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar startInputCalendar \u003d inputEvent.getStart();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar endInputCalendar \u003d inputEvent.getEnd();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar startReferenceCalendar \u003d referenceEvent.getStart();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar endReferenceCalendar \u003d referenceEvent.getEnd();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (startInputCalendar.after(startReferenceCalendar)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 startInputCalendar.before(endReferenceCalendar)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (endInputCalendar.after((startReferenceCalendar))"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 endInputCalendar.before(endReferenceCalendar)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (startInputCalendar.equals(startReferenceCalendar)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || endInputCalendar.equals(endReferenceCalendar)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Checks if the recommended time for that day exceeded."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param event Event that user is trying to add"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return true if the time did exceed, vice versa."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean didTimeExceed(Event event) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"checking if time exceeded\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e eventArrayList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        long noOfMinutes \u003d dateTimeParser.getDuration(event.getStart(), event.getEnd());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArrayList.size(); i++) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (dateTimeParser.isDateEqual(eventArrayList.get(i).getStart(),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    event.getStart())) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                noOfMinutes +\u003d dateTimeParser.getDuration(eventArrayList.get(i).getStart(),"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                        eventArrayList.get(i).getEnd());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return noOfMinutes \u003e (configParameter.getRecommendedHours() * 60);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 150,
      "AndreWongZH": 119,
      "durianpancakes": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventManagerInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for EventManager that the controller can call."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface EventManagerInteractable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * List all events in EventManager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list(String userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Find a list of events that matches with the keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If keyword is missing from the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventParameter {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventParameter() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventParameter(ArrayList\u003cEvent\u003e ccas, ArrayList\u003cEvent\u003e tests,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                          ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventMasterList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d getCcas();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d getTests();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d getClasses();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d getTuitions();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e masterList \u003d new ArrayList\u003c\u003e(ccas);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(tests);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(classes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(tuitions);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return masterList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcas() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTests() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return tests;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 31,
      "AndreWongZH": 20,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/FindSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a process dedicated to filter out events based on given keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class FindSchedule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cString\u003e filteredEvents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindSchedule(String userInput, ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        ArrayList\u003cEvent\u003e tests, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput.length() !\u003d 0 : \"user input should not be missing\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        filteredEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns all the events whose description matches with the provided keywords."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Merges all the event types into one single arraylist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An Arraylist of type String to be printed out."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getFilteredEvents() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Combining all arraylist into one main arraylist\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(classes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(ccas);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(tests);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(tuitions);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        filterEvents(events);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Loops through event list to checks if the event\u0027s description matches with the keywords."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Both strings are first converted to lowercase before comparison."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If description matches, add the event into the filteredEvents arraylist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param events An ArrayList of type Event to be checked against"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void filterEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"loop through all the keywords to check if in event description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            for (String keyword : separatedInputs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                if (event.getDescription().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    filteredEvents.add(event.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 74
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/ListSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListSchedule {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_TUITIONS \u003d \"Tuitions: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_CLASSES \u003d \"Classes: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_TESTS \u003d \"Tests: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_CCAS \u003d \"CCAs: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Calendar inputCalendar;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ListSchedule(String userInput, ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        ArrayList\u003cEvent\u003e tests, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getPrintableEvents() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"starting to convert events instance to strings\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedClasses;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedTests;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedCcas;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedTuitions;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        inputCalendar \u003d checkAndConvertToday();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveClasses()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting class events\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedClasses \u003d parseEventWithNumberPad(classes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedClasses, printedEvents, CATEGORY_CLASSES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveCcas()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting CCA events\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedCcas \u003d parseEventWithNumberPad(ccas);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedCcas, printedEvents, CATEGORY_CCAS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTests()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting test events\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedTests \u003d parseEventWithNumberPad(tests);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedTests, printedEvents, CATEGORY_TESTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTuitions()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting tuition events\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedTuitions \u003d parseEventWithNumberPad(tuitions);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedTuitions, printedEvents, CATEGORY_TUITIONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (hasNoSchedule() || printedEvents.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"schedule is empty\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (userInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new EmptyListException(\"empty\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyListException(\"not found\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveClasses() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes.size() !\u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveCcas() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas.size() !\u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTests() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests.size() !\u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTuitions() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tuitions.size() !\u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean hasNoSchedule() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (!haveClasses() \u0026\u0026 !haveCcas() \u0026\u0026 !haveTests() \u0026\u0026 !haveTuitions());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * If the user input contains today/week, get the date for today."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Else if user input a date, convert the string date to calendar form"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return resultCalender Calendar containing the resulting output"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private Calendar checkAndConvertToday() throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar resultCalendar \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (userInput !\u003d null \u0026\u0026 (userInput.contains(\"today\") || userInput.contains(\"week\"))) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            resultCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (userInput !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            resultCalendar \u003d dateTimeParser.convertStringToCalendarByDate(userInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return resultCalendar;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Converts event instances into strings representation padded with numbers."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * PrintedEvents cannot be null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * EventArr cannot be empty or null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param eventArr Array list of event instances to be converted."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return printedEvents Array list containing the relevant events in correct output format"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private ArrayList\u003cString\u003e parseEventWithNumberPad(ArrayList\u003cEvent\u003e eventArr) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventArr !\u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventArr.size() !\u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArr.size(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar listDate \u003d eventArr.get(i).getStart();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (userInput \u003d\u003d null || dateTimeParser.isDateEqual(listDate, inputCalendar)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printedEvents.add(i + 1 + \". \" + eventArr.get(i));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void addToMainList(ArrayList\u003cString\u003e subEvents, ArrayList\u003cString\u003e printedEvents, String categoryName) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (subEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printedEvents.add(categoryName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printedEvents.addAll(subEvents);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 52,
      "AndreWongZH": 100
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/ListWeekCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public enum ListWeekCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    CURRENT_WEEK, NEXT_WEEK"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCca.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * A class for event cca."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class EventCca extends Event {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String CCA_ICON \u003d \"[CCA]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public EventCca(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public EventCca(String description, boolean isDone, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return CCA_ICON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        result \u003d CCA_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        EventCca otherEventCca \u003d (EventCca) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventCca.getStart())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventCca.getEnd());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "untitle4": 41,
      "AndreWongZH": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCcaManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * A manager of cca that executes all the commands related to cca."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class EventCcaManager extends EventDataManager {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public EventCcaManager(ArrayList\u003cEvent\u003e inputList, EventManager eventManager) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ccas \u003d inputList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcas() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getCcaListSize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assert ccas !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return ccas.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Add a cca from the user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Convert the day-time format to system-recognized."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws MissingParameterException if symbols of params are missing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws EmptyParameterException if no parameters are provided."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a cca\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] ccaDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaDescription \u003d ccaDetails[1].substring(1).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStartDate \u003d ccaDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaEndDate \u003d ccaDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (ccaDescription.equals(\"\") || ccaStartDate.equals(\"\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || ccaEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(ccaStartDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(ccaEndDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            EventCca cca \u003d new EventCca(ccaDescription, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            eventManager.checkValidTimeGiven(cca);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(cca);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add cca"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d 0 \u0026\u0026 !eventManager.didTimeExceed(cca)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                ccas.add(cca);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"added cca to ArrayList\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_CCA_ADD_SUCCESS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        ccas.get(getCcaListSize() - 1).toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                getCcaStatement();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"sorted CCA ArrayList\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else if (clashedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"The cca you were trying to add\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        cca.toString(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Please check the start and end inputs again!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else if (eventManager.didTimeExceed(cca)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Recommended time exceeded! CCA is not added!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(\"☹ OOPS!!! Please enter valid date \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"and time in format yyyy-mm-dd!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Deletes a cca with the input index in the event list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of bound of event list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    ccas.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ccas.remove(ccaIndex - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            getCcaStatement();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"absence of class index for deletion\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CCA_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setDone(String[] userInputs) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting cca as done\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((ccaIndex \u003c\u003d 0) || (ccaIndex \u003e getCcaListSize())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ccas.get(ccaIndex - 1).setDone();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"set cca as done from Arraylist\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CCA_DONE_SUCCESS,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                ccas.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getCcaStatement() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStatement \u003d getCcaListSize() \u003c\u003d 1 ? \" cca\" : \" ccas\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getCcaListSize() + ccaStatement + \" in the list.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        Collections.sort(ccas);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 10,
      "untitle4": 168,
      "AndreWongZH": 6,
      "durianpancakes": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClass class\u003c/h2\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains constructors, getters, toString and equals methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClass#toString()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClass#equals(Object)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class EventClass extends Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String CLASS_ICON \u003d \"[CLASS]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClass(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClass(String description, boolean isDone, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return CLASS_ICON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        result \u003d CLASS_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        EventClass otherEventClass \u003d (EventClass) obj;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventClass.getStart())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventClass.getEnd());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 3,
      "elizabethcwt": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClassManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClassManager class\u003c/h2\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Stores user\u0027s classes in an ArrayList of Event class, named classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains methods which allow:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAttaining class list size\u003c/li\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAdding new classes into ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eDeleting classes from ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eSetting class as {@code DONE}\u003c/li\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#getClassListSize()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#add(String)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#delete(String[])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#setDone(String[])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class EventClassManager extends EventDataManager {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Initialising Logger with name \"Class\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClassManager(ArrayList\u003cEvent\u003e classes, EventManager eventManager) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassListSize()\u003c/h2\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Attains the size of the user\u0027s classes ArrayList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @return int - Classes ArrayList size"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public int getClassListSize() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assertion to test assumption that ArrayList is not null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert classes !\u003d null : \"classes ArrayList should not be null\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003eaddClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Adds new class to classes ArrayList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInput To take in the String consisting of the class name, start date-time and end date-time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @throws MissingParameterException if user input does not meet the requirements."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a class\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checks if user input contains the 3 required parameters (/n, /s and /e)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\")) || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Splitting /n, /s and /e info. via a String array called classDetails"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        final String[] classDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"splitting the user input into class description, start date-time and end \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"date-time\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classDescription \u003d classDetails[1].substring(1).trim().replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStartDate \u003d classDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classEndDate \u003d classDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if any of the 3 required parameters are empty"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (classDescription.equals(\"\") || classStartDate.equals(\"\") || classEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time is\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(classStartDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(classEndDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            EventClass eventClass \u003d new EventClass(classDescription, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            eventManager.checkValidTimeGiven(eventClass);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(eventClass);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add class"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d 0 \u0026\u0026 !eventManager.didTimeExceed(eventClass)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                classes.add(eventClass);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                logger.log(Level.INFO, \"added class to ArrayList\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_CLASS_ADD_SUCCESS,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        classes.get(getClassListSize() - 1).toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                getClassStatement();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                logger.log(Level.INFO, \"sorted classes ArrayList\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else if (clashedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(\"The class you were trying to add\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        eventClass.toString(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(\"Please check the start and end inputs again!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else if (eventManager.didTimeExceed(eventClass)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(\"Recommended time exceeded! Class is not added!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(\"☹ OOPS!!! Please enter valid date \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"and time in format yyyy-mm-dd!\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003edeleteClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Deletes a class from the classes ArrayList."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInputs To take in the class index of the classes to be deleted."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            int classIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.get(classIndex - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    classes.get(classIndex - 1).toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.remove(classIndex - 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"deletion of class from ArrayList\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            getClassStatement();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"absence of class index for deletion\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CLASS_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid class index entered for deletion\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"non-integer class index entered for deletion\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassStatement()\u003c/h2\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints statement to update the user once class has been added or deleted."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void getClassStatement() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStatement \u003d getClassListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getClassListSize() + classStatement + \" in the list.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003esetClassDone()\u003c/h2\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Sets class as done."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInputs To take in the class index of the class to be set as done."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @throws IndexOutOfBoundsException when user input is an invalid class index integer."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @see EventClassManager#getClassStatement()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int classNumber;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting class as done\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((classNumber \u003c\u003d 0) || (classNumber \u003e getClassListSize())) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        classes.get(classNumber - 1).setDone();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_SUCCESS,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \"  \" + classes.get(classNumber - 1));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        Collections.sort(classes);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 9,
      "AndreWongZH": 6,
      "durianpancakes": 5,
      "elizabethcwt": 227
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "//@@author Aliciaho"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003ch2\u003eClass EventTest\u003c/h2\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * Contains constructors, getters, toString and equals methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTest#toString()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTest#equals(Object)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTest extends Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String TEST_ICON \u003d \"[TEST]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, boolean isDone, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return TEST_ICON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        result \u003d TEST_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTest otherEventTest \u003d (EventTest) obj;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTest.getStart())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTest.getEnd());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 48,
      "AndreWongZH": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTestManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003ch2\u003eTestManager test\u003c/h2\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * Stores user\u0027s tests in an ArrayList of Event Test, named tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * Contains methods which allow:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eAttaining test list size\u003c/li\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eAdding new tests into ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eDeleting tests from ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eSetting tests as {@code DONE}\u003c/li\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#getTestListSize()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#add(String)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#delete(String[])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#getTaskStatement()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#setDone(String[])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTestManager extends EventDataManager {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventTestManager(ArrayList\u003cEvent\u003e inputList, EventManager eventManager) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests \u003d inputList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTests() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003egetTestListSize()\u003c/h2\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Attains the size of the user\u0027s tests ArrayList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return int - tests ArrayList size"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public int getTestListSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert tests !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003eaddTest()\u003c/h2\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Adds new test to tests ArrayList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInput To take in the String consisting of the test name, start date-time and end date-time."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception MissingParameterException exception thrown when parameter not entered"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception EmptyParameterException exception thrown when description is empty"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @see EventTestManager#getTaskStatement()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a test\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInput.replaceAll(\"\\\\s+\",\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String[] testDetails \u003d userInput.trim().split(\"\\\\/\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testDescription \u003d testDetails[1].substring(1).trim().replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testStartDate \u003d testDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testEndDate \u003d testDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (testDescription.equals(\"\") || testStartDate.equals(\"\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || testEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(testStartDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(testEndDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventTest eventTest \u003d new EventTest(testDescription, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventManager.checkValidTimeGiven(eventTest);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(eventTest);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d 0 \u0026\u0026 !eventManager.didTimeExceed(eventTest)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tests.add(eventTest);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                logger.log(Level.INFO, \"added test to ArrayList\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_TEST_ADD_SUCCESS,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        tests.get(getTestListSize() - 1).toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                getTaskStatement();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                logger.log(Level.INFO, \"sorted Test ArrayList\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (clashedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"The test you were trying to add\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        eventTest.toString(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"Please check the start and end inputs again!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (eventManager.didTimeExceed(eventTest)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(\"Recommended time exceeded! Test is not added!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"invalid date time inputted\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(\"☹ OOPS!!! Please enter valid date \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    + \"and time in format yyyy-mm-dd!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003edeleteTest()\u003c/h2\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Deletes a test from the tests ArrayList."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInputs To take in the test index of the test to be deleted."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception IndexOutOfBoundsException exception thrown for invalid index"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception NumberFormatException exception thrown for wrong number format"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception ArrayIndexOutOfBoundsException exception thrown for empty description"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @see EventTestManager#getTaskStatement()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber \u003d 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising deleting of a test\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    \"  \" + tests.get(testNumber - 1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            tests.remove(testNumber - 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.INFO, \"deleted test from ArrayList\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            getTaskStatement();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no number was given\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong index inputted\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_TEST_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003egetTaskStatement()\u003c/h2\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Prints statement to update the user once test has been added or deleted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void getTaskStatement() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((getTestListSize() - 1 \u003d\u003d 0) || (getTestListSize() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" test in the list.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" tests in the list.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003esetTestDone()\u003c/h2\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Sets test as done."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInputs To take in the test index of the test to be set as done."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception IndexOutOfBoundsException when user input is an invalid test index integer."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception NumberFormatException exception thrown for wrong number format"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception ArrayIndexOutOfBoundsException exception thrown for empty description"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @see EventTestManager#getTaskStatement()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber \u003d 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting test as done\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no number was given\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((testNumber \u003c\u003d 0) || (testNumber \u003e getTestListSize())) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests.get(testNumber - 1).setDone();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"set test as done from ArrayList\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TEST_DONE_SUCCESS,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \"  \" + tests.get(testNumber - 1));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Collections.sort(tests);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 164,
      "untitle4": 3,
      "AndreWongZH": 33,
      "durianpancakes": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventTuition extends Event {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String TUITION_ICON \u003d \"[TUITION]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventTuition(String description, Calendar start, Calendar end, String location) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return TUITION_ICON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventTuition(String description, boolean isDone, Calendar start, Calendar end, String location) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        result \u003d TUITION_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \" at \" + this.location;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuition otherEventTuition \u003d (EventTuition) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTuition.getStart())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTuition.getEnd())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.location.equals(otherEventTuition.getLocation());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 3,
      "durianpancakes": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuitionManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventTuitionManager extends EventDataManager {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventTuitionManager(ArrayList\u003cEvent\u003e tuitions, EventManager eventManager) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getTuitionListSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initializing adding of a tuition\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String descriptionPrefix \u003d \"/n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String startPrefix \u003d \"/s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String endPrefix \u003d \"/e\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String locationPrefix \u003d \"/l\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((!userInput.contains(descriptionPrefix)) || (!userInput.contains(startPrefix))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                || (!userInput.contains(endPrefix)) || (!userInput.contains(locationPrefix))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027 and \u0027/l\u0027\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfDescriptionPrefix \u003d userInput.indexOf(descriptionPrefix);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfStartPrefix \u003d userInput.indexOf(startPrefix);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfEndPrefix \u003d userInput.indexOf(endPrefix);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfLocationPrefix \u003d userInput.indexOf(locationPrefix);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description \u003d userInput.substring(indexOfDescriptionPrefix, indexOfStartPrefix)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(descriptionPrefix, \"\").trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d userInput.substring(indexOfStartPrefix, indexOfEndPrefix)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(startPrefix, \"\").trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d userInput.substring(indexOfEndPrefix, indexOfLocationPrefix)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(endPrefix, \"\").trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d userInput.substring(indexOfLocationPrefix)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(locationPrefix, \"\").trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isEmptyString(description) || isEmptyString(start) || isEmptyString(end) || isEmptyString(location)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventTuition eventTuition \u003d new EventTuition(description, startCalendar,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    endCalendar, location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventManager.checkValidTimeGiven(eventTuition);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(eventTuition);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add tuition"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d 0 \u0026\u0026 !eventManager.didTimeExceed(eventTuition)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tuitions.add(eventTuition);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Tuition added successfully\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_TUITION_ADD_SUCCESS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        eventTuition.toString(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        getTuitionStatement());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"sorted Tuition ArrayList\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (clashedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"The tuition you were trying to add\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        eventTuition.toString(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"Please check the start and end inputs again!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (eventManager.didTimeExceed(eventTuition)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"Recommended time exceeded! Tuition is not added!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"☹ OOPS!!! Please enter valid date \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + \"and time in format yyyy-mm-dd!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int tuitionIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitions.get(tuitionIndex - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(\"Noted. I\u0027ve removed this tuition class: \","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    tuitions.get(tuitionIndex - 1).toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitions.remove(tuitionIndex - 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Deletion of tuition class from ArrayList\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(getTuitionStatement());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_TUITION_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int tuitionNumber;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initialising setting tuition as done\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitionNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"Wrong number format entered\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((tuitionNumber \u003c\u003d 0) || (tuitionNumber \u003e getTuitionListSize())) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions.get(tuitionNumber - 1).setDone();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_SUCCESS,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"  \" + tuitions.get(tuitionNumber - 1),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                getTuitionStatement());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getTuitionStatement() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String tuitionStatement \u003d getTuitionListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"Now you have \" + getTuitionListSize() + tuitionStatement + \" in the list\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean isEmptyString(String string) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return string.equals(\"\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Collections.sort(tuitions);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "AndreWongZH": 6,
      "durianpancakes": 187
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/FindQuiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * Provide a function to find quiz with certain keyword(s) input by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class FindQuiz {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e quizzes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cString\u003e filteredQuizzes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public FindQuiz(String userInput, ArrayList\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assert userInput.length() !\u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizzes \u003d quizzes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        filteredQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cString\u003e filterQuizzes() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"loop through all the keywords to check if in quiz description\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] seperatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (String keyword: seperatedInputs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                if (quizzes.get(i).getQuestion().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    filteredQuizzes.add(\"Question \" + (i + 1) + \":\\n\" + quizzes.get(i).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return filteredQuizzes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/Quiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * A class for quiz."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String explanation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private LocalDate lastAccessed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                String answer, String explanation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.explanation \u003d explanation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        lastAccessed \u003d LocalDate.now();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                String answer, String explanation, LocalDate lastAccessed) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.explanation \u003d explanation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.lastAccessed \u003d lastAccessed;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getExplanation() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return explanation;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public LocalDate getLastAccessed() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return lastAccessed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return question + \"|\" + option1 + \"|\" + option2 + \"|\" + option3 + \"|\" + option4"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"|\" + answer + \"|\" + explanation + \"|\" + lastAccessed;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"\\n\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"\\n\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"Explanation: \" + explanation + \"\\n\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String printQuizQuestion() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return question + \"\\n\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(4) \" + option4 + \"\\n\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String printPostQuizQuestion(int l, String correctnessLogo) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return question + correctnessLogo + \"\\n\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Your answer: (\" + l + \")\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Correct answer: (\" + answer + \")\\n\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return question + correctnessLogo + \"\\n\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Your answer: (\" + l + \")\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Correct answer: (\" + answer + \")\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Explanation: \" + explanation + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Update quiz last accessed date to the current date."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void updateLastAccessed() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        lastAccessed \u003d LocalDate.now();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 78,
      "AndreWongZH": 14,
      "elizabethcwt": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/QuizInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for QuizManager that the controller can call."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface QuizInteractable extends Interactable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * List all quizzes in QuizManager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Find a list of quiz that matches with the keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If keyword is missing from the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/QuizManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class QuizManager extends ModelManager implements QuizInteractable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final int USER_INPUT_OFFSET \u003d 9;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e quizzes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private ArrayList\u003cQuiz\u003e lastIncorrectQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private ArrayList\u003cInteger\u003e lastIncorrectAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static int noOfQues;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static String correctnessLogo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static ArrayList\u003cInteger\u003e quizIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    UserAnswerManager userAnswerManager \u003d new UserAnswerManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager(ArrayList\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizzes \u003d quizzes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e getQuizList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getQuizListSize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert quizzes !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void checkQuizSizeValidity(String[] separatedInputs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (getQuizListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // If user attempts to take a quiz, but the quiz list is empty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_QUIZ_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // If user attempts to take a quiz, and the quiz list has at least 1 quiz question"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            takeQuiz(separatedInputs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void takeQuiz(String[] separatedInputs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            noOfQues \u003d Integer.parseInt(separatedInputs[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert noOfQues !\u003d 0 : \"noOfQues should not be 0\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (!((noOfQues \u003e 0) \u0026\u0026 (noOfQues \u003c\u003d getQuizListSize()))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user inputs an invalid number of questions to be attempted (NOT within range of 1 to quiz size)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                handleInvalidNumOfQuestions();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user inputs a valid number of quiz questions (within range of 1 to quiz size)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                handleValidNumOfQuestions();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_HELP_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void handleValidNumOfQuestions() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assert that noOfQues is within a valid range"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert ((noOfQues \u003e 0) \u0026\u0026 (noOfQues \u003c\u003d getQuizListSize())) : \"noOfQues should be of a valid value, but\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"it is invalid\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        initialisingShufflingOfQuestions();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int questionCounter \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        while (questionCounter \u003c noOfQues) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assert that questionCounter is less than noOfQues"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert (questionCounter \u003c noOfQues) : \"questionCounter should not be more than noOfQues\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            questionCounter \u003d testForValidInput(questionCounter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Initialising counter for correctly answered questions"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int correctCounter \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assert that correctCounter is 0 initially"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert (correctCounter \u003d\u003d 0) : \"questionCounter should be 0 initially\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Clear arraylist to store incorrect quizzes"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        lastIncorrectQuizzes.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        lastIncorrectAnswers.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Compare and note if students\u0027 answers are correct"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        correctCounter \u003d storeCorrectnessOfQuizAnswer(correctCounter);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        for (int l \u003d 0; l \u003c noOfQues; l++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assigning the correctness logo to be printed with questions post-quiz"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assignCorrectnessLogo(l);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Print out all quiz questions, user\u0027s answers, correctness, correct answers and explanations"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            System.out.println(\"Question \" + (l + 1) + \": \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            System.out.println(quizzes.get(quizIndexes.get(l)).printPostQuizQuestion(userAnswerManager"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    .getUserAnswers().get(l), correctnessLogo));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Print out quiz score"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.print_quiz_score(correctCounter, noOfQues));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Empty userAnswers ArrayList and correctness ArrayList"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userAnswerManager.getUserAnswers().clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userAnswerManager.getCorrectness().clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void assignCorrectnessLogo(int l) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (userAnswerManager.getCorrectness().get(l).equals(true)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assert that the correctness of the user\u0027s input is true in this if loop"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert (userAnswerManager.getCorrectness().get(l).equals(true)) : \"User\u0027s answer should be\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" correct for this question\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            correctnessLogo \u003d \" [CORRECT ☺︎]\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assert that the correctness of the user\u0027s input is false in this else loop"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert (userAnswerManager.getCorrectness().get(l).equals(false)) : \"User\u0027s answer should be\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" incorrect for this question\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            correctnessLogo \u003d \" [WRONG ☹︎]\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private int storeCorrectnessOfQuizAnswer(int correctCounter) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        for (int k \u003d 0; k \u003c noOfQues; k++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (userAnswerManager.getUserAnswers().get(k).equals(Integer.parseInt(quizzes.get(quizIndexes"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    .get(k)).getAnswer()))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userAnswerManager.getCorrectness().add(true);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                correctCounter++;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userAnswerManager.getCorrectness().add(false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                lastIncorrectQuizzes.add(quizzes.get(quizIndexes.get(k)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                lastIncorrectAnswers.add(userAnswerManager.getUserAnswers().get(k));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            quizzes.get(quizIndexes.get(k)).updateLastAccessed();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return correctCounter;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void initialisingShufflingOfQuestions() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Create a new list of the question indexes"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        quizIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            quizIndexes.add(i);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Shuffle the question indexes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        Collections.shuffle(quizIndexes);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void handleInvalidNumOfQuestions() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assert that noOfQues is NOT an acceptable value"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert (!((noOfQues \u003e 0) \u0026\u0026 (noOfQues \u003c\u003d getQuizListSize()))) : \"noOfQues should not be of a valid\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \" value, but it is\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // If user inputs an invalid number of quiz questions (not within range of 1 to quiz size)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.invalid_number_of_quiz_questions_message(quizzes.size()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public int testForValidInput(int questionCounter) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Print out each question"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        System.out.println(\"Question \" + (questionCounter + 1) + \": \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        System.out.print(quizzes.get(quizIndexes.get(questionCounter)).printQuizQuestion());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Create a Scanner object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInput.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assert that the user\u0027s input is \"\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert (userInput.equals(\"\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            System.out.println(\"OOPS! Please enter your answer for the question above!\\n\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            boolean b \u003d userInput.equals(\"1\") || userInput.equals(\"2\") || userInput.equals(\"3\")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    || userInput.equals(\"4\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (b) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // Assert that the user\u0027s input is one of the valid options"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                assert (b) : \"User\u0027s input should be one of the valid options (1, 2, 3 or 4)\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // Store user\u0027s quiz answers into ArrayList"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userAnswerManager.getUserAnswers().add(Integer.parseInt(userInput));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                questionCounter++;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                return questionCounter;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                System.out.println(\"OOPS! Incorrect answer format! Your answer can only be either 1, 2, 3 or 4!\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return questionCounter;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Delete a quiz in the Arraylist of quizzes."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Extract the index of the quiz that the user want to delete."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of bounds."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int quizIndex;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            quizIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if ((quizIndex \u003c\u003d 0) || (quizIndex \u003e getQuizListSize())) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Noted. I\u0027ve removed this quiz question: \\n\" + quizzes.get(quizIndex - 1));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizzes.remove(quizIndex - 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getQuizStatement();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Adds a quiz to the ArrayList of quizzes."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Extracts the question, options, explanations if any before adding it as a quiz."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyParameterException If there are missing parameters after the prefix."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws EmptyParameterException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(\" /q \")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(\"question not found\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(\" /a \")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(\"answer not found\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(\" /o1 \") \u0026\u0026 !userInput.contains(\" /o2 \")"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 !userInput.contains(\" /o3 \") \u0026\u0026 !userInput.contains(\" /o4 \")) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(\"options not provided\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String question \u003d separatedInputs[1].substring(1).trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option1 \u003d separatedInputs[2].substring(2).trim();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option2 \u003d separatedInputs[3].substring(2).trim();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option3 \u003d separatedInputs[4].substring(2).trim();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option4 \u003d separatedInputs[5].substring(2).trim();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String answer \u003d separatedInputs[6].substring(1).trim();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String explanation \u003d \"\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003e 7) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            explanation \u003d separatedInputs[7].substring(3).trim();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (question.equals(\" \") || option1.equals(\" \") || option2.equals(\" \")"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                || option3.equals(\" \") || option4.equals(\" \") || answer.equals(\" \")) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"question or options or answer is empty\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        quizzes.add(new Quiz(question, option1, option2, option3, option4, answer, explanation));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface.showToUser(\"Quiz question added!\\n\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * To find the quiz with certain keyword(s) in the Arraylist of quizzes."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws MissingParameterException if there is no keyword(s) provided."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new MissingParameterException(\"keywords as\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        FindQuiz findQuiz \u003d new FindQuiz(param, quizzes);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e filteredQuizzes \u003d findQuiz.filterQuizzes();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (filteredQuizzes.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_QUIZZES_FOUND);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.printArray(filteredQuizzes);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Show the incorrect quizzes in the user\u0027s last attempt."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void recordedQuizzes() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (lastIncorrectQuizzes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(\"Congratulations! You get full marks in your last attempt!\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(\"Here are the incorrect quizzes in your last quiz attempt:\\n\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c lastIncorrectQuizzes.size(); i++) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(lastIncorrectQuizzes.get(i).printQuizQuestion());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Your answer: (\" + lastIncorrectAnswers.get(i) + \")\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Correct answer: (\" + lastIncorrectQuizzes.get(i).getAnswer() + \")\\n\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                if (!lastIncorrectQuizzes.get(i).getExplanation().equals(\"\")) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    userInterface.showToUser(\"Explanation: \" + lastIncorrectQuizzes.get(i).getExplanation() + \"\\n\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * List the Arraylist of quiz."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (quizzes.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(\"Quiz list is empty. Add some!\\n\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(\"Here are the questions in your quiz list:\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Question \" + (i + 1) + \":\\n\" + quizzes.get(i));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getQuizStatement() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String quizStatement \u003d getQuizListSize() \u003d\u003d 1 ? \" quiz\" : \" quizzes\";"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getQuizListSize() + quizStatement + \" in the quiz list.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 127,
      "AndreWongZH": 66,
      "elizabethcwt": 181
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/UserAnswerManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class UserAnswerManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cInteger\u003e userAnswers;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cBoolean\u003e correctness;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public UserAnswerManager() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.userAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.correctness \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cInteger\u003e getUserAnswers() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return userAnswers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getCorrectness() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return correctness;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/ConfigDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigDecoder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ConfigParameter decodeConfig(String encodedConfig) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String[] splitEncodedConfig \u003d encodedConfig.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String userName \u003d splitEncodedConfig[0];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int recommendedHours \u003d Integer.parseInt(splitEncodedConfig[1]);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean hasProgramRan \u003d Boolean.parseBoolean(splitEncodedConfig[2]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new ConfigParameter(userName, recommendedHours, hasProgramRan);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "durianpancakes": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/ConfigEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigEncoder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String encodeConfig(ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String userName \u003d configParameter.getName();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String recommendedHours \u003d String.valueOf(configParameter.getRecommendedHours());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String hasProgramRan \u003d String.valueOf(configParameter.getHasProgramRan());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return userName + \"|\" + recommendedHours + \"|\" + hasProgramRan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "durianpancakes": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/ConfigStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ConfigEncoder configEncoder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ConfigDecoder configDecoder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ConfigStorageManager(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.configEncoder \u003d new ConfigEncoder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.configDecoder \u003d new ConfigDecoder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void saveData(ConfigParameter configParameter) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String encodedConfig \u003d configEncoder.encodeConfig(configParameter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + fileName), Collections.singleton(encodedConfig));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ConfigParameter loadData() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File eventFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Scanner sc \u003d new Scanner(eventFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                ConfigParameter configParameter \u003d configDecoder.decodeConfig(dataString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return configParameter;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new ConfigParameter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "durianpancakes": 61
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListDecoder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListDecoder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e decodeEventList(ArrayList\u003cString\u003e encodedEventList) throws StorageSeparatorException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StorageCorruptedException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final ArrayList\u003cEvent\u003e decodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String encodedEvent : encodedEventList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            decodedEvents.add(decodeEventFromString(encodedEvent));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return decodedEvents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Event decodeEventFromString(String encodedEvent) throws StorageSeparatorException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StorageCorruptedException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String[] data \u003d encodedEvent.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventCca.CCA_ICON:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseCca(data);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventClass.CLASS_ICON:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseClass(data);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventTest.TEST_ICON:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTest(data);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventTuition.TUITION_ICON:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTuition(data);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventCca parseCca(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventCca(description, isDone, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventClass parseClass(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventClass(description, isDone, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventTest parseTest(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventTest(description, isDone, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventTuition parseTuition(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 4) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d eventInfo[3];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventTuition(description, isDone, startCalendar, endCalendar, location);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "AndreWongZH": 1,
      "durianpancakes": 150
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListEncoder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListEncoder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cString\u003e encodeEventList(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            encodedEvents.add(encodeEventToString(event));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return encodedEvents;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String encodeEventToString(Event event) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d dateTimeParser.convertCalendarToString(event.getStart());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d dateTimeParser.convertCalendarToString(event.getEnd());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventCca eventCca \u003d (EventCca) event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventCca.CCA_ICON + \"|\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventCca.isDone() + \"|\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventCca.getDescription() + \"|\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventTest eventTest \u003d (EventTest) event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventTest.TEST_ICON + \"|\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventTest.isDone() + \"|\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventTest.getDescription() + \"|\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventTuition newEventTuition \u003d (EventTuition) event;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventTuition.TUITION_ICON + \"|\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventTuition.isDone() + \"|\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventTuition.getDescription() + \"|\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end + \"|\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventTuition.getLocation();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventClass newEventClass \u003d (EventClass) event;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventClass.CLASS_ICON + \"|\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventClass.isDone() + \"|\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventClass.getDescription() + \"|\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "AndreWongZH": 1,
      "durianpancakes": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/EventStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventListEncoder eventListEncoder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventListDecoder eventListDecoder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface userInterface;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventStorageManager(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListEncoder \u003d new EventListEncoder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListDecoder \u003d new EventListDecoder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void saveData(ArrayList\u003cEvent\u003e eventList) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEventList \u003d eventListEncoder.encodeEventList(eventList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + fileName), encodedEventList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventParameter loadData() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File eventFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Scanner sc \u003d new Scanner(eventFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                ArrayList\u003cEvent\u003e eventList \u003d eventListDecoder.decodeEventList(data);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return separateEventsIntoList(eventList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (StorageSeparatorException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Storage corrupted\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventParameter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventParameter separateEventsIntoList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                ccas.add(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tuitions.add(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                classes.add(event);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tests.add(event);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventParameter(ccas, tests, classes, tuitions);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 15,
      "durianpancakes": 72
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import dorkbox.notify.Notify;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * To decode the content in the quizzes text file and add them in an Arraylist as quizzes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * to initialize the quiz list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListDecoder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e decodeQuizList(ArrayList\u003cString\u003e encodedQuizList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final ArrayList\u003cQuiz\u003e decodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (String encodedQuiz : encodedQuizList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            decodedQuizzes.add(decodeQuizFromString(encodedQuiz));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (Quiz quiz : decodedQuizzes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            long numDays \u003d DAYS.between(LocalDate.now(), quiz.getLastAccessed());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (numDays \u003c\u003d -2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                Notify.create()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        .title(\"Plan\u0026score Notification\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        .text(\"you have outdated quizzes! Attempt them now!\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        .hideAfter(10000)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        .showInformation();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return decodedQuizzes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private Quiz decodeQuizFromString(String encodedQuiz) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] data \u003d encodedQuiz.trim().split(\"\\\\|\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String question \u003d data[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option1 \u003d data[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option2 \u003d data[2];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option3 \u003d data[3];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String option4 \u003d data[4];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String answer \u003d data[5];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String explanation \u003d data[6];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        LocalDate lastAccessed \u003d LocalDate.parse(data[7]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return new Quiz(question, option1, option2, option3, option4, answer, explanation, lastAccessed);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 48,
      "AndreWongZH": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * To encode the String form of quizzes in the Arraylist and store them in a text file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cString\u003e encodeQuizList(ArrayList\u003cQuiz\u003e quizList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (Quiz quiz: quizList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            encodedQuizzes.add(quiz.convertToData());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return encodedQuizzes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 21,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/QuizStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * Help manage the storage of quizzes into a text file and load quizzes from the file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * when the program is executed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final QuizListEncoder quizListEncoder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final QuizListDecoder quizListDecoder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public QuizStorageManager(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListEncoder \u003d new QuizListEncoder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListDecoder \u003d new QuizListDecoder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Load the content of the quiz text file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e loadData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        File quizFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                Scanner sc \u003d new Scanner(quizFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                return quizListDecoder.decodeQuizList(data);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void saveData(ArrayList\u003cQuiz\u003e quizList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizList \u003d quizListEncoder.encodeQuizList(quizList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + filePath), encodedQuizList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 61,
      "AndreWongZH": 7,
      "durianpancakes": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class StorageManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String EMPTY_FILE_NAME \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected static String DIRECTORY_FOLDER_PATH \u003d new File(\"data\").getAbsolutePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected String fileName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public StorageManager(String fileName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert !fileName.equals(EMPTY_FILE_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected boolean createDataFile() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File file \u003d new File(DIRECTORY_FOLDER_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDirectoryCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        file \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isDirectoryCreated) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory not found, creating...\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory found...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return file.createNewFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9,
      "durianpancakes": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CalendarWeekRenderer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.ListWeekCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class CalendarWeekRenderer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final int [] eventCounters \u003d {1, 1, 1, 1, 1, 1, 1};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public CalendarWeekRenderer(EventManager eventManager, ListWeekCommand listWeekCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        renderWeekSchedule(listWeekCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void renderWeekSchedule(ListWeekCommand listWeekCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e weekMasterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cCalendar\u003e daysOfWeek \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (listWeekCommand \u003d\u003d ListWeekCommand.CURRENT_WEEK) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            weekMasterList \u003d eventManager.getCurrentWeekEventMasterList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            daysOfWeek \u003d dateTimeParser.getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (listWeekCommand \u003d\u003d ListWeekCommand.NEXT_WEEK) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 7);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            weekMasterList \u003d eventManager.getNextWeekEventMasterList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            daysOfWeek \u003d dateTimeParser.getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        CalendarWeekRendererUtils utils \u003d new CalendarWeekRendererUtils(weekMasterList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Sort master list before proceeding"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Collections.sort(weekMasterList.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // 17 spaces per day"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Printing DAY headers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // 6 spaces before each DAY_LABEL"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder dayLabelString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(getSpaces(6));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(utils.getDayLabel(i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(getSpaces(6));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(dayLabelString.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder todayLabelString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            todayLabelString.append(utils.getIsToday(daysOfWeek.get(i)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(todayLabelString.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Printing DATE headers"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder dateHeaderString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(getSpaces(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(getDateLabel(daysOfWeek, i));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(getSpaces(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(dateHeaderString.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        while (!utils.isThereNothingLeftToPrint()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Print in order of ICON -\u003e DESCRIPTION -\u003e START-END TIMES"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // NOTE: DOES NOT SUPPORT TUITION LOCATION YET"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder eventIconString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventIconString.append(getEventIcons(utils, weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder eventDescriptionString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventDescriptionString.append(getDescriptions(utils, weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder eventStartEndString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventStartEndString.append(getStartEndTime(utils, weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder breakTimeString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(getBreakTimeString(utils, weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(eventIconString.toString(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    eventDescriptionString.toString(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    eventStartEndString.toString(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    EMPTY_STRING,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    breakTimeString.toString(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    EMPTY_STRING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getEventIcons(CalendarWeekRendererUtils utils, ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder eventIconsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (utils.getCounter(counterIndex) !\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String iconString \u003d events.get(eventCounters[counterIndex] - 1).getIcon();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(indexString);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(iconString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(getSpaces(17 - iconString.length() - indexString.length()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(getSpaces(17));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return eventIconsString.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getDescriptions(CalendarWeekRendererUtils utils, ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder descriptionsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (utils.getCounter(counterIndex) !\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String descriptionString \u003d events.get(eventCounters[counterIndex] - 1).getDescription();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (descriptionString.length() \u003e 14) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                descriptionString \u003d descriptionString.substring(0, 11) + \"...\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(descriptionString);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(17 - descriptionString.length() - indexStringLength));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(17));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return descriptionsString.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getStartEndTime(CalendarWeekRendererUtils utils, ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder startEndTimesString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (utils.getCounter(counterIndex) !\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar startCalendar \u003d events.get(eventCounters[counterIndex] - 1).getStart();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar endCalendar \u003d events.get(eventCounters[counterIndex] - 1).getEnd();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String startString \u003d dateTimeParser.parseTime(startCalendar);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String endString \u003d dateTimeParser.parseTime(endCalendar);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String startEndString \u003d startString + \"-\" + endString;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(startEndString);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(17 - startEndString.length() - indexStringLength));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(17));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return startEndTimesString.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getBreakTimeString(CalendarWeekRendererUtils utils, ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder breakTimeString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (utils.getCounter(counterIndex) !\u003d 0) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (utils.getCounter(counterIndex) !\u003d 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                String indexString \u003d eventCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Calendar thisEventEnd \u003d events.get(eventCounters[counterIndex] - 1).getEnd();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Calendar nextEventStart \u003d events.get(eventCounters[counterIndex]).getStart();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                int hours \u003d nextEventStart.get(Calendar.HOUR_OF_DAY) - thisEventEnd.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                int minutes \u003d nextEventStart.get(Calendar.MINUTE) - thisEventEnd.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(hours).append(\"h\").append(minutes).append(\"m break\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            utils.reduceCounter(counterIndex);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventCounters[counterIndex]++;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            breakTimeString.append(getSpaces(17));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return breakTimeString.toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getSpaces(int num) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \" \".repeat(Math.max(0, num));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getDateLabel(ArrayList\u003cCalendar\u003e daysOfWeek, int num) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar calendar \u003d daysOfWeek.get(num);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[\" + dateTimeParser.obtainFormattedDayAndMonthString(calendar) + \"]\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "durianpancakes": 204
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CalendarWeekRendererUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class CalendarWeekRendererUtils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final int[] numEventsCounter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public CalendarWeekRendererUtils(ArrayList\u003cArrayList\u003cEvent\u003e\u003e weekMasterList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        numEventsCounter \u003d new int[7];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[0] \u003d weekMasterList.get(0).size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[1] \u003d weekMasterList.get(1).size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[2] \u003d weekMasterList.get(2).size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[3] \u003d weekMasterList.get(3).size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[4] \u003d weekMasterList.get(4).size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[5] \u003d weekMasterList.get(5).size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.numEventsCounter[6] \u003d weekMasterList.get(6).size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void reduceCounter(int counterIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        numEventsCounter[counterIndex]--;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getCounter(int counterIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return numEventsCounter[counterIndex];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean isThereNothingLeftToPrint() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return numEventsCounter[0] \u003d\u003d 0 \u0026\u0026 numEventsCounter[1] \u003d\u003d 0 \u0026\u0026 numEventsCounter[2] \u003d\u003d 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 numEventsCounter[3] \u003d\u003d 0 \u0026\u0026 numEventsCounter[4] \u003d\u003d 0 \u0026\u0026 numEventsCounter[5] \u003d\u003d 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 numEventsCounter[6] \u003d\u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDayLabel(int num) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (num) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_MONDAY_LABEL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_TUESDAY_LABEL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_WEDNESDAY_LABEL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_THURSDAY_LABEL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_FRIDAY_LABEL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_SATURDAY_LABEL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_SUNDAY_LABEL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getEventDuration(Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int hours \u003d end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int minutes \u003d end.get(Calendar.MINUTE) - end.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return hours + \"h\" + minutes + \"m\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIsToday(Calendar compareCalendar) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar today \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (dateTimeParser.isDateEqual(compareCalendar, today)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return getSpaces(5) + \"[TODAY]\" + getSpaces(5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return getSpaces(17);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getSpaces(int num) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \" \".repeat(Math.max(0, num));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UserInterface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.ControlManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.ListWeekCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.ConfigStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static UserInterface userInterface \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static UserInterface getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (userInterface \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return userInterface;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showWelcomeMessage(ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser(Messages.MESSAGE_HELLO_FROM_DUKE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser(Messages.MESSAGE_HELLO + configParameter.getName(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_SHOW_HOURS + configParameter.getRecommendedHours());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser(Messages.MESSAGE_PROMPT_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showToUser(String... message) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void printArray(ArrayList\u003cString\u003e stringArrayList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert stringArrayList !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (String line : stringArrayList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            showToUser(line);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean checkIfProgramEnds(CommandType commandType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType !\u003d CommandType.BYE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean runUI(Model model,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                         EventStorageManager eventStorageManager,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                         QuizStorageManager quizStorageManager) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String line \u003d getUserCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!line.trim().isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ControlManager controlManager \u003d new ControlManager(line, model,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    eventStorageManager, quizStorageManager);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return checkIfProgramEnds(commandType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printWeekSchedule(EventManager eventManager, ListWeekCommand listWeekCommand) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        new CalendarWeekRenderer(eventManager, listWeekCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "AndreWongZH": 29,
      "durianpancakes": 58
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class AddEventCcaJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addCcaToList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball camp \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1600\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String actualOutputs \u003d cca.get(0).getDescription();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedOutputs \u003d \"basketball camp\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "untitle4": 14,
      "AndreWongZH": 5,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddEventClassJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addClassToList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Math /s 2020-08-19 1300 /e 2020-08-19 1400\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 4,
      "durianpancakes": 4,
      "elizabethcwt": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddEventTuitionJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuitionManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class AddEventTuitionJUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void addEvent_validTuition_noException() throws EmptyParameterException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            MissingParameterException, ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(tuitions,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        eventTuitionManager.add(\"add tuition /n math tuition \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/l home\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuition eventTuition \u003d new EventTuition(\"math tuition\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-10-13 1500\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-10-13 1700\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"home\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertEquals(tuitions.get(0), eventTuition);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void addEvent_invalidTuition_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(tuitions,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(EmptyParameterException.class, () -\u003e eventTuitionManager.add(\"/n /s /e /l\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(MissingParameterException.class, () -\u003e eventTuitionManager.add(\"/n math tuition \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/s 2020-09-22 1700 /e 2020-09-22 1800\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 51
    }
  },
  {
    "path": "src/test/java/seedu/duke/AddTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddTestJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addTestToList() throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 20,
      "AndreWongZH": 4,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventCcaJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void deleteCcaInList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"delete cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.delete(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutput \u003d eventCcaManager.getCcaListSize();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedOutput \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "untitle4": 24,
      "AndreWongZH": 4,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventClassJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addClassToList() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n English lesson \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Science lesson \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String [] userInput \u003d \"delete class 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventClassManager.delete(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "AndreWongZH": 4,
      "durianpancakes": 4,
      "elizabethcwt": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeleteTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteTestJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void deleteTestFromList() throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"delete test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.delete(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 32,
      "AndreWongZH": 4,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/DoneEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DoneEventCcaJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setCcaDone() throws EmptyParameterException, MissingParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"done cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.setDone(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean actualOutputs \u003d cca.get(0).isDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "untitle4": 25,
      "AndreWongZH": 5,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/DoneEventTuitionJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuitionManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class DoneEventTuitionJUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void setValidTuitionDone() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(testUtils.getTuitionList(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String [] userInput \u003d \"done tuition 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventTuitionManager.setDone(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean actualOutputs \u003d eventTuitionManager.getTuitions().get(0).isDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void setTuitionDone_invalidIndex_exceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(testUtils.getTuitionList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String [] userInputIndexTooLarge \u003d \"done tuition 5\".trim().split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String [] userInputIndexNegative \u003d \"done tuition -1\".trim().split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e eventTuitionManager.setDone(userInputIndexTooLarge));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e eventTuitionManager.setDone(userInputIndexNegative));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 51
    }
  },
  {
    "path": "src/test/java/seedu/duke/DoneTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class DoneTestJUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setTestDoneFromList() throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test, testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"done test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.setDone(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean actualOutputs \u003d test.get(0).isDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 33,
      "AndreWongZH": 4,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/TestUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class TestUtils {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventManager getEmptyEventManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventManager(new EventParameter(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                new ConfigParameter(\"me\", 10, true));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventList() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventCca(\"Basketball training\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-21 1800\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-21 1900\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventClass(\"Math tuition\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-22 1400\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-22 1600\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventTest(\"CS2113T Finals\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-04 1500\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-04 1600\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventTuition(\"English\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-05 1600\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-05 1800\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"home\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitionList() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions.add(new EventTuition(\"math\", dateTimeParser.convertStringToCalendar(\"2020-09-26 1400\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-26 1500\"), \"home\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions.add(new EventTuition(\"english\", dateTimeParser.convertStringToCalendar(\"2020-09-27 1400\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-27 1500\"), \"tuition centre\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "durianpancakes": 51
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/ControlManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.EventStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.QuizStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ControlManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void runLogic_listEventInput_expectListCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ControlManager controlManager \u003d initializeControlManager(\"list event\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualCommandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(CommandType.LIST, actualCommandType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void runLogic_byeInput_expectByeCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ControlManager controlManager \u003d initializeControlManager(\"bye\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualCommandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(CommandType.BYE, actualCommandType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void runLogic_invalidInput_expectNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ControlManager controlManager \u003d initializeControlManager(\"invalid command\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualCommandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualCommandType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ControlManager initializeControlManager(String userInput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d new Model(new EventManager(new EventParameter(), new ConfigParameter()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ContactManager(), new QuizManager(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventStorageManager eventStorageManager \u003d new EventStorageManager(\"events.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        QuizStorageManager quizStorageManager \u003d  new QuizStorageManager(\"quiz.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new ControlManager(userInput, model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                eventStorageManager, quizStorageManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 50
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/EventManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.TestUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class EventManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    void addTestToList_exceedTime() throws MissingParameterException, EmptyParameterException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventManager eventManager \u003d new EventManager(new EventParameter(), new ConfigParameter(\"me\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                10, true));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventManager.getTestManager().add(\"add test /n Math test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1100 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventManager.getTestManager().add(\"add test /n Eng test \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1600 /e 2020-09-26 2300\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventManager.getTestManager().getTestListSize();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/ModelExtractorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelExtractor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ModelExtractorTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void retrieveModel_typeClass_eventClassManager() throws InvalidModelException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d initializeModel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelExtractor modelExtractor \u003d new ModelExtractor(model, ModelType.CLASS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain actualModel \u003d modelExtractor.retrieveModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(EventClassManager.class, actualModel.getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void retrieveModel_typeNull_null() throws InvalidModelException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d initializeModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelExtractor modelExtractor \u003d new ModelExtractor(model, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain actualModel \u003d modelExtractor.retrieveModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Model initializeModel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new Model(new EventManager(new EventParameter(), new ConfigParameter()), new ContactManager(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new QuizManager(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "AndreWongZH": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/command/CommandFactoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class CommandFactoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void generateActionableCommand_addType_addCommandClass() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Command actualCommand \u003d new CommandFactory(CommandType.ADD, \"\").generateActionableCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(AddCommand.class, actualCommand.getClass());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void generateActionableCommand_nullType_addCommandClass() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Command actualCommand \u003d new CommandFactory(CommandType.BYE, \"\").generateActionableCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void execute_nullModel_expectException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(\"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(IncompleteListCommandException.class, () -\u003e listCommand.execute(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/parser/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingModelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_deleteString_deleteCommandType() throws InvalidCommandException, MissingModelException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualType \u003d new CommandParser(\"delete 22\").extractCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(CommandType.DELETE, actualType);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_singleDoneString_expectException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser(\"done\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(MissingModelException.class, commandParser::extractCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_randomString_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser(\"random string\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(InvalidCommandException.class, commandParser::extractCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/parser/ModelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ModelParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_singleString_expectNull() throws InvalidModelException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType actualType \u003d new ModelParser(\"single\").extractModel();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualType);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_getTuitionString_expectException() throws InvalidModelException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType actualType \u003d new ModelParser(\"add tuition\").extractModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(ModelType.TUITION, actualType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_invalidString_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelParser modelParser \u003d new ModelParser(\"random string\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(InvalidModelException.class, modelParser::extractModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/contact/ContactTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ContactTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/FindScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class FindScheduleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindScheduleTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        cal.set(2020, Calendar.MARCH, 10, 23,10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math exam\", cal, cal));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"English exam\", cal, cal));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getFilteredEvents_matchingKeyword_oneSearchResult() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(\"math\", classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedEvents \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"[CLASS] Math exam from 10th Mar 2020, 11:10PM to 10th Mar 2020, 11:10PM\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedEvents, actualEvents);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getFilteredEvents_nonMatchingKeyword_noSearchResult() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(\"science\", classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedEvents, actualEvents);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getFilteredEvents_matchingMultipleKeyword_twoSearchResult() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(\"math english\", classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedEvents \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"[CLASS] Math exam from 10th Mar 2020, 11:10PM to 10th Mar 2020, 11:10PM\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"[CLASS] English exam from 10th Mar 2020, 11:10PM to 10th Mar 2020, 11:10PM\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedEvents, actualEvents);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 52
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/ListScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ListScheduleTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_emptySchedule_expectException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(EmptyListException.class, listSchedule::getPrintableEvents);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_classSchedule_allClasses() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventClass eventClass \u003d new EventClass(\"Math\", startCalendar, endCalendar);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(eventClass);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \", \"1. [CLASS] Math from 26th Feb 2019, \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        + \"02:00PM to 27th Feb 2019, 03:00PM\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_allSchedule_allEvents() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas.add(new EventCca(\"Basketball\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests.add(new EventTest(\"Science\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tuitions.add(new EventTuition(\"English\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \"Choa Chu Kang Avenue 5 Block 433\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [CLASS] Math from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"CCAs: \","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [CCA] Basketball from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"Tests: \","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [TEST] Science from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"Tuitions: \","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [TUITION] English from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                                + \" at Choa Chu Kang Avenue 5 Block 433\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_classScheduleToday_oneClass() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 14);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        calendar.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", calendar,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(\"today\", classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String formattedDate \u003d dateTimeParser.obtainFormattedDateTimeString(calendar);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \", \"1. [CLASS] Math from \" + formattedDate"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        + \" to 27th Feb 2019, 03:00PM\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_classScheduleWeek() throws EmptyListException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", todayDate.toString() + \" 1400\", \"2019-02-27 1500\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(\"week\", classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String formattedDate \u003d todayDate.format(DateTimeFormatter.ofPattern(\"MMM yyyy\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String day \u003d Calendar.DAY_OF_MONTH;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(day, String.format(\"1. [CLASS] [NOT DONE] Math from %sst %s ,\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        + \" 02:00 PM to 27th Feb 2019 , 03:00 PM\", todayDate.getDayOfMonth(), formattedDate)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 115,
      "durianpancakes": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/AddQuizJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class AddQuizJUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void addQuizToList() throws EmptyParameterException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizzes);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.add(\"add quiz /q What is 1+1? /o1 1 /o2 2 \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/o3 3 /o4 4 /a 2 /exp 1 plus 1 must be equal to 2!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int actualQuizNumber \u003d quizManager.getQuizListSize();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedQuizNumber \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualQuizNumber, expectedQuizNumber);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String actualQuizExplanation \u003d \"1 plus 1 must be equal to 2!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedQuizExplanation \u003d quizManager.getQuizList().get(0).getExplanation();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualQuizExplanation, expectedQuizExplanation);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 27
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/DeleteQuizJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class DeleteQuizJUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void deleteQuizToList() throws EmptyParameterException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizzes);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String userInput \u003d \"delete quiz 1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.add(\"add quiz /q What is 1+1? /o1 1 /o2 2 \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/o3 3 /o4 4 /a 2 /exp 1 plus 1 must be equal to 2!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.delete(separatedInputs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int actualQuizNumber \u003d quizManager.getQuizListSize();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedQuizNumber \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualQuizNumber, expectedQuizNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/ListQuizJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class ListQuizJUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    void listQuizTest() throws EmptyParameterException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizzes);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.add(\"add quiz /q What is 1+1? /o1 1 /o2 2 \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/o3 3 /o4 4 /a 2 /exp 1 plus 1 must be equal to 2!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String actualOutput \u003d \"Question \" + (0 + 1) + \":\\n\" + quizzes.get(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedOutput \u003d \"Question 1:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"What is 1+1?\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(1) 1\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(2) 2\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(3) 3\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(4) 4\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"Explanation: 1 plus 1 must be equal to 2!\\n\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/QuizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class QuizTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "James Arthur"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "10"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "AndreWongZH": 1,
      "durianpancakes": 1
    }
  }
]
