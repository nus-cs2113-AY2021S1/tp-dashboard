[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "# Hospitalsaurus ReX project"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "This is a Hospitalsaurus ReX project. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/rex/Rex.java` file, right-click it, and choose `Run Rex.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \u003e Task :compileJava UP-TO-DATE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \u003e Task :classes UP-TO-DATE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \u003e Task :Rex.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t  _    _                 _ _        _                                  _____     __   __"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t | |  | |               (_| |      | |                                |  __ \\    \\ \\ / /"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t | |__| | ___  ___ _ __  _| |_ __ _| |___  __ _ _   _ _ __ _   _ ___  | |__) |___ \\ V /"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t |  __  |/ _ \\/ __| \u0027_ \\| | __/ _` | / __|/ _` | | | | \u0027__| | | / __| |  _  // _ \\ \u003e \u003c  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t | |  | | (_) \\__ | |_) | | || (_| | \\__ | (_| | |_| | |  | |_| \\__ \\ | | \\ |  __// . \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t |_|  |_|\\___/|___| .__/|_|\\__\\__,_|_|___/\\__,_|\\__,_|_|   \\__,_|___/ |_|  \\_\\___/_/ \\_\\"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t                  | |                                                                   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t                  |_|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t How may i assist you?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   Enter command: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/rex/RexTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 19,
      "-": 49
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    mainClassName \u003d \"seedu.rex.Rex\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    archiveBaseName \u003d \"rex\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 3,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Jun Hong | [Github](https://github.com/TanJunHong) | [Portfolio](docs/team/tanjunhong.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Liew You Sheng | [Github](https://github.com/GoldenCorgi) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randynyl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Randy Ng | [Github](https://github.com/randynyl/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ychong032"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chong Yow Lim | [Github](https://github.com/ychong032) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Kiat Hwe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 1,
      "kiathwe97": 2,
      "ychong032": 1,
      "randynyl": 1,
      "-": 4,
      "GoldenCorgi": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Administrative staff of hospitals who are overworked from having various responsibilities with repetitive tasks relating to doctors and patients."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Aim: To facilitate the role of the administrative staff and help them automate most of the mundane tasks that they have to do. This enables the admin staff to have a one stop application to handle appointments and fees across different specialised clinics in the hospital. Administrative staff will have more time to help patients or do things that are more meaningful, such as answering queries from patients or doctors."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "|v1.0|admin|enter patient\u0027s details and store it|refer to them whenever I require them.|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "|v1.0|admin|retrieve patient\u0027s details|use them to schedule appointments.|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "|v1.0|admin|remove existing patient\u0027s details|remove unnecessary information.|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "|v1.0|admin|view all appointments of a patient|remind patients of their appointments.|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "|v1.0|admin|book an appointment for a patient|let them see the doctor.|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* The program must be easy for admins to use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* The program must store patient\u0027s information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* *Hospitalsarus Rex* - The name of the program"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 10,
      "-": 28
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "# Hospitalsaurus ReX"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 1,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Hospitalsaurus ReX is a program to help administrative staff to keep track of patients."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1. Down the latest version of `Hospitalsaurus ReX` from [here](https://github.com/AY2021S1-CS2113-T16-4/tp)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "### Adding a patient: `add`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Adds a patient to the database."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Format: `add NRIC`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* The `NRIC` must be valid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Program will prompt name and date of birth to be entered."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`add S9922312D`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`add S7423213Z`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "### Retrieve a patient: `retrieve`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Retrieves a patient to the database."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Format: `retrieve NRIC`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* The `NRIC` must be valid and in the database."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Program will show name and date of birth of the patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`retrieve S9922312D`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`retrieve S7423213Z`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "### Edit a patient: `edit`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Edits a patient to the database."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Format: `edit NRIC`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* The `NRIC` must be valid and in the database."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Program will prompt name and date of birth to be edited."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`edit S9922312D`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`edit S7423213Z`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "### Delete a patient: `delete`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Deletes a patient to the database."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Format: `delete NRIC`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* The `NRIC` must be valid and in the database."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Program will delete patient with nric as `NRIC`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`delete S9922312D`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`delete S7423213Z`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "### Create an appointment: `create`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Creates an appointment date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Format: `create`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Program will prompt for date to be inputted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`create`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "### Create an appointment: `book`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Books an appointment date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Format: `book NRIC`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* The `NRIC` should be valid and in the database, else `add` command will run"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Program will show a lists of available dates and prompt for which date to use."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`book S9922312D`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "`book S7423213Z`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "**A**: Clone the program to the other computer, and copy the data folder over."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Add patient `add NRIC`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Retrieve patient `retrieve NRIC`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Edit patient `edit NRIC`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Delete patient `delete NRIC`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Create appointment `create`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Book appointment `book NRIC`"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 75,
      "-": 33
    }
  },
  {
    "path": "docs/team/tanjunhong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "# Tan Jun Hong - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Github T-shirt Winner"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Bare-bones code"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "* Ability to retrieve patients information using NRIC"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 8
    }
  },
  {
    "path": "src/main/java/seedu/rex/Rex.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Rex {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static PatientList patients;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static Logger logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    private ArrayList\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes Rex."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param filePath Path to store and load patients."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Rex(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert filePath !\u003d null \u0026\u0026 !filePath.equals(\"\") : \"File path cannot be empty!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        logger \u003d Logger.getLogger(\"Rex\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            logger.log(Level.INFO, \"going to load patients\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            patients \u003d new PatientList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            logger.log(Level.INFO, \"loaded patients\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            appointments \u003d storage.loadAppointments();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            logger.log(Level.INFO, \"loaded appointments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        } catch (RexException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            logger.log(Level.INFO, \"patients loading error\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            patients \u003d new PatientList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            logger.log(Level.INFO, \"No appointments found. Creating new appointments list.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Starts Rex."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param args Command line argument."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        new Rex(\"data/patients.txt\").run();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static PatientList getPatients() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return patients;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Runs Rex."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "randynyl"
        },
        "content": "                c.execute(patients, appointments, ui, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } catch (RexException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 79,
      "randynyl": 13
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ychong032"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ychong032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ychong032"
        },
        "content": " * Adds a patient to the list of patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ychong032"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ychong032"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String trimmedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public AddCommand(String trimmedCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        this.trimmedCommand \u003d trimmedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * Adds a new patient to the patient list using details inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param patients     List of patients."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param ui           Ui object of the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param storage      Storage object used for saving data to files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @throws RexException If there is an error in the NRIC inputted by the user, the data fails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     *                      to save successfully, or the NRIC already exists in the patient list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throws RexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"going to extract NRIC\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String nric \u003d extractNric(trimmedCommand, COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (patients.isExistingPatient(nric)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ychong032"
        },
        "content": "            throw new RexException(\"A patient with this NRIC is already registered!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"adding patient...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        patients.addNewPatient(ui.getPatientName(), nric, ui.getPatientDateOfBirth());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        ui.showPatientAdded(patients.getPatientUsingIndex(patients.getSize() - 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert !patients.getPatients().isEmpty() : \"No patients!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        storage.save(patients);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ychong032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 19,
      "ychong032": 35,
      "randynyl": 3
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/BookCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randynyl"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Books appointments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randynyl"
        },
        "content": "public class BookCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"book\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    private final String trimmedCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public BookCommand(String trimmedCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        this.trimmedCommand \u003d trimmedCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Books appointment for patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If appointment cannot be booked."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throws RexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"going to extract NRIC\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String nric \u003d extractNric(trimmedCommand, COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (appointments.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"No appointment sessions!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        if (!patients.isExistingPatient(nric)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            ui.printPatientNotFound(nric);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            ui.showCreatePatientMessage(nric);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            Rex.logger.log(Level.INFO, \"going to add patient...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            new AddCommand(\"add \" + nric).execute(patients, appointments, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String indexSelected \u003d ui.getAppointmentToBook(appointments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            int index \u003d Integer.parseInt(indexSelected) - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            if (index \u003c 0 || index \u003e\u003d appointments.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                throw new RexException(\"Index error!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            Rex.logger.log(Level.INFO, \"booking appointment for patient...\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            appointments.get(index).book(patients.getPatientFromNric(nric));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            ui.showAppointmentBookedMessage(appointments.get(index));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            assert !appointments.isEmpty() : \"No appointments!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            storage.saveAppointments(appointments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"Index error!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"File Write Error\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "randynyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 47,
      "randynyl": 30
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Parent Command class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public static final String MESSAGE \u003d Ui.LOGO + \"\\n How may i assist you?\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            .replace(\"\\n\", System.lineSeparator() + \"\\t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_ERROR \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public static final int LEGAL_NRIC_LENGTH \u003d 9;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public static final Set\u003cCharacter\u003e LEGAL_NRIC_STATUSES \u003d Set.of(\u0027S\u0027, \u0027T\u0027, \u0027F\u0027, \u0027G\u0027);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    boolean isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes command to execute and set exit status to false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If there is issue executing command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public abstract void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throws RexException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns Rex\u0027s exit status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Exit status."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Checks if a given \u003ccode\u003eString\u003c/code\u003e consists of only integer characters."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param string The \u003ccode\u003eString\u003c/code\u003e to be checked."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the string contains only integer characters; \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public boolean isInteger(String string) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        if (string \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ychong032"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            Integer.parseInt(string);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ychong032"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Extracts the NRIC from command inputted by the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param trimmedCommand Command that was trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param commandWord    Command that was called."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Patient\u0027s NRIC as a String."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If the NRIC inputted by the user is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String extractNric(String trimmedCommand, String commandWord) throws RexException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String nric \u003d trimmedCommand.replaceFirst(\"(?i)\" + commandWord, \"\").trim().toUpperCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (nric.isBlank()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"Please enter a valid NRIC after \u0027\" + commandWord + \"\u0027.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } else if (nric.length() !\u003d LEGAL_NRIC_LENGTH) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"Invalid NRIC length!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } else if (!LEGAL_NRIC_STATUSES.contains(nric.charAt(0))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"Beginning character of NRIC must be \u0027S\u0027, \u0027T\u0027, \u0027F\u0027, or \u0027G\u0027!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } else if (!isInteger(nric.substring(1, LEGAL_NRIC_LENGTH - 1))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"Number sequence of NRIC is invalid!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } else if (!Character.isLetter(nric.charAt(nric.length() - 1))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"Final character of NRIC must be an English alphabet!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            return nric;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 75,
      "ychong032": 18,
      "randynyl": 2
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/CreateAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randynyl"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Creates appointment."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randynyl"
        },
        "content": "public class CreateAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Creates appointment using date given."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"going to create appointment\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String date \u003d ui.getNewAppointmentDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            Appointment newAppointment \u003d new Appointment(LocalDate.parse(date));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            appointments.add(newAppointment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            ui.showAppointmentCreatedMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            ui.showDateInputError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randynyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 18,
      "randynyl": 29
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "import seedu.rex.data.hospital.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": " * Deletes a \u003ccode\u003ePatient\u003c/code\u003e\u0027s data based on his NRIC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    private final String trimmedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    public DeleteCommand(String trimmedCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        this.trimmedCommand \u003d trimmedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Deletes patients using NRIC."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If NRIC has issues."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            throws RexException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"going to extract NRIC\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        String nric \u003d extractNric(trimmedCommand, COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        if (patients.isExistingPatient(nric)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            Patient deletedPatient \u003d patients.deletePatient(nric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            assert deletedPatient !\u003d null : \"Deleted patient is null!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            ui.showPatientDeleted(deletedPatient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            for (int i \u003d 0; i \u003c appointments.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "                String tempNric \u003d appointments.get(i).getPatient().getNric();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "                if (tempNric.contentEquals(nric)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "                    appointments.remove(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            ui.printPatientNotFound(nric);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage.save(patients);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 22,
      "kiathwe97": 39
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Edits a patient from the list of patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    private final String trimmedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    public EditCommand(String trimmedCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        this.trimmedCommand \u003d trimmedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Edits an existing patient to the patient list using details inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @param patients     List of patients."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @param ui           Ui object of the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @param storage      Storage object used for saving data to files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @throws RexException If there is an error in the NRIC inputted by the user, the data fails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     *                      to save successfully, or the NRIC already exists in the patient list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "            throws RexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"going to extract NRIC\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        String nric \u003d extractNric(trimmedCommand, COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        if (!patients.isExistingPatient(nric)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "            throw new RexException(\"A patient with this NRIC has not been registered!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d patients.editExistingPatient(ui.getPatientName(), nric, ui.getPatientDateOfBirth());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert index \u003e -1 : \"Invalid index!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showPatientEditted(patients.getPatientUsingIndex(index));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        storage.save(patients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 13,
      "GoldenCorgi": 41
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Exits program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Says goodbye to user and exits Rex."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 27,
      "randynyl": 4
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/ListAppointmentsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randynyl"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randynyl"
        },
        "content": "public class ListAppointmentsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appointments\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    private final String trimmedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public ListAppointmentsCommand(String trimmedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        this.trimmedCommand \u003d trimmedCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * Lists appointments of a patient."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @throws RexException If the input NRIC does not exist in system"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            throws RexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"going to extract NRIC\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String nric \u003d extractNric(trimmedCommand, COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        if (!patients.isExistingPatient(nric)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            throw new RexException(\"A patient with this NRIC has not been registered!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        Patient targetPatient \u003d patients.getPatientFromNric(nric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert targetPatient !\u003d null : \"Null target patient!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        ui.showAppointmentsListHeader(nric);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (i \u003d 0; i \u003c appointments.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            if (appointments.get(i).getPatient().equals(targetPatient)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showAppointmentLine(appointments.get(i), i + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            ui.showNoBookedAppointmentsMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randynyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 14,
      "randynyl": 44
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/ListPatientsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ListPatientsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * List patients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If there is issue executing command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throws RexException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.listPatients(patients);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 30
    }
  },
  {
    "path": "src/main/java/seedu/rex/commands/RetrieveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Retrieves patient details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class RetrieveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"retrieve\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String trimmedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public RetrieveCommand(String trimmedCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.trimmedCommand \u003d trimmedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Retrieves patient from patient list using details inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients     PatientList object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui           Ui object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage      Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If there is issue executing command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(PatientList patients, ArrayList\u003cAppointment\u003e appointments, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throws RexException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"patient ArrayList is null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Rex.logger.log(Level.INFO, \"going to extract NRIC\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String nric \u003d extractNric(trimmedCommand, COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d patients.getExistingPatient(nric);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert index \u003e -2 : \"Unexpected index!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"No such patient!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showPatient(patients.getPatientUsingIndex(index));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 47,
      "randynyl": 3
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/AppointmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randynyl"
        },
        "content": "package seedu.rex.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Contains ArrayList of appointments."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randynyl"
        },
        "content": "public class AppointmentList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    private final ArrayList\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public AppointmentList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * Initializes patients ArrayList using parameter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param appointments Appointments list to use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public AppointmentList(ArrayList\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        this.appointments \u003d appointments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randynyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 3,
      "randynyl": 25
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/DoctorList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.hospital.Doctor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Contains ArrayList of doctors."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class DoctorList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final ArrayList\u003cDoctor\u003e doctors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes doctors ArrayList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DoctorList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        doctors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes doctors ArrayList using parameter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param doctors Doctors list to use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DoctorList(ArrayList\u003cDoctor\u003e doctors) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.doctors \u003d doctors;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns size of doctors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Length of doctors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return doctors.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns doctor using index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param index Index of doctor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return doctor at that index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Doctor getDoctorUsingIndex(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return doctors.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Adds doctor to doctors ArrayList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param doctor doctor to add."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        doctors.add(doctor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 57
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/PatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.hospital.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Contains ArrayList of patients."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class PatientList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final ArrayList\u003cPatient\u003e patients;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes patients ArrayList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public PatientList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes patients ArrayList using parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients Patients list to use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public PatientList(ArrayList\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.patients \u003d patients;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns size of patients."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Length of patients."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return patients.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns patient using index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param index Index of patient."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return patient at that index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Patient getPatientUsingIndex(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return patients.get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Adds patient to patients ArrayList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patient patient to add."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        patients.add(patient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * Adds a new patient with given details to \u003ccode\u003epatients\u003c/code\u003e ArrayList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param name        Name of the patient."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param nric        NRIC of the patient."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param dateOfBirth Patient\u0027s date of birth."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public void addNewPatient(String name, String nric, LocalDate dateOfBirth) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        addPatient(new Patient(name, nric, dateOfBirth));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Edits an existing patient with given details to \u003ccode\u003epatients\u003c/code\u003e ArrayList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @param name        Name of the patient."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @param nric        NRIC of the patient."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @param dateOfBirth Patient\u0027s date of birth."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    public int editExistingPatient(String name, String nric, LocalDate dateOfBirth) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        int idx \u003d getExistingPatient(nric);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        patients.remove(idx);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        Patient patient \u003d (new Patient(name, nric, dateOfBirth));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        patients.add(idx, patient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        return idx;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Checks if the NRIC entered by the user already exists in the patient list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param nric The NRIC entered by the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if NRIC already exists; \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public boolean isExistingPatient(String nric) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return getExistingPatient(nric) \u003e -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Finds NRIC entered by the user from the patient list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns -1 if not found."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param nric The NRIC entered by the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return index of the patient with the NRIC; -1 otherwise."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public int getExistingPatient(String nric) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert nric !\u003d null \u0026\u0026 !nric.equals(\"\") : \"Cannot get patient of null nric\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            if (getPatientUsingIndex(i).getNric().equals(nric)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Gets patient using NRIC."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return patient with given NRIC."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public Patient getPatientFromNric(String nric) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            if (patient.getNric().equals(nric)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "randynyl"
        },
        "content": "                return patient;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     * Deletes Patient with the NRIC entered by the user."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     * @param nric NRIC entered by the user"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     * @return the deleted \u003ccode\u003ePatient\u003c/code\u003e Object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    public Patient deletePatient(String nric) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        for (i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            if (getPatientUsingIndex(i).getNric().equals(nric)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        return patients.remove(i);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatients() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return patients;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 96,
      "kiathwe97": 16,
      "ychong032": 11,
      "randynyl": 11,
      "GoldenCorgi": 15
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/exception/RexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Throws exceptions relating to Rex."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class RexException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String OOPS \u003d \"☹ OOPS!!! \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes message to throw."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param message Exception message to show."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public RexException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(OOPS + message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 18
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/hospital/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.data.hospital;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Appointment class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private Doctor doctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String notes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    private Boolean isBooked;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public Appointment(LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        isBooked \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setPatient(Patient patient) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Doctor getDoctor() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return doctor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getNotes() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setNotes(String notes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Checks if appointment is booked."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return If appointment is booked."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public Boolean isBooked() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        return isBooked;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Books an appointment for the patient."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patient Patient to schedule appointment with."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void book(Patient patient) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        isBooked \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void removeBooking() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        this.patient \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        isBooked \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Formats appointment to a string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String formatted."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String date \u003d this.date.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String bookedStatus;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String patientNric;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        if (isBooked) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            bookedStatus \u003d \"booked\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            bookedStatus \u003d \"available\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        if (patient !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            patientNric \u003d patient.getNric();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            patientNric \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        return date + \", \" + bookedStatus + \", \" + patientNric;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 69,
      "ychong032": 4,
      "randynyl": 35
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/hospital/Doctor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.data.hospital;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Doctor class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Doctor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 17
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/hospital/Hospital.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.data.hospital;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.DoctorList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Hospital class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Hospital {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private PatientList patients;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private DoctorList doctors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public PatientList getPatients() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return patients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setPatients(PatientList patients) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.patients \u003d patients;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DoctorList getDoctors() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return doctors;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setDoctors(DoctorList doctors) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.doctors \u003d doctors;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 38
    }
  },
  {
    "path": "src/main/java/seedu/rex/data/hospital/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.data.hospital;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Patient class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Vector\u003cAppointment\u003e appointmentHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    private LocalDate dateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public Patient(String name, String nric, LocalDate dateOfBirth) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        setNric(nric);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        setDateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.appointmentHistory \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public LocalDate getDateOfBirth() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public void setDateOfBirth(LocalDate dateOfBirth) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Vector\u003cAppointment\u003e getAppointmentHistory() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return appointmentHistory;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * Returns the \u003ccode\u003ePatient\u003c/code\u003e object as a String for printing or writing to a file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @return Patient\u0027s details as a String in a particular format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        return name + \", \" + nric + \", \" + dateOfBirth.format(DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 47,
      "ychong032": 14
    }
  },
  {
    "path": "src/main/java/seedu/rex/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.Rex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.BookCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.CreateAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.commands.ListAppointmentsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.commands.ListPatientsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.commands.RetrieveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.hospital.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Makes sense of user command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Reads inputted patient details and return the patient."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param line Input line to parse to patient details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Patient object with patient details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static Patient readPatient(String line) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert line !\u003d null \u0026\u0026 !line.equals(\"\") : \"No patients to read!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        StringBuilder record \u003d new StringBuilder(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        String name \u003d record.substring(0, record.indexOf(\", \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        // Deletes first comma separator."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        record.delete(0, record.indexOf(\", \") + 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        String nric \u003d record.substring(0, record.indexOf(\", \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        // Deletes second comma separator."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        record.delete(0, record.indexOf(\", \") + 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        LocalDate dateOfBirth \u003d LocalDate.parse(record.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        return new Patient(name, nric, dateOfBirth);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public static Appointment readAppointment(String line) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String[] appointmentComponents \u003d line.split(\", \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(appointmentComponents[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String bookedStatus \u003d appointmentComponents[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String nric \u003d appointmentComponents[2];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        Appointment appointment \u003d new Appointment(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        if (bookedStatus.equals(\"booked\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            appointment.book(Rex.getPatients().getPatientUsingIndex(Rex.getPatients().getExistingPatient(nric)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Reads and parse command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param fullCommand Input string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Command to be ran."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException if command does not exist."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static Command parse(String fullCommand) throws RexException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert fullCommand !\u003d null \u0026\u0026 !fullCommand.equals(\"\") : \"No command to parse!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        String trimmedCommand \u003d fullCommand.trim().toLowerCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] words \u003d trimmedCommand.split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ychong032"
        },
        "content": "            command \u003d new AddCommand(trimmedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case BookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            command \u003d new BookCommand(trimmedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case CreateAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new CreateAppointmentCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "            command \u003d new EditCommand(trimmedCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "            command \u003d new DeleteCommand(trimmedCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ListAppointmentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            command \u003d new ListAppointmentsCommand(trimmedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ListPatientsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new ListPatientsCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case RetrieveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new RetrieveCommand(trimmedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(Command.COMMAND_ERROR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 64,
      "kiathwe97": 1,
      "ychong032": 15,
      "randynyl": 24,
      "GoldenCorgi": 1
    }
  },
  {
    "path": "src/main/java/seedu/rex/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.hospital.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Loads and saves data to file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOAD_ERROR \u003d \"Error loading file.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String READ_ERROR \u003d \"Error reading file.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String DIRECTORY_ERROR \u003d \"Error creating directory.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String WRITE_ERROR \u003d \"Error writing file.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String APPOINTMENTS_FILE \u003d \"appointments.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String folder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String file;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes path of folder and file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param filePath Full file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert filePath !\u003d null \u0026\u0026 !filePath.equals(\"\") : \"Invalid filepath\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        folder \u003d filePath.substring(0, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        file \u003d filePath.substring(index + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Loads patients, stores them into ArrayList and returns the ArrayList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return ArrayList of patients."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If there is problem reading file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ArrayList\u003cPatient\u003e load() throws RexException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path path \u003d Paths.get(folder, file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ArrayList\u003cPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                BufferedReader bufferedReader \u003d Files.newBufferedReader(path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                while (true) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    Patient patient \u003d Parser.readPatient(line);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    patients.add(patient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                throw new RexException(READ_ERROR);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return patients;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Saves patients into file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients ArrayList of patients to save."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If there is problem writing or saving file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void save(PatientList patients) throws RexException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patients !\u003d null : \"Saving null patients ArrayList\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        StringBuilder patientsFileContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.getSize(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            // Need to format tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            patientsFileContent.append(patients.getPatientUsingIndex(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            patientsFileContent.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            Vector\u003cAppointment\u003e patientAppointments \u003d patients.getPatientUsingIndex(i).getAppointmentHistory();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path folderPath \u003d Paths.get(folder);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (!Files.exists(folderPath) \u0026\u0026 !new File(folder).mkdir()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(DIRECTORY_ERROR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path filePath \u003d Paths.get(folder, file);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            BufferedWriter bufferedWriter \u003d Files.newBufferedWriter(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            bufferedWriter.write(patientsFileContent.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(WRITE_ERROR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Saves appointments into file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments ArrayList of appointments to save."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws IOException If there is problem writing or saving file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void saveAppointments(ArrayList\u003cAppointment\u003e appointments) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        StringBuilder textToWrite \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        for (Appointment appointment : appointments) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            textToWrite.append(appointment.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            textToWrite.append(System.lineSeparator());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        String appointmentsFilePath \u003d folder + \"/\" + APPOINTMENTS_FILE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        FileWriter fw \u003d new FileWriter(appointmentsFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        fw.write(String.valueOf(textToWrite));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Loads appointments, stores them into ArrayList and returns the ArrayList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return ArrayList of appointments."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws FileNotFoundException If file does not exist."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public ArrayList\u003cAppointment\u003e loadAppointments() throws FileNotFoundException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        File appointmentsFile \u003d new File(folder + \"/\" + APPOINTMENTS_FILE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        Scanner s \u003d new Scanner(appointmentsFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            Appointment appointment \u003d Parser.readAppointment(s.nextLine());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            appointments.add(appointment);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        return appointments;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 114,
      "randynyl": 32
    }
  },
  {
    "path": "src/main/java/seedu/rex/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import seedu.rex.data.hospital.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import seedu.rex.data.hospital.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ychong032"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randynyl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Interacts with user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            \" _    _                 _ _        _                                  _____     __   __\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\t | |  | |               (_| |      | |                                |  __ \\\\    \\\\ \\\\ / /\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\t | |__| | ___  ___ _ __  _| |_ __ _| |___  __ _ _   _ _ __ _   _ ___  | |__) |___ \\\\ V / \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\t |  __  |/ _ \\\\/ __| \u0027_ \\\\| | __/ _` | / __|/ _` | | | | \u0027__| | | / __| |  _  // _ \\\\ \u003e \u003c  \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\t | |  | | (_) \\\\__ | |_) | | || (_| | \\\\__ | (_| | |_| | |  | |_| \\\\__ \\\\ | | \\\\ |  __// . \\\\\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \" \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\t |_|  |_|\\\\___/|___| .__/|_|\\\\__\\\\__,_|_|___/\\\\__,_|\\\\__,_|_|   \\\\__,_|___/ |_|  \\\\_\\\\___/_/ \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\\\_\\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\t                  | |                                                                   \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    + \"\\t                  |_|                                                                   \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    .replaceAll(\"\\n\", System.lineSeparator());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String DOTTED_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    private static final String DATE_ERROR \u003d \"Error in date format.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints string with indent."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param string String to print."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private void printWithIndent(String string) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println(\"\\t \" + string);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints dotted line."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println(\"\\t\" + DOTTED_LINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints error message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param message Error message to print."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(Command.MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints loading error message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showError(Storage.LOAD_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints exit message."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(ExitCommand.MESSAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints date error message."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public void showDateInputError() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        showError(DATE_ERROR);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * Prints a message to indicate successful addition of a patient."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @param patient The newly added \u003ccode\u003ePatient\u003c/code\u003e."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public void showPatientAdded(Patient patient) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        printWithIndent(\"Patient successfully added: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        printWithIndent(patient.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * Prints a message to indicate successful editting of a patient."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     * @param patient The newly editted \u003ccode\u003ePatient\u003c/code\u003e."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    public void showPatientEditted(Patient patient) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        printWithIndent(\"Patient successfully editted: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "        printWithIndent(patient.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     * Prints a message to indicate successful deletion of a patient."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     * @param patient The deleted \u003ccode\u003ePatient\u003c/code\u003e."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    public void showPatientDeleted(Patient patient) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        printWithIndent(\"Patient successfully deleted: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "        printWithIndent(patient.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kiathwe97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GoldenCorgi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Reads command from user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String command from user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println(\"Enter command: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * Reads the name of a new patient from the user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @return The name of the patient to be added."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public String getPatientName() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        printWithIndent(\"Enter patient name: \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ychong032"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * Reads the date of birth of a new patient from the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     * @return The date of birth of the patient."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ychong032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    public LocalDate getPatientDateOfBirth() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ychong032"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ychong032"
        },
        "content": "                printWithIndent(\"Enter patient date of birth (YYYY-MM-DD) including the dashes: \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ychong032"
        },
        "content": "                return LocalDate.parse(in.nextLine().trim());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ychong032"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ychong032"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ychong032"
        },
        "content": "                showDateInputError();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ychong032"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ychong032"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ychong032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ychong032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Shows patient details."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patient Patient to show."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showPatient(Patient patient) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assert patient !\u003d null : \"Cannot show null patient!\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Patient Details: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(patient.toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints patient not found message."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param nric NRIC inputted."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void printPatientNotFound(String nric) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        printWithIndent(\"Patient \" + nric + \" not found in database!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Gets appointment date from user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return User input string."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public String getNewAppointmentDate() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        printWithIndent(\"Please enter the date of appointment in YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints appointment creation message."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void showAppointmentCreatedMessage() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        printWithIndent(\"New appointment created!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Gets appointment to be booked."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointments Arraylist of appointments."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws RexException If no appointments are available."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getAppointmentToBook(ArrayList\u003cAppointment\u003e appointments) throws RexException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        printWithIndent(\"Here are the list of available appointments.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        for (Appointment appointment : appointments) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "randynyl"
        },
        "content": "            if (!appointment.isBooked()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "randynyl"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                printWithIndent(counter + \". \" + appointment.getDate().toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new RexException(\"No appointments available!\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Please enter the index of appointment to book\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Shows appointment booking message."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param appointment appointment that was booked."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void showAppointmentBookedMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Appointment on \" + appointment.getDate() + \" booked!\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints patient creation message."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param nric Patient\u0027s NRIC."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showCreatePatientMessage(String nric) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Creating patient \" + nric);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * Prints patient\u0027s appointment list header."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param nric Patient\u0027s NRIC"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void showAppointmentsListHeader(String nric) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        printWithIndent(\"Listing appointments for patient \" + nric + \": \");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * Prints details of patient\u0027s appointment."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param appointment appointment to be printed"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * @param counter     appointment counter under patient"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void showAppointmentLine(Appointment appointment, int counter) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        printWithIndent(counter + \". \" + appointment.getDate());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "randynyl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     * Prints message if patient has no booked appointments."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "randynyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    public void showNoBookedAppointmentsMessage() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "randynyl"
        },
        "content": "        printWithIndent(\"No booked appointments found!\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "randynyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints all patients."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param patients Patients to print."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void listPatients(PatientList patients) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"List of patients (\" + patients.getPatients().size() + \" in total):\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (Patient patient: patients.getPatients()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            printWithIndent(\"\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            printWithIndent(\"Name: \" + patient.getName());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            printWithIndent(\"NRIC: \" + patient.getNric());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            printWithIndent(\"DOB: \" + patient.getDateOfBirth());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 166,
      "kiathwe97": 10,
      "ychong032": 43,
      "randynyl": 57,
      "GoldenCorgi": 10
    }
  },
  {
    "path": "src/test/java/seedu/rex/RexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "class RexTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/rex/commands/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    void isInteger_456456_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assertTrue(retrieveCommand.isInteger(\"456456\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    void extractNric_retrieveS9123456D_returnsS9123456DString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            assertEquals(retrieveCommand.extractNric(\"retrieve S9123456D\", \"retrieve\"), \"S9123456D\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (RexException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    void extractNric_retrieveS91D_expectException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assertThrows(RexException.class, () -\u003e retrieveCommand.extractNric(\"retrieve S91D\", \"retrieve\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 33
    }
  },
  {
    "path": "src/test/java/seedu/rex/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import seedu.rex.data.exception.RexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    void parse_bye_returnsExitCommand() throws RexException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    void parse_invalidInput_expectException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assertThrows(RexException.class, () -\u003e Parser.parse(\"exit\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 20
    }
  },
  {
    "path": "src/test/java/seedu/rex/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package seedu.rex.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    void readCommand_hello_returnsHelloString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String input \u003d \"hello\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        assertEquals(\"hello\", new Ui().readCommand());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "add"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "add S9Z"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "add B1234422B"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "add S123B422Z"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "add S123B4222"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "add S9123456Z"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Trump"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "06-06-1960"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1960-06-14"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "retrieve S9993222A"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "retrieve S9123456Z"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "edit S9992222A"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "edit S9123456Z"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "Donald"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1962-06-14"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "add S9993222A"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "John"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1985-06-14"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete S9992222A"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete S9993222A"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "book S9123456Z"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "create"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "2020-10-40"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "create"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "2020-10-10"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "book S9123456Z"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "book S9123456Z"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "book S9123456Z"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "appointments S9123456Z"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 33,
      "-": 1
    }
  }
]
