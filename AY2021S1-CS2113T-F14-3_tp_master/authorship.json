[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "wamikamalik": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wamika Malik | [Github](https://github.com/wamikamalik) | [Portfolio](docs/team/wamikamalik.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Fish Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Johnson Yee | [Github](https://github.com/Johnson-Yee) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shuyi | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "NUS SO FUN!"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "Lezn0": 1,
      "EthanWong2212": 1,
      "mrwsy1": 1,
      "-": 6,
      "wamikamalik": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS is a useful navigation application to aid you in navigating around NUS Kent Ridge campus via the provided"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "shuttle bus."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 2,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "*Insert NAV@NUS LOGO here "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS is a useful CLI application to guide users in navigating around the NUS Kent Ridge campus via the school"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "shuttle serviceS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* [Features](#Features)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [1. Check for direct bus: `/route`](#1-check-for-direct-bus-route)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [2. Check bus route: `/routemap`](#2-check-bus-route-routemap)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [3. Check for available bus: `/bus`](#3check-for-available-bus-at-a-location-bus)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [4. List all bus available in NUS: `/allbus`](#4-list-all-bus-available-in-nus-allbus)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [5. List all bus stops available in NUS: `/liststops`](#5-list-all-bus-stops-in-nus-liststops)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [6. Exit the program: `/exit`](#6-exiting-the-program-exit)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [7. List available help: `/help`](#7-listing-available-help-help)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "The following steps will guide you through the process of running Nav@NUS."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your computer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. Download the latest `duke.jar` from [here](https://github.com/AY2021S1-CS2113T-F14-3/tp/releases)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for dude.jar bus application"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "4. In command prompt, `cd` to the directory of the _home folder_."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "5. Run the .jar file in the command prompt as follows: `java -jar duke.jar`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "6. Type `help` to view commands available."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "7. Refer to [Features](#features) below for details of each command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "There are 7 features available in Nav@NUS. The following are instructions for using the features."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003eNotes about command format:  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003e1. Words in **bold** are parameters to be provided by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 1. Check for direct bus: ```/route```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Checks for direct bus between two locations. \u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003ccode\u003e/route \u003cstrong\u003elocation_1 /to location_2 \u003c/strong\u003e \u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Example of usage: \u003ccode\u003e/route \u003cstrong\u003e PGP /to Raffles Hall \u003c/strong\u003e\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The buses you can take with their intermediate stops are: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. AA2"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Kent Ridge MRT Station-\u003e Opp University Health Centre-\u003e University Town"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 2. Check bus route: ```/routemap```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Checks for user-specified bus route. \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003ccode\u003e/routemap \u003cstrong\u003etask description\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Upon receiving prompt, specify "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        \u003ccode\u003e\u003cstrong\u003ebus route name/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Example of usage: \u003ccode\u003e/routemap \u003cstrong\u003e AA1 \u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/routemap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "What bus routes would you like to see?"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Currently, we have two bus routes available for your viewing "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1.AA1 "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2.AA2 "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Type the name to view:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "aa1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Here is the AA1 route that you have requested:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "AA1"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "PGP-\u003e Kent Ridge MRT Station-\u003e Opp University Health Centre-\u003e Yusof Ishak House-\u003e Central Library-\u003e Kent Ridge-\u003e Museum-\u003e University Town-\u003e University Health Centre-\u003e Opp Kent Ridge MRT station-\u003e PGPR"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.Check for available bus at a location: ```/bus```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Checks for available bus at a user-specified location \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003ccode\u003e/bus\u003cstrong\u003ebus code\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Example of usage: \u003ccode\u003e/bus\u003cstrong\u003e PGP\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "PGP:  AA1   AA2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 4. List all bus available in NUS ```/allbus```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Lists all bus available in NUS. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Example of usage: \u003ccode\u003e/allbus\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The buses available in NUS are: "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "AA1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "PGP-\u003e Kent Ridge MRT Station-\u003e Opp University Health Centre-\u003e Yusof Ishak House-\u003e Central Library-\u003e Kent Ridge-\u003e Museum-\u003e University Town-\u003e University Health Centre-\u003e Opp Kent Ridge MRT station-\u003e PGPR"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "AA2"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "PGP-\u003e Kent Ridge MRT Station-\u003e Opp University Health Centre-\u003e University Town-\u003e Raffles Hall-\u003e Kent Vale-\u003e EA-\u003e NUS IT-\u003e University Health Centre-\u003e Opp Kent Ridge MRT station-\u003e PGPR"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 5. List all bus stops in NUS: ```/liststops```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Lists all bus stops in NUS. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003eNote: Index keyed in must be within the range of 1 - n, where n is number of existing tasks. \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003ccode\u003e/liststops\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Example of usage: \u003ccode\u003e/lisstops\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "PGP : Prince George\u0027s Park"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Kent Ridge MRT Station : Kent Ridge MRT entrance"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Opp University Health Centre : Near University Health Centre"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Yusof Ishak House : Location with the Student Service center"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Central Library : also known as CLB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Kent Ridge : Kent Ridge"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Museum : Opposite Faculty of Engineering"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "University Town : Place filled with dining and recreational options"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "University Health Centre : UHC, where students can get MC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Opp Kent Ridge MRT station : Opposite Kent Ridge MRT"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Raffles Hall : Hall located near Faculty of Engineering"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Kent Vale : Accommodation for visiting faculty guests"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "EA : Located in Faculty of Engineering"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "NUS IT : Opposite Central library"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "PGPR : Prince George\u0027s Park Residence"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 6. Exiting the program: ```/exit```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Exits the program \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Example of usage: \u003ccode\u003e/exit\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "So long buddy!"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 7. Listing available help: ```help```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Lists a set of commands available to users \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Example of usage: \u003ccode\u003e/help\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Here are the range of commands:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1./route : Displays possible direct bus from point to point"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2./routemap: Displays the route map with its intermediate bus stops"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3./bus: Displays buses available at each bus stop"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "4./allbus: Lists all buses available in NUS Zone a"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "5./liststops: Lists all bus stops in NUS Zone a"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "6./exit: Exit program"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "7./help: List all available commands"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Some common questions to aid in possible issues faces."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "**Q:** Where can I find the release? \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "It can be found at [here](https://github.com/AY2021S1-CS2113T-F14-3/tp/releases)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Summary of features and command formats."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003eNote: No additional parameter is needed if it is not mentioned. eg help \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Command | Format | Example"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "--- | --- | ---"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/route | `/route` **location1 /to location2** | `/route` **PGP /to Raffles Hall**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/routemap | `/routemap` **bus code** | `deadline` **/routemap AA1** "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/bus | `/bus` **location** | `event` **/bus PGP**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/allbus | `/allbus` | `/allbus`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/liststops | `liststops`| `/liststops`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/exit | `/exit` | `/exit`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/help | `/help` | `/help`"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 141,
      "EthanWong2212": 6,
      "-": 11
    }
  },
  {
    "path": "docs/team/wamikamalik.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "# Wamika Malik - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/Bus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Bus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String busNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public Bus(String busNo, BusStops[] stops) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busNumber \u003d busNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.addAll(Arrays.asList(stops));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Bus(String busNo, ArrayList\u003cBusStops\u003e stops) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busNumber \u003d busNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.addAll(stops);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public ArrayList\u003cString\u003e getStopNames() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.forEach(stop -\u003e routeNames.add(stop.getName()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return routeNames;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public String getBusNumber() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return this.busNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ArrayList\u003cBusStops\u003e getPossibleRoute(String startingLoc, String destination) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e allStopsFromStart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e finalRoute \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e allStopNamesFromStart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e(getStopNames());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routeNames.replaceAll(String::toLowerCase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (routeNames.contains(startingLoc.toLowerCase())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            int startingIndex \u003d routeNames.indexOf(startingLoc.toLowerCase());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            assert startingIndex !\u003d -1 : \"Hmm, seems like the start is not in the list\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int size \u003d routeNames.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert size !\u003d 0 : \"The bus route has not stops!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            allStopNamesFromStart.addAll(routeNames.subList(startingIndex, size));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            allStopsFromStart.addAll(route.subList(startingIndex, size));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (allStopNamesFromStart.contains(destination.toLowerCase())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                int endIndex \u003d allStopNamesFromStart.indexOf(destination.toLowerCase()) + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                assert endIndex !\u003d -1 : \"Hmm, seems like the destination is not in the list\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                finalRoute.addAll(allStopsFromStart.subList(0, endIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return finalRoute;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (route.size() \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String printableRoute \u003d String.join(\" -\u003e \", getStopNames());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            return busNumber + \"\\n\" + printableRoute;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 4,
      "Lezn0": 6,
      "mrwsy1": 1,
      "wamikamalik": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/BusData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class BusData {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cBus\u003e buses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void createBusList(ArrayList\u003cBus\u003e busList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        buses.addAll(busList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static ArrayList\u003cBus\u003e possibleBuses(String startingLoc, String destination) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (Bus bus : buses) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            ArrayList\u003cBusStops\u003e route \u003d bus.getPossibleRoute(startingLoc, destination);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (route !\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                busOptions.add(new Bus(bus.busNumber, route));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return busOptions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static Bus selectBus(String busCode) throws NullPointerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (Bus bus: buses) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (bus.getBusNumber().equals(busCode.toUpperCase())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                return bus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static ArrayList\u003cBus\u003e busAtStop(String busStop) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (Bus bus: buses) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            ArrayList\u003cString\u003e stopNames \u003d bus.getStopNames();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            for (String name: stopNames) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                if (name.equalsIgnoreCase(busStop)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                    busList.add(bus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return busList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static ArrayList\u003cBus\u003e listOfAllBuses() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return buses;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 12,
      "EthanWong2212": 14,
      "mrwsy1": 3,
      "wamikamalik": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/BusStops.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public enum BusStops {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    PGP(\"PGP\", \"Prince George\u0027s Park\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    KENTRIDGEMRTSTATION(\"Kent Ridge MRT Station\", \"Kent Ridge MRT entrance\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OPPUNIVERSITYHEALTHCENTRE(\"Opp University Health Centre\", \"Near University Health Centre\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    YUSOFISHAKHOUSE(\"Yusof Ishak House\", \"Location with the Student Service center\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    CENTRALLIBRARY(\"Central Library\", \"also known as CLB\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    KENTRIDGE(\"Kent Ridge\", \"Kent Ridge\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    MUSEUM(\"Museum\", \"Opposite Faculty of Engineering\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    UNIVERSITYTOWN(\"University Town\", \"Place filled with dining and recreational options\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    UNIVERSITYHEALTHCENTRE(\"University Health Centre\", \"UHC, where students can get MC\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OPPKENTRIDGEMRTSTATION(\"Opp Kent Ridge MRT station\", \"Opposite Kent Ridge MRT\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    RAFFLESHALL(\"Raffles Hall\", \"Hall located near Faculty of Engineering\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    KENTVALE(\"Kent Vale\", \"Accommodation for visiting faculty guests\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    EA(\"EA\", \"Located in Faculty of Engineering\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    NUSIT(\"NUS IT\", \"Opposite Central library\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    PGPR(\"PGPR\", \"Prince George\u0027s Park Residence\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BusStops(String name, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static String formatName(String input) throws CustomException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (BusStops info: EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            if (info.name.equalsIgnoreCase(input)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                return info.name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        throw new CustomException(ExceptionType.INVALID_BUS_STOP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void listStops() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        for (BusStops info : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            System.out.println(info.name + \" : \" + info.description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 10,
      "Lezn0": 36,
      "EthanWong2212": 12,
      "mrwsy1": 1,
      "wamikamalik": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.RouteParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final String[] ZONE_A \u003d {\"AA1\", \"AA2\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] AA2 \u003d {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.RAFFLESHALL,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.EA,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busesInZoneA.add(new Bus(ZONE_A[0], AA1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busesInZoneA.add(new Bus(ZONE_A[1], AA2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser.initLogger();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        new Duke();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isOngoing \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        while (isOngoing) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String fullCommand \u003d Ui.getCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                parser \u003d new Parser(fullCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                isOngoing \u003d parser.extractType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } catch (CustomException error) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                Ui.showError(error);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 24,
      "-": 12,
      "wamikamalik": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CustomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class CustomException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ExceptionType exception;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public CustomException(ExceptionType exception) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return (exception.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/ExceptionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public enum ExceptionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_COMMAND(\"I do not understand!!\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    INVALID_BUS(\"Sorry,there is no such bus in our database!\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NO_ROUTE_DELIMITER(\"Oops! You are missing the delimiter.\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NO_LOCATIONS(\"Oh dear! I don\u0027t have all locations.\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    SAME_LOCATIONS(\"You don\u0027t need a bus to get there...You are right there!\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    INVALID_BUS_STOP(\"Oh no! I do not understand which bus stop you are looking for\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ExceptionType(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "EthanWong2212": 2,
      "wamikamalik": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/AllBusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class AllBusCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cBus\u003e allBuses \u003d BusData.listOfAllBuses();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Ui.printAllBusMessage(allBuses);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/BusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.BusStops;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class BusCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public String busStop;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public BusCommand(String busStop) throws CustomException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.busStop \u003d BusStops.formatName(busStop.trim());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assert !busStop.isBlank() : \"Bus stop is empty\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(busStop);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.print(busStop + \":  \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (Bus bus: busList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            System.out.print(bus.getBusNumber() + \"   \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 4,
      "EthanWong2212": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public abstract void executeCommand() throws CustomException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isOngoing() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 3,
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printExitMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isOngoing() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printHelp();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/ListStopsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.BusStops;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public class ListStopsCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.listStops();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/RouteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.RouteParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class RouteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String rawMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private RouteParser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public RouteCommand(String rawMessage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.rawMessage \u003d rawMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        parser \u003d new RouteParser(rawMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String [] locations \u003d parser.getLocations();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        checkLocations(locations);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d BusData.possibleBuses(locations[0].trim(), locations[1].trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printRouteMessage(busOptions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private void checkLocations(String[] locations) throws CustomException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (locations[0].trim().length() \u003d\u003d 0 || locations[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if (locations[0].trim().equalsIgnoreCase(locations[1].trim())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert !locations[0].isBlank() : \"Location 0 is empty.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert !locations[1].isBlank() : \"Location 1 is empty.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.SAME_LOCATIONS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !locations[0].isBlank() : \"Location 0 is empty.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !locations[1].isBlank() : \"Location 1 is empty.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !(locations[0].trim().equalsIgnoreCase(locations[1].trim())) : \"Seems like the locations are still \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"the same.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/RouteMapCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "public class RouteMapCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Ui.printRouteSelectionMessage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String userBusRouteSelection \u003d Ui.getCommand().trim().toLowerCase();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        selectAndPrintBusRoute(userBusRouteSelection);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void selectAndPrintBusRoute(String userBusRouteSelection) throws CustomException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assert !userBusRouteSelection.isBlank() : \"User input is empty.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Bus selectedBus \u003d BusData.selectBus(userBusRouteSelection);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Ui.printFullRoute(selectedBus);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_BUS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.BusCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.RouteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.RouteMapCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.AllBusCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.logic.commands.ListStopsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Parser(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Split sentence to derive command and rest of the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return String Array with two element: Command and the rest of the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String[] splitCommands(int length, String delimiter) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        final String[] split \u003d userInput.trim().split(delimiter, length);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return split.length \u003d\u003d length ? split : new String[]{split[0], \" \"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean extractType() throws CustomException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String[] parts \u003d splitCommands(2, \"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d parts[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Command com;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case \"/route\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new RouteCommand(parts[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/routemap\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            com \u003d new RouteMapCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/bus\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            com \u003d new BusCommand(parts[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/allbus\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new AllBusCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        case \"/liststops\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            com \u003d new ListStopsCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/help\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new HelpCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        com.executeCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return com.isOngoing();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 5,
      "Lezn0": 11,
      "EthanWong2212": 3,
      "mrwsy1": 3,
      "wamikamalik": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/RouteParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class RouteParser extends Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final String DELIMITER \u003d \"/to\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(RouteParser.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public RouteParser(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String[] getLocations() throws CustomException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (super.getUserInput().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"User input is empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else if (super.getUserInput().contains(DELIMITER)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] components \u003d super.splitCommands(2, DELIMITER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                return new String[]{components[0], components[1]};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"Delimiter /to is missing.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_ROUTE_DELIMITER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (StringIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Either of the locations is missing\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void initLogger() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logger.log\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            fh.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.severe(\"Error in creating logger file.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static String getCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String logo \u003d \" _       _       ____     __       __\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| |\\\\ \\\\  | |     / /\\\\ \\\\    \\\\ \\\\     / /\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| | \\\\ \\\\ | |    / /__\\\\ \\\\    \\\\ \\\\   / /\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| |  \\\\ \\\\| |   / /----\\\\ \\\\    \\\\ \\\\ / /\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"|_|   \\\\ \\\\_|  / /      \\\\ \\\\    \\\\_V_/    @NUS\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"How can I help?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void showError(Exception error) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Here are the range of commands:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"1./route : Displays possible direct bus from point to point\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"2./routemap: Displays the route map with its intermediate bus stops\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"3./bus: Displays buses available at each bus stop\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"4./allbus: Lists all buses available in NUS Zone a\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"5./liststops: Lists all bus stops in NUS Zone a\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"6./exit: Exit program\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"7./help: List all available commands\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printExitMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"So long buddy!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printRouteSelectionMessage() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"What bus routes would you like to see?\\nCurrently, we have two bus routes available for\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \" your viewing \\n1.AA1 \\n2.AA2 \\nType the name to view:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printRouteMessage(ArrayList\u003cBus\u003e options) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int optionNo \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isPossible \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"The buses you can take with their intermediate stops are: \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (Bus option : options) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (option.toString() !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                if (count !\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                    count \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                System.out.println(optionNo + \". \" + option.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                optionNo++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                isPossible \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!isPossible) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            System.out.println(\"none.\\nThere are no direct bus routes. :(\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printFullRoute(Bus busCode) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (busCode !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Here is the \" + busCode.getBusNumber() + \" route that you have requested:\\n\" + busCode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printAllBusMessage(ArrayList\u003cBus\u003e allBuses) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"The buses available in NUS are: \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        int count \u003d allBuses.size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (Bus bus : allBuses) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(bus.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            count--;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            if (count !\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 24,
      "Lezn0": 40,
      "mrwsy1": 6,
      "wamikamalik": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/BusDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class BusDataTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA2 \u003d {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.RAFFLESHALL,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.EA,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e(Arrays.asList(new Bus(\"AA1\", AA1),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            new Bus(\"AA2\", AA2)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_noRoute_returnEmptyBusArrayList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e stops \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stops));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stops));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), BusData.possibleBuses(startingLoc, destination).toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_oneRoute_returnBusArrayList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e stops \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stops));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        stops.addAll(Arrays.asList(AA2).subList(6, 10));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stops));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"Ea\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Opp kent ridge MRT station\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptionsOne \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptionsOne.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_manyRoutes_returnBusArrayList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e stopsAa1 \u003d new ArrayList\u003c\u003e(Arrays.asList(AA1).subList(7, 11));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stopsAa1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e stopsAa2 \u003d new ArrayList\u003c\u003e(Arrays.asList(AA2).subList(3, 11));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stopsAa2));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"UniverSity Town\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"PGPr\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptions.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_invalidStop_expectEmptyArrayList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"NTU North Spine\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(0, busList.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_empty_expectEmptyArrayList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(0, busList.size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopRandomCaps_expectAA1() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"KeNt RiDge\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(1, busList.size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA1\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopExactCaps_expectAA2() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"Kent Vale\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(1, busList.size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA2\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopAllCaps_expectAA1AA2() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"UNIVERSITY TOWN\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(2, busList.size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA1\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA2\", busList.get(1).getBusNumber());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 3,
      "EthanWong2212": 49,
      "wamikamalik": 73
    }
  },
  {
    "path": "src/test/java/seedu/duke/BusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class BusTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_routeExists_returnRouteArrayList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"University health cenTre\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e(Arrays.asList(AA1).subList(4, 9));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_destinationNotInList_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_startNotInList_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"University Hall\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_startAndDestinationInList_wrongOrder_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"Pgpr\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 1,
      "wamikamalik": 63
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/RouteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class RouteCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_oneLocationWithDelimiter_expectException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP /to   \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_onlyDelimiter_expectException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"    /to   \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_sameLocations_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \" University Town /to univerSity TowN  \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/RouteMapCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.Bus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.BusData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.BusStops;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "class RouteMapCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_selectBus_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        busesInZoneA.add(new Bus(\"AA1\", AA1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Bus bus \u003d BusData.selectBus(\"AA1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(\"AA1\", bus.getBusNumber());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_printRoute_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String fullBusRoute \u003d \"AA1\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"PGP -\u003e Kent Ridge MRT Station -\u003e Opp University Health Centre -\u003e Yusof Ishak House -\u003e \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"Central Library -\u003e Kent Ridge -\u003e Museum -\u003e University Town -\u003e \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"University Health Centre -\u003e Opp Kent Ridge MRT station -\u003e PGPR\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Bus bus \u003d BusData.selectBus(\"AA1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(fullBusRoute, bus.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 52
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void extractType_unknownCommand_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d \"Hello\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::extractType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void extractType_exitCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d \"/exit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertFalse(isOngoing);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_listStopsCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/liststops\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_helpCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/help\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_allBusCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/allbus\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_routeCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/route PGP /to PGPR\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_busCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/bus PGP\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 29,
      "mrwsy1": 16,
      "wamikamalik": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/RouteParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class RouteParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_noLocation_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"   \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::getLocations);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_oneLocation_expectException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::getLocations);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_noDelimiter_expectException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP PGPR\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::getLocations);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_twoOneWordLocations_returnsStringArrayOf2() throws CustomException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP /to pGPR\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(2, p.getLocations().length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"PGP \", p.getLocations()[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\" pGPR\", p.getLocations()[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_twoMultiWordLocations_returnsStringArrayOf2() throws CustomException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"University Town /to university Health Centre\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(2, p.getLocations().length);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"University Town \", p.getLocations()[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\" university Health Centre\", p.getLocations()[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 51
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/exit"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "wamikamalik": 1
    }
  }
]
