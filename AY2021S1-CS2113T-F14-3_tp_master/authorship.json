[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "wamikamalik": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wu Yuxin | [Github](https://github.com/Lezn0) | [Portfolio](team/wuyuxin.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wong Heng Chin | [Github](https://github.com/EthanWong2212) | [Portfolio](team/EthanWong2212.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wamika Malik | [Github](https://github.com/wamikamalik) | [Portfolio](team/wamikamalik.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Johnson Yee | [Github](https://github.com/Johnson-Yee) | [Portfolio](team/johnson-yee.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wang Shuyi | [Github](https://github.com/mrwsy1) | [Portfolio](team/mrwsy1.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 2,
      "-": 4,
      "wamikamalik": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Logo](DG_Diagrams/Nav@NUSLogo.jpg)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This developer guide aims to provide an overview of Nav@NUS to aid developers in creating extensions or making "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "enhancements."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [1. Setting up, getting started](#1-setting-up-getting-started)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [2. Design](#2-design)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [2.1. Architecture](#21-architecture)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.1 Ui Component](#211-ui-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.2. Logic Component](#212-logic-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.3. Model Component](#213-model-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.4. Storage Component](#214-storage-component)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [3. Implementation](#3-implementation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.1. Finding a direct route (`/route` Feature)](#31-finding-a-direct-route-route-feature)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.2. Full Route Display (`/routemap` Feature)](#32-full-route-display-routemap-feature)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * [3.3. List All stops (`/liststops` Feature)](#33-list-all-stops-liststops-feature)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * [3.4. Favourite command adder (`/addfav` Feature)](#34-favourite-command-adder-addfav-feature)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * [3.5. Favourite command executor (`/execfav` Feature)](#35-favourite-command-executor-execfav-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.6. Modifying the description of a favourite command (`/descfav` Feature)](#36-modifying-the-description-of-a-favourite-command-descfav-feature)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * [3.7. Dining options finder (`/dine` Feature)](#37-dining-options-finder-dine-feature)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * [3.8. Find specific dining outlets (`/dineinfo` Feature)](#38-find-specific-dining-outlets-dineinfo-feature)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * [3.9. Bus at bus stop finder (`/bus` Feature)](#39-bus-at-bus-stop-finder-bus-feature)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.10. Performing similarity checks](#310-performing-similarity-checks)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * [3.11. Displaying most searched bus stop](#311-displaying-most-searched-bus-stop-on-start-up)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + [3.11.1 Resetting all search frequencies](#3111-resetting-search-frequencies-of-bus-stops-reset-feature)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * [3.12. Removing specific delete command (`/deletefav` Feature)](#312-removing-specific-delete-command-deletefav-feature)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- [4. Appendix A: Product Scope](#4-appendix-a-product-scope)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [4.1. Target user profile](#41-target-user-profile)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [4.2. Value Proposition](#42-value-proposition)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [5. Appendix B: User Stories](#5-appendix-b-user-stories)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [6. Appendix C: Non-Functional Requirements](#6-appendix-c-non-functional-requirements)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [7. Appendix D: Glossary](#7-appendix-d-glossary)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [8. Appendix E: Instructions for manual testing](#8-appendix-e-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 1. Setting up, getting started"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Refer to the guide [Setting up and getting started](https://github.com/AY2021S1-CS2113T-F14-3/tp/blob/master/README.md#duke-project-template)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This section describes the design and implementation of the product. It has been divided into two sections: Architecture "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "and Implementation. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 2.1. Architecture - Wamika"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The architecture diagram given in the figure below explains the high-level design of the App. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![Architecture Diagram](DG_Diagrams/Architecture/Architecture.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`Main` is the class Duke.java. It is responsible for:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Initializing the components in the correct sequence, and calling or creating objects in the order of execution."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The rest of the App consists of 4 main components:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Ui` : The Ui component handles all interactions with the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Logic` : The Logic component makes sense of the command and executes it."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Model` : The Model component is responsible for all data held in the memory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Storage` : The Storage component handles data by reading from and writing to files in the hard disk. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.1 Ui Component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Ui component is responsible for getting the user input and for displaying appropriate messages as response "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "to commands executed by the logic component. The following class diagram gives a brief overview of the Ui component "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "and it\u0027s interaction with other components."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![uicomponent](DG_Diagrams/Components/UiComponent.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.2. Logic Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Logic component is responsible for the following tasks:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Makes sense of the command entered by the user by splitting it into the command type and the parameters and/or "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "delimiters if any."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Executes a command based on its type and provides an appropriate result to the user via the Ui component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following class diagram briefly explains how different classes in the Logic component interact with each other."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e Note: ABCFavCommand represents the different fav command classes."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e PQRCommand represents the different dine command classes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e XYZCommand represents the different route command classes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e The actual class names are written in the notes beside the classes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/Components/LogicComponent.png\" alt\u003d\"logiccomponent\" width\u003d1200\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.3. Model Component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Model component is responsible for the following tasks:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Stores the bus data, dine info data and favourites list in memory."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Performs operations on the data to facilitate the command execution by Logic component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following class diagram briefly explains how different classes in the Model component interact with each other."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![modelcomponent](DG_Diagrams/Components/ModelComponent.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.4. Storage Component"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Storage component is responsible for the following tasks:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Stores the favourite commands in a file in a certain format and retrieves this information everytime "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "the user enters the application."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Stores the number of times each bus stop has been typed by the user since he/she started using the application and "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "retrieves it everytime the user enters the application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + This information is used to find out the user\u0027s most frequently searched location so far and display it to the "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    user. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- These files are updated after every execution of a user command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following class diagram briefly explains how different classes in the Storage component interact with each other."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![StorageComponent](DG_Diagrams/Components/StorageComponent.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This section provides details of how the main features of Nav@NUS have been implemented."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.1. Finding a direct route (`/route` Feature) - Wamika"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`/route \u003clocation1\u003e /to \u003clocation2\u003e` is the command that has to entered by the user to see all direct bus routes "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "available from **location1** to **location2**."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The class diagram in the figure below shows how different classes used for implementation of the `/route` command "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "are linked to each other. \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/RouteCommand/RouteCommandClass.png\" alt\u003d\"RouteCommandClass\" width \u003d 800\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The `RouteCommand#executeCommand()` method of RouteCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Calls `RouteParser#getLocations()` to get the locations entered by the user in the order of starting location and "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "destination."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - The `RouteParser#getLocations()` method throws an exception if the locations or the delimiter `/to` is missing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Calls `RouteCommand#checkLocations()` to make sure location strings are not empty or the same."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - The `RouteCommand#checkLocation()` method throws an exception if locations are empty or the same."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. Calls `RouteCommand#similarityCheck()` to check if the locations are not in the list of bus stops but "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "are similar."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - The `RouteCommand#similarityCheck()` method calls the static `SimilarityCheck#similarLoc()` method and returns "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    a list of similar locations, if any."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - If the list of similar locations is empty, `RouteCommand#executeCommand()` performs step 4 given below, "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    else it calls the static method, `Ui#printPossibleLocsMessage()`, to print the list of similar locations. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "4. Calls static `BusData#possibleBuses()` to get a list of buses with their routes from the starting location to "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "the destination."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "   - `BusData#possibleBuses()` calls `Bus#getPossibleRoute()` to check for a possible route for the given bus number."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "   - `BusData#possibleBuses()` repeats this call for all bus numbers."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagram explains the above steps when the user enters `/route loc1 /to loc2`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/RouteCommand/RouteCommand.png\" alt\u003d\"Executing\" width \u003d 850\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagrams explain the interactions omitted in the main diagram."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/RouteCommand/RouteCommandInternal.png\" alt\u003d\"executing command\" width \u003d 700\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/RouteCommand/BusData.png\" alt\u003d\"bus data\" width \u003d 600\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The main aim here is to find if the starting location and destination exist in a particular list of bus stops in "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "that order."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Aspect: How bus data should be stored and retrieved."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* **Alternative 1 (current choice):** Each bus is an object that contains the bus number and full route as an ArrayList."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Pros: Makes it easier to integrate with other functions of the app such as displaying bus route of a particular "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    bus.  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Cons: Each bus number\u0027s route has to be scanned to check for the starting location and destination in that order."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* **Alternative 2:** Each location is an object that contains the location name and an ArrayList of bus objects. Each"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "bus object contains the list of remaining stops in the route of that bus."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Pros: It is easier and somewhat faster to find the buses that go from the starting location to the destination as "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    the data itself has filtered out the buses that stop at the starting location."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Cons: A lot of duplicate data is stored since each bus stop will have a list of the remaining route for every bus "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    that stops there. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Given the above alternatives, alternative 1 was used considering the implementation of other features of the "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.2. Full Route Display (`/routemap` Feature)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The `/routemap \u003cbus code\u003e` is the command that has to entered by the user to see the full bus route of a user-specified"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "bus route."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The class diagram in the figure below shows how different classes used for implementation of the `/routemap` command "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "are linked to each other."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![RouteCommandClass](DG_Diagrams/RouteMapCommand/RouteMapCommand.png)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The `RouteMapCommand#executeCommand()` method of RouteMapCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Calls `RouteMapCommand#selectAndPrintBusRoute()`to attempt to retrieve user-specified bus code. (Bus code is stored"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "as a string variable in the command)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. Calls `RouteMapCommand#checkBusCode()` to make sure bus code entered by the user is not empty or a white-space."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. Calls static `BusData#selectBus()` to find the user-specified bus in the bus data list. If found, the Bus object will be "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "returned. Else, null is returned."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "4. Calls `Ui#printFullRoute()` to display full route of the specified bus."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following sequence diagram explains the above steps when the user enters `/routemap busCode`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Overview](DG_Diagrams/RouteMapCommand/RouteMapCommandOverallSeq.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following sequence diagrams explain the interactions for bus route retrieval."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Internal](DG_Diagrams/RouteMapCommand/RouteMapCommandSeq.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "##### Aspect: Retrieval of bus routes"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Alternative 1 (current choice):** Each bus is an object that contains the bus number and full route as an ArrayList"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "of busStops objects."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Pros: It is easy to maintain and updating of bus stops and bus codes are easier to implement."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Cons: Has to loop through the array of bus stops and obtain their individual bus description."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Alternative 2:** The full route of each bus is stored in a string format and is directly accessed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Pros: It is easier and quicker to print out the full route of a user-specified bus."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Cons: Alot of manual work is needed if the bus route/ bus stop is updated. It is not scalable for large-scale "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    projects."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Given the above alternatives, alternative 1 was used considering the scalability of the application."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "###3.3. List All stops (/liststops Feature)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "`/liststops` is the command which prints all bus stops declared in the BusStops enum."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "The `ListStopsCommand#executeCommand()` method of ListStopsCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "1. Calls `BusStops#listStops()` to print out all stops."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - The `BusStops#listStops()` method iterate through all bus stops declared in the BusStops enum class."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - Alternative names for bus stops will also be printed if it has one."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "### 3.4. Favourite command adder (`/addfav` Feature)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "`/addfav \u003cdescription\u003e` is the command that has to be entered by the user to add a previous valid command in to the user\u0027s "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "list of favourites."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/addfav` command."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "![add favourites](DG_Diagrams/AddFavSequence.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "The `AddFavCommand#executeCommand()` method of AddFavCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "1. The `AddFavCommand#executeCommand` method throws an exception if the command to be saved in FavList is missing."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "2. Calls `AddFavCommand#createFav()` to make a new Fav object to be saved in the FavList."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - The `AddFavCommand#createFav()` method creates a Fav object with its command saved as its description if "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    the user left description empty."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "3. Calls `AddFavCommand#addToFavList()` method to add the Fav object created to the Favlist."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - The `AddFavCommand#createFav()` method calls the contains method within Favlist to check for any duplicate"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    Fav objects within the list that contains the same command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - If the there are no duplicate Fav objects, Fav object created will be added to the FavList."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author EthanWong22 --\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "### 3.5. Favourite command executor (`/execfav` Feature) - Wong Heng Chin"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`/execfav \u003cindex\u003e` is the command to execute a command with the specific index in the list of favourite commands. \u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "The command is executed in the following steps:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "1. The user calls `Parser#setUserInput(\u003cUserInput\u003e)` by entering the command `/execfav \u003cindex\u003e`. The new user input is updated."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "2. `Parser#extractType()` is called to instantiate `ExecFavCommand` and run the user command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "3. `ExecFavParser` is instantiated and `ExecFavParser#setIndex()` is called to parse the `\u003cindex\u003e` input from the user."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    - `ExecFavParser#setIndex()` method throws an exception if `\u003cindex\u003e` cannot be parsed into an integer or if it is blank."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "4. `ExecFavCommand#executeCommand()` is called."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "5. `ExecFavCommand#getFav()` is self invoked to obtain the required `Fav` object from `FavList`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    - An exception is thrown if there is no `Fav` object in the specified index in `FavList`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "6. A new `Parser` object is instantiated to run the command in the `Fav` object."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    - If the command from the Fav object throws an exception when running, the exception will be caught in `ExecFavCommand#executeCommand()` and the `Fav` object will be deleted from the `FavList`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/execfav` command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "![ExecFav_Sequence_Diagram](DG_Diagrams/ExecFavCommand/ExecFavCommand.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "##### Aspect: Choice of command object in FavList to execute"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "|**Approach** |**Choosing command by index in list (Current choice)**|**Choosing command by description in list**|"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "|-----|-------|-------|"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "|Implementation|Easy to implement as `Fav` object can be extracted directly through index in `FavList` |Harder to implement as description will have to be compared with all the descriptions of `Fav` objects in `FavList`|"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "|Bugs|There will be no conflict in which command is meant to be executed as all commands have a unique index|As different commands in the list can have the same description conflict over which command to execute can arise|"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "|User experience|Command to execute will be shorter|Command to execute will be longer|"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "The first approach of choosing the command to execute in `FavList` by index was implemented.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Implementation of the first approach is easier as the required `Fav` object can be directly extracted through the index in the static arraylist in `FavList`.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "However implementation of the second approach is more difficult as the description of all the `Fav` objects in the `FavList` will have to be scanned through and compared with the required description. This may adversely affect processing time as well.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Bugs for the first approach are easier to handle and limited. As all `Fav` objects in `FavList` have a unique index, the only bug to check for is whether the `\u003cindex\u003e` keyed in by the user can be converted into an integer and whether the index is larger than the size of `FavList`.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "However the handling of bugs for the second approach is more difficult as the description of `Fav` objects in the `FavList` are not unique. This causes extra complications to allow users to be able to choose which command to execute amongst those with duplicate descriptions instead of executing the wrong command.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "User experience for the first approach will be improved as the command required is shorter than that of the second approach. This means users can potentially key in commands quicker. \u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Therefore, choosing commands based on index (first approach) is easier to implement, more efficient, reduces possible bugs encountered and provides better user experience."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.6. Modifying the description of a favourite command (`/descfav` Feature) - Wamika"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`/descfav \u003cindex\u003e /to \u003cnewDescription\u003e` command allows the user to change the current description of their favourite command"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "at location **index** in the list to **newDescription**."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003eNote: **index** is the index of the item in the list when the first number is indexed as 1. As a result, "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ewe access this element in the ArrayList using **index** - 1."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The class diagram in the figure below shows how different classes used for implementation of the `/descfav` command "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "are linked to each other. "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/DescFavCommand/descFavClass.png\" alt\u003d\"DescFav class diagram\" width \u003d 700\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The `DescFavCommand#executeCommand()` method of DescFavCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Calls `DescFavParser#parseInput()` to check if the command message input by the user is valid."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Throws an exception if "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + the input is empty."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + the delimiter `/to` is missing."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Calls `Parser#splitCommands()` to separate the **index** and **description**."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Checks the validity of each parameter and throws an exception if "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + both or either of the parameters have only spaces."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + the given index is not a number."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - If both inputs are valid, it assigns the input values to index and description variables."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Calls `DescFavParser#getIndex()` and `DescFavParser#getDescription()` to get the appropriate values input by the user."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. Calls static `FavList#changeDesc()` to change the description of favourite at **index**."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Calls static `FavList#checkIndexAndDesc()` which throws an exception if **index** is out of bounds or if "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    **description** is the same as the previous description of this favourite."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Calls `Fav#changeDesc()` to update the old description to **description**."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagram explains the above steps when the user enters `/descfav 1 /to hello`."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/DescFavCommand/descFav.png\" alt\u003d\"Executing\" width \u003d 800\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagram explains the interactions omitted in the main diagram."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/DescFavCommand/descFavInternal.png\" alt\u003d\"executing command\" width\u003d700\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The main aim here is to change the description of a particular command in the list of favourites."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "##### Aspect: How index and description are verified."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* **Alternative 1 (current choice):** Perform checks on the validity of index and description at intermediate steps"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Pros: The checks specific to `FavList` and `Fav` will be performed in those classes and all these methods "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    will be called in the main `DescFavCommand#executeCommand()` thus reducing coupling."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Cons: It requires more methods to be written for any particular class."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* **Alternative 2:** Use the `DescFavParser` class to determine if the index is within bounds of the list and "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "the description is different from what is already stored."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Pros: It is quicker to determine that the command is invalid."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Cons: Requires calling functions from `FavList` and `Fav` in the parser which would increase coupling."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "While alternative 2 would place all checks in one place, it can be tedious to test or debug. Therefore, alternative 1 "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "was chosen. It also made the code look neater and more readable. "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author mrwsy1 --\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.7. Dining options finder (/dine Feature) - Shuyi"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "`/dine \u003cfaculty\u003e` is the command that has to be entered by the user to see all the dining options available in the "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "specified faculty."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The `DineCommand#executeCommand()` method of DineCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Checks the user input and throws an exception if the input is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "2. Calls `DineCommand#checkFaculty()` method to check for a match between the data and user input."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Sets the `isFound` parameter to **true** if there is any match."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        + Calls `Ui#printDineResult()` method to print the matching results."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Sets the `isFound` parameter to **false** if there is no match."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        + Throws an exception if `isFound` is false."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/dine` command."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "![bus data](DG_Diagrams/DineSequence.png)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.8 Find specific dining outlets (/dineinfo Feature) - Shuyi"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "`/dineinfo \u003coutlet\u003e` is the command that has to be entered by the user to see information of a specified dining outlet."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The `DineInfoCommand#executeCommand()` method of DineInfoCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Checks the user input and throws an exception if the input is empty."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "2. Calls `DineInfoCommand#checkFoodPlace()` method to check for a match between the data and user input."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Adds any matching data to an ArrayList `searchList`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Throws an exception if `searchList` is empty."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Calls `Ui#printDineInfoResult()` method to print the data in `searchList` if it is not empty."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/dineinfo` command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "![bus data](DG_Diagrams/DineInfoSequence.png)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author EthanWong22 --\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "### 3.9. Bus at bus stop finder (`/bus` Feature) - Wong Heng Chin"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "`/bus \u003cbus stop\u003e` is the command to execute to see buses which stop at a specific bus stop.\u003cbr\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "The command is executed in the following steps:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "1. The user calls `Parser#setUserInput(\u003cUserInput\u003e)` by entering the command `/bus \u003cbus stop\u003e`. The new user input is updated."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "2. `Parser#extractType()` is called to instantiate `BusCommand` and run the user command."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "3. `BusCommand#similarLocations()` is self invoked and calls `SimilarityCheck#similarLoc()` which returns an arraylist of possible location."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "4. `BusCommand#setBusStop()` is self invoked in which, if `SimilarityCheck#similarLoc()` returns an empty array list, `BusStops#findBusStop()` is called."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    - If `SimilarityCheck#similarLoc()` returns non-empty array list, `Ui#printPossibleLocsMessage()` is called and an exception is thrown."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    - If `BusStops#findBusStop()` returns null, an exception is thrown."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "5. `BusCommand#executeCommand()` is called."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "6. `BusData#getBusAtStop()` is called and returns an array list of buses."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "7. `BusData#printBusAtBusStop()` is called to print array list of buses."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/bus` command."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "![ExecFav_Sequence_Diagram](DG_Diagrams/BusCommand/BusCommand.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram explains the interactions omitted in the main diagram."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "![getBusStop_Sequence_Diagram](DG_Diagrams/BusCommand/getBusStop.png)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.10. Performing similarity checks -Wamika"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This feature provides the user with suggestions for possible spelling errors, if any. It does not require any explicit "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "instruction or command from the user and runs every time the user enters a `/route` or `/bus` command.\u003cbr\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following steps explain how the similarity checks are performed."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Once the location(s) entered by the user are retrieved, the `SimilarityCheck#similarLoc()` method is called for each "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "location."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `SimilarityCheck#similarLoc()` retrieves the list of bus stops and for each bus stop name, calls the "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`SimilarityCheck#getSimilarity()` method."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + `SimilarityCheck#getSimilarity()` finds the location name with longer length and calculates Levenshtein distance"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    between the two names using `SimilarityCheck#editDistance()`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + This distance is then divided by the longer distance to get a number between 0 and 1."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + This number is subtracted from 1 to get the ratio of similarity."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* `SimilarityCheck#similarLoc()` adds the bus stop name to the list of possible locations if this similarity is greater "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "than a certain threshold (taken as 0.60)."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Refer to [`/route` feature implementation](#31-finding-a-direct-route-route-feature) and "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[`/bus` feature implementation](#39-bus-at-bus-stop-finder-bus-feature) for examples of where this feature is used."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "_Credits: The Levenshtein distance algorithm was adapted from "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[this site.](http://rosettacode.org/wiki/Levenshtein_distance#Java)_"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.11 Displaying most searched bus stop on start-up"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This feature informs the user about their most searched bus stop."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "There is no function to explicitly call it and is executed only during Nav@NUS\u0027s start up."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following steps explain how the search frequencies of each bus are updated."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Whenever the user enters a valid command (`/route` or `/bus`) that requires bus stops, `BusStops#findBusStop()` is "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "called to locate the specified bus stop."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. `BusStops#incrementSearchCount()` is called to increase the search count of the bus stop."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following steps explain how the most searched bus stop is displayed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1.On start-up, `Ui#printWelcomeMessage()` is called. \u003cbr\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2.`Ui#printMostSearchedBusStop()` is called to retrieve the most searched bus stop and display it."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3.`BusData#mostSearchedBusStop()`is called to identify the first instance of the bus stop with the highest search frequency."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program on start-up."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Display_Search_Freq_Sequence_Diagram](DG_Diagrams/ResetSearchFreqCommand/DisplaySearchFreq.png)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "##### Aspect: Implementing search frequencies"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Alternative 1 (current choice):** Each value in the BusStops enumeration has a private integer"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "variable called searchCount."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Pros: It is easier to maintain and updating of bus stops are easier to implement. It provides a template to be"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    used for locations with many bus stops."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Cons: Has to loop through the array of bus stops and obtain their respective search counts."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Alternative 2:** The search frequency of each bus stop is stored in an array of tuple and is directly accessed."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Pros: It is easier and quicker to obtain the most searched bus stop."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    + Cons: It does not blend in well with other features that accesses the BusStops class."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Given the above alternatives, alternative 1 was used considering the integration of other commands."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.11.1 Resetting search frequencies of bus stops (`/reset` Feature)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This feature allows the user to reset the search frequencies of all bus stops."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The `ResetSearchFreqCommand#executeCommand()` method of ResetSearchFreqCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1.`BusStops#resetSearchFrequency()` is called to re-initialise all search counts of respective bus stops to zero."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. `Ui#printResetSearchFreqMessage()` is called to inform the user that all search counts have been reset."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/reset` command."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Sequence ](DG_Diagrams/ResetSearchFreqCommand/ResetSearchFreqSeq.png)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.12 Removing specific delete command (`/deletefav` Feature)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "`/deletefav \u003cindex\u003e` is the command to remove a favourite command in the user\u0027s list of favourite commands. It allows the"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "user to customise the list of favourite commands to the user\u0027s liking."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The DeleteFavCommand#executeCommand() method of DeleteFavCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1.`Parser#extractType()` is called to instantiate `DeleteFavCommand`. During instantiation, if the user specified"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "index is empty or blank, an exception would be thrown."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2.`Ui#printDeleteFavMessage(\u003cindex\u003e)` is called to inform the user that the favourite command corresponding to the"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "index has been deleted."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3.`FavList#deleteFav(\u003cindex\u003e)` is executed to remove the favourite command from the list of favourite commands."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/deletefav` command."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Sequence ](DG_Diagrams/DeleteFavCommand/DeleteFavSeq.png)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "## 4. Appendix A: Product Scope"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 4.1. Target user profile"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS targets people who are unfamiliar with the shuttle bus service in NUS Kent Ridge Campus "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "including students, professors and visitors."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "These are people who:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - needs to be punctual for events such tutorials"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - prefer a desktop CLI app over other types"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - are new to NUS Kent Ridge Campus"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 4.2. Value Proposition"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS seeks to help the intended audience to achieve the following:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - Efficient checking of bus routes in NUS"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - Fast viewing of dining options available at other locations"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - Personalised application suited to the user\u0027s needs"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 5. Appendix B: User Stories - Wamika"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|Version| As a ... | I want to ... | So that ...|"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|freshman/ anyone new to nus|know if there is any direct bus to my target destination|I do not need to change buses|"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|someone that is unfamiliar with the NUS campus|know the full routes of the buses|I could plan my route to my desired destination|"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|someone new to NUS|know all the available bus stops in the school|I can check the possible bus stops I can board/alight at to reach my destination|"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|curious person|know the full routes of all the buses in NUS|I can see where each bus is heading to|"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|freshman/ anyone new to NUS|know the buses available at specific bus stops|I can better plan my trip around the campus in advance|"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|have a list of favourite commands|I can access my favourite commands quickly|"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|be able to customise my list of favourite commands|I can change the list according to my needs|"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|view my most searched bus stop|it can promptly remind me of the bus stop to key in|"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|be able to change how I describe my favorite commands|I know when and why I usually use that command and so that I can use it accordingly later.|"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 6. Appendix C: Non-Functional Requirements - Wamika"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Nav@NUS should be able to work on any _mainstream OS_ which has Java 11 or a higher version of Java installed."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. The user is expected to have a basic idea about the places around NUS."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. A user comfortable with typing english text should be able to find this application faster and more useful than those"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "that require mouse clicks."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 7. Appendix D: Glossary"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* **Mainstream OS** - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 8. Appendix E: Instructions for manual testing"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "This portion contains instructions on how to perform manual testing."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "### E.1 Launch and Shutdown"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    - Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    - Launch CLI and navigate to home folder of jar file"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    - Run jar file, `java -jar Nav@NUS.jar`\u003cbr\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    Expected: The CLI application will run with the Nav@NUS logo."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    - Type `/exit` followed by enter key to exit\u003cbr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    Expected: The CLI application closes with an exit message. List of favourite commands and search frequency will be saved"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### E.2 Check for direct bus - Wamika"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e Note: The user can list all bus stop names using the `/liststops` command if unsure of the starting location or "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003edestination."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Finding a direct route between 2 places in NUS."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/route University Town /to PGP`\u003cbr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: The buses you can take from **University Town** to **PGP** will be displayed with the intermediate stop "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    names."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/route EA /to Kent Vale`\u003cbr\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: A message saying no direct bus routes are available will be displayed."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/route vivocity /to sentosa`\u003cbr\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: A message saying that the starting location and destination are not in the bus stops list will be "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    displayed."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/route ent Vale /to pgp`\u003cbr\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: A message displaying suggestions for **ent Vale** will be displayed."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/route  /to pgp`\u003cbr\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: An appropriate error message will be displayed."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Other incorrect route commands to try: `/route   `, `/route pgp Kent Ridge mrt station`, `/route  /to  `, etc\u003cbr\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: An appropriate error message will be displayed.      "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### E.3 Check for full bus route"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Executing a route map command to view full route of a selected bus"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Prerequisites: List all buses available by executing `/allbus` command"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Test case 1: `/routemap AA1`\u003cbr\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected: The full route of bus AA1 will be displayed.\u003cbr\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Test case 2: `/routemap AA1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    -Other incorrect test cases includes all invalid bus codes not included in the list of all buses as displayed"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    by the `/allbus` command"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected: No bus routes will be displayed as there is no such bus in our database.\u003cbr\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Test case 3: `/routemap`\u003cbr\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected: No bus routes will be displayed. Error details will be shown to remind users to type in"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "the needed parameter.\u003cbr\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author EthanWong22 --\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "### E.4 Check for buses at a bus stop - Wong Heng Chin"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "1. Checking for the buses available at a bus stop"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "    * Prerequisites: Nill"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    * Test case: `/bus Museum`\u003cbr\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Buses available at museum (AA1) will be shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "    * Test case: `/bus univarity town`\u003cbr\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Suggestion for correct location will be shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    * Test case: `/bus invalid stop` \u003cbr\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Error details will be shown\u003cbr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "    * Other incorrect data to test: `/bus`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author mrwsy1 --\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### E.5 Search for dining options within a faculty - Shuyi"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Searching for dining options within a faculty."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Prerequisites: List all faculties by executing `/faculty` command\u003cbr\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dine science`\u003cbr\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: All dining outlets within Science faculty will be displayed.\u003cbr\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dine sci`\u003cbr\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: All dining outlets within Science faculty will be displayed.\u003cbr\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dine`\u003cbr\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: No dining outlets will be displayed. Error details will be shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Other incorrect commands to test: `/dine scienceee` (name of faculty has been misspelled)\u003cbr\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: Similar to previous.\u003cbr\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "2. Searching for dining options within faculties with similar names."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Prerequisites: List all faculties by executing `/faculty` command\u003cbr\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dine school`\u003cbr\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: All dining outlets within both the School of Business and School of Computing will be displayed.\u003cbr\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dine sch`\u003cbr\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: All dining outlets within both the School of Business and School of Computing will be displayed.\u003cbr\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dine`\u003cbr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: No dining outlets will be displayed. Error details will be shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Other incorrect commands to test: `/dine schooool` (keyword has been misspelled)\u003cbr\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: Similar to previous.\u003cbr\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### E.6 Search for specific dining outlet - Shuyi"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Searching for specific dining outlet."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dineinfo arise \u0026 shine`\u003cbr\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: Dining outlets with the name Arise \u0026 Shine will be displayed.\u003cbr\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dineinfo`\u003cbr\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: No dining outlets will be displayed. Error details will be shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Other incorrect commands to test: `/dineinfo arisee \u0026 shiine` (name of outlet has been misspelled)\u003cbr\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: Similar to previous.\u003cbr\u003e "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "2. Searching for dining outlets with similar names."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dineinfo cafe`\u003cbr\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: Dining outlets with names containing \u0027cafe\u0027 will be displayed.\u003cbr\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Test case: `/dineinfo`\u003cbr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: No dining outlets will be displayed. Error details will be shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    - Other incorrect commands to test: `/dineinfo caffe` (keyword has been misspelled)\u003cbr\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    Expected: Similar to previous.\u003cbr\u003e "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "### E.7 Add a favourite command"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "### E.8 Delete favourite command from favourite list"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Deleting a favourite command from favourite list"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Prerequisites: List all buses available by executing `/listfav` command. There are existing favourite commands in"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "the favourite list."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Test case 1: `/deletefav 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    - The range of values accepted is the number of favourite commands there are in the list."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected: The favourite command at index 1 will be deleted.\u003cbr\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Test case 2: `/deletefav 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    -Other incorrect test cases includes all numbers out of range (0 or more than size of favourite list),"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     any string or empty input. "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected: No command executed.Error details will be shown to remind users to type in the needed parameter.\u003cbr\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "- Test case 3: `/deletefav`\u003cbr\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Expected: No command executed.Error details will be shown to remind users to type in the needed parameter.\u003cbr\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author EthanWong22 --\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "### E.9 Execute a favourite command from favourite list - Wong Heng Chin"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "1. Executing a favourite command in list of favourites."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    - Prerequisites: List all favourite commands by executing `/listfav` command"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "    - Test case: `/execfav 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Command in index 1 of the list of favourites will be executed.\u003cbr\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    - Test case: `/execfav 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: No command executed. Error details will be shown. List of favourites will not be modified.\u003cbr\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "    - Other incorrect data to test: `/execfav`, `/execfav words`, `/execfav x`(where x is larger than list).\u003cbr\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### E.10 Change description of favourite command in favourite list - Wamika"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Changing the description of a favourite command in the list."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Prerequisites: List all favourite commands by executing `/listfav` command. There is at least one favourite in the "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    list."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/descfav 1 /to I go there often`\u003cbr\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: The description for the first command will be changed to \"I go there often\"."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/descfav 0 /to I go there often`\u003cbr\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: An error message will be displayed. The list of favourites remains unchanged."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/descfav 1 /to I go there often` after running the first test case.\u003cbr\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: An error message saying the description is the same as before will be displayed."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Test case: `/descfav   /to I go there often`, `/descfav  `, `/descfav 1 I go there`, `/descfav x /to something` "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    (where x is a number bigger than the number of elements in the list), `/descfav 2e /to something`, etc.\u003cbr\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    Expected: The appropriate error message will be displayed."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author EthanWong22--\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "### E.11 Saving of favourite list - Wong Heng Chin"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "1. Data is automatically saved in the `/data/FavList.txt` directory of the jar file\u0027s home directory."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "2. Loading FavList"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    - Prerequisites: `/data/FavList.txt` contains valid commands."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "    - The txt file contains a command along with description in each line."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    - Expected: All commands can be seen in FavList using `/listfav` command upon running the jar file"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "3. Dealing with corrupted data"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "    - Prerequisite: `FavList.txt` exists"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "    - Test case: Corrupted data line has no delimiter \"`|`\"\u003cbr\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        Step 1. add lines with no delimiter, \"`|`\" to the `FavList.txt` file.\u003cbr\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        Step 2. Run the jar file\u003cbr\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        Expected output: Message detailing corrupted data detailed at start and corrupted data removed from FavList."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 137,
      "Lezn0": 31,
      "EthanWong2212": 37,
      "mrwsy1": 72,
      "-": 93,
      "wamikamalik": 306
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "# Nav@NUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![logo](DG_Diagrams/Nav@NUSLogo.jpg)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS is a useful navigation application to aid you in navigating around NUS campus via the provided"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "shuttle bus services. Hungry? No problem! With Nav@NUS you can search for any dining options available "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "in NUS. You can also store your favourite commands and use them more easily later."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "-": 7,
      "wamikamalik": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Logo](UG_Figures/Nav@NUSLogo.jpg)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "## Opening words"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Welcome to Nav@NUS application\u0027s user guide! \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The purpose of this user guide is to provide you with all the necessary information to use this application to navigate"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "around NUS campus via the school\u0027s shuttle service.\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "- [1. Overview](#1-overview)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "  * [1.1 What is Nav@NUS?](#11-what-is-navnus)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "  * [1.2 About the User Guide](#12-about-the-user-guide)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * [1.3 Introduction to Command Line Interface (CLI)](#13-introduction-to-command-line-interface-cli)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  + [3.1. Bus Features](#31-bus-features)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.1.1. List available help: ```/help```](#311-list-available-help-help)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.1.2. Check for direct bus: ```/route```](#312-check-for-direct-bus-route)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.1.3. Check bus route: ```/routemap```](#313-check-bus-route-routemap)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.1.4. Check for buses at a bus stop: ```/bus```](#314-check-for-buses-at-a-bus-stop-bus)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.1.5. List all bus available in NUS ```/allbus```](#315-list-all-bus-available-in-nus-allbus)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.1.6. List all bus stops in NUS: ```/liststops```](#316-list-all-bus-stops-in-nus-liststops)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.1.7. List all faculties in NUS: ```/faculty```](#317-list-all-faculties-in-nus-faculty)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  + [3.2. Dine Features](#32-dine-features)    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.2.1. Search for dining options within a faculty: ```/dine```](#321-search-for-dining-options-within-a-faculty-dine)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.2.2. Search for specific dining outlet: ```/dineinfo```](#322-search-for-specific-dining-outlet-dineinfo)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  + [3.3. Favourite Features](#33-favourite-features)      "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.3.1. Add a favourite command: `/addfav`](#331-add-a-favourite-command-addfav)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.3.2. List all favourite commands: `/listfav`](#332-list-all-favourite-commands-listfav)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.3.3. Delete a favourite command: `/deletefav`](#333-delete-a-favourite-command-deletefav)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.3.4. Execute a favourite command: `/execfav`](#334-execute-a-favourite-command-execfav)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.3.5. Change the description for a favourite command: `/descfav`](#335-change-the-description-for-a-favourite-command-descfav)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.3.6. Clear the list of favourite commands: `/clearfav`](#336-clear-the-list-of-favourite-commands-clearfav)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  + [3.4. Common Features](#34-common-features)       "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.4.1. Similarity Checks](#341-similarity-checks)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.4.2. Reset frequent search data: ```/reset```](#342-reset-frequent-search-data-reset)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "      * [3.4.3. Exit the program: ```/exit```](#343-exit-the-program-exit)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [4. FAQ](#4-faq)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [5. Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [6. Glossary](#6-glossary)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "## 1. Overview"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "### 1.1 What is Nav@NUS?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Are you new to NUS? \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Are you searching for ways to get around NUS all squeezed up in front of a tiny information board?\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "We have just the right solution for you!\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Introducing **Nav@NUS**, your new navigation assistant!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Nav@NUS is a useful command line interface **(CLI)** application to guide you in navigating around the NUS campus"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "via the school\u0027s shuttle services. This application enables you to retrieve key bus information easily, skipping the "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "hassle of physically checking the bus stop\u0027s notice board. Nav@NUS is a tool tailor made for anyone unfamiliar to "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "NUS campus, students, professors and visitors included. Nav@NUS brings convenience to you and wishes your "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "commute in NUS to be as effortless as possible. Nav@NUS uses a CLI to facilitate quick typing and retrieval of "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "information that you require."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS consists of 3 main features:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Route**: Searches for bus routes from your location to your intended destination."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Dine**: Seeks dining options for you to explore culinary world of NUS."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Fav**: Saves your commands for you to have a personalised user experience catered to your needs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Skip the tight squeeze near information boards and use Nav@NUS today!"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "### 1.2 About the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This user guide introduces you to the features available in Nav@NUS. Step-by-step guides are provided along with "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "instances when the features are used.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "This user guide covers the following:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * How to use the Command Line Interface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * How to set up Nav@NUS"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Common instances when each feature is used"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Step-by-step instructions for using each feature"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Common errors or problems faced when using features"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Frequently asked questions"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "### 1.3 Introduction to Command Line Interface (CLI)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS sets up and runs on the CLI. As the CLI is not commonly used, it can seem daunting to users. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "To give you a better experience, this section will introduce you to the CLI."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following steps will guide you through the process of running **Nav@NUS**."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your computer. If you do not have it installed,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "follow the guide [here](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-microsoft-windows-platforms.html#GUID-A7E27B90-A28D-4237-9383-A58B416071CA)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. Download the latest `Nav@NUS.jar` from [here](https://github.com/AY2021S1-CS2113T-F14-3/tp/releases)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. Open command prompt on your computer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Orientate yourself to the command line interface. As seen in the figure below, the red arrow points to"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "where you have to type in commands.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Windows CLI](UG_Figures/windowsCLI.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. Copy the jar file to the folder you want to use as the _home folder_ for Nav@NUS.jar bus application. In the example"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "shown in the figure, the home folder is found in the address path of \"C:\\Users...\\CS2113T Empty folder\".\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Windows CLI](UG_Figures/windowsPath.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "4. In the command prompt, type `cd` and the directory of the _home folder_. Press \u003ckbd\u003eEnter\u003c/kbd\u003e to continue."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "5. Run the .jar file in the command prompt as follows by typing `java -jar Nav@NUS.jar` and press \u003ckbd\u003eEnter\u003c/kbd\u003e."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "6. Your screen should show the start screen of Nav@NUS as seen in the figure below.\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Start Screen](UG_Figures/Nav@NUSstartScreen.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "7. Try keying in `/help` and press \u003ckbd\u003eEnter\u003c/kbd\u003e!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "There are 18 features available in Nav@NUS. The following are instructions for using the features."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003eNotes about command format:  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003e1. Words in **bold** are parameters to be provided by the user. (e.g. **location_1**)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003e2. Parameters and commands to be entered by the user are not case-sensitive."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.1. Bus Features"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This section provides the instruction for all features categorised under the main feature of navigation by bus."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.1.1. List available help: ```/help```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command lists a set of features along with their respective commands available to users."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format: \u003ccode\u003e/help\u003c/code\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The expected outcome is as follows:\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/help1.png\" alt\u003d\"inputCommand\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.1.2. Check for direct bus: ```/route``` - Wamika"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command displays all bus routes from one location to another that do not require changing buses."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The format of this command is as follows: \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/route \u003cstrong\u003elocation_1\u003c/strong\u003e /to \u003cstrong\u003elocation_2 \u003c/strong\u003e \u003c/code\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you are currently at **PGP** and want to find out the buses you can board from **PGP** bus station to get to **NUS IT**."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "To find all such bus routes:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Type \u003ccode\u003e/route \u003cstrong\u003ePGP\u003c/strong\u003e /to \u003cstrong\u003eNUS IT\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeInput1.png\" alt\u003d\"inputCommand\" width\u003d450\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. The result will be a message displaying the list of buses you can take with their routes as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput1.png\" alt\u003d\"output\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Common errors"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you are currently at **University Health Centre** and you want to go to **PGPR**. But you accidentally type **\"Univerity "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Health Center\"** instead. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Here\u0027s what you can do: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. When you type \u003ccode\u003e/route \u003cstrong\u003eUniverity Health Center\u003c/strong\u003e /to \u003cstrong\u003ePGPR\u003c/strong\u003e\u003c/code\u003e into the CLI and "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as done in example 1, the result will be a message displaying suggestions "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "for possible spelling errors you may have made.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput2.png\" alt\u003d\"output\" width\u003d550\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Type \u003ccode\u003e/route \u003cstrong\u003eUniversity Health Centre\u003c/strong\u003e /to \u003cstrong\u003ePGPR\u003c/strong\u003e\u003c/code\u003e into the CLI"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "following the suggestion given."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. The result will be a message displaying the list of buses you can take with their routes as shown in the figure "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput3.png\" alt\u003d\"FinalOutput\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.1.3. Check bus route: ```/routemap```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command displays the full route of the bus that you have specified."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003ccode\u003e/routemap \u003cstrong\u003ebus code\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command is exceptionally useful to find indirect bus routes."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let us suppose that you are at **Raffles Hall** with only bus AA2 available and would like to go to **University Town**. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You would notice that there is no direct bus to **University Town**. You could use the \u003ccode\u003e/routemap\u003c/code\u003e to find"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "indirect routes to your intended destination. "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "To find indirect bus routes:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. You type \u003ccode\u003e/routemap \u003cstrong\u003e AA2 \u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap4.png\" alt\u003d\"inputRouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. The result will display the whole bus route of bus AA2.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap1.png\" alt\u003d\"RouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. With the information that bus AA2 could bring you to bus stops after **Raffles Hall** e.g. **Kent Vale**, you can now check "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "if there is a direct bus route from these bus stops.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap3.png\" alt\u003d\"inputRouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command is also useful in showing you the previous bus stops of your intended bus. You could use this information"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "to gauge how crowded the bus would be.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let us suppose that you are at **Raffles Hall** intending to board AA2. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. You type in \u003ccode\u003e/routemap \u003cstrong\u003e AA2 \u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap4.png\" alt\u003d\"inputRouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. The result will display the whole bus route of bus AA2. You will observe that the bus passes through **University Town**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "which is relatively more crowded than other bus stops.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap1.png\" alt\u003d\"RouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. With this information, you could explore other bus routes to your destination."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.1.4. Check for buses at a bus stop: ```/bus```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command displays all buses available at a specific bus stop."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Format: \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003ccode\u003e/bus\u003cstrong\u003e bus stop\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say that you are at \u003cstrong\u003eUniversity Town\u003c/strong\u003e bus stop, and you want to know the buses which are available for you to take. Instead of searching for the bus stops which all the buses stop at, you can easily access this information by using the \u003ccode\u003e/bus\u003c/code\u003e command. "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "To search for available buses at **University Town**:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/bus \u003cstrong\u003eUniversity Town\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus4.png\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "2. The result will be a message displaying the buses available at University Town. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus3.png\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Common errors"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Let\u0027s say that you are at the \u003cstrong\u003emuseum\u003c/strong\u003e bus stop, and you want to know the buses which are available for you to take. However, you make a spelling error and type \u003cstrong\u003e\"musuem\"\u003c/strong\u003e instead. \u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "These are the steps to fix the mistake:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "1. The result will be a message displaying bus stop suggestions for possible error in user input.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus2.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "2. Type \u003ccode\u003e/bus \u003cstrong\u003emuseum\u003c/strong\u003e\u003c/code\u003e into the CLI as suggested in the above output.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "3. The result will be a message displaying the buses available at the museum.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus1.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author mrwsy1 --\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.1.5. List all bus available in NUS ```/allbus``` - Shuyi"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command lists all buses available in NUS with their respective routes."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format for this command is as follows:\u003cbr\u003e "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/allbus\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you want to see a list of all bus routes so that you can plan your trip around NUS accordingly. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "To see the complete list of buses:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/allbus\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/allbus1.png\" alt\u003d\"inputCommand\" width\u003d700\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.1.6. List all bus stops in NUS: ```/liststops```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command lists all bus stops in NUS."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The format for this command is as follows:\u003cbr\u003e "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/liststops\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you want to know more about the bus stops in NUS. "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "To see the description of each location:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/liststops\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/listOutput.png\" alt\u003d\"inputCommand\" width\u003d800\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author mrwsy1 --\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.1.7. List all faculties in NUS: ```/faculty``` - Shuyi"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command lists out all faculties in NUS."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/faculty\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you want to know the names of all faculties in NUS."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/faculty\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/faculty1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.2. Dine Features"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This section provides the instruction for all features categorised under the main feature of locating dining options."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.2.1. Search for dining options within a faculty: ```/dine``` - Shuyi"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command lists out all dining outlets available within a chosen faculty."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/dine \u003cstrong\u003efaculty\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you want to know all the dining options available in \u003cstrong\u003eSchool of Business\u003c/strong\u003e."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/dine \u003cstrong\u003ebusiness\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dine1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you want to know the available dining options in the \u003cstrong\u003eScience\u003c/strong\u003e faculty, but you are feeling a little lazy to type out the full name of the faculty."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "You can simply use \u003cstrong\u003eSci\u003c/strong\u003e instead of \u003cstrong\u003eScience\u003c/strong\u003e:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/dine \u003cstrong\u003esci\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dine2.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003eNotes about the `/dine` feature:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003e * It is possible for the feature to return results from multiple faculties if the keyword used for the search is not specific to the desired faculty.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003e *  For example, `/dine school` will yield results from both School of Business and School of Computing."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.2.2. Search for specific dining outlet: ```/dineinfo``` - Shuyi"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command finds all dining outlets that contains the keyword, and display their location and operating hours."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/dineinfo \u003cstrong\u003eoutlet\u003c/strong\u003e\u003c/code\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you want to find information of the dining outlet \u003cstrong\u003eArise \u0026 Shine\u003c/strong\u003e."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/dineinfo \u003cstrong\u003earise\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dineinfo1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you cannot remember the full name of the outlet that you are searching for. You can simply enter a keyword instead."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "To find the information of a dining outlet with the name containing \u003cstrong\u003eJewel\u003c/strong\u003e:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/dineinfo \u003cstrong\u003ejewel\u003c/strong\u003e\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dineinfo3.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.3. Favourite Features"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This section provides the instruction for all features categorised under the main feature of personalisation of application"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "to your needs."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.3.1. Add a favourite command: `/addfav`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "This command adds a valid command with an optional description to your list of favourites"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003ccode\u003e/addfav \u003cstrong\u003e [description] \u003c/strong\u003e \u003c/code\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "Let\u0027s say you want to add the command to list dining options in business."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/dine \u003cstrong\u003ebusiness\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dine1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "2. Type \u003ccode\u003e/addfav \u003cstrong\u003edining options in business\u003c/strong\u003e\u003c/code\u003e and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "to store the command in to your list of favourites with the description"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\"dining options in business\"  as shown in the figure below."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/addfav1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "Let\u0027s say you want to add the command that guided you from PGP to NUS IT to your list of favourites."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "1. Type \u003ccode\u003e/route \u003cstrong\u003epgp /to nus it\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below. "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "2. Type \u003ccode\u003e/addfav\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "to store the command in to your list of favourites with no description  as shown in the figure below ."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/addfav2.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author mrwsy1 --\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.3.2. List all favourite commands: `/listfav` - Shuyi"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command displays all the commands in your list of favourite commands, along with their index and description."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/listfav\u003c/code\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you want to take a look at all the commands that was previously added to your list of favourite commands."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/listfav\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/listfav1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.3.3. Delete a favourite command: `/deletefav`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command deletes the command that you have specified from the list of favourite commands."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003cbr\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003ccode\u003e/deletefav\u003cstrong\u003e index in list\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Let\u0027s say that you have stored the command \u003ccode\u003e/routemap \u003cstrong\u003eAA1\u003c/strong\u003e\u003c/code\u003e in your list of favourite commands."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "After reviewing your list of favourite commands, you do not want to have this command in it."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "To delete this command from your favourites list:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/deletefav \u003cstrong\u003eindex\u003c/strong\u003e\u003c/code\u003e into the CLI and "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/deleteFavExample.png\" alt\u003d\"output of deletefav\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.3.4. Execute a favourite command: `/execfav`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "This command executes the specific command in your list of favourite commands."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Format: \u003cbr\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003ccode\u003e/execfav\u003cstrong\u003e index in list\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Let\u0027s say that you have stored the command \u003ccode\u003e/route \u003cstrong\u003eOpp University Health Centre\u003c/strong\u003e /to \u003cstrong\u003eOpp Kent Ridge MRT station\u003c/strong\u003e\u003c/code\u003e in your list of favourite commands. Instead of typing the long command using `/route`, you can now conveniently use the `/execfav` command."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Given you have the list of favourite commands:\u003cbr\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/execfav1.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "To execute the command with the 2nd index in your list of favourite commands:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Type \u003ccode\u003e/execfav \u003cstrong\u003e2\u003c/strong\u003e\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/execfav2.png\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Common errors and problems"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Let\u0027s say your data has been corrupted and thus your list of favourite commands contains an invalid command.\u003cbr\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "If you attempt to execute the command, Nav@NUS will automatically delete the corrupted data from your list."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Given you have the list of favourite commands:\u003cbr\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/execfav3.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "If you attempt to execute the invalid command \u003ccode\u003e/Funny command\u003c/code\u003e in your favourites list. Nav@NUS will automatically delete the corrupted data from your list as seen below:\u003cbr\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/execfav4.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.3.5. Change the description for a favourite command: `/descfav` - Wamika"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command helps you change the description of a command in your list of favourites."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format:\u003cbr\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/descfav \u003cstrong\u003eindex\u003c/strong\u003e /to \u003cstrong\u003enew description\u003c/strong\u003e\u003c/code\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you have the following list of commands:\u003cbr\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/beforedescfav.PNG\" alt\u003d\"original list of commands\" width\u003d550\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You want to change the description for `/dineinfo Pines` from \"No description\" to **\"Get dinner @7:30PM every Tuesday\"**."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "To do so:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Type \u003ccode\u003e/descfav \u003cstrong\u003e5\u003c/strong\u003e /to \u003cstrong\u003eGet dinner @7:30PM every Tuesday\u003c/strong\u003e\u003c/code\u003e into the CLI as"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "shown in the figure below and press enter. \u003cbr\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/descfavinput.PNG\" alt\u003d\"descfav input\" width\u003d600\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Type \u003ccode\u003e/listfav\u003c/code\u003e to see the changed description.\u003cbr\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/afterdescfav.png\" alt\u003d\"list after changing\" width\u003d600\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author mrwsy1 --\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "### 3.3.6. Clear the list of favourite commands: `/clearfav` - Shuyi"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command clears all the commands stored in your list of favourite commands."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/clearfav\u003c/code\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you no longer need any of the commands in your list of favourite commands. Instead of using "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/deletefav\u003c/code\u003e to remove the commands one by one, you can use the \u003ccode\u003e/clearfav\u003c/code\u003e feature to clear "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "your favourites list at one go."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/clearfav\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/clearfav1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.4. Common Features"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This section provides the instruction for all features categorised under the common features."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.4.1. Similarity Checks - Wamika"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "When you enter a location and make a spelling error or a typo in the name, the app performs a similarity check with "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "existing location names and suggests some locations to you. The app executes this command automatically and does not "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "require any explicit input from you."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you want to find all buses that stop at **Opp HSSML**, but you type \u003ccode\u003e/bus \u003cstrong\u003eOpp HSML\u003c/strong\u003e\u003c/code\u003e instead."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You will receive a message with suggested location names you can use as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/similarOutput1.png\" alt\u003d\"similar locs message\" width \u003d 550\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You may then type in the command again with the correct location to see a list of buses that stop at **Opp HSSML** "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/similarOutput2.png\" alt\u003d\"Correct input message\" width\u003d400\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003eNote: This check is only applicable to bus stop names, so the app performs it only when you enter a "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e\u003ccode\u003e/route\u003c/code\u003e command or a \u003ccode\u003e/bus\u003c/code\u003e command. "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.4.2. Reset frequent search data: ```/reset```"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command resets the data set used to display most frequently search bus stop on application start-up."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format:\u003ccode\u003e/reset\u003c/code\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of usage"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Let us suppose that you are transitioning to a new academic semester, and the locations that you will key in to the"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "application changes. To create a new data set that will cater to your needs in this new semester, you will key in the"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "command \u003ccode\u003e/reset\u003c/code\u003e to reset the data set and start the application on a clean slate.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/freq1.png\" alt\u003d\"Correct input message\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "### 3.4.3. Exit the program: ```/exit```"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command helps you exit the application."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/exit\u003c/code\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The application exits after displaying the following message.\u003cbr\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "```"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "So long buddy!"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "```"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This section addresses some common questions to aid in possible issues faced."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "**Q:** Where can I find the release? \u003cbr\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "It can be found at [here](https://github.com/AY2021S1-CS2113T-F14-3/tp/releases)."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following table provides a summary of features and command formats."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003eNote: No additional parameter is needed if it is not mentioned. eg help \u003cbr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Command | Format | Example"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "--- | --- | ---"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/route | `/route` **location1** `/to` **location2** | `/route` **PGP** `/to` **Raffles Hall**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/routemap | `/routemap` **bus code** | `/routemap` **AA1** "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/bus | `/bus` **location** | `/bus` **PGP**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/allbus | `/allbus` | `/allbus`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/liststops | `/liststops`| `/liststops`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/dine | `/dine` **faculty** | `/dine` **business**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/dineinfo | `/dineinfo` **outlet** | `/dineinfo` **arise \u0026 shine**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/addfav | `/addfav` **[description]** | 1. `/addfav` \u003cbr\u003e 2.`/addfav` **dining options in business**  "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/deletefav | `/deletefav` **index**| `/deletefav` **1**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/execfav | `/execfav` **index** | `/execfav` **5**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/descfav | `/descfav` **index** `/to` **new description** | `/descfav` **5** `/to` **Get dinner @7:30PM every Tuesday**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/listfav | `/listfav` | `/listfav`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/clearfav | `/clearfav` | `/clearfav`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/exit | `/exit` | `/exit`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/help | `/help` | `/help`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/reset | `/reset` | `/reset`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author wamikamalik --\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 6. Glossary - Wamika"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This section defines key technical terms we have used throughout the user guide."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Case-sensitive: Capital and lower case letters are treated differently."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Command Line Interface(CLI): Processes commands to a computer program in the form of lines of text."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003c!-- @@author --\u003e"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 137,
      "Lezn0": 34,
      "EthanWong2212": 71,
      "mrwsy1": 133,
      "-": 16,
      "wamikamalik": 159
    }
  },
  {
    "path": "docs/team/EthanWong2212.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "# Wong Heng Chin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Project: Nav@NUS"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Nav@NUS is an application which helps users navigate themselves around NUS through the NUS shuttle services. The application runs on the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### New Feature: Show buses available at bus stop"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * What it does: Allows users to find the buses available at a specific bus stop."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Justification: This is an important feature as it allows users easy access to the buses available at the stop in the event they are planning to change buses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### New Feature: Execution of favourite command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * What it does: Allows user to execute commands directly from their list of favourite commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Justification: This is an important feature as the command to execute a favourite command directly from the list can be significantly shorter. This helps users obtain required information quicker and reduces the posibility of spelling errors when typing long conventional commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Code Contributed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "* This [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dethanwong2212\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "reflects my code contribution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Enhancements implemented   "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Contributions to documentation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "* Added documentation for features `/route`and `/descfav`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Contributions to the DG"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Contributions to team-based tasks "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "* Skeleton code for favourite features."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "* Maintained the issue tracker for tasks and documentation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Review/mentoring contributions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Reported bugs and suggested improvements for product and user guide for other teams [here](https://github.com/EthanWong2212/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 38
    }
  },
  {
    "path": "docs/team/johnson-yee.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "#Johnson Yee\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "## Project: Nav@NUS"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS is a useful command line interface (CLI) application to guide you in navigating around the NUS campus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "via the school\u0027s shuttle services. It is written in Java, and has about 4 kLoC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **RouteMapCommand**: Displays the full bus route of a selected bus "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * What it does: Allows users to check for full bus routes of selected buses."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Justification: This feature improves the product significantly because the user could use this information to plan"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  for indirect bus routes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Highlights: This features form the foundation for future commands to be added in later stages of this application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   e.g. finding indirect bus routes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Search Frequency**: Implemented search frequencies of bus stops to inform users about their most search bus stop."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * What it does: Allows users to check for most-searched bus route."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Justification: This feature personalises the application for users and gives the memory jolt needed to key in their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Delete Fav**: Added the ability to delete favourite commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * What it does: Allows users to delete favourite commands to customise favourite commands list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Justification: This feature allows users to remove commands in the favourite list that are no longer useful to them."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djohnson-yee)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Removal of nested user inputs to facilitate fast typing (Pull request [#72](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/72))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Updated error handling on search frequencies\u0027 storage to account for corrupted data "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  (Pull request [#191](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/191))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Updated error handling for delete favourite "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  (Pull request [#103](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/103))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Wrote tests for route map command,reset search frequencies, and search frequencies\u0027 storage.(Pull requests "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  [#31](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/31),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   [#200](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/200),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   [#218](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/218))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    * Added documentation for the features `/routemap`, `/reset`, `/deletefav` (Pull requests"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    [#81](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/81),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    [#87](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/87),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    [#142](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/142))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    * Designed Nav@NUS logo used in user guide and developer guide."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    (Pull request [#142](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/142))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    * Added sections on introduction and quick start. (Pull request [#142](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/142))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    * Added implementation details, class diagrams and sequence diagrams for the `/routemap`, `/deletefav` and `/reset`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     features. (Pull requests [#116](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/116), "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     [#213](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/213)) "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Updated target user profile and value proposition. (Pull request [#91](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/91))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   Pull requests([\\#23](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/23),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   [\\#29](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/29),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   [\\#78](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/78), "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   [\\#195](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/195),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "   [\\#205](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/205))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Reported bugs and suggestions for other teams ([Click here](https://github.com/Johnson-Yee/ped/issues))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "  * Reviewed developer guide for team DomNUS ([Click here](https://github.com/nus-cs2113-AY2021S1/tp/pull/8/files/65a23531bf8d85984e3d339cfc455cedb7e0cccc))"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 66
    }
  },
  {
    "path": "docs/team/lezn0.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "# Wu Yuxin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "#### Project: Nav@NUS"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "Nav@NUS is a desktop application that aids users in getting around NUS. The user interacts with it using a CLI and thus,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "this application is appropriate for users who can type fast."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **New Feature**: Added an /addfav command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * What it does: allows the user to add a previous command that is valid to their list of favourites."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Justification: This feature improves the product significantly because some users might not be familiar enough with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "   the commands and have to constantly refer to the user guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "   Through this command it allows them to save previous commands will greatly improve convenience."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in the future."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  The implementation was challenging as it required changes to existing commands to determine if command about to be added is valid. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **New Feature**: Added a /liststops command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * What it does: allows the user to view all bus stops and their respective description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Justification: This feature enhances the usability of this application as users of this application is most likely unfamiliar with all the bus stops in NUS."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  By listing all bus stops and their description, it allows the user to know more information about the location of the bus stop, and the surrounding infrastructures."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": " "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **Code contributed**: [my RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dLezn0\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Managed releases `v1.0` - `v2.1` (3 releases) on GitHub"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Created the Nav@NUS logo to be displayed during the welcome message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Set word limit for bus route output. (Pull Request: [\\#52](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/52))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Wrote additional tests for /addfav feature. (Pull Request: [\\#109](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/109))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Added bus stops enum class. (Pull Request: [\\#28](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/28))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Maintained the issue tracker for specific features and bugs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    * Added the documentation for the features `/addfav`, `/liststops`, `/help` and `/exit`. (Pull Request: [\\#88](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/88),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    [\\#148](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/148))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    * Added implementation details of the `/addfav` and `/liststops` features. (Pull Request: [\\#113](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/113),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    [\\#203](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/203))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#26](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/26),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "   [\\#74](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/74), [\\#204](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/204),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    [\\#206](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/206),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    [\\#209](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/209),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    [\\#210](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/210))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (example: [click here](https://github.com/Lezn0/ped/issues))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "  * Provided suggestions for the developer guide of another team (example: [click here](https://github.com/nus-cs2113-AY2021S1/tp/pull/36#discussion_r514890722))"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 52
    }
  },
  {
    "path": "docs/team/mrwsy1.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "# Wang Shuyi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Project: Nav@NUS"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Nav@NUS is a Command Line Interface (CLI) application that aids users in getting around NUS, tailor made for anyone "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "unfamiliar to the campus. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Nav@NUS consists of three main features, namely Route, Dine and Fav, which helps the user to "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "plan their bus routes, find dining options, and personalize the application respectively."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### New features "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* Find dining options within a faculty: `/dine`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Allows the user to see all dining options within a user-specified faculty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + **Justification:** This is one of the main features of the product as it helps the user find and discover dining "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    outlets in NUS. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* Find specific dining outlet information: `/dineinfo`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Allows the user to see the location and opening hours of a user-specified dining outlet."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + **Justification:** This is one of the main features of the product as it helps the user find important information "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    regarding the dining outlet of interest, such as its location and opening hours."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* List all faculties: `/faculty`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Provides the user with a list of faculties in NUS."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + **Justification:** This feature allows users to see the list of faculties that can be used for the `/dine` "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    feature. It improves the usability of the product since some users may not be familiar with the faculties in NUS."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* List routes of all buses: `/allbus`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Provides the user with a list containing the routes of all shuttle buses available in NUS."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + **Justification:** This feature improves the usability of the product as it informs the user of all available "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    shuttle buses in NUS and their routes, so that they can plan their travel routes better."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* List all favorite commands: `/listfav`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Allows the user to see a list of all his favorite commands with indexes and descriptions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + **Justification:** This feature improves the usability of the product as it allows the user to see the indexes "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    and descriptions of the favorite commands, which are needed for the `/deletefav`, `/execfav`, `/descfav` features."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* Clear all favorite commands: `/clearfav`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Allows the user to clear his list of favorite commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + **Justification:** This feature improves the usability of the product as it allows the user to delete all the "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    commands in the list of favorite commands, instead of removing them one by one using the `/deletefav` feature."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Code contribution"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* RepoSense [link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dF14-3\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dmrwsy1\u0026tabRepo\u003dAY2021S1-CS2113T-F14-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Contributions to documentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* User guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Added the documentation for the following features: `/dine`, `/dineinfo`, `/faculty`, `/allbus`, `/listfav`, "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    `/clearfav`. ([#85](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/85), [#145](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/145))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Helped to fix formatting issues and typos."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* Developer guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Added implementation details and UML diagrams for the following features: `/dine`, `/dineinfo`. ([#114](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/114), [#186](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/186))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    + Added manual testing details for the following features: `/dine`, `/dineinfo`. ([#219](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/219))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Review/mentoring contributions:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* PRs reviewed (with non-trivial review comments): [#205](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/205)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* Reported bugs for another team\u0027s [project](https://github.com/mrwsy1/ped/issues)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "* Provided suggestions for another team\u0027s [developer guide](https://github.com/nus-cs2113-AY2021S1/tp/pull/50/files/8633eb176251c1920fbfc15b46c51d59c7ef1e4d)"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 62
    }
  },
  {
    "path": "docs/team/wamikamalik.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "# Wamika Malik - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Project: Nav@NUS"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Nav@NUS is a desktop application that aids users in getting around NUS. The user interacts with it using a CLI and thus,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " this application is appropriate for users who can type fast."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### New Feature: Find a bus route between 2 locations "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* What it does: it allows the user to find all direct bus routes between 2 locations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Justification: This is one of the main features of the product as it aids navigation by allowing the user to find all "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "buses that go from one bus stop to another. It further eases the user\u0027s travel by displaying intermediate stops for each"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " possible bus they can take."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Highlights: This feature forms the basis of the product and was challenging to implement as it required"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " careful analysis of the type of locations that can be input by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### New Feature: Change description for your favourite commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * What it does: it allows the user to change the description for an existing command in the list of favourite commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Justification: This feature improves the ease of usability of the product as it allows the user to change description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " in one step rather than deleting the command from the list and adding it again with the new description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Code Contributed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* [This is the RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dwamikamalik) to "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "my code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Enhancements implemented"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added food places data classes. (Pull request [#57](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/57))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added a similarity check to existing features. This check recommends possible locations based on potential spelling "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "errors. (Pull request [#73](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/73))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + Credits: The edit distance algorithm used was taken from "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    [http://rosettacode.org/wiki/Levenshtein_distance#Java](http://rosettacode.org/wiki/Levenshtein_distance#Java)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Refactored classes into packages. (Pull request [#96](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/96))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Wrote tests for existing route and description change features and a few tests for Parser. (Pull requests "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#11](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/11), "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#33](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/33), "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#104](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/104),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#204](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/204))    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Contributions to documentation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added documentation for features `/route`and `/descfav`. (Pull request "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#75](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/75), "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#136](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/136))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added documentation for `similarity check`. (Pull request [#80](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/80))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Did cosmetic tweaks to images used. (Pull request [#90](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/90))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Contributions to the DG"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added implementation details, class diagrams and sequence diagrams for `/route` and `/descfav` features. (Pull "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "requests [#111](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/111), "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#112](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/112), "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#119](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/119)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ") "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added details for architecture, architecture diagram and class diagrams for all components. (Pull requests "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#68](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/68), "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#195](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/195))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added manual testing for direct route and description change features. (Pull request"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#224](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/224))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Contributions to team-based tasks "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Managed releases v1.0 and v2.0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Set up the GitHub team organisation and repo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added details about the different components in DG."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Added user stories to DG."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Maintained the issue tracker for specific features and some common tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Review/mentoring contributions"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* PRs reviewed (with non-trivial review comments): [#19](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/19), "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#28](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/28), "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#29](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/29), "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#31](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/31), "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#37](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/37), "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#59](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/59), "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#74](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/74), "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#78](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/78), "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#100](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/100), "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#142](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/142),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[#216](https://github.com/AY2021S1-CS2113T-F14-3/tp/pull/216)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Reported bugs and suggestions for other teams in the class (example: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[these issues](https://github.com/wamikamalik/ped/issues))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* Provided suggestions for the developer guide of another team ("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "[this PR](https://github.com/nus-cs2113-AY2021S1/tp/pull/3#pullrequestreview-520397387))"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 85
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.DescFavParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.RouteParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.storage.FavStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.storage.FreqStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final String DUMMY_PARAM \u003d \"Dummy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static FavStorage favFile \u003d new FavStorage(\"data/FavList.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static FreqStorage freqFile \u003d new FreqStorage(\"data/FreqList.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static BusInfo busInfo \u003d new BusInfo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static FavList favList \u003d new FavList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser.initLogger();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser.initLogger();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        new Duke();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        readAllStorageFiles();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        parser \u003d new Parser(DUMMY_PARAM);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        executeCommand(isOngoing);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static void executeCommand(boolean isOngoing) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        while (isOngoing) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String fullCommand \u003d Ui.getCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                parser.setUserInput(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                isOngoing \u003d parser.extractType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                freqFile.updateFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } catch (CustomException error) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                Ui.showError(error);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            favFile.updateFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static void readAllStorageFiles() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            favFile.readFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            favFile.updateFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            freqFile.readFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            freqFile.updateFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 18,
      "Lezn0": 5,
      "EthanWong2212": 7,
      "-": 12,
      "wamikamalik": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CustomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class CustomException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ExceptionType exception;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public CustomException(ExceptionType exception) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return (exception.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/ExceptionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public enum ExceptionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_COMMAND(\"I do not understand!!\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    INVALID_BUS(\"Sorry,there is no such bus in our database!\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NO_DELIMITER_ROUTE(\"Oops! You are missing the delimiter /to.\\nThe format for this command is as follows:\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"\\n/route \u003cstarting loc\u003e /to \u003cdestination\u003e\\nwhere starting location and destination must be the names of \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"bus stops in NUS.\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    MANY_DELIMITERS_ROUTE(\"Oops! You have too many delimiters!\\nThe format for this command is as follows:\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"\\n/route \u003cstarting loc\u003e /to \u003cdestination\u003e\\nwhere starting location and destination must be the names of \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"bus stops in NUS.\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NO_DELIMITER_DESCFAV(\"Oops! You are missing the delimiter /to.\\nThe format for this command is as follows:\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"\\n/descfav \u003cindex\u003e /to \u003cdescription\u003e\\nwhere index is a number between 1 and the maximum items in the \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"list\\nand description is the new description you want for your favourite command.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    MANY_DELIMITERS_DESCFAV(\"Oops! You have too many delimiters!\\nThe format for this command is as follows:\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"\\n/descfav \u003cindex\u003e /to \u003cdescription\u003e\\nwhere index is a number between 1 and the maximum items in the \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"list\\nand description is the new description you want for your favourite command.\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NO_LOCATIONS(\"Oh dear! I don\u0027t have all locations.\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    MISSING_BUS_CODE(\"Oh no! You seem to have missed typing in the bus code!\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    SAME_LOCATIONS(\"You don\u0027t need a bus to get there...You are right there!\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    INVALID_BUS_STOP(\"Oh no! I do not understand which bus stop you are looking for.\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_START_LOC(\"The starting location you have provided is not the name of any bus stop in our\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"database :(\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_DEST(\"The destination you have provided is not the name of any bus stop in our database :(\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_LOCATIONS(\"The starting location and destination you have provided are not the names of any bus\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            + \"stops in our database :(\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    INVALID_FACULTY(\"Oh no! Please enter a faculty.\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    NO_MATCH_FACULTY(\"No match found. To see the list of faculties in NUS, type /faculty\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    INVALID_FOODPLACE(\"Oh no! I cannot detect any inputs.\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    NO_MATCH_FOODPLACE(\"No match found. Try searching for another outlet!\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    INVALID_FAVOURITE(\"Oh no! I cannot seem to detect the command you want to store as your favourite.\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    UPDATE_FILE_FAIL(\"Sorry to inform you that the update of frequency list is unsuccessful.\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    FREQ_READ_FILE_FAIL(\"FreqList.txt Read with corrupted data! Re-initialising file!\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    EMPTY_FAVLIST(\"Your favourites list is empty!\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    NO_INPUT(\"Oh dear! You haven\u0027t typed in the index or changed description.\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    NO_INDEX(\"Hey there! You haven\u0027t typed in the index for your command!\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    EMPTY_DESCRIPTION(\"Hmmm, I don\u0027t think you would want an empty description.\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NOT_A_NUMBER(\"Yikes! That is not even a number.\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    EXTRA_PARAMETERS(\"Hmm, this function should not be called with parameters.\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_INDEX(\"Sorry, that isn\u0027t the index of any command in the list.\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    SAME_DESCRIPTION(\"No change needed! You already have that description for your favourite command.\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    EMPTY_INDEX(\"Oh no! I cannot detect the input index.\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    LIST_INDEX_CORRUPTED(\"Oh no! it seems that this command has been corrupted.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            + \"Don\u0027t worry, I have deleted it from your favourites list!\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    POSSIBLE_LOCS_DUMMY(\"Possible Locs shown\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ExceptionType(String message) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 6,
      "Lezn0": 4,
      "EthanWong2212": 6,
      "mrwsy1": 4,
      "wamikamalik": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/AllBusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class AllBusCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public AllBusCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        super.isValid \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cBus\u003e allBuses \u003d BusData.listOfAllBuses();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Ui.printAllBusMessage(allBuses);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 18,
      "wamikamalik": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/BusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.similaritycheck.SimilarityCheck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Represents the bus command which shows the users the buses available at a specific bus stop."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class BusCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private String busStopName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private BusStops busStop;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Initializes BusCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @param busStopName busStopName parameter input by user for bus command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @throws CustomException if possible locations detected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public BusCommand(String busStopName) throws CustomException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e(similarLocations(busStopName));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (possibleLocs.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            setBusStop(busStopName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            super.isValid \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Ui.printPossibleLocsMessage(possibleLocs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            super.isValid \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.POSSIBLE_LOCS_DUMMY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Checks if busStop parameter input by user exists in the list of bus stops at NUS and sets busStop."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @param busStopName the busStop parameter input by the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @throws CustomException if bus stop does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private void setBusStop(String busStopName) throws CustomException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assert ! (busStopName \u003d\u003d null) : \"busStopName not declared\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        busStop \u003d BusStops.findBusStop(busStopName.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        if (busStop \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_BUS_STOP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.busStopName \u003d busStop.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        busStop.incrementSearchCount();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.getBusAtStop(busStopName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        Ui.printBusAtBusStop(busList, busStopName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Returns the list of locations similar to the given locations provided they are not exactly the same as any bus"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * stop in NUS."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @param location the locations given by the user after parsing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @return the list of possible locations."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cString\u003e similarLocations(String location) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (BusStops info: EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            routeNames.add(info.getName().toLowerCase());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!routeNames.contains(location.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            possibleLocs \u003d SimilarityCheck.similarLoc(location);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return possibleLocs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 58,
      "wamikamalik": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/ListStopsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public class ListStopsCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public ListStopsCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        super.isValid \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.listStops();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 13,
      "wamikamalik": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/ResetSearchFreqCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " * Represents the command to reset search frequencies of all bus stops."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "public class ResetSearchFreqCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public ResetSearchFreqCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        super.isValid \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.resetSearchFrequency();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Ui.printResetSearchFreqMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 18,
      "wamikamalik": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/RouteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.similaritycheck.SimilarityCheck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.RouteParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static seedu.duke.model.bus.BusStops.isValidBusStop;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the route command that helps the user to find direct bus routes between 2 given locations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class RouteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String rawMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private RouteParser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public RouteCommand(String rawMessage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.rawMessage \u003d rawMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        parser \u003d new RouteParser(rawMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String [] locations \u003d parser.getLocations();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        checkLocations(locations);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e(similarLocations(locations));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (possibleLocs.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (areValidLocations(locations)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                ArrayList\u003cBus\u003e busOptions \u003d BusData.possibleBuses(locations[0].trim(), locations[1].trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                Ui.printRouteMessage(busOptions);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                isValid \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Ui.printPossibleLocsMessage(possibleLocs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.POSSIBLE_LOCS_DUMMY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Checks if the given locations are in the list of bus stops at NUS."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param locations the locations input by the user after parsing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return true if all locations are valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if any or both locations are invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private boolean areValidLocations(String[] locations) throws CustomException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (isValidBusStop(locations[0].trim())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (isValidBusStop(locations[1].trim())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.INVALID_DEST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (isValidBusStop(locations[1].trim())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.INVALID_START_LOC);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.INVALID_LOCATIONS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Checks if any of the locations is empty after parsing or if both locations are the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param locations the locations given by the user after parsing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if locations are empty or same."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private void checkLocations(String[] locations) throws CustomException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (locations[0].trim().length() \u003d\u003d 0 || locations[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if (locations[0].trim().equalsIgnoreCase(locations[1].trim())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert !locations[0].isBlank() : \"Location 0 is empty.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert !locations[1].isBlank() : \"Location 1 is empty.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.SAME_LOCATIONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !locations[0].isBlank() : \"Location 0 is empty.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !locations[1].isBlank() : \"Location 1 is empty.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !(locations[0].trim().equalsIgnoreCase(locations[1].trim())) : \"Seems like the locations are still \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"the same.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns the list of locations similar to the given locations provided they are not exactly the same as any bus"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * stop in NUS."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param locations the locations given by the user after parsing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return the list of possible locations."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cString\u003e similarLocations(String[] locations) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!isValidBusStop(locations[0].trim())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            possibleLocs \u003d SimilarityCheck.similarLoc(locations[0]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if (!isValidBusStop(locations[1].trim())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            possibleLocs \u003d SimilarityCheck.similarLoc(locations[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return possibleLocs;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 1,
      "wamikamalik": 106
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/RouteMapCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "public class RouteMapCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Represents the route map command to display full bus route of selected bus code."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public RouteMapCommand(String busCode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.busCode \u003d busCode.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        super.isValid \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String userBusRouteSelection \u003d this.busCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        checkBusCode(userBusRouteSelection);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        selectAndPrintBusRoute(userBusRouteSelection);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Select and print bus route, if found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @param userBusRouteSelection user-specified bus route"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException to catch missing bus code or invalid bus code"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void selectAndPrintBusRoute(String userBusRouteSelection) throws CustomException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assert !userBusRouteSelection.isBlank() : \"User input is empty.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Bus selectedBus \u003d BusData.selectBus(userBusRouteSelection);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Ui.printFullRoute(selectedBus);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_BUS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Checks validity of bus code."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @param userBusRouteSelection user-specified bus route"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException to catch missing bus code or invalid bus code"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void checkBusCode(String userBusRouteSelection) throws CustomException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (userBusRouteSelection.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            super.isValid \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.MISSING_BUS_CODE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (userBusRouteSelection.isBlank()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            super.isValid \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.MISSING_BUS_CODE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 58,
      "wamikamalik": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/commons/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    protected boolean isValid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public abstract void executeCommand() throws CustomException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isOngoing() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 3,
      "wamikamalik": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/commons/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        super.isValid \u003d true;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printExitMessage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        isValid \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isOngoing() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 4,
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/commons/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        super.isValid \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printHelp();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 5,
      "wamikamalik": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/dinecommand/DineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.dinecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.DiningOptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlacesData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printDineResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class DineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    private String userFaculty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public DineCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        this.userFaculty \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (userFaculty.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_FACULTY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cFoodPlace\u003e foodPlaceList \u003d FoodPlacesData.getDiningOptionsInNus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        checkFaculty(foodPlaceList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * Checks for any match between the user input and the data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * Calls printDineResult() if there is any match."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * @param foodPlaceList contains data of all dining options"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * @throws CustomException thrown if no match found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    private void checkFaculty(ArrayList\u003cFoodPlace\u003e foodPlaceList) throws CustomException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assert foodPlaceList !\u003d null : \"Data not available.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (FoodPlace foodPlace : foodPlaceList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            ArrayList\u003cString\u003e tempFacultyList \u003d foodPlace.getFaculty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            for (String tempFaculty : tempFacultyList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                if (tempFaculty.toLowerCase().contains(userFaculty.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    isFound \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    isValid \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    if (count \u003e 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                        System.out.println();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    ArrayList\u003cDiningOptions\u003e foodPlaceInfo \u003d foodPlace.getInfo();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    if (foodPlaceInfo.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                        System.out.println(\"There are no dining options in \" + tempFaculty + \".\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                        printDineResult(tempFaculty, foodPlaceInfo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (!isFound) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.NO_MATCH_FACULTY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 65,
      "wamikamalik": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/dinecommand/DineInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.dinecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.DiningOptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlacesData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printDineInfoResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class DineInfoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    private String userFoodPlace;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public DineInfoCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        this.userFoodPlace \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (userFoodPlace.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_FOODPLACE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cFoodPlace\u003e foodPlaceList \u003d FoodPlacesData.getDiningOptionsInNus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        checkFoodPlace(foodPlaceList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * Checks for any match between the user input and the data, and adds the matching data to searchList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * Calls printDineInfoResult() to print the data in searchList if size of searchList \u003e 0."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * @param foodPlaceList contains data of all dining options"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * @throws CustomException thrown if searchList is empty"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    private void checkFoodPlace(ArrayList\u003cFoodPlace\u003e foodPlaceList) throws CustomException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assert foodPlaceList !\u003d null : \"Data not available.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cDiningOptions\u003e searchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (FoodPlace foodPlace : foodPlaceList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            ArrayList\u003cDiningOptions\u003e dineInfoList \u003d foodPlace.getInfo();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            for (DiningOptions dineInfo : dineInfoList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                String name \u003d dineInfo.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                if (name.toLowerCase().contains(userFoodPlace.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    searchList.add(dineInfo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (searchList.size() \u003e 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            isValid \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (searchList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.NO_MATCH_FOODPLACE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            printDineInfoResult(searchList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 59,
      "wamikamalik": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/dinecommand/FacultyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "package seedu.duke.logic.commands.dinecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlacesData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printFacultyResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class FacultyCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public FacultyCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        super.isValid \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cFoodPlace\u003e foodPlaceList \u003d FoodPlacesData.getDiningOptionsInNus();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printFacultyResult(foodPlaceList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/AddFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.addFavMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class AddFavCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /** Command to be saved by the user in the FavList.*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /** Description for the command to be saved in the FavList.*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /** Fav object that stores both command and description.*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private Fav item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public AddFavCommand(String inputCommand, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.command \u003d inputCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * Calls createFav() and addToFavList()."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * @throws CustomException If command to be saved does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_FAVOURITE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        createFav();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        addToFavList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * creates a new Fav object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * If Fav object does not have a description, description will be set to \"No description\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private void createFav() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (description.equals(\" \")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            item \u003d new Fav(command.trim(), \"No description\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            item \u003d new Fav(command.trim(), description.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * Adds the Fav object created from createFav() in to the FavList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * If a similar Fav object already exist in the FavList, Fav object will not be added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private void addToFavList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assert item !\u003d null : \"No Fav object to be added.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (!FavList.contains(item)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            FavList.addFav(item);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            addFavMessage(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 54,
      "EthanWong2212": 10,
      "wamikamalik": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/ClearFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class ClearFavCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public ClearFavCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        FavList.clearFav();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/DeleteFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " * Represents the command to delete a user-specified favourite command from the favourite list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class DeleteFavCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public DeleteFavCommand(String index) throws CustomException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (index.isBlank()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.NO_INDEX);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int indexNum \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        indexNum \u003d checkIndex(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.index \u003d indexNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Checks validity of index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @return indexNum Integer of valid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException If index is not a valid number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private int checkIndex(String index) throws CustomException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int indexNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            indexNum \u003d Integer.parseInt(index.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return indexNum;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int sizeOfArray \u003d FavList.getSize();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e sizeOfArray) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Ui.printDeleteFavMessage(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            FavList.deleteFav(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 40,
      "EthanWong2212": 9,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/DescFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.DescFavParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the command for changing the description of a particular favourite in the user\u0027s list of favourite"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class DescFavCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String rawMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private DescFavParser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public DescFavCommand(String rawMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.rawMessage \u003d rawMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        parser \u003d new DescFavParser(rawMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        isValid \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        parser.parseInput();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d parser.getIndex();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String description \u003d parser.getDescription();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d FavList.changeDesc(index, description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d getCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printDescChangeMessage(command, oldDesc, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String getCommand(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d FavList.getList().size() : \"Index out of bounds.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return FavList.getList().get(index - 1).getCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 10,
      "wamikamalik": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/ExecFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.parser.ExecFavParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Represents the execfav command to which allows users to execute specific commands in FavList based on index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ExecFavCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private ExecFavParser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private Fav fav;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public ExecFavCommand(String input) throws CustomException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.parser \u003d new ExecFavParser(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Get Fav object from FavList to execute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @throws CustomException if Fav object does not exist according to index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private void getFav() throws CustomException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assert ! (parser \u003d\u003d null) : \"parser not declared\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        index \u003d parser.getIndex();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        fav \u003d FavList.getFav(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Executes command based on selected fav object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @throws CustomException if selected Fav object command returns an exception"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        getFav();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        Parser parser \u003d new Parser(fav.getCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.println(fav.getCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            boolean done \u003d !parser.extractType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            FavList.deleteFav(index + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.LIST_INDEX_CORRUPTED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 53,
      "wamikamalik": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/ListFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ListFavCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public ListFavCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        super.isValid \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.listFav();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 8,
      "mrwsy1": 8,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/DescFavParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the parser for /descfav command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * It makes sense of the user\u0027s input by extracting out the index and description for the given message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class DescFavParser extends Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final String DELIMITER \u003d \"/to\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(RouteParser.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public DescFavParser(String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Extracts the index and description from the user\u0027s input message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if user input is empty or number of delimiters is not appropriate."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void parseInput() throws CustomException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (super.getUserInput().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"User input is empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_INPUT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else if (super.getUserInput().contains(DELIMITER)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] components \u003d super.splitCommands(2, DELIMITER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                checkComponents(components);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                index \u003d checkIndex(components[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                description \u003d checkDescription(components[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"Delimiter /to is missing.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_DELIMITER_DESCFAV);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (StringIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Either of the parameters is missing.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_INPUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Checks if either of the components after splitting is empty or still has a delimiter."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param components the components that user\u0027s message has been split into."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if both components are empty or any of the components contains the delimiter."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private void checkComponents(String[] components) throws CustomException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert components.length \u003d\u003d 2 : \"Components are not present\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (components[0].trim().isEmpty() \u0026 components[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"All parameters are missing.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_INPUT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !(components[0].trim().isEmpty() \u0026\u0026 components[1].trim().isEmpty()) : \"Component 1 and 2 are empty.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (components[0].contains(DELIMITER) | components[1].contains(DELIMITER)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.MANY_DELIMITERS_DESCFAV);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns the description after removing extra spaces."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param description the raw description input by the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return trimmed description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if the description is blank or empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String checkDescription(String description) throws CustomException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (description.trim().isBlank() | description.trim().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Description is missing.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !description.trim().isBlank() : \"Description has only spaces.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !description.trim().isEmpty() : \"Description is empty.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns the index as an int."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param index the string index input by the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return the index as an int."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if the index is not a number."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private int checkIndex(String index) throws CustomException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int rawIndex \u003d Integer.parseInt(index.trim());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return rawIndex;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Given index is not a number.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void initLogger() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logger.log\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            fh.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.severe(\"Error in creating logger file.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 127
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/ExecFavParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Parses inputs by users into execfav command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ExecFavParser extends Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public ExecFavParser(String userInput) throws CustomException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        setIndex();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Checks and sets index input by user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @throws CustomException if user input cannot be parsed into integer or blank"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private void setIndex() throws CustomException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assert ! (userInput \u003d\u003d null) : \"userInput not declared\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.EMPTY_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            int index \u003d Integer.parseInt(userInput) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.AllBusCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.BusCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.dinecommand.DineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.dinecommand.DineInfoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.ListStopsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.RouteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.RouteMapCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.logic.commands.dinecommand.FacultyCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.AddFavCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.logic.commands.favcommand.ClearFavCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.DeleteFavCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.DescFavCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.ExecFavCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.ListFavCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.ResetSearchFreqCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private String previousInput \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Parser(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public void setUserInput(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Split sentence to derive command and rest of the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return String Array with two element: Command and the rest of the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String[] splitCommands(int length, String delimiter) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        final String[] split \u003d userInput.trim().split(delimiter, length);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return split.length \u003d\u003d length ? split : new String[]{split[0], \" \"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean extractType() throws CustomException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String[] parts \u003d splitCommands(2, \"\\\\s+\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d parts[0].toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Command com;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isVoidFunction \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case \"/route\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new RouteCommand(parts[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/routemap\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            com \u003d new RouteMapCommand(parts[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/bus\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            com \u003d new BusCommand(parts[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/allbus\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new AllBusCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        case \"/liststops\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            com \u003d new ListStopsCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/faculty\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new FacultyCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/dine\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new DineCommand(parts[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/dineinfo\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new DineInfoCommand(parts[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/help\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new HelpCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/reset\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            com \u003d new ResetSearchFreqCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new ExitCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/addfav\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            com \u003d new AddFavCommand(previousInput, parts[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/listfav\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            com \u003d new ListFavCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/deletefav\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            com \u003d new DeleteFavCommand(parts[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/descfav\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new DescFavCommand(parts[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/execfav\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            com \u003d new ExecFavCommand(parts[1]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/clearfav\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new ClearFavCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (isVoidFunction \u0026\u0026 !parts[1].equals(\" \")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            throw new CustomException(ExceptionType.EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        com.executeCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (com.isValid()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            previousInput \u003d userInput;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            previousInput \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return com.isOngoing();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 9,
      "Lezn0": 31,
      "EthanWong2212": 20,
      "mrwsy1": 17,
      "wamikamalik": 61
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/RouteParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the parser for /route command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * It makes sense of the user\u0027s input by extracting the starting location and the destination."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class RouteParser extends Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final String DELIMITER \u003d \"/to\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(RouteParser.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public RouteParser(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Extracts locations from the message input by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return locations as an array of strings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if the user input is empty or incomplete or the number of delimiters is not appropriate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String[] getLocations() throws CustomException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (super.getUserInput().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"User input is empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else if (super.getUserInput().contains(DELIMITER)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] components \u003d super.splitCommands(2, DELIMITER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                checkTooManyDelimiters(components);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                return new String[]{components[0], components[1]};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"Delimiter /to is missing.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_DELIMITER_ROUTE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (StringIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Either of the locations is missing\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Checks if the given strings contain the delimiter /to."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param components the two components separated by the delimiter /to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if any component has the delimiter /to."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private void checkTooManyDelimiters(String[] components) throws CustomException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert components.length \u003d\u003d 2 : \"More than 2 components.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (components[0].contains(DELIMITER) | components[1].contains(DELIMITER)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Too many delimiters \\\"/to\\\".\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.MANY_DELIMITERS_ROUTE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void initLogger() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logger.log\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            fh.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.severe(\"Error in creating logger file.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/similaritycheck/SimilarityCheck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.similaritycheck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the similarity checker that provides the list of possible locations that have names similar to the one"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * entered by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class SimilarityCheck {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final double THRESHOLD \u003d 0.60;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns all possible similar locations based on a threshold."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param userLoc the input location given by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return ArrayList of possible locations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static ArrayList\u003cString\u003e similarLoc(String userLoc) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (BusStops info: EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (getSimilarity(info.getName().toLowerCase(), userLoc.toLowerCase()) \u003e THRESHOLD) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                possibleLocations.add(info.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return possibleLocations;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns the similarity between 2 given location names."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param givenLoc the location name in the list of bus stops."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param inputLoc the location entered by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return the similarity as a double value less than or equal to 1."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static double getSimilarity(String givenLoc, String inputLoc) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (givenLoc.length() \u003e inputLoc.length()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return 1 - editDistance(givenLoc, inputLoc) / (double) givenLoc.length();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return 1 - editDistance(inputLoc, givenLoc) / (double) inputLoc.length();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Calculates the levenshtein distance between 2 given location names and returns the number od additions, deletions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * or replacements to be made for both names to be the same."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param loc1 location with bigger length."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param loc2 location with smaller length."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return the levenshtein distance as an int."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    //Source: http://rosettacode.org/wiki/Levenshtein_distance#Java"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static int editDistance(String loc1, String loc2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        loc1 \u003d loc1.toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        loc2 \u003d loc2.toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int [] costs \u003d new int [loc2.length() + 1];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (int j \u003d 0; j \u003c costs.length; j++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            costs[j] \u003d j;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d loc1.length(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            costs[0] \u003d i;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int before \u003d i - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d loc2.length(); j++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                int now \u003d Math.min(1 + Math.min(costs[j], costs[j - 1]),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                        loc1.charAt(i - 1) \u003d\u003d loc2.charAt(j - 1) ? before : before + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                before \u003d costs[j];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                costs[j] \u003d now;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return costs[loc2.length()];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/Bus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents a particular shuttle bus."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * It contains the bus number and the route taken by the bus."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Bus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String busNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public Bus(String busNo, BusStops[] stops) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busNumber \u003d busNo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.addAll(Arrays.asList(stops));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Bus(String busNo, ArrayList\u003cBusStops\u003e stops) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busNumber \u003d busNo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.addAll(stops);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ArrayList\u003cString\u003e getStopNames() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.forEach(stop -\u003e routeNames.add(stop.getName()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return routeNames;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public String getBusNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return this.busNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    //@@author wamikamalik"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns the route that the bus takes from the startingLOc to the destination."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param startingLoc the location to start from."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param destination the location to end at."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return ArrayList of intermediate stops including the startingLoc and destination."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ArrayList\u003cBusStops\u003e getPossibleRoute(String startingLoc, String destination) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e allStopsFromStart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e finalRoute \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e allStopNamesFromStart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e(getStopNames());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routeNames.replaceAll(String::toLowerCase);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (routeNames.contains(startingLoc.toLowerCase())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int startingIndex \u003d routeNames.indexOf(startingLoc.toLowerCase());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert startingIndex !\u003d -1 : \"Hmm, seems like the starting location is not in the list\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int size \u003d routeNames.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert size !\u003d 0 : \"This bus route has no stops!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            allStopNamesFromStart.addAll(routeNames.subList(startingIndex, size));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            allStopsFromStart.addAll(route.subList(startingIndex, size));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (allStopNamesFromStart.contains(destination.toLowerCase())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                int endIndex \u003d allStopNamesFromStart.indexOf(destination.toLowerCase()) + 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                assert endIndex !\u003d -1 : \"Hmm, seems like the destination is not in the list\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                finalRoute.addAll(allStopsFromStart.subList(0, endIndex));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return finalRoute;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (route.size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String printableRoute \u003d String.join(\" -\u003e \", getStopNames());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            while (printableRoute.length() \u003e 100) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                int index \u003d printableRoute.lastIndexOf(\"-\u003e\",100);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                output +\u003d printableRoute.substring(0, index) + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                printableRoute \u003d printableRoute.substring(index).trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            return busNumber + \"\\n\" + output + printableRoute;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 4,
      "Lezn0": 9,
      "mrwsy1": 1,
      "wamikamalik": 70
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/BusData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents the list of all shuttle buses in NUS with their routes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class BusData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cBus\u003e buses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void createBusList(ArrayList\u003cBus\u003e busList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        buses.clear();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        buses.addAll(busList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns all buses with their intermediate routes that go from the startingLoc to the destination."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param startingLoc the location to start at."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param destination the location to be reached."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return all possible buses that can be taken with the intermediate stops for each."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static ArrayList\u003cBus\u003e possibleBuses(String startingLoc, String destination) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (BusStops.isValidBusStop(startingLoc)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            BusStops.findBusStop(startingLoc).incrementSearchCount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (BusStops.isValidBusStop(destination)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            BusStops.findBusStop(destination).incrementSearchCount();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (Bus bus : buses) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            ArrayList\u003cBusStops\u003e route \u003d bus.getPossibleRoute(startingLoc, destination);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (route !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                busOptions.add(new Bus(bus.busNumber, route));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return busOptions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Searches and select bus that matches name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @param busCode bus code input to search with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @return bus Bus object, if found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static Bus selectBus(String busCode) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (buses.size() \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            for (Bus bus : buses) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                if (bus.getBusNumber().equals(busCode.toUpperCase())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                    return bus;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *  Get Buses which bus routes contain particular busStop."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @param busStop busStop name to search for the routes of buses"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @return arraylist of buses which stop at particular busStop"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static ArrayList\u003cBus\u003e getBusAtStop(String busStop) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (Bus bus : buses) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            ArrayList\u003cString\u003e stopNames \u003d bus.getStopNames();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            for (String name : stopNames) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                if (name.equalsIgnoreCase(busStop)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                    busList.add(bus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return busList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static ArrayList\u003cBus\u003e listOfAllBuses() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return buses;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Gets all search counts of each bus stop to be stored for future use."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @return allSearchCount ArrayList of integers"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static ArrayList\u003cInteger\u003e getAllSearchCount() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        ArrayList\u003cInteger\u003e allSearchCount \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            allSearchCount.add(busStop.getSearchCount());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return allSearchCount;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 35,
      "EthanWong2212": 20,
      "mrwsy1": 3,
      "wamikamalik": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/BusInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public class BusInfo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInNUS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final String[] NUS \u003d {\"AA1\", \"AA2\", \"BB\", \"CC\", \"CCX\", \"DD1\", \"DD2\"};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public BusInfo() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[0], AA1));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[1], AA2));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[2], BB));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[3], CC));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[4], CCX));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[5], DD1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[6], DD2));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusData.createBusList(busesInNUS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] AA2 \u003d {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.RAFFLESHALL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.EA,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] BB \u003d {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.LT27,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHALL,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHALL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.S17,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] CC \u003d {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.TCOMS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPHSSML,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPNUSS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.COM2,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.VENTUS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPYUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.LT13,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.AS5,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.COM2,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.BIZ2,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPTCOMS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] CCX \u003d {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] DD1 \u003d {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OEITIONGHAM,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.BOTANICGARDENSMRT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTVALE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] DD2 \u003d {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.COLLEGEGREEN,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OEITIONGHAM"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "Lezn0": 100,
      "wamikamalik": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/BusStops.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public enum BusStops {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    PGP(\"PGP\", \"Prince George\u0027s Park\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    KENTRIDGEMRTSTATION(\"Kent Ridge MRT Station\", \"Kent Ridge MRT Entrance\", new String[]{\"kr mrt\", \"krmrt\"}),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPUNIVERSITYHEALTHCENTRE(\"Opp University Health Centre\", \"Near University Health Centre\", new String[]{\"opp UHC\"}),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    YUSOFISHAKHOUSE(\"Yusof Ishak House\", \"Location with the Student Service center\", new String[]{\"YIH\"}),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    CENTRALLIBRARY(\"Central Library\", \"also known as CLB\", new String[]{\"CLB\"}),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    KENTRIDGE(\"Kent Ridge\", \"Kent Ridge\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    MUSEUM(\"Museum\", \"Opposite Faculty of Engineering\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    UNIVERSITYTOWN(\"University Town\", \"Place filled with dining and recreational options\", new String[]{\"Utown\"}),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    UNIVERSITYHEALTHCENTRE(\"University Health Centre\", \"UHC, where students can get MC\", new String[]{\"UHC\"}),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OPPKENTRIDGEMRTSTATION(\"Opp Kent Ridge MRT station\", \"Opposite Kent Ridge MRT\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    RAFFLESHALL(\"Raffles Hall\", \"Hall located near Faculty of Engineering\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    KENTVALE(\"Kent Vale\", \"Accommodation for visiting faculty guests\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    EA(\"EA\", \"Located in Faculty of Engineering\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    NUSIT(\"NUS IT\", \"Opposite Central library\", new String[]{\"IT\"}),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    LT27(\"LT27\", \"Lim Seng Tjoe Lecture theatre at faculty of science, Opposite of S17 bus stop\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPUNIVERSITYHALL(\"Opp University Hall\", \"Opp of University Hall, near a football field\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    S17(\"S17\", \"outside of S17, opposite of LT27\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    UNIVERSITYHALL(\"University Hall\", \"University Hall\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    TCOMS(\"TCOMS\", \"Deepwater Ocean Basin Building\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OPPHSSML(\"Opp HSSML\", \"Opposite Hon Sui Sen Memorial Library\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OPPNUSS(\"Opp NUSS\", \"Opposite National University of Singapore Society - The Graduate Club\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    COM2(\"COM2\", \"COM2, within School of Computing\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    VENTUS(\"Ventus, Opp LT13\", \"University Campus Infrastructure Building\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPYUSOFISHAKHOUSE(\"Opp Yusof Ishak House\", \"Opposite YIH, near Faculty of Engineering\", new String[]{\"opp YIH\"}),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    LT13(\"LT13\", \"Located in Faculty of Arts and Social Sciences\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    AS5(\"AS5\", \"FASS Block 5\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BIZ2(\"BIZ2\", \"Near Faculty of Business\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OPPTCOMS(\"Opp TCOMS\", \"Opposite Deepwater Ocean Basin Building\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OEITIONGHAM(\"Oei Tiong Ham(BTC)\", \"Located in Lee Kuan Yew School of Public Policy\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    BOTANICGARDENSMRT(\"Botanic Gardens MRT\", \"Botanic Gardens MRT station\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    COLLEGEGREEN(\"College Green\", \"Dunearn Road student accomodations\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    PGPR(\"PGPR\", \"Prince George\u0027s Park Residence\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private int searchCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private String[] closeNames \u003d {};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BusStops(String name, String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BusStops(String name, String description, String[] closeNames) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.closeNames \u003d closeNames;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public int getSearchCount() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return searchCount;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void incrementSearchCount() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static BusStops findBusStop(String input) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (busStop.name.equalsIgnoreCase(input)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                return busStop;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static boolean isValidBusStop(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (busStop.name.equalsIgnoreCase(input)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Re-initialise all search frequencies to zero."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void resetSearchFrequency() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            busStop.setCount(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Searches for the most searched bus top with highest search frequency."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @return bus Bus object, if found"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static BusStops mostSearchedBusStop() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int maxSearch \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops correspondingBusStop \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        correspondingBusStop \u003d findMaxSearchCount(maxSearch, correspondingBusStop);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return correspondingBusStop;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Finds bus stop with highest search frequency."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * If there are two bus stops with the same highest frequency, return first instance."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @return bus Bus object, if found"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static BusStops findMaxSearchCount(int maxSearch, BusStops correspondingBusStop) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (busStop.searchCount \u003e maxSearch) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                maxSearch \u003d busStop.searchCount;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                correspondingBusStop \u003d busStop;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return correspondingBusStop;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void setCount(int searchCount) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount \u003d searchCount;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * Prints out all bus stops and their description"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * Prints out close names if the bus stop have one."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void listStops() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        for (BusStops info : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            System.out.print(info.name + \" : \" + info.description + \".\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            if (info.closeNames.length \u003e 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                System.out.print(\" Also known as: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                for (String aka : info.closeNames) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                    System.out.print(\"\\\"\" + aka + \"\\\" \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 83,
      "Lezn0": 68,
      "EthanWong2212": 3,
      "mrwsy1": 1,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/favorite/Fav.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.printDupeMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class Fav {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /** Command saved.*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /** Description for the command.*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public Fav(String command, String desc) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * Returns a boolean indicating if command stored in item is the same"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * as the command stored in the current Fav object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * @param item Fav object to be checked"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * @param index index of Fav object in FavList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * @return true if command stored in item is the same as the command stored in this Fav object,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     *         else return false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public Boolean equals(Fav item, int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (this.command.toLowerCase().equals(item.command.toLowerCase())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            printDupeMessage(index, this.desc, this.command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc(String desc) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return command + \": \\\"\" + desc + \"\\\"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 21,
      "EthanWong2212": 19,
      "mrwsy1": 4,
      "wamikamalik": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/favorite/FavList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printClearFavMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printFavList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class FavList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static ArrayList\u003cFav\u003e favList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public FavList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        favList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void addFav(Fav fav) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        favList.add(fav);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void deleteFav(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        favList.remove(index - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * Calls printFavList() to print the favorites list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * @throws CustomException thrown if list is empty"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void listFav() throws CustomException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (favList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.EMPTY_FAVLIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printFavList(favList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     * Deletes all existing entries in the favorites list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void clearFav() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        favList.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printClearFavMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns the old description after changing it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param index the element number to be changed in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param newDesc the new description provided by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return the old description."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if index is put of bounds or new description is the same as the old description."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static String changeDesc(int index, String newDesc) throws CustomException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d checkIndexAndDesc(index, newDesc);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        favList.get(index - 1).changeDesc(newDesc);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return oldDesc;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Returns the old description if all checks succeed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param index the element number to be changed in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @param newDesc the new description provided by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return the old description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @throws CustomException if index is put of bounds or new description is the same as the old description."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static String checkIndexAndDesc(int index, String newDesc) throws CustomException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e favList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d FavList.getList().size() : \"Index out of bounds.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d favList.get(index - 1).getDesc();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (oldDesc.equals(newDesc)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.SAME_DESCRIPTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !oldDesc.equals(newDesc) : \"description is the same as before.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return oldDesc;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static ArrayList\u003cFav\u003e getList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return favList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return favList.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * Returns a boolean that represents whether a similar Fav object is found in the FavList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * @param item Fav object to be checked"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     * @return true if a similar Fav object is found in the FavList, or false if it is not found in the FavList"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static boolean contains(Fav item) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        for (Fav fav : favList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            if (fav.equals(item, count)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static Fav getFav(int index) throws CustomException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            Fav fav \u003d favList.get(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            return fav;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 17,
      "EthanWong2212": 31,
      "mrwsy1": 22,
      "wamikamalik": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/foodoptions/DiningOptions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.foodoptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class DiningOptions {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String operatingHrs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    DiningOptions(String[] data) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        name \u003d data[0];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        location \u003d data[1];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        operatingHrs \u003d data[2];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return name + \":\\n\" + location + \"\\n\" + operatingHrs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 8,
      "wamikamalik": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/foodoptions/FoodPlace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.foodoptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class FoodPlace {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cString\u003e faculty \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cDiningOptions\u003e info \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public FoodPlace(String[] faculty, String[][] data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.faculty.addAll(Arrays.asList(faculty));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (int i \u003d 0; i \u003c data.length; i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            info.add(new DiningOptions(data[i]));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public ArrayList\u003cString\u003e getFaculty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public ArrayList\u003cDiningOptions\u003e getInfo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 8,
      "wamikamalik": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/foodoptions/FoodPlacesData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.foodoptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class FoodPlacesData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesScience \u003d {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Starbucks\", \"S9\", \"Mon-Fri: 7.30am to 9.00pm Sat – Sun: Closed\"},"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Platypus Food Bar\", \"Science Block S16\", \"Mon-Fri, 8.30am-8.00pm\"},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Arise \u0026 Shine\", \"Science Block S16\", \"Mon-Fri, 7.00am-8.00pm Sat/Sun/PH, 7.00am-3.00pm\"},"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Taiwan Ichiban\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Pasta Express\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Li Ji Coffeehouse\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Uncle Penyet Fusion - Halal specified\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cheers\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Jewel Coffee\", \"Medicine Block MD11\", \"Mon-Fri, 7.30am-10.00pm Sat/Sun/PH, 8.00am-5.00pm\"},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Eureka Taste\", \"Medicine Block MD6\", \"Mon-Fri: 7.00am-7.00pm\"},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Spinelli\", \"UHall Tan Chin Tuan Wing 1st Level\", \"Mon-Fri, 8.00am-6.30pm\"}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesPgp \u003d {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Foodclique\", \"PGPR\", \"Mon-Sun, 7.00am-9.30pm\"},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Supersnacks\", \"PGPR\", \"Mon-Fri, 12.00pm-1.00am\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Pines Aircon Food Court\", \"PGPR\", \"Mon-Fri, 7.00am-8.30pm Sat, 8.00am-8.30pm Sun/PH, 8.00am-8.00pm\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Nami\", \"innovation4.0\", \"Mon-Fri, 8.00am-5.30pm\"}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesComp \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Spread\", \"Business School Mochtar Riady Building\", \"Mon-Fri, 7.45am-8.45pm Sat, 8.00am-2.30pm\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Salad Express X Pasta Express\", \"The Deck level 2\", \"Mon-Fri, 8.00am-8.00pm Sat, 8.00am – 3.00pm\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Uncle Penyet (Indonesian Express)\", \"The Deck level 2\", \"Mon-Fri, 10.30am-7.30pm Sat, 10.30am-3.00pm\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Liang Ban Kung Fu\", \"The Deck level 2\", \"Mon-Sat, 8.00am-8.00pm\"},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Deck\", \"FASS\", \"Mon-Fri, 7.30am-4.00pm/8.00pm Sat,7.30am-3.00pm\"},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Coffee Hut\", \"Arts Block AS2 (Beside LT13)\", \"Mon-Fri, 8.00am-6.00pm\"},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Omo store\", \"COM1\", \"24/7\"},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cool Spot Drinks\", \"COM2\", \"24/7\"},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Takeaway Food Kiosks\", \"COM2\", \"24/7\"},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cafe Delight\", \"Ventus\", \"Mon-Fri, 8.00am-6.00pm\"},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Reedz Cafe\", \"SFAH\", \"Mon-Fri, 8.30am-5.30pm Sat/Sun, 8.00am-3.00pm\"},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"University Club\", \"SFAH\", \"Mon-Fri, 11.30am-2.30pm (Last seating 2pm, Last order 2.10pm) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"6.30pm-10.00pm (Last seating 9.45pm, Last order 10pm) Lounge Area: 11.30am to 11pm \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"(Last seating 9.45pm, Last order 10pm)\"},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Coffee Roaster\", \"Blk AS8\", \"Mon-Fri, 7.30am-7.00pm Sat, 9.00am-5.00pm\"},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Maxx Coffee\", \"Central Library\", \"Daily, 8.00am-10.00pm\"}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesEngin \u003d {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Central Square\", \"Yusof Ishak House Level 2\", \"Mon-Fri, 8.00am-8.00pm Sat, 8.00am-3.00pm\"},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Crave\", \"YIH\", \"Mon-Fri, 9.00am-8.00pm Sat, 9.00am-6.00pm\"},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Subway - Halal Certified\", \"YIH\", \"Mon-Sun, 10.00am-10.00pm\"},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Old Chang Kee - Halal Certified\", \"YIH\", \"Mon-Fri, 7.30am-9.00pm Sat, 7.30am-4.00pm\"},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Goh Bros\", \"YIH\", \"Mon-Fri, 7.30am-9.00pm Sat, 7.30am-4.00pm\"},"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            {\"Platypus Food Bar (SDE)\", \"Design \u0026 Environment Block SDE4\", \"Mon-Fri, 8.30am-8.00pm\"},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Platypus Food Bar\", \"Engineering Block E2A\", \"Mon-Fri, 9.00am-7.30pm\"},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"E2 Halal Cafeteria - Halal Certified\", \"Engineering Block E2\", \"Mon-Fri, 7.00am-7.00pm Sat, \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"08.00-am-1.00pm\"},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cheers\", \"Engineering Block E3\", \"24/7\"},"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Spinelli Coffee Company\", \"Engineering Block EA\", \"Mon-Fri, 8.00am-6.30pm\"},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Subway Mobile Cart - Halal Certified\", \"Engineering Block E4\", \"Mon-Fri, 11.00am-6.00pm\"},"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Arise \u0026 Shine\", \"Engineering Block E4\", \"Mon-Fri, 7.00am-8.00pm Sat/Sun/PH, 7.00am-3.00pm\"},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Takeaway Food Kiosks\", \"Engineering Block E4\", \"Mon-Fri, 7.00am-8.00pm Sat/Sun/PH, 7.00am-3.00pm\"},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Tea Party\", \"University Sports Centre\", \"Mon-Sat, 10.30am-10.30pm\"}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesMuseum \u003d {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Atempo\", \"Yong Siew Toh Conservatory of Music (YSTCM)\", \"Mon-Fri, 8.30am-5.00pm\"},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"D’Arts @ UCC\", \"University Cultural Centre\", \"Mon-Fri and event days, 8.30am-5.00pm\"},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Bar Bar Black Sheep\", \"Alice Lee Plaza\", \"Mon-Sun, 12.00pm-12.00am\"}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesUtown \u003d {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Flavours@Utown\", \"Stephen Riady Centre\", \"Mon-Sun: 24 hours\"},"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Waa Cow\", \"Stephen Riady Centre\", \"Mon-Thu, 11.30am-7.30pm Fri, 11.30am-9.30pm Sat, 12.00pm-3.00pm\"},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Super Snacks\", \"Stephen Riady Centre\", \"Daily, 11.00am-2.00am\"},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"2359 Li Ji Coffeehouse\", \"Stephen Riady Centre\", \"Mon-Fri, 11.00am-1.00am Sat/Sun/PH, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Octobox\", \"Stephen Riady Centre\", \"24/7\"},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Fairprice Xpress\", \"Stephen Riady Centre\", \"24/7\"},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Fine Food\", \"Town Plaza\", \"Mon-Sun, 7.00am-10.00pm\"},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Royals Bistro - Halal Certified\", \"Town Plaza\", \"Mon-Sat, 11.00am-8.30pm\"},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Sapore Italiano\", \"Town Plaza\", \"Mon-Sun, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Hwang\u0027s\", \"Town Plaza\", \"Mon-Sat, 10.00am-10.00pm\"},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Subway - Halal Certified\", \"Town Plaza\", \"Mon-Sat, 10.00am-10.00pm Sun, 10.00am-9.00pm\"},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Udon Food Bar\", \"Town Plaza\", \"Mon-Sat, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cheers\", \"Town Plaza\", \"Mon-Sat, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Starbucks\", \"Education Resource Centre\", \"24/7\"},"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Agora Cafe\", \"Yale-NUS East Core\", \"Mon-Sun, 8.30am-9.00pm\"}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesBtc \u003d {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Summit - Halal Certified\", \"BTC Block B\", \"Mon-Fri, 7.00am-8.00pm Sat, 7.00am-4.00pm\"},"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Octobox\", \"BTC Block B\", \"Mon-Fri, 7.00am-8.00pm Sat, 7.00am-4.00pm\"},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Reedz Cafe\", \"The Thinking Corner @ BTC Li Ka Shing Building\", \"Mon-Fri, 8.00am-7.00pm\"}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cFoodPlace\u003e diningOptionsInNus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public FoodPlacesData() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"Science\", \"University Hall\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            \"Medicine\"}, foodPlacesScience));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"PGP\"}, foodPlacesPgp));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"School of Business\", \"School of computing\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            \"FASS\", \"Ventus\", \"Shaw Foundation\"}, foodPlacesComp));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"Faculty of Engineering\", \"YIH\", \"USC\"}, foodPlacesEngin));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"Museum\"}, foodPlacesMuseum));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"University Town\", \"Yale NUS\"}, foodPlacesUtown));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"BTC\"}, foodPlacesBtc));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static ArrayList\u003cFoodPlace\u003e getDiningOptionsInNus() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (diningOptionsInNus.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            new FoodPlacesData();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return diningOptionsInNus;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 3,
      "wamikamalik": 113
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/FavStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " * Stores FavList in txt file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class FavStorage extends Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static final String FILE_READ \u003d \"FavList.txt Read with no issues\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private boolean isCorrupted \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static final List\u003cString\u003e VALID_COMMANDS \u003d Arrays.asList(\"/help\", \"/route\", \"/routemap\", \"/bus\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            \"allbus\", \"liststops\", \"/faculty\", \"/dine\", \"/dineinfo\", \"/reset\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public FavStorage(String dir) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        super(dir);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        file \u003d getFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Reads file and prints corrupted file message if file corrupted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @throws FileNotFoundException if file not found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            String entry \u003d s.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            readLine(entry);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        if (isCorrupted) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            Ui.printCorruptedDataRead();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.println(FILE_READ);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Reads line in txt file and adds required Fav objects to FavList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @param entry if number of delimiter not 1 or command does not contain \"/\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private void readLine(String entry) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String[] entryWords \u003d entry.split(\"\\\\|\",2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        if (entryWords.length !\u003d 2 || entryWords[1].isBlank()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            isCorrupted \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        if (!isValidCommand(entryWords[0])) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            isCorrupted \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(entryWords[0], entryWords[1]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Checks if command type can be added to favlist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @param command String of command portion of line from favlist.txt"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @return boolean which indicates if command type is exists in VALID_COMMANDS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private Boolean isValidCommand(String command) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String [] entryWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String commandType \u003d entryWords[0].toLowerCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        boolean isValidCommand \u003d VALID_COMMANDS.contains(commandType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return isValidCommand;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * Updates file based on FavList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     * @throws IOException if file cannot be updated"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void updateFile() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String line \u003d new String();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (Fav f: FavList.getList()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            line +\u003d f.getCommand() + \"|\" + f.getDesc();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            line +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        fw.write(line);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "EthanWong2212": 94,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/FreqStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " * Stores the search frequencies of all the bus stops present."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "public class FreqStorage extends Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(FreqStorage.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private boolean isCorrupted \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static final String FILE_READ \u003d \"FreqList.txt Read with no issues\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static final int ALL_STOPS \u003d 32;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public FreqStorage(String dir) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        super(dir);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        file \u003d getFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Reads stored TXT file by calling on private loadFile function."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void readFile() throws CustomException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        LOGGER.fine(\"Attempting to read file: \" + dir);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            loadFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.FREQ_READ_FILE_FAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Updates stored TXT file by calling on private saveFile function."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException If file can\u0027t be updated"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void updateFile() throws CustomException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        ArrayList\u003cInteger\u003e frequencyList \u003d BusData.getAllSearchCount();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            saveFile(frequencyList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.UPDATE_FILE_FAIL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Saves files in a line of integers for the bus stops."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @param frequencyList ArrayList of all the search frequencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws IOException catch error occurred during an input-output operation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void saveFile(ArrayList\u003cInteger\u003e frequencyList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        File savedFile \u003d new File(dir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FileWriter writer \u003d new FileWriter(savedFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (int i \u003d 0; i \u003c frequencyList.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            String currFreq \u003d Integer.toString(frequencyList.get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            writer.write(currFreq + System.lineSeparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Loads file from FreqList.txt file and update respective search counts"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws FileNotFoundException If file can\u0027t be located"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException       If file was tampered with eg, removal of entries/ injection of senseless data"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void loadFile() throws FileNotFoundException, CustomException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        File savedFile \u003d new File(dir);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(savedFile);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (savedFile.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            initialiseFile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        while (fileScanner.hasNext() \u0026\u0026 !isCorrupted) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            int currInt \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            currInt \u003d parseSearchFreq(fileScanner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            BusStops.values()[index].setCount(currInt);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        handlesCorruptedFile(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Parses integer from freqList.txt."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException If file can\u0027t be updated"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private int parseSearchFreq(Scanner fileScanner) throws CustomException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int currInt;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            currInt \u003d Integer.parseInt(fileScanner.nextLine());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (currInt \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                isCorrupted \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            isCorrupted \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            initialiseFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.FREQ_READ_FILE_FAIL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return currInt;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Handles corrupted file eg missing entries/ senseless data."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException If file can\u0027t be updated"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void handlesCorruptedFile(int index) throws CustomException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (index \u003c ALL_STOPS - 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            isCorrupted \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            initialiseFile();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.FREQ_READ_FILE_FAIL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (isCorrupted) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            initialiseFile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.FREQ_READ_FILE_FAIL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            LOGGER.fine(\"FreqList.txt file read successfully.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            System.out.println(FILE_READ);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * Initialise the file to all zeroes."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     * @throws CustomException If file can\u0027t be updated"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void initialiseFile() throws CustomException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.resetSearchFrequency();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        updateFile();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        isCorrupted \u003d false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 147,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    File file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    String dir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public Storage(String dir) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.dir \u003d dir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        createFile(dir);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    protected void createFile(String dir) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            file \u003d new File(dir);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                System.out.println(\"File created: \" + file.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                System.out.println(file.getName() + \" already exists\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            System.out.println(\"Error:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    protected File getFile() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public abstract void readFile() throws FileNotFoundException, CustomException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public abstract void updateFile() throws IOException, CustomException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 6,
      "EthanWong2212": 31,
      "wamikamalik": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.DiningOptions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static String getCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String logo \u003d \" _       _       ____     __       __\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| |\\\\ \\\\  | |     / /\\\\ \\\\    \\\\ \\\\     / /\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| | \\\\ \\\\ | |    / /__\\\\ \\\\    \\\\ \\\\   / /\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| |  \\\\ \\\\| |   / /----\\\\ \\\\    \\\\ \\\\ / /\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"|_|   \\\\ \\\\_|  / /      \\\\ \\\\    \\\\_V_/    @NUS\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"How can I help?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printMostSearchedBusStop();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void addFavMessage(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"You have successfully added: \\n\\\"\" + input + \"\\\"\\ninto your favourites\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void showError(Exception error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        if (error.toString() !\u003d \"Possible Locs shown\") {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            if (error.toString() \u003d\u003d \"No match found. To see the list of faculties in NUS, type /faculty\") {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                System.out.println(error);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            } else if (error.toString() \u003d\u003d \"No match found. Try searching for another outlet!\") {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                System.out.println(error);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                System.out.println(error);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Here are the range of commands:\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"1.  /route : Display possible direct bus from point to point\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"2.  /routemap: Display the route map with its intermediate bus stops\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"3.  /bus: Display buses available at each bus stop\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"4.  /allbus: List all buses available in NUS Zone A\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"5.  /liststops: List all bus stops in NUS\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"6.  /faculty: List all faculties in NUS\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"7.  /dine: Search for dining options within a faculty\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"8.  /dineinfo: Search for a specific dining outlet\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"9.  /addfav: Add previous valid command as a favourite command\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"10. /deletefav: Delete a favourite command\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"11. /execfav: Execute a favourite command\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"12. /descfav: Change the description for a favourite command\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"13. /listfav: List all favourite commands\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"14. /clearfav: Clear the list of favourite commands\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"15. /exit: Exit program\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"16. /reset: Reset frequent search data\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"17. /help: List all available commands\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"https://ay2021s1-cs2113t-f14-3.github.io/tp/UserGuide.html#1-what-is-navnus\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printExitMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"So long buddy!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printRouteMessage(ArrayList\u003cBus\u003e options) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int optionNo \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isPossible \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int busCount \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"The buses you can take with their intermediate stops are: \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (Bus option : options) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (option.toString() !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                if (busCount !\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    System.out.println(\"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    busCount \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                System.out.println(optionNo + \". \" + option.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                optionNo++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                busCount++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                isPossible \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!isPossible) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"none. There are no direct bus routes. :(\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printFullRoute(Bus busCode) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (busCode !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Here is the \" + busCode.getBusNumber() + \" route that you have requested:\\n\" + busCode);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void printDupeMessage(int index, String desc, String command) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"You already saved something like this in your favourites list\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(index + \". \" + desc + \"\\nCommand stored: \" + command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printResetSearchFreqMessage() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"The search frequencies of all bus stops have been reset to 0!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printMostSearchedBusStop() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops mostSearchedBusStop \u003d BusStops.mostSearchedBusStop();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (mostSearchedBusStop !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            System.out.println(\"Your most searched bus stop is: \" + mostSearchedBusStop.getName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            System.out.println(\"As you search more, your most frequently searched bus stop will appear here \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                    + \"each time\\nyou run this program!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printAllBusMessage(ArrayList\u003cBus\u003e allBuses) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"The buses available in NUS are: \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        int count \u003d allBuses.size();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (Bus bus : allBuses) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(bus.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            count--;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            if (count !\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printPossibleLocsMessage(ArrayList\u003cString\u003e possibleLocs) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Hmm, did you mean any of these locations?\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (String location : possibleLocs) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(location);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Please type the command again with the correct location.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printFacultyResult(ArrayList\u003cFoodPlace\u003e foodPlaceList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        System.out.println(\"List of all faculties in NUS: \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (FoodPlace foodPlace : foodPlaceList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            ArrayList\u003cString\u003e tempFacultyList \u003d foodPlace.getFaculty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            for (String faculty : tempFacultyList) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                System.out.println(count + \". \" + faculty);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printDineResult(String tempFaculty, ArrayList\u003cDiningOptions\u003e foodPlaceInfo) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        int displayCount \u003d 0;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        System.out.println(\"The dining options available at \" + tempFaculty + \" are:\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (DiningOptions info : foodPlaceInfo) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            displayCount++;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(displayCount + \". \" + info.getName());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printDineInfoResult(ArrayList\u003cDiningOptions\u003e searchList) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        System.out.println(\"The stores that match your search:\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (DiningOptions item : searchList) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(\"\\n\" + item.toString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printFavList(ArrayList\u003cFav\u003e favList) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (Fav item : favList) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(index + \". \" + item.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printDeleteFavMessage(int favCommandIndex) throws CustomException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Got it! I\u0027ve removed the favourite command: \\n \" + FavList.getFav(favCommandIndex - 1));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printClearFavMessage() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        System.out.println(\"Your favourites has been cleared.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printDescChangeMessage(String command, String oldDesc, String newDesc) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Your description for command \\\"\" + command + \"\\\"\\nhas been successfully changed from \\\"\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + oldDesc + \"\\\"\\nto \\\"\" + newDesc + \"\\\"\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void printCorruptedDataRead() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.println(\"Oh no! Some of the data in FavList.txt is corrupted.\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                + \"Most of the corrupted data has been removed :)\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void printBusAtBusStop(ArrayList\u003cBus\u003e busList, String busStop) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.print(busStop + \":  \");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (Bus bus : busList) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            System.out.print(bus.getBusNumber() + \"   \");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 38,
      "Lezn0": 45,
      "EthanWong2212": 17,
      "mrwsy1": 75,
      "wamikamalik": 67
    }
  },
  {
    "path": "src/test/StorageTestCases/FavStorageTestTXT/CorruptedFavStorage.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/bus kent ridge mrt station|valid| 1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/execfav|test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/route opp university health centre /to opp kent ridge mrt station|valid 2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/slash|test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": " | "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/bus musuem|valid 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/HeLp|valid 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 9
    }
  },
  {
    "path": "src/test/StorageTestCases/FavStorageTestTXT/ValidFavStorage.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/bus kent ridge mrt station|test1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/route opp university health centre /to opp kent ridge mrt station|test2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/dine science|test3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/dineinfo jewel coffee|test4"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/buscommand/BusCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class BusCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busCommandConstructor_invalidStop_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"NTU North Spine\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            BusCommand command \u003d new BusCommand(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Oh no! I do not understand which bus stop you are looking for.\", e.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busCommandConstructor_inputBlank_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            BusCommand command \u003d new BusCommand(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Oh no! I do not understand which bus stop you are looking for.\", e.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busCommandConstructor_inputSpellingError_expectException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"musuem\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            BusCommand command \u003d new BusCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Possible Locs shown\", e.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_inputValidStopRandomCaps_success() throws CustomException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"KeNt RiDge\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        BusCommand command \u003d new BusCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertDoesNotThrow(command::executeCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_inputValidStopExactCaps_success() throws CustomException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"University Town\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        BusCommand command \u003d new BusCommand(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertDoesNotThrow(command::executeCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/buscommand/ResetSearchFreqCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.storage.FreqStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "class ResetSearchFreqCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void resetSearchFreqCommand_success() throws CustomException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FreqStorage freqFile \u003d new FreqStorage(\"src/test/StorageTestCases/FreqStorageTestCases/ValidFreqList\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        freqFile.readFile();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        ResetSearchFreqCommand command \u003d new ResetSearchFreqCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        command.executeCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(0, BusStops.PGP.getSearchCount());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/buscommand/RouteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class RouteCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_oneLocationWithDelimiter_expectException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP /to   \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com.executeCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oh dear! I don\u0027t have all locations.\", error.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_sameLocations_expectException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \" University Town /to univerSity TowN  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com.executeCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"You don\u0027t need a bus to get there...You are right there!\", error.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_spellingError_expectException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \" Univarsity Town /to PGP  \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com.executeCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Possible Locs shown\", error.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_nonExistentLocations_expectException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locationsInvalidSource \u003d \" Orchard /to PGP  \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locationsInvalidSource);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com.executeCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"The starting location you have provided is not the name of any bus stop in our\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"database :(\", error.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locationsInvalidDest \u003d \" University Health Centre /to Vivocity \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        com \u003d new RouteCommand(locationsInvalidDest);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com.executeCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"The destination you have provided is not the name of any bus stop in our database :(\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    error.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locationsInvalidAll \u003d \" Santosa /to West coast park\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        com \u003d new RouteCommand(locationsInvalidAll);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com.executeCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"The starting location and destination you have provided are not the names of any \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"bus\\nstops in our database :(\", error.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 74
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/buscommand/RouteMapCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "class RouteMapCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        busesInZoneA.add(new Bus(\"AA1\", AA1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_selectBus_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Bus bus \u003d BusData.selectBus(\"AA1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(\"AA1\", bus.getBusNumber());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_printRoute_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String fullBusRoute \u003d \"AA1\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"PGP -\u003e Kent Ridge MRT Station -\u003e Opp University Health Centre -\u003e Yusof Ishak House \\n-\u003e \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"Central Library -\u003e Kent Ridge -\u003e Museum -\u003e University Town -\u003e \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"University Health Centre \\n-\u003e Opp Kent Ridge MRT station -\u003e PGPR\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Bus bus \u003d BusData.selectBus(\"AA1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(fullBusRoute, bus.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_missingBusCode_expectException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String locations \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_invalidBusCode_expectException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String locations \u003d \"AA3\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 54,
      "Lezn0": 2,
      "wamikamalik": 11
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/dinecommand/DineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "package seedu.duke.logic.commands.dinecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "class DineCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand_emptyInput_expectException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        DineCommand com \u003d new DineCommand(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand_validInput_expectNoException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String input \u003d \"science\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        DineCommand com \u003d new DineCommand(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertDoesNotThrow(com::executeCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/dinecommand/DineInfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "package seedu.duke.logic.commands.dinecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "class DineInfoCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand_emptyInput_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        DineInfoCommand com \u003d new DineInfoCommand(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand_validInput_expectNoException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String input \u003d \"arise\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        DineInfoCommand com \u003d new DineInfoCommand(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertDoesNotThrow(com::executeCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/favcommand/AddFavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "class AddFavCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void executeCommand_nullCommand_expectException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String desc \u003d \"List all bus stops\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        AddFavCommand addFav \u003d new AddFavCommand(command, desc);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertThrows(CustomException.class, addFav::executeCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void executeCommand_validCommand_expectNoException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"liststops\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String desc \u003d \"List all bus stops\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        AddFavCommand addFav \u003d new AddFavCommand(command, desc);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertDoesNotThrow(addFav::executeCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void executeCommand_nullDesc_expectNoException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"liststops\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String desc \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        AddFavCommand addFav \u003d new AddFavCommand(command, desc);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertDoesNotThrow(addFav::executeCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/favcommand/DescFavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class DescFavCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.addFav(new Fav(\"/route PGP /to University Hall\", \"Awesome place\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.addFav(new Fav(\"/bus Kent Ridge MRT Station\", \"NTUC here\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_descriptionChangeSuccess() throws CustomException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String rawMessage \u003d \"1 /to It is near RVRC.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavCommand com \u003d new DescFavCommand(rawMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        com.executeCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"It is near RVRC.\", FavList.getFav(0).getDesc());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/favcommand/ExecFavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ExecFavCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(\"/route University Town /to PGP\", \"Go home\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(\"/invalid command\", \"test\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(\"/bus Museum\", \"Cool place\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(\"/dine science\", \"Science food\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_indexOutOfBounds_expectException() throws CustomException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            command.executeCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Sorry, that isn\u0027t the index of any command in the list.\", e.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void execFavCommandConstructor_inputWords_expectException() throws CustomException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"random words\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Yikes! That is not even a number.\", e.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void execFavCommandConstructor_inputBlank_expectException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Oh no! I cannot detect the input index.\", e.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void execFavCommandConstructor_inputNumberAndWords_expectException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"1 random words\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Yikes! That is not even a number.\", e.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_invalidCommand_expectException() throws CustomException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        Fav dummyFav \u003d new Fav(\"/bus museum\", \"dummy\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"2\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            command.executeCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(3, FavList.getSize());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assertEquals(\"Oh no! it seems that this command has been corrupted.\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                    + \"Don\u0027t worry, I have deleted it from your favourites list!\", e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            FavList.addFav(dummyFav);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_inputValidIndex_success() throws CustomException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"4\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertDoesNotThrow(command::executeCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 89
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/favcommand/ListFavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.logic.commands.dinecommand.DineInfoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "class ListFavCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        FavList.addFav(new Fav(\"/dine science\", \"Science food\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand_expectNoException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ListFavCommand com \u003d new ListFavCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertDoesNotThrow(com::executeCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand_expectException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        FavList.clearFav();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ListFavCommand com \u003d new ListFavCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 35
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/DescFavParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class DescFavParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    static void initLogger() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser.initLogger();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_onlySpacesString_expectException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"   \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.parseInput();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oh dear! You haven\u0027t typed in the index or changed description.\", error.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_noDelimiter_expectException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"2 I like the tea there.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.parseInput();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oops! You are missing the delimiter /to.\\nThe format for this command is as follows:\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"\\n/descfav \u003cindex\u003e /to \u003cdescription\u003e\\nwhere index is a number between 1 and the maximum items in\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \" the list\\nand description is the new description you want for your favourite command.\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    error.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_tooManyDelimiters_expectException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"2 /to I like the tea there /to Go every Sunday.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.parseInput();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oops! You have too many delimiters!\\nThe format for this command is as follows:\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                            + \"\\n/descfav \u003cindex\u003e /to \u003cdescription\u003e\\nwhere index is a number between 1 and the maximum \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                            + \"items in the list\\nand description is the new description you want for your favourite \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                            + \"command.\", error.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_delimiterWithSpacesOnly_expectException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"   /to   \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.parseInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oh dear! You haven\u0027t typed in the index or changed description.\", error.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_indexMissing_expectException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"  /to frequent visits.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.parseInput();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Yikes! That is not even a number.\", error.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_descriptionMissing_expectException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \" 2 /to  \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.parseInput();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Hmmm, I don\u0027t think you would want an empty description.\", error.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_bothParametersArePresent_success() throws CustomException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"3 /to free stuff here.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        p.parseInput();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(3,p.getIndex());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"free stuff here.\", p.getDescription());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 97
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busesInZoneA.add(new Bus(\"AA1\", AA1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void extractType_unknownCommand_expectException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d \"Hello\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::extractType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void extractType_exitCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d \"/exit\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertFalse(isOngoing);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_listStopsCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/liststops\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_helpCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/help\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_allBusCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/allbus\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_routeCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/route PGP /to PGPR\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_busCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/bus PGP\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void extractType_routeMapCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String command \u003d \"/routemap AA1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_addFavCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String fav \u003d \"/help\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(fav);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/addfav\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_dineCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/dine science\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_listFavCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String fav \u003d \"/help\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(fav);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/addfav\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/listfav\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_dineInfoCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/dineinfo arise\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_deleteFavCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String fav \u003d \"/help\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(fav);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/addfav\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/deletefav 1\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_facultyCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/faculty\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_execFavCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/execfav 1\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String fav \u003d \"/help\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(fav);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/addfav\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_descFavCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/descfav 1 /to help function\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String fav \u003d \"/help\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(fav);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/addfav\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_clearFavCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/clearfav\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String fav \u003d \"/help\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(fav);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(\"/addfav\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.extractType();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        p.setUserInput(command);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 8,
      "Lezn0": 121,
      "mrwsy1": 28,
      "wamikamalik": 49
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/RouteParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class RouteParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    static void initLogger() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser.initLogger();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_noLocation_expectException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"   \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.getLocations();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oh dear! I don\u0027t have all locations.\", error.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_noDelimiter_expectException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"University Hall\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.getLocations();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oops! You are missing the delimiter /to.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"The format for this command is as follows:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"/route \u003cstarting loc\u003e /to \u003cdestination\u003e\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"where starting location and destination must be the names of bus stops in NUS.\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    error.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_tooManyDelimiters_expectException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"University Hall /to PGP /to PGPR\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            p.getLocations();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Oops! You have too many delimiters!\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"The format for this command is as follows:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"/route \u003cstarting loc\u003e /to \u003cdestination\u003e\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"where starting location and destination must be the names of bus stops in NUS.\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    error.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_twoOneWordLocations_returnsStringArrayOf2() throws CustomException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP /to pGPR\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(2, p.getLocations().length);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"PGP \", p.getLocations()[0]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\" pGPR\", p.getLocations()[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_twoMultiWordLocations_returnsStringArrayOf2() throws CustomException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"University Town /to university Health Centre\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(2, p.getLocations().length);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"University Town \", p.getLocations()[0]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\" university Health Centre\", p.getLocations()[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 75
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/similaritycheck/SimilarityCheckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.similaritycheck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class SimilarityCheckTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void similarLoc_oneSimilarLocation_returnsArraylist() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e similarLocs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        similarLocs.add(\"Opp Kent Ridge MRT station\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String userInput \u003d \"Opp kent Ridge mrT\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e returnedList \u003d new ArrayList\u003c\u003e(SimilarityCheck.similarLoc(userInput));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(similarLocs, returnedList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void similarLoc_manySimilarLocations_returnsArraylist() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e similarLocs \u003d new ArrayList\u003c\u003e(Arrays.asList(\"University Town\", \"University Hall\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String userInput \u003d \"University\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e returnedList \u003d new ArrayList\u003c\u003e(SimilarityCheck.similarLoc(userInput));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(similarLocs, returnedList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/bus/BusDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class BusDataTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA2 \u003d {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.RAFFLESHALL,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.EA,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e(Arrays.asList(new Bus(\"AA1\", AA1),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            new Bus(\"AA2\", AA2)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_noRoute_returnEmptyBusArrayList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e stops \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stops));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stops));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), BusData.possibleBuses(startingLoc, destination).toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptions.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_oneRoute_returnBusArrayList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e stops \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stops));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        stops.addAll(Arrays.asList(AA2).subList(6, 10));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stops));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"Ea\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Opp kent ridge MRT station\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptions.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_manyRoutes_returnBusArrayList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e stopsAa1 \u003d new ArrayList\u003c\u003e(Arrays.asList(AA1).subList(7, 11));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stopsAa1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e stopsAa2 \u003d new ArrayList\u003c\u003e(Arrays.asList(AA2).subList(3, 11));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stopsAa2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"UniverSity Town\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"PGPr\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptions.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_invalidStop_expectEmptyArrayList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"NTU North Spine\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.getBusAtStop(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(0, busList.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_empty_expectEmptyArrayList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.getBusAtStop(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(0, busList.size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopRandomCaps_expectAA1() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"KeNt RiDge\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.getBusAtStop(input);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(1, busList.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA1\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopExactCaps_expectAA2() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"Kent Vale\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.getBusAtStop(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(1, busList.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA2\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopAllCaps_expectAA1AA2() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"UNIVERSITY TOWN\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.getBusAtStop(input);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(2, busList.size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA1\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA2\", busList.get(1).getBusNumber());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 3,
      "EthanWong2212": 48,
      "wamikamalik": 76
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/bus/BusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class BusTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_routeExists_returnRouteArrayList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"University health cenTre\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e(Arrays.asList(AA1).subList(4, 9));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_routeExistsNoIntermediateStops_returnRouteArrayList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"Museum\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"University town\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e(Arrays.asList(AA1).subList(6, 8));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_destinationNotInList_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_startNotInList_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"University Hall\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_startAndDestinationInList_wrongOrder_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"Pgpr\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 1,
      "wamikamalik": 72
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/favorite/FavListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "class FavListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.addFav(new Fav(\"/route PGP /to University Hall\", \"Awesome place\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.addFav(new Fav(\"/bus Kent Ridge MRT Station\", \"NTUC here\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc_indexOutOfBounds_expectException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String description \u003d \"Hello\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            FavList.changeDesc(index, description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"Sorry, that isn\u0027t the index of any command in the list.\", error.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc_sameDesc_expectException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String description \u003d \"NTUC here\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            FavList.changeDesc(index, description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (CustomException error) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assertEquals(\"No change needed! You already have that description for your favourite command.\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    error.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc_validIndexAndDesc_success() throws CustomException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String newDesc \u003d \"Good stuff!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.changeDesc(index, newDesc);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(newDesc, FavList.getList().get(0).getDesc());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void contains_duplicateFav_expectTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav fav \u003d new Fav(\"/allbus\",\"List out all buses in nus\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList.addFav(fav);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(FavList.contains(fav));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void contains_newFav_expectFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav fav1 \u003d new Fav(\"/allbus\",\"List out all buses in nus\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList.addFav(fav1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav fav2 \u003d new Fav(\"/liststops\",\"/liststops\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertFalse(FavList.contains(fav2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 25,
      "wamikamalik": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/favorite/FavTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "class FavTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    Fav fav \u003d new Fav(\"/liststops\",\"List all stops\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void equals_favSame_expectTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav userFav \u003d new Fav(\"/liststops\",\"List all stops\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(fav.equals(userFav,1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void equals_favDifferent_expectFalse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav userFav \u003d new Fav(\"/route aa2\",\"/liststops\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertFalse(fav.equals(userFav,1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/FavStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class FavStorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static String CORRUPTED_DIR \u003d \"src/test/StorageTestCases/FavStorageTestTXT/CorruptedFavStorage.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static String VALID_DIR \u003d \"src/test/StorageTestCases/FavStorageTestTXT/ValidFavStorage.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static FavStorage corruptedFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static FavStorage validFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void makeFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        corruptedFile \u003d new FavStorage(CORRUPTED_DIR);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        validFile \u003d new FavStorage(VALID_DIR);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void corruptedFileReadFile_expectFavListSize3() throws FileNotFoundException, CustomException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        corruptedFile.readFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(4, FavList.getSize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"valid| 1\", FavList.getFav(0).getDesc());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"valid 2\", FavList.getFav(1).getDesc());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"valid 3\", FavList.getFav(2).getDesc());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"valid 4\", FavList.getFav(3).getDesc());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void validFileReadFile_expectFavListSize4() throws FileNotFoundException, CustomException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        validFile.readFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(4, FavList.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test1\", FavList.getFav(0).getDesc());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test2\", FavList.getFav(1).getDesc());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test3\", FavList.getFav(2).getDesc());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test4\", FavList.getFav(3).getDesc());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void validFileupdateFile_expectFavListSize5() throws IOException, CustomException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        Fav fav \u003d new Fav(\"/dineinfo business\",\"test5\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        validFile.readFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(fav);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        validFile.updateFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        validFile.readFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(5, FavList.getSize());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test1\", FavList.getFav(0).getDesc());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test2\", FavList.getFav(1).getDesc());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test3\", FavList.getFav(2).getDesc());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test4\", FavList.getFav(3).getDesc());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"test5\", FavList.getFav(4).getDesc());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.deleteFav(5);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        validFile.updateFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 67
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/FreqStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "class FreqStorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void loadFreqList_validData_success() throws CustomException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FreqStorage freqFile \u003d new FreqStorage(\"src/test/StorageTestCases/FreqStorageTestCases/\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"ValidFreqList\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        freqFile.readFile();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(\"PGP\", BusStops.mostSearchedBusStop().getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void loadFreqList_missingEntry_customExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FreqStorage freqFile \u003d new FreqStorage(\"src/test/StorageTestCases/FreqStorageTestCases/\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"InvalidFreqList_MissingEntry\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertThrows(CustomException.class, freqFile::readFile);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        resetTestCase_missingEntry();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void loadFreqList_corruptedData_customExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FreqStorage freqFile \u003d new FreqStorage(\"src/test/StorageTestCases/FreqStorageTestCases/\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"InvalidFreqList_CorruptedData\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertThrows(CustomException.class, freqFile::readFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        resetTestCase_corruptedData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void resetTestCase_missingEntry() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        File savedFile \u003d new File(\"src/test/StorageTestCases/FreqStorageTestCases/\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"InvalidFreqList_missingEntry\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FileWriter writer \u003d new FileWriter(savedFile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (int i \u003d 0; i \u003c 25; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            writer.write(\"0\" + System.lineSeparator());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void resetTestCase_corruptedData() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        File savedFile \u003d new File(\"src/test/StorageTestCases/FreqStorageTestCases/\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"InvalidFreqList_CorruptedData\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FileWriter writer \u003d new FileWriter(savedFile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        writer.write(\"asdasdcxzczxc\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 57
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/exit"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "wamikamalik": 1
    }
  }
]
