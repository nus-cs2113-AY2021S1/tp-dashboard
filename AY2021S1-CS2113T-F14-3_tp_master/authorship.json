[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "wamikamalik": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wamika Malik | [Github](https://github.com/wamikamalik) | [Portfolio](docs/team/wamikamalik.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Fish Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Johnson Yee | [Github](https://github.com/Johnson-Yee) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shuyi | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "NUS SO FUN!"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "Lezn0": 1,
      "EthanWong2212": 1,
      "mrwsy1": 1,
      "-": 6,
      "wamikamalik": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Logo](DG_Diagrams/Nav@NUSLogo.jpg)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This developer guide aims to provide an overview of Nav@NUS to aid developers in creating extensions or making "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "enhancements."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [1. Setting up, getting started](#1-setting-up-getting-started)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [2. Design](#2-design)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [2.1. Architecture](#21-architecture)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.1 Ui Component](#211-ui-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.2. Logic Component](#212-logic-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.3. Model Component](#213-model-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [2.1.4. Storage Component](#214-storage-component)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [3. Implementation](#3-implementation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.1. Direct Route Finder (`/route` Feature)](#31-direct-route-finder-route-feature)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.2. Full Route Display (`/routemap` Feature)](#32-full-route-display-routemap-feature)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.3. Favourite command adder (`/addfav` Feature)](#33-favourite-command-adder-addfav-feature)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.4. Favourite command executor (`/execfav` Feature)](#34-favourite-command-executor-execfav-feature)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.5. Favourite command description modifier (`/descfav` Feature)](#35-favourite-command-description-modifier-descfav-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.6. Dining options finder (`/dine` Feature)](#36-dining-options-finder-dine-feature)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [4. Appendix I: Requirements](#4-appendix-i-requirements)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [4.1 Product scope](#41-product-scope)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [4.1.1 Target user profile](#411-target-user-profile)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + [4.1.2 Value](#412-value)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [4.2. User Stories](#42-user-stories)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [4.3. Non-Functional Requirements](#43-non-functional-requirements)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [4.4. Glossary](#44-glossary)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [5. Appendix II: Instructions for manual testing](#5-appendix-ii-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 1. Setting up, getting started"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Refer to the guide [Setting up and getting started](https://github.com/AY2021S1-CS2113T-F14-3/tp/blob/master/README.md#duke-project-template)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This section describes the design and implementation of the product. It has been divided into two sections: Architecture "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "and Implementation. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The architecture diagram given in the figure below explains the high-level design of the App. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![Architecture Diagram](DG_Diagrams/Architecture.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`Main` is the class Duke.java. It is responsible for:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Initializing the components in the correct sequence, and calling or creating objects in the order of execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The rest of the App consists of 4 main components:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Ui` : The Ui component handles all interactions with the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Logic` : The Logic component makes sense of the command and executes it."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Model` : The Model component is responsible for all data held in the memory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- `Storage` : The Storage component handles data by reading from and writing to files in the hard disk. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.1 Ui Component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Ui component is responsible for getting the user input and for displaying appropriate messages as response "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "to commands executed by the logic component. The following class diagram gives a brief overview of the Ui component "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "and it\u0027s interaction with other components."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![uicomponent](DG_Diagrams/UiComponent.png)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.2. Logic Component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Logic component is responsible for the following tasks:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Makes sense of the command entered by the user by splitting it into the command type and the parameters and/or "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "delimiters if any."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Executes a command based on its type and provides an appropriate result to the user via the Ui component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following class diagram briefly explains how different classes in the Logic component interact with each other."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"DG_Diagrams/LogicComponent.png\" alt\u003d\"logiccomponent\" width\u003d1100 height\u003d500\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.3. Model Component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Model component is responsible for the following tasks:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Stores the bus data, dine info data and favourites list in memory."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Performs operations on the data to facilitate the command execution by Logic component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following class diagram briefly explains how different classes in the Model component interact with each other."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![modelcomponent](DG_Diagrams/ModelComponent.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 2.1.4. Storage Component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The Storage component is responsible for the following tasks:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Stores the favourite commands in a file in a certain format and retrieves this information everytime "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "the user enters the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- Stores the number of times each bus stop has been typed by the user since he/she started using the application and "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "retrieves it everytime the user enters the application."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    + This information is used to find out the user\u0027s most frequently searched location so far and display it to the "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    user. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- These files are updated after every execution of a user command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following class diagram briefly explains how different classes in the Storage component interact with each other."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![StorageComponent](DG_Diagrams/StorageComponent.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This section provides details of how the main features of Nav@NUS have been implemented."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.1. Direct Route Finder (`/route` Feature)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`/route \u003clocation1\u003e /to \u003clocation2\u003e` is the command that has to entered by the user to see all direct bus routes "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "available from **location1** to **location2**."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The class diagram in the figure below shows how different classes used for implementation of the `/route` command "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "are linked to each other. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![RouteCommandClass](DG_Diagrams/RouteCommandClass.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The `RouteCommand#executeCommand()` method of RouteCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Calls `RouteParser#getLocations()` to get the locations entered by the user in the order of starting location and "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "destination."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - The `RouteParser#getLocations()` method throws an exception if the locations or the delimiter `/to` is missing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Calls `RouteCommand#checkLocations()` to make sure location strings are not empty or the same."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - The `RouteCommand#checkLocation()` method throws an exception if locations are empty or the same."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. Calls `RouteCommand#similarityCheck()` to check if the locations are not in the list of bus stops but "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "are similar."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - The `RouteCommand#similarityCheck()` method calls the static `SimilarityCheck#similarLoc()` method and returns "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    a list of similar locations, if any."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - If the list of similar locations is empty, `RouteCommand#executeCommand()` performs step 4 given below, "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    else it calls the static method, `Ui#printPossibleLocsMessage()`, to print the list of similar locations. "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "4. Calls static `BusData#possibleBuses()` to get a list of buses with their routes from the starting location to "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "the destination."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "   - `BusData#possibleBuses()` calls `Bus#getPossibleRoute()` to check for a possible route for the given bus number."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "   - `BusData#possibleBuses()` repeats this call for all bus numbers."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagram explains the above steps when the user enters `/route loc1 /to loc2`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![Overview](DG_Diagrams/RouteCommand.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagrams explain the interactions omitted in the main diagram."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![executing command](DG_Diagrams/RouteCommandInternal.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![bus data](DG_Diagrams/BusData.png)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.2. Full Route Display (`/routemap` Feature)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The `/routemap \u003cbus code\u003e` is the command that has to entered by the user to see the full bus route of a user-specified"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "bus route."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The class diagram in the figure below shows how different classes used for implementation of the `/routemap` command "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "are linked to each other."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![RouteCommandClass](DG_Diagrams/RouteMapCommandClass.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The `RouteMapCommand#executeCommand()` method of RouteMapCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Calls `BusData#selectBus()` to find the user-specified bus in the bus data list. If found, the Bus object will be "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "returned. Else, null is returned."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. Calls `Ui#printFullRoute()` to display full route of the specified bus."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following sequence diagram explains the above steps when the user searches for the full route of a bus."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Overview](DG_Diagrams/RouteMapCommandSeq.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.3. Favourite command adder (`/addfav` Feature)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "The `AddFavCommand#executeCommand()` method of AddFavCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "1. The `RouteParser#executeCommand` method throws an exception if the command to be saved in FavList is missing."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "2. Calls `AddFavCommand#createFav()` to make a new Fav object to be saved in the FavList."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - The `AddFavCommand#createFav()` method creates a Fav object with its command saved as its description if "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    the user left description empty."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "3. Calls `AddFavCommand#addToFavList()` method to add the Fav object created to the Favlist."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - The `AddFavCommand#createFav()` method calls the contains method within Favlist to check for any duplicate"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    Fav objects within the list that contains the same command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    - If the there are no duplicate Fav objects, Fav object created will be added to the FavList."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "`/addfav \u003cdescription\u003e` is the command that has to be entered by the user to add a previous valid command in to the user\u0027s"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "list of favourites."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/addfav` command."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "![add favourites](DG_Diagrams/AddFavSequence.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.4. Favourite command executor (`/execfav` Feature)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "[Work in Progress]\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "`/execfav \u003cINDEX\u003e` is the command which executes a command from the user\u0027s list of favourites"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/execfav` command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "![ExecFav_Sequence_Diagram](DG_Diagrams/ExecFavCommand.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.5. Favourite command description modifier (`/descfav` Feature)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "`/descfav \u003cindex\u003e /to \u003cnewDescription\u003e` command allows the user to change the current description of their favourite command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "at location **index** in the list to **newDescription**."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003eNote: **index** is the index of the item in the list when the first number is indexed as 1. As a result, "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ewe access this element in the ArrayList using **index** - 1."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The class diagram in the figure below shows how different classes used for implementation of the `/descfav` command "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "are linked to each other. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![DescFav class diagram](DG_Diagrams/descFavClass.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The `DescFavCommand#executeCommand()` method of DescFavCommand Class executes the command in the following steps:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Calls `DescFavParser#parseInput()` to check if the command message input by the user is valid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Throws an exception if "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + the input is empty."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + the delimiter `/to` is missing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Calls `Parser#splitCommands()` to separate the **index** and **description**."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Checks the validity of each parameter and throws an exception if "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + both or either of the parameters have only spaces."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        + the given index is not a number."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - If both inputs are valid, it assigns the input values to index and description variables."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Calls `DescFavParser#getIndex()` and `DescFavParser#getDescription()` to get the appropriate values input by the user."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. Calls static `FavList#changeDesc()` to change the description of favourite at **index**."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Calls static `FavList#checkIndexAndDesc()` which throws an exception if **index** is out of bounds or if "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    **description** is the same as the previous description of this favourite."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    - Calls `Fav#changeDesc()` to update the old description to **description**."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagram explains the above steps when the user enters `/descfav 1 /to hello`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![Overview](DG_Diagrams/descFav.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following sequence diagram explains the interactions omitted in the main diagram."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "![executing command](DG_Diagrams/descFavInternal.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.6. Dining options finder (`/dine` Feature)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "[Work in Progress]\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "`/dine \u003cfaculty\u003e` is the command that has to be entered by the user to see all the dining options available in the "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "specified faculty."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The following sequence diagram illustrates the steps taken by the program when the user calls the `/dine` command."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "![bus data](DG_Diagrams/DineSequence.png)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 4. Appendix I: Requirements"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 4.1 Product scope"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 4.1.1 Target user profile"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS targets people who are unfamiliar with the shuttle bus service in NUS Kent Ridge Campus "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "including students, professors and visitors."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "These are people who:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - needs to be punctual for events such tutorials"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - prefer a desktop CLI app over other types"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - are new to NUS Kent Ridge Campus"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### 4.1.2 Value "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS seeks to help the intended audience to achieve the following:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - Efficient checking of bus routes in NUS"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - Fast viewing of dining options available at other locations"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": " - Personalised application suited to the user\u0027s needs"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 4.2. User Stories"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|Version| As a ... | I want to ... | So that ...|"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|freshman/ anyone new to nus|know if there is any direct bus to my target destination|I do not need to change buses|"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|someone that is unfamiliar with the NUS campus|know the full routes of the buses|I could plan my route to my desired destination|"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|someone new to NUS|know all the available bus stops in the school|I can check the possible bus stops I can board/alight at to reach my destination|"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|curious person|know the full routes of all the buses in NUS|I can see where each bus is heading to|"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v1.0|freshman/ anyone new to NUS|know the buses available at specific bus stops|I can better plan my trip around the campus in advance|"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|have a list of favourite commands|I can access my favourite commands quickly|"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|be able to customise my list of favourite commands|I can change the list according to my needs|"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|view my most searched bus stop|it can promptly remind me of the bus stop to key in|"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "|v2.0|frequent user|be able to change how I describe my favorite commands|I know when and why I usually use that command and so that I can use it accordingly later.|"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 4.3. Non-Functional Requirements"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Nav@NUS should be able to work on any _mainstream OS_ which has Java 11 or a higher version of Java installed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. The user is expected to have a basic idea about the places around NUS."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. A user comfortable with typing english text should be able to find this application faster and more useful than those"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "that require mouse clicks."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 4.4. Glossary"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "* **Mainstream OS** - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 5. Appendix II: Instructions for manual testing"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 33,
      "Lezn0": 15,
      "EthanWong2212": 5,
      "mrwsy1": 8,
      "-": 20,
      "wamikamalik": 203
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS is a useful navigation application to aid you in navigating around NUS campus via the provided"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "shuttle bus."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 2,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Logo](UG_Figures/Nav@NUSLogo.jpg)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "## Opening words"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Welcome to Nav@NUS application\u0027s user guide! \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The purpose of this user guide is to provide you with all the necessary information to use this application to navigate"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "around NUS campus via the school\u0027s shuttle service.\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [1. What is Nav@NUS?](#1-what-is-navnus)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.1. List available help: ```/help```](#31-list-available-help-help)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.2. Check for direct bus: ```/route```](#32-check-for-direct-bus-route)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.3. Check bus route: ```/routemap```](#33-check-bus-route-routemap)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.4. Check for buses at a bus stop: ```/bus```](#34-check-for-buses-at-a-bus-stop-bus)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.5. List all bus available in NUS ```/allbus```](#35-list-all-bus-available-in-nus-allbus)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.6. List all bus stops in NUS: ```/liststops```](#36-list-all-bus-stops-in-nus-liststops)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.7. Search for dining options within a faculty: ```/dine```](#37-search-for-dining-options-within-a-faculty-dine)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.8. Search for specific dining outlet: ```/dineinfo```](#38-search-for-specific-dining-outlet-dineinfo)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.9. Add a favourite command: `/addfav`](#39-add-a-favourite-command-addfav)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.10. List all favourite commands: `/listfav`](#310-list-all-favourite-commands-listfav)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.11. Delete a favourite command: `/deletefav`](#311-delete-a-favourite-command-deletefav)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.12. Execute a favourite command: `/execfav`](#312-execute-a-favourite-command-execfav)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.13. Change the description for a favourite command: `/descfav`](#313-change-the-description-for-a-favourite-command-descfav)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.14. Clear the list of favourite commands: `/clearfav`](#314-clear-the-list-of-favourite-commands-clearfav)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.15. Similarity Checks](#315-similarity-checks)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.16. Reset frequent search data: ```/reset```](#316-reset-frequent-search-data-reset)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "  * [3.17. Exit the program: ```/exit```](#317-exit-the-program-exit)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [4. FAQ](#4-faq)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [5. Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "- [6. Glossary](#6-glossary)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 1. What is Nav@NUS?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Are you new to NUS? \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Are you searching for ways to get around NUS all squeezed up in front of a tiny information board?\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "We have just the right solution for you!\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Introducing **Nav@NUS**, you new navigation assistant!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS is a useful command line interface (CLI) application to guide you in navigating around the NUS campus"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "via the school\u0027s shuttle services. This application enables you to retrieve key bus information easily, skipping the "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "hassle of physically checking the bus stop\u0027s notice board.Nav@NUS is a tool tailor made for anyone unfamiliar to "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "NUS  campus,students,professors and visitors included. Nav@NUS brings convenience to you and wishes your "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "commute in NUS to be as effortless as possible. Nav@NUS uses a CLI to facilitate quick typing and retrieval of "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "information that you require."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Nav@NUS consists of 3 main features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Route**: Searches for bus routes from your location to your intended destination."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Dine**: Seeks dining options for you to explore culinary world of NUS."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "* **Fav**: Saves your commands for you to have a personalised user experience catered to your needs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Skip the tight squeeze near information boards and use Nav@NUS today!"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "The following steps will guide you through the process of running **Nav@NUS**."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your computer. If you do not have it installed,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "follow the guide [here](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-microsoft-windows-platforms.html#GUID-A7E27B90-A28D-4237-9383-A58B416071CA)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. Download the latest `Nav@NUS.jar` from [here](https://github.com/AY2021S1-CS2113T-F14-3/tp/releases)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. Open command prompt on your computer."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Orientate yourself to the command line interface. As seen in the figure below, the red arrow points to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "where you have to type in commands.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Windows CLI](UG_Figures/windowsCLI.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. Copy the jar file to the folder you want to use as the _home folder_ for Nav@NUS.jar bus application. In the example"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "shown in the figure, the home folder is found in the address path of \"C:\\Users...\\CS2113T Empty folder\".\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Windows CLI](UG_Figures/windowsPath.png)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "4. In the command prompt, type `cd` and the directory of the _home folder_. Press \u003ckbd\u003eEnter\u003c/kbd\u003e to continue."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "5. Run the .jar file in the command prompt as follows by typing `java -jar duke.jar` and press \u003ckbd\u003eEnter\u003c/kbd\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "6. Your screen should show the start screen of Nav@NUS as seen in the figure below.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "![Start Screen](UG_Figures/Nav@NUSstartScreen.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "7. Try keying in `/help` and press \u003ckbd\u003eEnter\u003c/kbd\u003e!"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "There are 17 features available in Nav@NUS. The following are instructions for using the features."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003eNotes about command format:  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003e1. Words in **bold** are parameters to be provided by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e2. Parameters to be entered by the user are not case-sensitive."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.1. List available help: ```/help```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command lists a set of features along with their respective commands available to users."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003ccode\u003e/help\u003c/code\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The expected outcome is as follows:\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/help1.png\" alt\u003d\"inputCommand\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.2. Check for direct bus: ```/route```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command displays all bus routes from one location to another that do not require changing buses."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The format of this command is as follows: \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/route \u003cstrong\u003elocation_1\u003c/strong\u003e /to \u003cstrong\u003elocation_2 \u003c/strong\u003e \u003c/code\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you are currently at **PGP** and want to find out the buses you can board from **PGP** bus station to get to **NUS IT**."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "To find all such bus routes:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/route \u003cstrong\u003ePGP\u003c/strong\u003e /to \u003cstrong\u003eNUS IT\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeInput1.png\" alt\u003d\"inputCommand\" width\u003d450\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. The result will be a message displaying the list of buses you can take with their routes as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput1.png\" alt\u003d\"output\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you are currently at **University Health Centre** and you want to go to **PGPR**. But you accidentally type **\"Univerity "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Health Center\"** instead. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "These are the steps to follow: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. You type \u003ccode\u003e/route \u003cstrong\u003eUniverity Health Center\u003c/strong\u003e /to \u003cstrong\u003ePGPR\u003c/strong\u003e\u003c/code\u003e into the CLI and "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as done in example 1."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. The result will be a message displaying suggestions for possible spelling errors you may have made.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput2.png\" alt\u003d\"output\" width\u003d550\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. Type \u003ccode\u003e/route \u003cstrong\u003eUniversity Health Centre\u003c/strong\u003e /to \u003cstrong\u003ePGPR\u003c/strong\u003e\u003c/code\u003e into the CLI"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "following the suggestion given."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "4. The result will be a message displaying the list of buses you can take with their routes as shown in the figure "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput3.png\" alt\u003d\"FinalOutput\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.3. Check bus route: ```/routemap```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command displays the full route of the bus that you have specified."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003ccode\u003e/routemap \u003cstrong\u003ebus code\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command is exceptionally useful to find indirect bus routes."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let us suppose that you are at **Raffles Hall** with only bus AA2 available and would like to go to **University Town**. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You would notice that there is no direct bus to **University Town**. You could use the \u003ccode\u003e/routemap\u003c/code\u003e to find"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "indirect routes to your intended destination. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "To find indirect bus routes:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. You type \u003ccode\u003e/routemap \u003cstrong\u003e AA2 \u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap4.png\" alt\u003d\"inputRouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "2. The result will display the whole bus route of bus AA2.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap1.png\" alt\u003d\"RouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "3. With the information that bus AA2 could bring you to bus stops after **Raffles Hall** e.g. **Kent Vale**, you can now check "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "if there is a direct bus route from these bus stops.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap3.png\" alt\u003d\"inputRouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command is also useful in showing you the previous bus stops of your intended bus. You could use this information"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "to gauge how crowded the bus would be.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let us suppose that you are at **Raffles Hall** intending to board AA2. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. You type in \u003ccode\u003e/routemap \u003cstrong\u003e AA2 \u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap4.png\" alt\u003d\"inputRouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. The result will display the whole bus route of bus AA2. You will observe that the bus passes through **University Town**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "which is relatively more crowded than other bus stops.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routemap1.png\" alt\u003d\"RouteMapCommand\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "3. With this information, you could explore other bus routes to your destination."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.4. Check for buses at a bus stop: ```/bus```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command displays all buses available at a specific bus stop."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Format: \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003ccode\u003e/bus\u003cstrong\u003e bus stop\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say that you are at \u003cstrong\u003eUniversity Town\u003c/strong\u003e bus stop, and you want to know the buses which are available for you to take. Instead of searching for the bus stops which all the buses stop at, you can easily access this information by using the \u003ccode\u003e/bus\u003c/code\u003e command. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "To search for available buses at University Town:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/bus \u003cstrong\u003eUniversity Town\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus4.png\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "2. The result will be a message displaying the buses available at University Town. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus3.png\" width\u003d650\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e** \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Let\u0027s say that you are at the \u003cstrong\u003emuseum\u003c/strong\u003e bus stop, and you want to know the buses which are available for you to take. However, you make a spelling error and type \u003cstrong\u003e\"musuem\"\u003c/strong\u003e instead. \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "These are the steps to fix the mistake:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "1. The result will be a message displaying bus stop suggestions for possible error in user input.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus2.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "2. Type \u003ccode\u003e/bus \u003cstrong\u003emuseum\u003c/strong\u003e\u003c/code\u003e into the CLI as suggested in the above output.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "3. The result will be a message displaying the buses available at the museum.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/bus1.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.5. List all bus available in NUS ```/allbus```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command lists all buses available in NUS with their respective routes."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The format for this command is as follows:\u003cbr\u003e "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/allbus\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you want to see a list of all bus routes so that you can plan your trip around NUS accordingly. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "To see the complete list of buses:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/allbus\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/allbus1.png\" alt\u003d\"inputCommand\" width\u003d700\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.6. List all bus stops in NUS: ```/liststops```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command lists all bus stops in NUS."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The format for this command is as follows:\u003cbr\u003e "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/liststops\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you want to know more about the bus stops in NUS. "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "To see the description of each location:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/liststops\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/listOutput.png\" alt\u003d\"inputCommand\" width\u003d800\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.7. Search for dining options within a faculty: ```/dine```"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command lists out all dining outlets available within a chosen faculty."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/dine \u003cstrong\u003efaculty\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you want to know all the dining options available in \u003cstrong\u003eSchool of Business\u003c/strong\u003e."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/dine \u003cstrong\u003ebusiness\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dine1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.8. Search for specific dining outlet: ```/dineinfo```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command finds all dining outlets that contains the keyword, and display their location and operating hours."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/dineinfo \u003cstrong\u003eoutlet\u003c/strong\u003e\u003c/code\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you want to find information of the dining outlet \u003cstrong\u003eArise \u0026 Shine\u003c/strong\u003e."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/dineinfo \u003cstrong\u003earise\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dineinfo1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you cannot remember the full name of the outlet that you are searching for. You can simply enter a keyword instead."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "To find the information of a dining outlet with the name containing \u003cstrong\u003eJewel\u003c/strong\u003e:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/dineinfo \u003cstrong\u003ejewel\u003c/strong\u003e\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dineinfo3.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.9. Add a favourite command: `/addfav`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "This command adds a valid command with an optional description to your list of favourites"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003ccode\u003e/addfav \u003cstrong\u003e [description] \u003c/strong\u003e \u003c/code\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "Let\u0027s say you want to add the command to list dining options in business."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "1. Type \u003ccode\u003e/dine \u003cstrong\u003ebuisness\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/dine1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "2. Type \u003ccode\u003e/addfav \u003cstrong\u003edining options in business\u003c/strong\u003e\u003c/code\u003e and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "to store the command in to your list of favourites with the description"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\"dining options in business\"  as shown in the figure below."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/addfav1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "**\u003cu\u003eExample 2\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "Let\u0027s say you want to add the command that guided you from PGP to NUS IT to your list of favourites."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "1. Type \u003ccode\u003e/route \u003cstrong\u003epgp /to nus it\u003c/strong\u003e\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below. "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/routeOutput1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "2. Type \u003ccode\u003e/addfav\u003c/code\u003e into the CLI and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "to store the command in to your list of favourites with no description  as shown in the figure below ."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/addfav2.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.10. List all favourite commands: `/listfav`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command displays all the commands in your list of favourite commands, along with their index and description."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/listfav\u003c/code\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you want to take a look at all the commands that was previously added to your list of favourite commands."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/listfav\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/listfav1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.11. Delete a favourite command: `/deletefav`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command deletes the command that you have specified from the list of favourite commands."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format: \u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003ccode\u003e/deletefav\u003cstrong\u003e index in list\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Let\u0027s say that you have stored the command \u003ccode\u003e/routemap \u003cstrong\u003eAA1\u003c/strong\u003e\u003c/code\u003e in your list of favourite commands."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "After reviewing your list of favourite commands, you do not want to have this command in it."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "To delete this command from your favourites list:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Type \u003ccode\u003e/deletefav \u003cstrong\u003eindex\u003c/strong\u003e\u003c/code\u003e into the CLI and "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/deleteFavExample.png\" alt\u003d\"output of deletefav\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.12. Execute a favourite command: `/execfav`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "This command executes the specific command in your list of favourite commands."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Format: \u003cbr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003ccode\u003e/execfav\u003cstrong\u003e index in list\u003c/strong\u003e\u003c/code\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Let\u0027s say that you have stored the command \u003ccode\u003e/route \u003cstrong\u003eOpp University Health Centre\u003c/strong\u003e /to \u003cstrong\u003eOpp Kent Ridge MRT station\u003c/strong\u003e\u003c/code\u003e in your list of favourite commands. Instead of typing the long command using `/route`, you can now conveniently use the `/execfav` command."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "Given you have the list of favourite commands:\u003cbr\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/execfav1.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "To execute the command with the 2nd index in your list of favourite commands:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "1. Type \u003ccode\u003e/execfav \u003cstrong\u003e2\u003c/strong\u003e\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/execfav2.png\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.13. Change the description for a favourite command: `/descfav`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command helps you change the description of a command in your list of favourites."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Format:\u003cbr\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/descfav \u003cstrong\u003eindex\u003c/strong\u003e /to \u003cstrong\u003enew description\u003c/strong\u003e\u003c/code\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you have the following list of commands:\u003cbr\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/beforedescfav.PNG\" alt\u003d\"original list of commands\" width\u003d550\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You want to change the description for `/dineinfo Pines` from \"No description\" to **\"Get dinner @7:30PM every Tuesday\"**."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "To do so:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "1. Type \u003ccode\u003e/descfav \u003cstrong\u003e5\u003c/strong\u003e /to \u003cstrong\u003eGet dinner @7:30PM every Tuesday\u003c/strong\u003e\u003c/code\u003e into the CLI as"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "shown in the figure below and press enter. \u003cbr\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/descfavinput.PNG\" alt\u003d\"descfav input\" width\u003d600\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Type \u003ccode\u003e/listfav\u003c/code\u003e to see the changed description.\u003cbr\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/afterdescfav.png\" alt\u003d\"list after changing\" width\u003d600\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.14. Clear the list of favourite commands: `/clearfav`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "This command clears all the commands stored in your list of favourite commands."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/clearfav\u003c/code\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "Let\u0027s say you no longer need any of the commands in your list of favourite commands. Instead of using "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003ccode\u003e/deletefav\u003c/code\u003e to remove the commands one by one, you can use the \u003ccode\u003e/clearfav\u003c/code\u003e feature to clear "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "your favourites list at one go."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "These are the steps to follow:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "1. Type \u003ccode\u003e/clearfav\u003c/code\u003e into the CLI and press enter to execute the command as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/clearfav1.png\" alt\u003d\"output\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.15. Similarity Checks"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "When you enter a location and make a spelling error or a typo in the name, the app performs a similarity check with "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "existing location names and suggests some locations to you. The app executes this command automatically and does not "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "require any explicit input from you."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "Let\u0027s say you want to find all buses that stop at **Opp HSSML**, but you type \u003ccode\u003e/bus \u003cstrong\u003eOpp HSML\u003c/strong\u003e\u003c/code\u003e instead."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You will receive a message with suggested location names you can use as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/similarOutput1.png\" alt\u003d\"similar locs message\" width \u003d 550\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "You may then type in the command again with the correct location to see a list of buses that stop at **Opp HSSML** "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "as shown in the figure below.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/similarOutput2.png\" alt\u003d\"Correct input message\" width\u003d400\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003eNote: This check is only applicable to bus stop names, so the app performs it only when you enter a "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003e\u003ccode\u003e/route\u003c/code\u003e command or a \u003ccode\u003e/bus\u003c/code\u003e command. "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.16. Reset frequent search data: ```/reset```"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This command resets the data set used to display most frequently search bus stop on application start-up."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Format:\u003ccode\u003e/reset\u003c/code\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "#### Examples of usage"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "**\u003cu\u003eExample 1\u003c/u\u003e**\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Let us suppose that you are transitioning to a new academic semester, and the locations that you will key in to the"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "application changes. To create a new data set that will cater to your needs in this new semester, you will key in the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "command \u003ccode\u003e/reset\u003c/code\u003e to reset the data set and start the application on a clean slate.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003cimg src\u003d\"UG_Figures/freq1.png\" alt\u003d\"Correct input message\" width\u003d600\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### 3.17. Exit the program: ```/exit```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "This command helps you exit the application."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The format of this command is as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "\u003ccode\u003e/exit\u003c/code\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The application exits after displaying the following message.\u003cbr\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "```"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "So long buddy!"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "```"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This section addresses some common questions to aid in possible issues faced."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "**Q:** Where can I find the release? \u003cbr\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "It can be found at [here](https://github.com/AY2021S1-CS2113T-F14-3/tp/releases)."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "The following table provides a summary of features and command formats."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "\u003eNote: No additional parameter is needed if it is not mentioned. eg help \u003cbr\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "Command | Format | Example"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "--- | --- | ---"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/route | `/route` **location1** `/to` **location2** | `/route` **PGP** `/to` **Raffles Hall**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/routemap | `/routemap` **bus code** | `/routemap` **AA1** "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/bus | `/bus` **location** | `/bus` **PGP**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/allbus | `/allbus` | `/allbus`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/liststops | `/liststops`| `/liststops`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/dine | `/dine` **faculty** | `/dine` **business**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/dineinfo | `/dineinfo` **outlet** | `/dineinfo` **arise \u0026 shine**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/addfav | `/addfav` **[description]** | 1. `/addfav` \u003cbr\u003e 2.`/addfav` **dining options in business**  "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/deletefav | `/deletefav` **index**| `/deletefav` **1**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "/execfav | `/execfav` **index** | `/execfav` **5**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/descfav | `/descfav` **index** `/to` **new description** | `/descfav` **5** `/to` **Get dinner @7:30PM every Tuesday**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/listfav | `/listfav` | `/listfav`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "/clearfav | `/clearfav` | `/clearfav`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/exit | `/exit` | `/exit`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/help | `/help` | `/help`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "/reset | `/reset` | `/reset`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## 6. Glossary"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "This section defines key technical terms we have used throughout the user guide."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "1. Case-sensitive: Capital and lower case letters are treated differently."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "2. Command Line Interface(CLI): Processes commands to a computer program in the form of lines of text."
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 108,
      "Lezn0": 36,
      "EthanWong2212": 45,
      "mrwsy1": 54,
      "-": 22,
      "wamikamalik": 199
    }
  },
  {
    "path": "docs/team/wamikamalik.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "# Wamika Malik - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.DescFavParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.RouteParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.storage.FavStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.storage.FreqStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final String DUMMY_PARAM \u003d \"Dummy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static FavStorage favFile \u003d new FavStorage(\"data/FavList.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static FreqStorage freqFile \u003d new FreqStorage(\"data/freqList.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static BusInfo busInfo \u003d new BusInfo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static FavList favList \u003d new FavList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser.initLogger();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser.initLogger();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        new Duke();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            favFile.readFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            freqFile.readFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (CustomException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        parser \u003d new Parser(DUMMY_PARAM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        while (isOngoing) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String fullCommand \u003d Ui.getCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                parser.setUserInput(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                isOngoing \u003d parser.extractType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                freqFile.updateFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } catch (CustomException error) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                Ui.showError(error);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            favFile.updateFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 9,
      "Lezn0": 6,
      "EthanWong2212": 7,
      "-": 11,
      "wamikamalik": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CustomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class CustomException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ExceptionType exception;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public CustomException(ExceptionType exception) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return (exception.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/ExceptionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public enum ExceptionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_COMMAND(\"I do not understand!!\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    INVALID_BUS(\"Sorry,there is no such bus in our database!\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NO_DELIMITER(\"Oops! You are missing the delimiter.\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NO_LOCATIONS(\"Oh dear! I don\u0027t have all locations.\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    MISSING_BUS_CODE(\"Oh no! You seem to have missed typing in the bus code!\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    SAME_LOCATIONS(\"You don\u0027t need a bus to get there...You are right there!\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    INVALID_BUS_STOP(\"Oh no! I do not understand which bus stop you are looking for.\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    INVALID_FACULTY(\"Oh no! Please enter a faculty.\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    INVALID_FOODPLACE(\"Oh no! I cannot detect any inputs.\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    INVALID_FAVOURITE(\"Oh no! I cannot seem to detect the command you want to store as your favourite.\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    UPDATE_FILE_FAIL(\"Sorry to inform you that the update of frequency list is unsuccessful.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    READ_FILE_FAIL(\"It is unfortunate that the program is unable to read the file, a fresh file\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            + \" has been created.\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    EMPTY_FAVLIST(\"Your favourites list is empty!\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    NO_INPUT(\"Oh dear! You haven\u0027t typed in the index or changed description.\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    EMPTY_DESCRIPTION(\"Hmmm, I don\u0027t think you would want an empty description.\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    NOT_A_NUMBER(\"Yikes! That is not even a number.\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    EXTRA_PARAMETERS(\"Hmm, this function should not be called with parameters.\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    INVALID_INDEX(\"Sorry, that isn\u0027t the index of any command in the list.\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    SAME_DESCRIPTION(\"No change needed! You already have that description for your favourite command.\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    EMPTY_INDEX(\"Oh no! I cannot detect the input index.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ExceptionType(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 6,
      "Lezn0": 5,
      "EthanWong2212": 2,
      "mrwsy1": 2,
      "wamikamalik": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/AllBusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class AllBusCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cBus\u003e allBuses \u003d BusData.listOfAllBuses();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Ui.printAllBusMessage(allBuses);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 14,
      "wamikamalik": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/BusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.similaritycheck.SimilarityCheck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class BusCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public String busStop;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public BusCommand(String busStop) throws CustomException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e(similarLocations(busStop));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (possibleLocs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            this.busStop \u003d BusStops.formatName(busStop.trim());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            BusStops.findBusStop(busStop).incrementSearchCount();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Ui.printPossibleLocsMessage(possibleLocs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (busStop !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            assert !busStop.isBlank() : \"Bus stop is empty\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(busStop);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            System.out.print(busStop + \":  \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            for (Bus bus : busList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                System.out.print(bus.getBusNumber() + \"   \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cString\u003e similarLocations(String location) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (BusStops info: EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            routeNames.add(info.getName().toLowerCase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!routeNames.contains(location.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            possibleLocs \u003d SimilarityCheck.similarLoc(location);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return possibleLocs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "Lezn0": 4,
      "EthanWong2212": 24,
      "wamikamalik": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/ListStopsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public class ListStopsCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.listStops();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 9,
      "wamikamalik": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/ResetSearchFreqCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "public class ResetSearchFreqCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.resetSearchFrequency();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Ui.printResetSearchFreqMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 10,
      "wamikamalik": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/RouteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.similaritycheck.SimilarityCheck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.RouteParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class RouteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String rawMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private RouteParser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public RouteCommand(String rawMessage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.rawMessage \u003d rawMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        parser \u003d new RouteParser(rawMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String [] locations \u003d parser.getLocations();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        checkLocations(locations);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e(similarLocations(locations));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (possibleLocs.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            ArrayList\u003cBus\u003e busOptions \u003d BusData.possibleBuses(locations[0].trim(), locations[1].trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Ui.printRouteMessage(busOptions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            Ui.printPossibleLocsMessage(possibleLocs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private void checkLocations(String[] locations) throws CustomException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (locations[0].trim().length() \u003d\u003d 0 || locations[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if (locations[0].trim().equalsIgnoreCase(locations[1].trim())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert !locations[0].isBlank() : \"Location 0 is empty.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert !locations[1].isBlank() : \"Location 1 is empty.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.SAME_LOCATIONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !locations[0].isBlank() : \"Location 0 is empty.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !locations[1].isBlank() : \"Location 1 is empty.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !(locations[0].trim().equalsIgnoreCase(locations[1].trim())) : \"Seems like the locations are still \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"the same.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cString\u003e similarLocations(String[] locations) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (BusStops info: EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            routeNames.add(info.getName().toLowerCase());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!routeNames.contains(locations[0].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            possibleLocs \u003d SimilarityCheck.similarLoc(locations[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else if (!routeNames.contains(locations[1].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            possibleLocs \u003d SimilarityCheck.similarLoc(locations[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return possibleLocs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/buscommand/RouteMapCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "public class RouteMapCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public String busCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public RouteMapCommand(String busCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.busCode \u003d busCode.trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String userBusRouteSelection \u003d this.busCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        selectAndPrintBusRoute(userBusRouteSelection);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void selectAndPrintBusRoute(String userBusRouteSelection) throws CustomException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assert !userBusRouteSelection.isBlank() : \"User input is empty.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (userBusRouteSelection.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.MISSING_BUS_CODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Bus selectedBus \u003d BusData.selectBus(userBusRouteSelection);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Ui.printFullRoute(selectedBus);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_BUS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 32,
      "wamikamalik": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/commons/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public abstract void executeCommand() throws CustomException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isOngoing() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 3,
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/commons/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printExitMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean isOngoing() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/commons/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printHelp();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/dinecommand/DineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.dinecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.DiningOptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlacesData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printDineResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class DineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    private String userFaculty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public DineCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        this.userFaculty \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (userFaculty.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_FACULTY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cFoodPlace\u003e foodPlaceList \u003d FoodPlacesData.getDiningOptionsInNus();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        checkFaculty(foodPlaceList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void checkFaculty(ArrayList\u003cFoodPlace\u003e foodPlaceList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        int displayCount \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (FoodPlace foodPlace : foodPlaceList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            ArrayList\u003cString\u003e tempFacultyList \u003d foodPlace.getFaculty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            for (String tempFaculty : tempFacultyList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                if (tempFaculty.toLowerCase().contains(userFaculty.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    ArrayList\u003cDiningOptions\u003e foodPlaceInfo \u003d foodPlace.getInfo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    if (foodPlaceInfo.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                        System.out.println(\"There are no dining options in this faculty.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                        displayCount \u003d printDineResult(displayCount, tempFaculty, foodPlaceInfo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (displayCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(\"No match found.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 50,
      "wamikamalik": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/dinecommand/DineInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.dinecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.DiningOptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.FoodPlacesData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printDineInfoResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class DineInfoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    private String userFoodPlace;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public DineInfoCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        this.userFoodPlace \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (userFoodPlace.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_FOODPLACE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cFoodPlace\u003e foodPlaceList \u003d FoodPlacesData.getDiningOptionsInNus();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        checkFoodPlace(foodPlaceList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void checkFoodPlace(ArrayList\u003cFoodPlace\u003e foodPlaceList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        ArrayList\u003cDiningOptions\u003e searchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (FoodPlace foodPlace : foodPlaceList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            ArrayList\u003cDiningOptions\u003e dineInfoList \u003d foodPlace.getInfo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            for (DiningOptions dineInfo : dineInfoList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                String name \u003d dineInfo.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                if (name.toLowerCase().contains(userFoodPlace.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                    searchList.add(dineInfo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printDineInfoResult(searchList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 43,
      "wamikamalik": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/AddFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.addFavMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class AddFavCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private Fav item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public AddFavCommand(String input, String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (input \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_FAVOURITE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        createFav();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        addToFavList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private void createFav() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (description.equals(\" \")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            item \u003d new Fav(input.trim(), \"No description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            item \u003d new Fav(input.trim(), description.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private void addToFavList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (!FavList.contains(item)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            FavList.addFav(item);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            addFavMessage(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 37,
      "EthanWong2212": 10,
      "wamikamalik": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/ClearFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "public class ClearFavCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        FavList.clearFav();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/DeleteFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class DeleteFavCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public DeleteFavCommand(String index) throws CustomException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (index.isBlank()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.NO_INPUT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int indexNum \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            indexNum \u003d Integer.parseInt(index.trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.index \u003d indexNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int sizeOfArray \u003d FavList.getSize();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e sizeOfArray) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            Ui.printDeleteFavMessage(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            FavList.deleteFav(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 24,
      "EthanWong2212": 9,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/DescFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.parser.DescFavParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class DescFavCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String rawMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private DescFavParser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public DescFavCommand(String rawMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.rawMessage \u003d rawMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        parser \u003d new DescFavParser(rawMessage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        parser.parseInput();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d parser.getIndex();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String description \u003d parser.getDescription();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d FavList.changeDesc(index, description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d getCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Ui.printDescChangeMessage(command, oldDesc, description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String getCommand(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d FavList.getList().size() : \"Index out of bounds.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return FavList.getList().get(index - 1).getCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 10,
      "wamikamalik": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/ExecFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.parser.ExecFavParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ExecFavCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private ExecFavParser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private Fav fav;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public ExecFavCommand(String input) throws CustomException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.parser \u003d new ExecFavParser(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private void getFav() throws CustomException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assert ! (parser \u003d\u003d null) : \"parser not declared\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        index \u003d parser.getIndex();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        fav \u003d FavList.getFav(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        getFav();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        Parser parser \u003d new Parser(fav.getCommand());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.println(fav.getCommand());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        boolean done \u003d !parser.extractType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 31,
      "wamikamalik": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/favcommand/ListFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ListFavCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public void executeCommand() throws CustomException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.listFav();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 8,
      "mrwsy1": 4,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/DescFavParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class DescFavParser extends Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final String DELIMITER \u003d \"/to\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(RouteParser.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public DescFavParser(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public void parseInput() throws CustomException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (super.getUserInput().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"User input is empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_INPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else if (super.getUserInput().contains(DELIMITER)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] components \u003d super.splitCommands(2, DELIMITER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                checkComponents(components);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                index \u003d checkIndex(components[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                description \u003d checkDescription(components[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"Delimiter /to is missing.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_DELIMITER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (StringIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Either of the parameters is missing.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_INPUT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private void checkComponents(String[] components) throws CustomException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (components[0].trim().isEmpty() \u0026 components[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"All parameters are missing.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_INPUT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !(components[0].trim().isEmpty() \u0026\u0026 components[1].trim().isEmpty()) : \"Component 1 and 2 are empty.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String checkDescription(String description) throws CustomException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (description.trim().isBlank() | description.trim().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Description is missing.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !description.trim().isBlank() : \"Description has only spaces.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !description.trim().isEmpty() : \"Description is empty.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private int checkIndex(String index) throws CustomException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int rawIndex \u003d Integer.parseInt(index.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return rawIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Given index is not a number.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void initLogger() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logger.log\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            fh.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.severe(\"Error in creating logger file.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/ExecFavParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ExecFavParser extends Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public ExecFavParser(String userInput) throws CustomException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        setIndex();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private void setIndex() throws CustomException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assert ! (userInput \u003d\u003d null) : \"userInput not declared\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.EMPTY_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            int index \u003d Integer.parseInt(userInput) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.NOT_A_NUMBER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 35
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.AllBusCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.BusCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.dinecommand.DineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.dinecommand.DineInfoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.commons.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.ListStopsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.RouteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.RouteMapCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.AddFavCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.logic.commands.favcommand.ClearFavCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.DeleteFavCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.DescFavCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.ExecFavCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.logic.commands.favcommand.ListFavCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.commands.buscommand.ResetSearchFreqCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private String previousInput \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Parser(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public void setUserInput(String userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * Split sentence to derive command and rest of the user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     * @return String Array with two element: Command and the rest of the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String[] splitCommands(int length, String delimiter) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        final String[] split \u003d userInput.trim().split(delimiter, length);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return split.length \u003d\u003d length ? split : new String[]{split[0], \" \"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public boolean extractType() throws CustomException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String[] parts \u003d splitCommands(2, \"\\\\s+\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d parts[0].toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Command com;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isVoidFunction \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case \"/route\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new RouteCommand(parts[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/routemap\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            com \u003d new RouteMapCommand(parts[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/bus\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            com \u003d new BusCommand(parts[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/allbus\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new AllBusCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        case \"/liststops\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            com \u003d new ListStopsCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/dine\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new DineCommand(parts[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/dineinfo\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new DineInfoCommand(parts[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/help\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        case \"/reset\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            com \u003d new ResetSearchFreqCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new ExitCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/addfav\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            com \u003d new AddFavCommand(previousInput, parts[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/listfav\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            com \u003d new ListFavCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/deletefav\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            com \u003d new DeleteFavCommand(parts[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/descfav\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            com \u003d new DescFavCommand(parts[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        case \"/execfav\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            com \u003d new ExecFavCommand(parts[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        case \"/clearfav\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            isVoidFunction \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            com \u003d new ClearFavCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (isVoidFunction \u0026\u0026 !parts[1].equals(\" \")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            throw new CustomException(ExceptionType.EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        com.executeCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (!command.equals(\"/addfav\") \u0026\u0026 !command.equals(\"/execfav\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            previousInput \u003d userInput;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            previousInput \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return com.isOngoing();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 9,
      "Lezn0": 31,
      "EthanWong2212": 20,
      "mrwsy1": 13,
      "wamikamalik": 60
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/RouteParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class RouteParser extends Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static final String DELIMITER \u003d \"/to\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(RouteParser.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public RouteParser(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String[] getLocations() throws CustomException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (super.getUserInput().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"User input is empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else if (super.getUserInput().contains(DELIMITER)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                String[] components \u003d super.splitCommands(2, DELIMITER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                return new String[]{components[0], components[1]};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                logger.warning(\"Delimiter /to is missing.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                throw new CustomException(ExceptionType.NO_DELIMITER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (StringIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.warning(\"Either of the locations is missing\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.NO_LOCATIONS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void initLogger() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logger.log\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            fh.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            logger.severe(\"Error in creating logger file.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/similaritycheck/SimilarityCheck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.similaritycheck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class SimilarityCheck {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final double THRESHOLD \u003d 0.60;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static ArrayList\u003cString\u003e similarLoc(String userLoc) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e possibleLocations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (BusStops info: EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (getSimilarity(info.getName().toLowerCase(), userLoc.toLowerCase()) \u003e THRESHOLD) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                possibleLocations.add(info.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return possibleLocations;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static double getSimilarity(String givenLoc, String inputLoc) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (givenLoc.length() \u003e inputLoc.length()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            return (givenLoc.length() - editDistance(givenLoc, inputLoc)) / (double) givenLoc.length();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return (inputLoc.length() - editDistance(inputLoc, givenLoc)) / (double) inputLoc.length();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    //Source: http://rosettacode.org/wiki/Levenshtein_distance#Java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static int editDistance(String a, String b) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        a \u003d a.toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        b \u003d b.toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        // i \u003d\u003d 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int [] costs \u003d new int [b.length() + 1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (int j \u003d 0; j \u003c costs.length; j++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            costs[j] \u003d j;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d a.length(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            // j \u003d\u003d 0; nw \u003d lev(i - 1, j)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            costs[0] \u003d i;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int nw \u003d i - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d b.length(); j++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                int cj \u003d Math.min(1 + Math.min(costs[j], costs[j - 1]),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                        a.charAt(i - 1) \u003d\u003d b.charAt(j - 1) ? nw : nw + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                nw \u003d costs[j];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                costs[j] \u003d cj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return costs[b.length()];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/Bus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Bus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String busNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public Bus(String busNo, BusStops[] stops) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busNumber \u003d busNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.addAll(Arrays.asList(stops));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public Bus(String busNo, ArrayList\u003cBusStops\u003e stops) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busNumber \u003d busNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.addAll(stops);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public ArrayList\u003cString\u003e getStopNames() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        route.forEach(stop -\u003e routeNames.add(stop.getName()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return routeNames;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public String getBusNumber() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return this.busNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    //@@author wamikamalik"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    ArrayList\u003cBusStops\u003e getPossibleRoute(String startingLoc, String destination) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e allStopsFromStart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e finalRoute \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e allStopNamesFromStart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e routeNames \u003d new ArrayList\u003c\u003e(getStopNames());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routeNames.replaceAll(String::toLowerCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (routeNames.contains(startingLoc.toLowerCase())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int startingIndex \u003d routeNames.indexOf(startingLoc.toLowerCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert startingIndex !\u003d -1 : \"Hmm, seems like the starting location is not in the list\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            int size \u003d routeNames.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            assert size !\u003d 0 : \"This bus route has no stops!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            allStopNamesFromStart.addAll(routeNames.subList(startingIndex, size));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            allStopsFromStart.addAll(route.subList(startingIndex, size));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (allStopNamesFromStart.contains(destination.toLowerCase())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                int endIndex \u003d allStopNamesFromStart.indexOf(destination.toLowerCase()) + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                assert endIndex !\u003d -1 : \"Hmm, seems like the destination is not in the list\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                finalRoute.addAll(allStopsFromStart.subList(0, endIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return finalRoute;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (route.size() \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            String printableRoute \u003d String.join(\" -\u003e \", getStopNames());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            while (printableRoute.length() \u003e 100) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                int index \u003d printableRoute.lastIndexOf(\"-\u003e\",100);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                output +\u003d printableRoute.substring(0, index) + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                printableRoute \u003d printableRoute.substring(index).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            return busNumber + \"\\n\" + output + printableRoute;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 4,
      "Lezn0": 9,
      "mrwsy1": 1,
      "wamikamalik": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/BusData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class BusData {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cBus\u003e buses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void createBusList(ArrayList\u003cBus\u003e busList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        buses.clear();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        buses.addAll(busList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static ArrayList\u003cBus\u003e possibleBuses(String startingLoc, String destination) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (BusStops.isValidBusStop(startingLoc)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            BusStops.findBusStop(startingLoc).incrementSearchCount();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (BusStops.isValidBusStop(destination)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            BusStops.findBusStop(destination).incrementSearchCount();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (Bus bus : buses) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            ArrayList\u003cBusStops\u003e route \u003d bus.getPossibleRoute(startingLoc, destination);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (route !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                busOptions.add(new Bus(bus.busNumber, route));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return busOptions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static Bus selectBus(String busCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (buses.size() \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            for (Bus bus : buses) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                if (bus.getBusNumber().equals(busCode.toUpperCase())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                    return bus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static ArrayList\u003cBus\u003e busAtStop(String busStop) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (Bus bus : buses) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            ArrayList\u003cString\u003e stopNames \u003d bus.getStopNames();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            for (String name : stopNames) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                if (name.equalsIgnoreCase(busStop)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                    busList.add(bus);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return busList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static ArrayList\u003cBus\u003e listOfAllBuses() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return buses;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static ArrayList\u003cInteger\u003e getAllSearchCount() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        ArrayList\u003cInteger\u003e allSearchCount \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            allSearchCount.add(busStop.getSearchCount());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return allSearchCount;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 24,
      "EthanWong2212": 14,
      "mrwsy1": 3,
      "wamikamalik": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/BusInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public class BusInfo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInNUS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final String[] NUS \u003d {\"AA1\", \"AA2\", \"BB\", \"CC\", \"CCX\", \"DD1\", \"DD2\"};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public BusInfo() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[0], AA1));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[1], AA2));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[2], BB));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[3], CC));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[4], CCX));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[5], DD1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        busesInNUS.add(new Bus(NUS[6], DD2));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusData.createBusList(busesInNUS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] AA2 \u003d {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.RAFFLESHALL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.EA,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] BB \u003d {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.LT27,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHALL,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPUNIVERSITYHALL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.S17,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] CC \u003d {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGPR,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.TCOMS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPHSSML,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPNUSS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.COM2,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.VENTUS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPYUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.LT13,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.AS5,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.COM2,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.BIZ2,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPTCOMS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] CCX \u003d {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] DD1 \u003d {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OEITIONGHAM,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.BOTANICGARDENSMRT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTVALE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private static final BusStops[] DD2 \u003d {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.COLLEGEGREEN,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        BusStops.OEITIONGHAM"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 1,
      "Lezn0": 100,
      "wamikamalik": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/bus/BusStops.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.printLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "public enum BusStops {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    PGP(\"PGP\", \"Prince George\u0027s Park\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    KENTRIDGEMRTSTATION(\"Kent Ridge MRT Station\", \"Kent Ridge MRT entrance\", new String[]{\"kr mrt\", \"krmrt\"}),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPUNIVERSITYHEALTHCENTRE(\"Opp University Health Centre\", \"Near University Health Centre\", new String[]{\"opp UHC\"}),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    YUSOFISHAKHOUSE(\"Yusof Ishak House\", \"Location with the Student Service center\", new String[]{\"YIH\"}),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    CENTRALLIBRARY(\"Central Library\", \"also known as CLB\", new String[]{\"CLB\"}),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    KENTRIDGE(\"Kent Ridge\", \"Kent Ridge\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    MUSEUM(\"Museum\", \"Opposite Faculty of Engineering\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    UNIVERSITYTOWN(\"University Town\", \"Place filled with dining and recreational options\", new String[]{\"Utown\"}),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    UNIVERSITYHEALTHCENTRE(\"University Health Centre\", \"UHC, where students can get MC\", new String[]{\"UHC\"}),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    OPPKENTRIDGEMRTSTATION(\"Opp Kent Ridge MRT station\", \"Opposite Kent Ridge MRT\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    RAFFLESHALL(\"Raffles Hall\", \"Hall located near Faculty of Engineering\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    KENTVALE(\"Kent Vale\", \"Accommodation for visiting faculty guests\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    EA(\"EA\", \"Located in Faculty of Engineering\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    NUSIT(\"NUS IT\", \"Opposite Central library\", new String[]{\"IT\"}),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    LT27(\"LT27\", \"Lim Seng Tjoe Lecture theatre at faculty of science, Opposite of S17 bus stop\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPUNIVERSITYHALL(\"Opp University Hall\", \"Opp of University Hall, near a football field\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    S17(\"S17\", \"outside of S17, opposite of LT27\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    UNIVERSITYHALL(\"University Hall\", \"University Hall\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    TCOMS(\"TCOMS\", \"IDK\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPHSSML(\"Opp HSSML\", \"idk\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPNUSS(\"Opp NUSS\", \"idk\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    COM2(\"COM2\", \"COM2, within School of Computing\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    VENTUS(\"Ventus, Opp LT13\", \"idk\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPYUSOFISHAKHOUSE(\"Opp Yusof Ishak House\", \"Opposite YIH, near Faculty of Engineering\", new String[]{\"opp YIH\"}),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    LT13(\"LT13\", \"idk\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    AS5(\"AS5\", \"idk\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BIZ2(\"BIZ2\", \"Near Faculty of Business\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OPPTCOMS(\"Opp TCOMS\", \"idk help\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    OEITIONGHAM(\"Oei Tiong Ham(BTC)\", \"idk\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BOTANICGARDENSMRT(\"Botanic Gardens MRT\", \"MRT station\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    COLLEGEGREEN(\"College Green\", \"idk\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    PGPR(\"PGPR\", \"Prince George\u0027s Park Residence\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private int searchCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    private String[] closeNames \u003d {};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BusStops(String name, String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    BusStops(String name, String description, String[] closeNames) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        this.closeNames \u003d closeNames;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public int getSearchCount() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return searchCount;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void incrementSearchCount() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static String formatName(String input) throws CustomException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (BusStops info : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            if (info.name.equalsIgnoreCase(input)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                return info.name;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        throw new CustomException(ExceptionType.INVALID_BUS_STOP);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static BusStops findBusStop(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (busStop.name.equalsIgnoreCase(input)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                return busStop;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static boolean isValidBusStop(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (busStop.name.equalsIgnoreCase(input)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void resetSearchFrequency() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            busStop.setCount(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static BusStops mostSearchedBusStop() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int maxSearch \u003d 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops correspondingBusStop \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (BusStops busStop : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            if (busStop.searchCount \u003e maxSearch) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                maxSearch \u003d busStop.searchCount;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                correspondingBusStop \u003d busStop;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        return correspondingBusStop;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void setCount(int searchCount) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.searchCount \u003d searchCount;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void listStops() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        for (BusStops info : EnumSet.allOf(BusStops.class)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            System.out.print(info.name + \" : \" + info.description + \".\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            if (info.closeNames.length \u003e 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                System.out.print(\" Also known as: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                for (String aka : info.closeNames) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                    System.out.print(\"\\\"\" + aka + \"\\\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 53,
      "Lezn0": 75,
      "EthanWong2212": 12,
      "mrwsy1": 1,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/favorite/Fav.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static seedu.duke.ui.Ui.printDupeMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class Fav {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public Fav(String command, String desc) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public Boolean equals(Fav item, int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        if (this.command.toLowerCase().equals(item.command.toLowerCase())) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            printDupeMessage(index, this.desc, this.command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc(String desc) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return command + \": \\\"\" + desc + \"\\\"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 10,
      "EthanWong2212": 19,
      "mrwsy1": 4,
      "wamikamalik": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/favorite/FavList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printClearFavMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import static seedu.duke.ui.Ui.printFavList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class FavList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private static ArrayList\u003cFav\u003e favList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public FavList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        favList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void addFav(Fav fav) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        favList.add(fav);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void deleteFav(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        favList.remove(index - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void listFav() throws CustomException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (favList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            throw new CustomException(ExceptionType.EMPTY_FAVLIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printFavList(favList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void clearFav() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        favList.clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printClearFavMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static String changeDesc(int index, String newDesc) throws CustomException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d checkIndexAndDesc(index, newDesc);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        favList.get(index - 1).changeDesc(newDesc);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return oldDesc;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static String checkIndexAndDesc(int index, String newDesc) throws CustomException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (index \u003d\u003d 0 || index \u003e favList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d FavList.getList().size() : \"Index out of bounds.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d favList.get(index - 1).getDesc();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (oldDesc.equals(newDesc)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            throw new CustomException(ExceptionType.SAME_DESCRIPTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assert !oldDesc.equals(newDesc) : \"description is the same as before.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return oldDesc;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static ArrayList\u003cFav\u003e getList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return favList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return favList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static boolean contains(Fav item) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        for (Fav fav : favList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            if (fav.equals(item, count)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static Fav getFav(int index) throws CustomException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            Fav fav \u003d favList.get(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            return fav;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            throw new CustomException(ExceptionType.INVALID_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 11,
      "EthanWong2212": 31,
      "mrwsy1": 14,
      "wamikamalik": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/foodoptions/DiningOptions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.foodoptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class DiningOptions {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    String operatingHrs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    DiningOptions(String[] data) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        name \u003d data[0];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        location \u003d data[1];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        operatingHrs \u003d data[2];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return name + \":\\n\" + location + \"\\n\" + operatingHrs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 8,
      "wamikamalik": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/foodoptions/FoodPlace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.foodoptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class FoodPlace {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cString\u003e faculty \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private ArrayList\u003cDiningOptions\u003e info \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public FoodPlace(String[] faculty, String[][] data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        this.faculty.addAll(Arrays.asList(faculty));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (int i \u003d 0; i \u003c data.length; i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            info.add(new DiningOptions(data[i]));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public ArrayList\u003cString\u003e getFaculty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public ArrayList\u003cDiningOptions\u003e getInfo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 7,
      "wamikamalik": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/foodoptions/FoodPlacesData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.foodoptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class FoodPlacesData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesScience \u003d {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Starbucks\", \"S9\", \"Mon-Fri: 7.30am to 9.00pm Sat – Sun: Closed\"},"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Platypus Food Bar\", \"Science Block S16\", \"Mon-Fri, 8.30am-8.00pm\"},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Arise \u0026 Shine\", \"Science Block S16\", \"Mon-Fri, 7.00am-8.00pm Sat/Sun/PH, 7.00am-3.00pm\"},"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Taiwan Ichiban\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Pasta Express\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Li Ji Coffeehouse\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Uncle Penyet Fusion - Halal specified\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cheers\", \"Frontier\", \"Mon-Fri, 7.00am-7.00pm Sat, 9.00am-3.00pm Sun/PH closed\"},"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Jewel Coffee\", \"Medicine Block MD11\", \"Mon-Fri, 7.30am-10.00pm Sat/Sun/PH, 8.00am-5.00pm\"},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Eureka Taste\", \"Medicine Block MD6\", \"Mon-Fri: 7.00am-7.00pm\"},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Spinelli\", \"UHall Tan Chin Tuan Wing 1st Level\", \"Mon-Fri, 8.00am-6.30pm\"}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesPgp \u003d {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Foodclique\", \"PGPR\", \"Mon-Sun, 7.00am-9.30pm\"},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Supersnacks\", \"PGPR\", \"Mon-Fri, 12.00pm-1.00am\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Pines Aircon Food Court\", \"PGPR\", \"Mon-Fri, 7.00am-8.30pm Sat, 8.00am-8.30pm Sun/PH, 8.00am-8.00pm\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Nami\", \"innovation4.0\", \"Mon-Fri, 8.00am-5.30pm\"}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesComp \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Spread\", \"Business School Mochtar Riady Building\", \"Mon-Fri, 7.45am-8.45pm Sat, 8.00am-2.30pm\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Salad Express X Pasta Express\", \"The Deck level 2\", \"Mon-Fri, 8.00am-8.00pm Sat, 8.00am – 3.00pm\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Uncle Penyet (Indonesian Express)\", \"The Deck level 2\", \"Mon-Fri, 10.30am-7.30pm Sat, 10.30am-3.00pm\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Liang Ban Kung Fu\", \"The Deck level 2\", \"Mon-Sat, 8.00am-8.00pm\"},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Deck\", \"FASS\", \"Mon-Fri, 7.30am-4.00pm/8.00pm Sat,7.30am-3.00pm\"},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Coffee Hut\", \"Arts Block AS2 (Beside LT13)\", \"Mon-Fri, 8.00am-6.00pm\"},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Omo store\", \"COM1\", \"24/7\"},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cool Spot Drinks\", \"COM2\", \"24/7\"},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Takeaway Food Kiosks\", \"COM2\", \"24/7\"},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cafe Delight\", \"Ventus\", \"Mon-Fri, 8.00am-6.00pm\"},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Reedz Café\", \"SFAH\", \"Mon-Fri, 8.30am-5.30pm Sat/Sun, 8.00am-3.00pm\"},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"University Club\", \"SFAH\", \"Mon-Fri, 11.30am-2.30pm (Last seating 2pm, Last order 2.10pm) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"6.30pm-10.00pm (Last seating 9.45pm, Last order 10pm) Lounge Area: 11.30am to 11pm \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"(Last seating 9.45pm, Last order 10pm)\"},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Coffee Roaster\", \"Blk AS8\", \"Mon-Fri, 7.30am-7.00pm Sat, 9.00am-5.00pm\"},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Maxx Coffee\", \"Central Library\", \"Daily, 8.00am-10.00pm\"}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesEngin \u003d {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Central Square\", \"Yusof Ishak House Level 2\", \"Mon-Fri, 8.00am-8.00pm Sat, 8.00am-3.00pm\"},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Crave\", \"YIH\", \"Mon-Fri, 9.00am-8.00pm Sat, 9.00am-6.00pm\"},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Subway - Halal Certified\", \"YIH\", \"Mon-Sun, 10.00am-10.00pm\"},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Old Chang Kee - Halal Certified\", \"YIH\", \"Mon-Fri, 7.30am-9.00pm Sat, 7.30am-4.00pm\"},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Goh Bros\", \"YIH\", \"Mon-Fri, 7.30am-9.00pm Sat, 7.30am-4.00pm\"},"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Platypus Food Bar\", \"Design \u0026 Environment Block SDE4\", \"Mon-Fri, 8.30am-8.00pm\"},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Platypus Food Bar\", \"Engineering Block E2A\", \"Mon-Fri, 9.00am-7.30pm\"},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"E2 Halal Cafeteria - Halal Certified\", \"Engineering Block E2\", \"Mon-Fri, 7.00am-7.00pm Sat, \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    + \"08.00-am-1.00pm\"},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cheers\", \"Engineering Block E3\", \"24/7\"},"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Spinelli Coffee Company\", \"Engineering Block EA\", \"Mon-Fri, 8.00am-6.30pm\"},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Subway Mobile Cart - Halal Certified\", \"Engineering Block E4\", \"Mon-Fri, 11.00am-6.00pm\"},"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Arise \u0026 Shine\", \"Engineering Block E4\", \"Mon-Fri, 7.00am-8.00pm Sat/Sun/PH, 7.00am-3.00pm\"},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Takeaway Food Kiosks\", \"Engineering Block E4\", \"Mon-Fri, 7.00am-8.00pm Sat/Sun/PH, 7.00am-3.00pm\"},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Tea Party\", \"University Sports Centre\", \"Mon-Sat, 10.30am-10.30pm\"}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesMuseum \u003d {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Atempo\", \"Yong Siew Toh Conservatory of Music (YSTCM)\", \"Mon-Fri, 8.30am-5.00pm\"},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"D’Arts @ UCC\", \"University Cultural Centre\", \"Mon-Fri and event days, 8.30am-5.00pm\"},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Bar Bar Black Sheep\", \"Alice Lee Plaza\", \"Mon-Sun, 12.00pm-12.00am\"}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesUtown \u003d {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Flavours@Utown\", \"Stephen Riady Centre\", \"Mon-Sun: 24 hours\"},"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Waa Cow\", \"Stephen Riady Centre\", \"Mon-Thu, 11.30am-7.30pm Fri, 11.30am-9.30pm Sat, 12.00pm-3.00pm\"},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Super Snacks\", \"Stephen Riady Centre\", \"Daily, 11.00am-2.00am\"},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"2359 Li Ji Coffeehouse\", \"Stephen Riady Centre\", \"Mon-Fri, 11.00am-1.00am Sat/Sun/PH, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Octobox\", \"Stephen Riady Centre\", \"24/7\"},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Fairprice Xpress\", \"Stephen Riady Centre\", \"24/7\"},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Fine Food\", \"Town Plaza\", \"Mon-Sun, 7.00am-10.00pm\"},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Royals Bistro - Halal Certified\", \"Town Plaza\", \"Mon-Sat, 11.00am-8.30pm\"},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Sapore Italiano\", \"Town Plaza\", \"Mon-Sun, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Hwang\u0027s\", \"Town Plaza\", \"Mon-Sat, 10.00am-10.00pm\"},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Subway - Halal Certified\", \"Town Plaza\", \"Mon-Sat, 10.00am-10.00pm Sun, 10.00am-9.00pm\"},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Udon Food Bar\", \"Town Plaza\", \"Mon-Sat, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Cheers\", \"Town Plaza\", \"Mon-Sat, 11.00am-10.00pm\"},"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Starbucks\", \"Education Resource Centre\", \"24/7\"},"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Agora Cafe\", \"Yale-NUS East Core\", \"Mon-Sun, 8.30am-9.00pm\"}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private final String[][] foodPlacesBtc \u003d {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"The Summit - Halal Certified\", \"BTC Block B\", \"Mon-Fri, 7.00am-8.00pm Sat, 7.00am-4.00pm\"},"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Octobox\", \"BTC Block B\", \"Mon-Fri, 7.00am-8.00pm Sat, 7.00am-4.00pm\"},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            {\"Reedz Cafe\", \"The Thinking Corner @ BTC Li Ka Shing Building\", \"Mon-Fri, 8.00am-7.00pm\"}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cFoodPlace\u003e diningOptionsInNus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public FoodPlacesData() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"Science\", \"University Hall\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            \"Medicine\"}, foodPlacesScience));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"PGP\"}, foodPlacesPgp));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"School of Business\", \"School of computing\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            \"FASS\", \"Ventus\", \"Shaw Foundation\"}, foodPlacesComp));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"Faculty of Engineering\", \"YIH\", \"USC\"}, foodPlacesEngin));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"Museum\"}, foodPlacesMuseum));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"University Town\", \"Yale NUS\"}, foodPlacesUtown));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        diningOptionsInNus.add(new FoodPlace(new String[]{\"BTC\"}, foodPlacesBtc));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static ArrayList\u003cFoodPlace\u003e getDiningOptionsInNus() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (diningOptionsInNus.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            new FoodPlacesData();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return diningOptionsInNus;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrwsy1": 2,
      "wamikamalik": 114
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/FavStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class FavStorage extends Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    private int favCount \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public FavStorage(String dir) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        super(dir);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        file \u003d getFile();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            String entry \u003d s.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            String[] entryWords \u003d entry.split(\"\\\\|\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            FavList.addFav(new Fav(entryWords[0], entryWords[1]));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        System.out.println(\"File Read\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public void updateFile() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String line \u003d new String();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        for (Fav f: FavList.getList()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            line +\u003d f.getCommand() + \"|\" + f.getDesc();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            line +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        fw.write(line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 41,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/FreqStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "public class FreqStorage extends Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public FreqStorage(String dir) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        super(dir);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        file \u003d getFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void readFile() throws CustomException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            loadFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.READ_FILE_FAIL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public void updateFile() throws CustomException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        ArrayList\u003cInteger\u003e frequencyList \u003d BusData.getAllSearchCount();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            saveFile(frequencyList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            throw new CustomException(ExceptionType.UPDATE_FILE_FAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void saveFile(ArrayList\u003cInteger\u003e frequencyList) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        File savedFile \u003d new File(dir);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        FileWriter writer \u003d new FileWriter(savedFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        for (int i \u003d 0; i \u003c frequencyList.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            String currFreq \u003d Integer.toString(frequencyList.get(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            writer.write(currFreq + System.lineSeparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private void loadFile() throws FileNotFoundException, CustomException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        File savedFile \u003d new File(dir);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(savedFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            int currInt \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                currInt \u003d Integer.parseInt(fileScanner.nextLine());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                BusStops.resetSearchFrequency();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                Duke.freqFile.updateFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                Duke.freqFile.loadFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                throw new CustomException(ExceptionType.READ_FILE_FAIL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            BusStops.values()[index].setCount(currInt);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 69,
      "wamikamalik": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    File file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    String dir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public Storage(String dir) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        this.dir \u003d dir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        createFile(dir);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    protected void createFile(String dir) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            file \u003d new File(dir);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "                System.out.println(\"File created: \" + file.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                System.out.println(file.getName() + \" already exists\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            System.out.println(\"Error:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    protected File getFile() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public abstract void readFile() throws FileNotFoundException, CustomException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public abstract void updateFile() throws IOException, CustomException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 6,
      "EthanWong2212": 31,
      "wamikamalik": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.foodoptions.DiningOptions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static String getCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String logo \u003d \" _       _       ____     __       __\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| |\\\\ \\\\  | |     / /\\\\ \\\\    \\\\ \\\\     / /\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| | \\\\ \\\\ | |    / /__\\\\ \\\\    \\\\ \\\\   / /\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"| |  \\\\ \\\\| |   / /----\\\\ \\\\    \\\\ \\\\ / /\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"|_|   \\\\ \\\\_|  / /      \\\\ \\\\    \\\\_V_/    @NUS\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"How can I help?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printMostSearchedBusStop();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void addFavMessage(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"You have successfully added: \\n\\\"\" + input + \"\\\"\\ninto your favourites\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void showError(Exception error) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Here are the range of commands:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"1. /route : Displays possible direct bus from point to point\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"2. /routemap: Displays the route map with its intermediate bus stops\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"3. /bus: Displays buses available at each bus stop\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"4. /allbus: Lists all buses available in NUS Zone a\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"5. /liststops: Lists all bus stops in NUS Zone a\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"6. /dine: Search for dining options within a faculty\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                + \"7. /dineinfo: Search for a specific dining outlet\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"8. /addfav: Add a favourite command\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"9. /deletefav: Delete a favourite command\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"10. /execfav: Execute a favourite command\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"11. /descfav: Change the description for a favourite command\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"12. /listfav: List all favourite commands\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"13. /clearfav: Clear the list of favourite commands\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"14. /exit: Exit program\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"15. /reset: Reset frequent search data\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + \"16. /help: List all available commands\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"https://ay2021s1-cs2113t-f14-3.github.io/tp/UserGuide.html#1-what-is-navnus\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printExitMessage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"So long buddy!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printRouteMessage(ArrayList\u003cBus\u003e options) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int optionNo \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isPossible \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int busCount \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"The buses you can take with their intermediate stops are: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (Bus option : options) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            if (option.toString() !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                if (busCount !\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    System.out.println(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                    busCount \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                System.out.println(optionNo + \". \" + option.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                optionNo++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                busCount++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                isPossible \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        if (!isPossible) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"none. There are no direct bus routes. :(\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(\"To add the above command to your list of favourites simply type \\\"/addfav\\\" :)\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printFullRoute(Bus busCode) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (busCode !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Here is the \" + busCode.getBusNumber() + \" route that you have requested:\\n\" + busCode);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    public static void printDupeMessage(int index, String desc, String command) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"You already saved something like this in your favourites list\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(index + \". \" + desc + \"\\nCommand stored: \" + command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printResetSearchFreqMessage() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"The search frequencies of all bus stops have been reset to 0!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static void printMostSearchedBusStop() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        if (BusStops.mostSearchedBusStop() !\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "            System.out.println(\"Your most searched bus stop is: \" + BusStops.mostSearchedBusStop().getName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printAllBusMessage(ArrayList\u003cBus\u003e allBuses) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        System.out.println(\"The buses available in NUS are: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        int count \u003d allBuses.size();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (Bus bus : allBuses) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(bus.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            count--;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            if (count !\u003d 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printPossibleLocsMessage(ArrayList\u003cString\u003e possibleLocs) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Hmm, did you mean any of these locations?\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        for (String location : possibleLocs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            System.out.println(location);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Please type the command again with the correct location.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static int printDineResult(int displayCount, String tempFaculty, ArrayList\u003cDiningOptions\u003e foodPlaceInfo) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        System.out.println(\"The dining options available at \" + tempFaculty + \" are:\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (DiningOptions info : foodPlaceInfo) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            displayCount++;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(displayCount + \". \" + info.getName());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        return displayCount;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printDineInfoResult(ArrayList\u003cDiningOptions\u003e searchList) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        if (searchList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(\"No match found.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(\"The stores that match your search:\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            for (DiningOptions item : searchList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "                System.out.println(\"\\n\" + item.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printFavList(ArrayList\u003cFav\u003e favList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        for (Fav item : favList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "            System.out.println(index + \". \" + item.toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    public static void printDeleteFavMessage(int favCommandIndex) throws CustomException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        System.out.println(\"Got it! I\u0027ve removed the favourite command: \\n \" + FavList.getFav(favCommandIndex - 1));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    public static void printClearFavMessage() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        System.out.println(\"Your favourites has been cleared.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void printDescChangeMessage(String command, String oldDesc, String newDesc) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        System.out.println(\"Your description for command \\\"\" + command + \"\\\"\\nhas been successfully changed from \\\"\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "                + oldDesc + \"\\\"\\nto \\\"\" + newDesc + \"\\\"\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 37,
      "Lezn0": 45,
      "mrwsy1": 45,
      "wamikamalik": 78
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/buscommand/RouteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class RouteCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_oneLocationWithDelimiter_expectException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP /to   \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_onlyDelimiter_expectException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"    /to   \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_sameLocations_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \" University Town /to univerSity TowN  \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/buscommand/RouteMapCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.commands.buscommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "class RouteMapCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        busesInZoneA.add(new Bus(\"AA1\", AA1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void executeCommand_selectBus_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Bus bus \u003d BusData.selectBus(\"AA1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(\"AA1\", bus.getBusNumber());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_printRoute_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String fullBusRoute \u003d \"AA1\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"PGP -\u003e Kent Ridge MRT Station -\u003e Opp University Health Centre -\u003e Yusof Ishak House \\n-\u003e \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "                + \"Central Library -\u003e Kent Ridge -\u003e Museum -\u003e University Town -\u003e \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "                + \"University Health Centre \\n-\u003e Opp Kent Ridge MRT station -\u003e PGPR\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Bus bus \u003d BusData.selectBus(\"AA1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertEquals(fullBusRoute, bus.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_missingBusCode_expectException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String locations \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void executeCommand_invalidBusCode_expectException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String locations \u003d \"AA3\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        RouteCommand com \u003d new RouteCommand(locations);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertThrows(CustomException.class, com::executeCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 54,
      "Lezn0": 2,
      "wamikamalik": 11
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/favcommand/AddFavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "class AddFavCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    FavList list \u003d new FavList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void executeCommand_nullCommand_expectException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String desc \u003d \"List all bus stops\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        AddFavCommand addFav \u003d new AddFavCommand(command, desc);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertThrows(CustomException.class, addFav::executeCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void executeCommand_validCommand_expectNoException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"liststops\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String desc \u003d \"List all bus stops\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        AddFavCommand addFav \u003d new AddFavCommand(command, desc);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertDoesNotThrow(addFav::executeCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void executeCommand_nullDesc_expectNoException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"liststops\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String desc \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        AddFavCommand addFav \u003d new AddFavCommand(command, desc);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertDoesNotThrow(addFav::executeCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/favcommand/ExecFavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "package seedu.duke.logic.commands.favcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.Fav;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import seedu.duke.model.favorite.FavList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "public class ExecFavCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(\"/route University Town /to PGP\", \"Go home\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(\"/bus Museum\", \"Cool place\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        FavList.addFav(new Fav(\"/dine science\", \"Science food\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_indexOutOfBounds_expectException() throws CustomException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertThrows(CustomException.class, ExecFavCommandTest::performCheck_indexOutOfBounds);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    static void performCheck_indexOutOfBounds() throws CustomException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"10\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        command.executeCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_inputWords_expectException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertThrows(CustomException.class, ExecFavCommandTest::performCheck_inputWords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    static void performCheck_inputWords() throws CustomException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"random words\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        command.executeCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_inputBlank_expectException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertThrows(CustomException.class, ExecFavCommandTest::performCheck_inputBlank);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    static void performCheck_inputBlank() throws CustomException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        command.executeCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_inputNumberAndWords_expectException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertThrows(CustomException.class, ExecFavCommandTest::performCheck_inputNumberAndWords);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    static void performCheck_inputNumberAndWords() throws CustomException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"1 random words\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        command.executeCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void executeCommand_inputValidIndex_TaskRuns() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertDoesNotThrow(ExecFavCommandTest::performCheck_inputValidIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    static void performCheck_inputValidIndex() throws CustomException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ExecFavCommand command \u003d new ExecFavCommand(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        command.executeCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanWong2212": 81
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/DescFavParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class DescFavParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_emptyString_expectException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::parseInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_onlySpacesString_expectException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"   \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::parseInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_noDelimiter_expectException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"2 I like the tea there.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::parseInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_delimiterWithSpacesOnly_expectException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"   /to   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::parseInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_indexMissing_expectException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"  /to frequent visits.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::parseInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_descriptionMissing_expectException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \" 2 /to  \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::parseInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void parseInput_bothParametersArePresent_success() throws CustomException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String message \u003d \"3 /to free stuff here.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        DescFavParser p \u003d new DescFavParser(message);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        p.parseInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(3,p.getIndex());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"free stuff here.\", p.getDescription());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 62
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.Bus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.model.bus.BusStops;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        busesInZoneA.add(new Bus(\"AA1\", AA1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void extractType_unknownCommand_expectException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d \"Hello\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::extractType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void extractType_exitCommand_returnsFalse() throws CustomException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String command \u003d \"/exit\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertFalse(isOngoing);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_listStopsCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/liststops\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_helpCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/help\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void extractType_allBusCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        String command \u003d \"/allbus\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_routeCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/route PGP /to PGPR\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    void extractType_busCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        String command \u003d \"/bus PGP\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrwsy1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    void extractType_routeMapCommand_returnsTrue() throws CustomException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        String command \u003d \"/routemap AA1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        Parser p \u003d new Parser(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        boolean isOngoing \u003d p.extractType();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "        assertTrue(isOngoing);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Johnson-Yee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Johnson-Yee": 8,
      "Lezn0": 29,
      "mrwsy1": 16,
      "wamikamalik": 49
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/RouteParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class RouteParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_noLocation_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"   \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::getLocations);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_oneLocation_expectException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::getLocations);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_noDelimiter_expectException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP PGPR\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, p::getLocations);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_twoOneWordLocations_returnsStringArrayOf2() throws CustomException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"PGP /to pGPR\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(2, p.getLocations().length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"PGP \", p.getLocations()[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\" pGPR\", p.getLocations()[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getLocations_twoMultiWordLocations_returnsStringArrayOf2() throws CustomException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String locations \u003d \"University Town /to university Health Centre\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        RouteParser p \u003d new RouteParser(locations);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(2, p.getLocations().length);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\"University Town \", p.getLocations()[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(\" university Health Centre\", p.getLocations()[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 51
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/similaritycheck/SimilarityCheckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.logic.similaritycheck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.logic.similaritycheck.SimilarityCheck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class SimilarityCheckTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void similarLoc_oneSimilarLocation_returnsArraylist() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e similarLocs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        similarLocs.add(\"Opp Kent Ridge MRT station\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String userInput \u003d \"Opp kent Ridge mrT\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e returnedList \u003d new ArrayList\u003c\u003e(SimilarityCheck.similarLoc(userInput));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(similarLocs, returnedList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void similarLoc_manySimilarLocations_returnsArraylist() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e similarLocs \u003d new ArrayList\u003c\u003e(Arrays.asList(\"University Town\", \"University Hall\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String userInput \u003d \"University\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cString\u003e returnedList \u003d new ArrayList\u003c\u003e(SimilarityCheck.similarLoc(userInput));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(similarLocs, returnedList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wamikamalik": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/bus/BusDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class BusDataTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA2 \u003d {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.RAFFLESHALL,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTVALE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.EA,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.NUSIT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    static ArrayList\u003cBus\u003e busesInZoneA \u003d new ArrayList\u003c\u003e(Arrays.asList(new Bus(\"AA1\", AA1),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "            new Bus(\"AA2\", AA2)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusData.createBusList(busesInZoneA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_noRoute_returnEmptyBusArrayList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e stops \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stops));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stops));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), BusData.possibleBuses(startingLoc, destination).toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptions.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_oneRoute_returnBusArrayList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e stops \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stops));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        stops.addAll(Arrays.asList(AA2).subList(6, 10));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stops));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"Ea\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Opp kent ridge MRT station\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptions.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void possibleBuses_manyRoutes_returnBusArrayList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e routes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e stopsAa1 \u003d new ArrayList\u003c\u003e(Arrays.asList(AA1).subList(7, 11));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA1\", stopsAa1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e stopsAa2 \u003d new ArrayList\u003c\u003e(Arrays.asList(AA2).subList(3, 11));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        routes.add(new Bus(\"AA2\", stopsAa2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"UniverSity Town\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"PGPr\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBus\u003e busOptions \u003d new ArrayList\u003c\u003e(BusData.possibleBuses(startingLoc, destination));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(routes.toString(), busOptions.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_invalidStop_expectEmptyArrayList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"NTU North Spine\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(0, busList.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_empty_expectEmptyArrayList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(0, busList.size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopRandomCaps_expectAA1() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"KeNt RiDge\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(1, busList.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA1\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopExactCaps_expectAA2() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"Kent Vale\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(1, busList.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA2\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    void busAtStop_validStopAllCaps_expectAA1AA2() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        String input \u003d \"UNIVERSITY TOWN\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        ArrayList\u003cBus\u003e busList \u003d BusData.busAtStop(input);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(2, busList.size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA1\", busList.get(0).getBusNumber());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "        assertEquals(\"AA2\", busList.get(1).getBusNumber());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanWong2212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 3,
      "EthanWong2212": 48,
      "wamikamalik": 76
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/bus/BusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "package seedu.duke.model.bus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "class BusTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    private static final BusStops[] AA1 \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGP,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPUNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.YUSOFISHAKHOUSE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.CENTRALLIBRARY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.KENTRIDGE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.MUSEUM,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYTOWN,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.UNIVERSITYHEALTHCENTRE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.OPPKENTRIDGEMRTSTATION,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        BusStops.PGPR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_routeExists_returnRouteArrayList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"University health cenTre\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e(Arrays.asList(AA1).subList(4, 9));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_destinationNotInList_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"centrAL LibraRy\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_startNotInList_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"University Hall\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void getPossibleRoute_noRoute_startAndDestinationInList_wrongOrder_returnEmptyRouteArrayList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String startingLoc \u003d \"Pgpr\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String destination \u003d \"Pgp\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        Bus newBus \u003d new Bus(\"AA1\", AA1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        ArrayList\u003cBusStops\u003e route \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(route, newBus.getPossibleRoute(startingLoc, destination));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(0, newBus.getPossibleRoute(startingLoc, destination).toArray().length);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 1,
      "wamikamalik": 63
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/favorite/FavListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import seedu.duke.exceptions.CustomException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "class FavListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    public static void makeList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        new FavList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.addFav(new Fav(\"/route PGP /to University Hall\", \"Awesome place\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.addFav(new Fav(\"/bus Kent Ridge MRT Station\", \"NTUC here\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc_indexOutOfBounds_expectException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, FavListTest::performCheck_indexOutOfBounds);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    static void performCheck_indexOutOfBounds() throws CustomException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String description \u003d \"Hello\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d FavList.changeDesc(index, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc_sameDesc_expectException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertThrows(CustomException.class, FavListTest::performCheck_sameDesc);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    static void performCheck_sameDesc() throws CustomException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String description \u003d \"NTUC here\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String oldDesc \u003d FavList.changeDesc(index, description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    void changeDesc_validIndexAndDesc_success() throws CustomException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        String newDesc \u003d \"Good stuff!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        FavList.changeDesc(index, newDesc);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "        assertEquals(newDesc, FavList.getList().get(0).getDesc());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void contains_duplicateFav_expectTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav fav \u003d new Fav(\"/allbus\",\"List out all buses in nus\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList.addFav(fav);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(FavList.contains(fav));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void contains_newFav_expectFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav fav1 \u003d new Fav(\"/allbus\",\"List out all buses in nus\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        FavList.addFav(fav1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav fav2 \u003d new Fav(\"/liststops\",\"/liststops\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertFalse(FavList.contains(fav2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 25,
      "wamikamalik": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/favorite/FavTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "package seedu.duke.model.favorite;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "class FavTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    Fav fav \u003d new Fav(\"/liststops\",\"List all stops\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void equals_favSame_expectTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav userFav \u003d new Fav(\"/liststops\",\"List all stops\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertTrue(fav.equals(userFav,1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lezn0"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    void equals_favDifferent_expectFalse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        Fav userFav \u003d new Fav(\"/route aa2\",\"/liststops\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "        assertFalse(fav.equals(userFav,1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lezn0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lezn0": 23
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wamikamalik"
        },
        "content": "/exit"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "wamikamalik": 1
    }
  }
]
