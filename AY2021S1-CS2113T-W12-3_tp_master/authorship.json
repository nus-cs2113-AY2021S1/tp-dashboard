[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shikai-zhou": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jazhten Low | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhou Shikai | [Github](https://github.com/shikai-zhou) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jiqing | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Bryan Beh | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Benardo Tang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 1,
      "judowha": 1,
      "shikai-zhou": 1,
      "-": 4,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# WatchNext Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.a Purpose"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This guide aims to provide information for you: the developers, testers and future contributors of **WatchNext** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "such that you will have an easy reference for understanding the features implemented in **WatchNext**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.b Scope"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The guide outlines the architecture and design decisions for the implementation of WatchNext.The intended audience of this "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "document are the developers, testers and future contributors of WatchNext."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This section will show you the requirements that you need to fulfill in order to quickly start contributing to this project in no time!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.a Prerequisites"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. **JDK `11`**  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cbr\u003e   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e The `WatchNext.jar` file is compiled using the Java version mentioned above."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. **IntelliJ IDEA IDE**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cbr\u003e  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e IntelliJ has Gradle and JavaFx plugins installed by default."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.b Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " **Fork** this [repo](https://github.com/AY2021S1-CS2113T-W12-3/tp), and clone the fork to your computer."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. You should set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "5. Click `Import Project`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "6. Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "7. Click `Open as Project`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "8. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "9. Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This will generate all the resources required by the application and tests."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.c Verifying the setup"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. You can run `Duke` and try a few commands."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. You can also run tests using our instructions for manual testing to explore our features."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.d Before Writing Code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " 1. Set up CI (Continuous Integration) \u003cbr\u003e \u003cbr\u003e "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the master branch or to any PR. No set up required."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " 2. Learn the design \u003cbr\u003e \u003cbr\u003e "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " When you are ready to start coding, we recommend that you get some sense of the overall design by reading about WatchNext’s architecture [here](#3-design)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "WatchNext was designed drawing from the ideas of the __Event-driven architectural style__. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "The class diagram below describes the relationship between the different components in **WatchNext**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cimg src \u003d \"images/designDG/designArchitecture.png\" width \u003d \"700\"\u003e \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eThe Ui and the Scanner components work together as event emitters. The `Ui` class prompts the user for input, and the scanner is ready to receive the input. Should the format of the input be unrecognised or incorrect, the `Ui` class guides the user with prompts to rectify the errors.\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eEvents will be passed onto the `InputParser` which serves as the dispatcher. The `InputParser` uses various string manipulation operations from the `StringOperations` class to recognise the intention of the user input. After recognising the command, the input will be parsed, and the command information will be passed onto the various command classes for processing. The `InputParser` communicates the events to event consumers which are the command classes in this case. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eAll available operations will be processed by the classes in the commands package. Every command class, like the `AddCommand` class, inherits from the `Command` class. Each individual command class is able to contain all the processing required for each command with the inputs passed in during the initiation of each command object. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eDuring runtime, the show related data is all stored in the `ShowList` class. The data is accessible and can be modified statically by all the command classes. The `ShowList` contains `Show` objects which describes the attributes of a show. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eCertain commands relating to the monitoring of the amount of time users spend watching shows depend on information from the `WatchTime` class. The class tracks the date and time remaining for the users to watch shows for the day. The time limit will be set by the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cimg src \u003d \"images/storageDG/StorageClassDiagram.png\" width \u003d \"700\"\u003e \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": "This class diagram shows how the Storage class is setup as an example.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eOn the initiation of WatchNext, the `Storage` object will be initiated and retrieves any user data that has been saved from previous runs. The data is stored in plain text and can be manually edited by advanced users. The data is stored in `data/showList.txt`. After the execution of every command, the `Storage` object calls upon the save command to automatically update the save data file. The commands relating to saving and loading data can be accessed from the `SaveState` interface.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eThroughout the lifespan of the program, various errors may occur. The `ErrorHandling` class stores the various errors that could occur. The expected errors usually stem from invalid user input or Input Output (IO) errors during file loading. The `Ui` class informs the users of the errors detected and suggests actions for rectification. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cimg src \u003d \"images/designDG/designSequence.png\" width \u003d \"700\"\u003e \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": "This shows the flow of the program for one user command input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### AddCommand"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `add` command allows users to add a new show which they are watching to the `ShowList`. It is invoked by the "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "`InputParser` class."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example of usage scenario of how the `add` command behaves at each step."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user types in `add friends 2 10,10 30` , adding the `show` to the `Showlist` . The details added include the title"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "of the show, the number of seasons of the show, the number of episodes in each season(separated by the comma) and "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "the duration of each episode. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `InputParser` class calls the `parseInput` method to parse the command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e `ArrayOutOfBoundsException` and `NullPointerException` is thrown when the number of arguments entered by the user is incorrect."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `AddCommand` class calls the `AddCommand()` method which then creates a new instance of the `Show` class."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user input is tokenized by the `AddCommand` method into 4 seperate parameters. (Title,Number of seasons,Number of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "episodes for each season respectively,Duration of an episode)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new `Show` instance is created with the 4 parameters created in step 3 using the default constructor for show."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* AddCommand checks the `ShowList` for duplicates. If there are duplicates, the user is prompted if they would like to"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "overwrite the duplicate entry."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` is added to the `ShowList`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 6** "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The changes will be reflected to the user. Concurrently, the changes will be saved into the showList.txt file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### EditCommand"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `edit` command allows the user to change the details of each show that they are watching after they have added the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "show. It is self-contained, it includes its own parser and methods which prompts the user to change any parameter they "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "wish, after the user enters `done`, the `edit` command replaces the old entry with the updated one."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Given below is an example of usage scenario of how the edit command behaves at each step and a sequence diagram to"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "illustrate the steps in a visual form."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e `NullPointerException` will be thrown when show entered by user is not found in the showlist."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "\u003cimg src \u003d \"images/programFlowUG.png\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " \u003csub\u003e\u003csup\u003eThe blue bubbles represent the Program portion of the interaction, while the yellow bubbles indicate the user input\u003c/sup\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "   "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "*Figure 1: Program Flow for Edit Command*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "\u003cimg src \u003d \"images/EditCommand.png\" width \u003d \"700\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " \u003cbr\u003e "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "*Figure 2: Sequence Diagram for Edit Command*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user types in `edit friends` , where the show `friends` already exists in the showlist."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `processCommand` method is called. The `processCommand` method will retrieve the existing show object from the showlist,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "and make a copy of it."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* Then the system will prompt the user to edit the name,season,episodes or the "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "duration (of an episode) respectively. "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* The process command parses each line of the user input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `EditCommand` class then calls the corresponding method, e.g. `editDuration()` to make the corresponding changes to the copy."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user inputs `done`, and the copy of the `Show` object is inserted into the `ShowList`, replacing the old object."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### DeleteCommand"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `delete` command takes in 1 parameter, the show to be deleted. Following that, the command proceeds to delete the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "`Show` from the `ShowList`. The `delete` command is invoked by the `InputParser` Method `parseDeleteCommand`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the `DeleteCommand` Class behaves at each step."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "\u003cimg src \u003d \"images/DeleteCommand.png\" width \u003d \"700\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "*Figure 1: Sequence Diagram for Delete Command*"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `delete friends` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseInput` method in `InputParser` class is called to parse the command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e Customised `NullPointerException` will be thrown when show entered by user is not found in the show list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of the `DeleteCommand` class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `delete` method in `DeleteCommand` class is called."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `delete` method retrieves the `Show` to be deleted from the `ShowList`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` is deleted from the `ShowList`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The changes are reflected back to the user. Concurrently, the changes will be saved to the showList.txt file."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### AddReviewCommand"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The `addreview` command allows users to add a rating and a review for the show for future reference."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `addreview` command takes in 2 parameters, the show which review is to be updated and the review to be updated"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "to the show. The `addreview` command is invoked by the `InputParser` method `parseAddReviewCommand()`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The string is tokenised into 3 separate parts, the show name, rating and review."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The corresponding show is retrieved from the show list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The rating of the show is updated."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The review of the rating is added to the show. If there is an existing review, the new review will overwrite the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " existing review."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The changes are reflected back to the user. Concurrently, the changes will be saved to the showList.txt file."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### ChangeRatingCommand"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `changerating` command changes the rating of the desired show."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The `changerating` command takes in 2 parameters, the show for which the rating is to be changed and the new rating to be"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "updated to."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the `ChangeRatingCommand` Class behaves at each step."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "\u003cimg src \u003d \"images/ChangeRatingCommand.png\" width \u003d \"700\"\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "*Figure 1: Sequence Diagram for ChangeRating Command*"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `changerating friends 3` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseChangeRatingCommand` method in the `InputParser` class is called to parse the command."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e Customised `IndexOutOfBoundsException` will be thrown if user enters a rating with value less than 0 or more than 10. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e Customised `NullPointerException` will be thrown when the show input by user is not found in the show list."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of `ChangeRatingCommand` class is created and the command is returned to the main program. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `changeRating` method in `ChangeRatingCommand` class is called."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `changeRating` method starts with retrieving the `Show` from the `ShowList`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Thereafter, the new rating will be updated to the `Show`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` is updated back into the `ShowList`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 6**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The changes are reflected back to the user. Concurrently, the changes will be saved to the showList.txt file."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### DeleteRatingCommand "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `deleterating` command deletes the rating of the desired show."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `deleterating` command takes in 1 parameter, the show which rating is to be deleted.Following that, the command "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "proceeds to delete the rating of the show that was inputted by the user."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the `DeleteCommand` Class behaves at each step."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "\u003cimg src \u003d \"images/DeleteRatingCommand.png\" width \u003d \"700\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "*Figure 1: Sequence Diagram for DeleteRating Command*"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `deleterating friends` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseDeleteRatingCommand` method in `InputParser` class is called to parse the command."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e Customised `NullPointerException` will be thrown when the show input by user is not found in the show list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of `DeleteRatingCommand` class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `deleteRating` method in `DeleteRatingCommand` class is called."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `deleteRating` method starts with retrieving the `Show` from the `ShowList`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` rating will then be set to -1, essentially deleting it"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` is updated back into the `ShowList`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 6**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The changes are reflected back to the user. At the same time, changes are saved into the showList.txt file."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "### Add Review Command"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The `addreview` command is invoked by the InputParser method parseAddReview. It takes a string as input. "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Within the AddReview class"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The string is tokenised into separate words."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The corresponding show is retrieved from the show list."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The rating of the show is updated."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The review of the rating is added to the show."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The changes are reflected back to the user. Concurrently, the changes will be saved to the showList.txt file."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### ChangeReviewCommand"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `changereview` command takes in 2 parameters, the show which review is to be changed and the new updated review."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The command is then invoked by the `InputParser` method `parseChangeReview`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `changereview friends / This show is great` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseChangeReviewCommand` method in `InputParser` class is called to parse the command."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e Customised `NullPointerException` will be thrown when show entered by user is not found in the show list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of `ChangeReviewCommand` class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `changeReview` method in `ChangeReviewCommand` class is called."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `changeReview` method starts with retrieving the `Show` from the `ShowList`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` review is then set to \"This show is great\", as per the user input."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` is updated back into the `ShowList`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 6**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The changes are reflected back to the user. Concurrently, the changes will be saved to the showList.txt file."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### DeleteReviewCommand"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `deletereview` command takes in 1 parameter, the show which review is to be deleted."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The command is then invoked by the `InputParser` method `parseDeleteReview`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the `DeleteCommand` Class behaves at each step."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `deletereview friends` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseInput` method in `InputParser` class is called to parse the command."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e**[NOTE]** "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e Customised `NullPointerException` will be thrown when show entered by user is not found in the show list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of `DeleteReviewCommand` class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `deleteReview` method in `DeleteReviewCommand` class is called."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `deleteReview` method starts with retrieving the `Show` from the `ShowList`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` review is then set to \"null\", essentially deleting it."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 5**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `Show` is updated back into the `ShowList`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 6**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The changes are reflected back to the user. Concurrently, the changes will be saved to the showList.txt file."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### WatchCommand"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `WatchCommand` class extends `Command` by providing methods to "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "increment the current episode in the persistent watch history of the user. It also updates the watch time limit as indicated previously by the user."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the `WatchCommand` class behaves at each step."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user types in `watch friends` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseInput` method in `InputParser` class is called to parse the command."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** Customised `IndexOutOfBoundsException` and `NullPointerException` will be thrown if the user enters invalid commands."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of `WatchCommand` class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `processCommand` method in `WatchCommand` class is called."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `processCommand` method in `WatchCommand` class is then called. This method does three main things:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1.Check the status of user\u0027s watch progress: In middle of series , finished season and finished series."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2.Increment current episode  and new season if applicable. No change is done if user has finished series. "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3.Reflect the new changes to the user. A prompt is made to the user if the user has already finished the series. Changes are also saved in the `userData.txt` file."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The following sequence diagram summarises what happens when a user executes a `WatchCommand`:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/WatchCommandSequence.png\" width \u003d \"700\"\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cbr\u003e "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " *Sequence diagram for Watch Command*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### UpdateShowEpisodeProgressCommand"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The UpdateShowEpisodeProgressCommand extends by providing "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `UpdateShowEpisodeProgressCommand` class extends `Command` by providing methods to change"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " the current episode in the persistent watch history of the user. "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* User types in `updatesshowepisodeprogress friends 5`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* When the `InputParser` identifies the command, a new instance of the `UpdateShowEpisodeProgressCommand` will be created."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "*  `processCommand()` is called and the `currentEpisode` field of the specified show is updated via the `setEpisodeWatched()` command."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 1659e4e7ad715166549f0ff6f5731cc78300cda4"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### UpdateShowSeasonCommand"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `UpdateShowSeasonCommand` class extends `Command` by providing methods to change"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " the current season in the persistent watch history of the user. "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* User types in `updatesshowseason friends 2`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* When the `InputParser` identifies the command, a new instance of the `UpdateShowSeasonCommand` will be created."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "*  `processCommand()` is called."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* If only `currentSeason` is to be updated:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * `updateSeasonOnly()` method is called."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * `currentSeason` field of the specified show is updated via the `setCurentSeason()` command."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* If both `currentSeason` and `currentEpisode` are to be updated:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * `updateSeasonAndEpisode()` method is called."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * `currentSeason` field of the specified show is updated via the `setCurentSeason()` command, "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "and the `currentEpisode` field of the specified show is updated via the `setEpisodeWatched()` command."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### UpdateTimeLimitCommand"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `UpdateTimeLimit` class extends `Command` by providing methods to "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "update the current time limit of the user from the `WatchTime` class. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the `UpdateTimeLimit` class behaves at each step."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user types in `updatetimelimit 120`."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseInput` method in `InputParser` class is called to parse the command."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** Customised `IndexOutOfBoundsException` and `NullPointerException` will be thrown if the user enters invalid commands."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of `UpdateTimeLimit` class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `processCommand` method in `UpdateTimeLimit` class is called."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `processCommand` method in `UpdateTimeLimit` class will call the `WatchTime` class and update its `dailywatchtime` variable"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "to the desired value, which is 120 in this case."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The change will then be reflected to the user, and saved to the `userData.txt` file."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Storage  "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "judowha"
        },
        "content": "The Storage class is created and facilitated by `Duke`. It has an interface class `SaveState`. It implements the following operations:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "judowha"
        },
        "content": " - `saveState()` ---- Save the show list and the watch time details into a file named `userData.txt`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "judowha"
        },
        "content": " - `loadWatchTimeDetail()` ---- load the watch time detail from `userdata.txt` and create a `WatchTime` instance"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " - `loadState()` ---- load the show list and watch time detail from `userdata.txt` and return a `ShowList` instance"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user starts up WatchNext. `Duke` creates a `Storage` class and specifies the file path of `userData.txt`."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "judowha"
        },
        "content": "* `Duke` calls `loadState()` to load contains into WatchNext. `loadState()` first calls `loadWatchTimeDetail()` to load watch time details and then load show list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "judowha"
        },
        "content": "**[NOTE]** "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "judowha"
        },
        "content": "* If the `data` folder and `userData.txt` do not exist, `loadState()` will create them under the same file path as the WatchNext.jar."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* If `Duke` catches any exception, an empty `ShowList` and `WatchTime` will be created.  "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Every time the user inputs a command, `Duke` calls `saveState()` to save the current show list and watch time details into `userData.txt`. "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "judowha"
        },
        "content": "**[NOTE]** "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "judowha"
        },
        "content": "* The whole `userData.txt` will be rewrite to ensure that all changes are recorded."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user inputs `bye`. The WatchNext program will terminate, and `userData.txt` is saved."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The following sequence diagram shows the working flow of `Storage` class.  "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "judowha"
        },
        "content": "\u003cimg src \u003d \"images/StorageSequence.png\" width \u003d \"550\"\u003e  "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### ErrorHandling"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `ErrorHandling` class extends `Exception` by providing the appropriate exception error message to the user when the program encounters an exception."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The following is an example execution scenario and demonstrates how the `ErrorHandling` class behaves and interacts with other relevant classes."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user types in `updatetimelimit hello`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `parseInput` method in `InputParser` class is called to parse the command. The `processCommand` method in `UpdateTimeLimit` class is called."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `processCommand` method will attempt to parse `hello` to an integer."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** At this instance `NumberFormatException` will be thrown as `hello` cannot be parsed to an integer."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `parseUpdateTimeLimitCommand` method in `InputParser` class catches the thrown `NumberFormatException`. The `printInvalidFormatException` method in `Ui` class is called."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The `printInvalidFormatException` method in `Ui` class will call the `ErrorHandling` class and get the `EXCEPTION_INVALID_FORMAT` enumeration, along with its `exceptionMessage`."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `Ui` class prints the `exceptionMessage` into the terminal."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 5. Documentation"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "This project comes with 2 pieces of documentation, the developers\u0027 guide, which you are reading right now and the user guide, which helps new users get acquainted with the program."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e Throughout the code JavaDocs was used to explain the individual classes and functions."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 6. Testing"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "We have written J-Unit test for the main functionalities for the program, such as `command` classes. The test can be found under `/src/test`."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "When using gradle to build the project, these tests are run automatically and will catch any runtime errors. If you have added new functionality, please remember to add a J-Unit test for the new functionality."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Two main forms of testing was used for the development of **WatchNext**. "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jazhten"
        },
        "content": "1. Text-ui-test"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    1. This seeks to test the general flow of the program and simulates the \"expected\" or \"smooth\" lifespan of the program."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    2. This is useful to ensure that the changes to one class does not inadvertently affect the operation of another. Any changes to the operation of another class will show through this test and can be rectified by the developer."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    3. Text-ui-test is also a good final litmus test on the smooth running of the program before it is released to production. "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jazhten"
        },
        "content": "2. J-unit"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    1. The test mainly focuses on the correctness of each individual class."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    2. This tests the functions within each class and ensures that it behaves as expected by testing the output of each function against what is expected."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    3. The benefits include ensuring that the coupling between the classes do not cause any unexpected behaviour when another class has been modified."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    4. The errors thrown from the J-unit tests allow the developer to zoom in on the classes which are not showing the expected behaviour to quickly and effectively rectify the bugs."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 7. Dev Ops"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "After the project is finalised and released, if you find any bugs or problems, or if you have suggestions for new functionality, please create a new issue on our [github page](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues)."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "##  Appendix A: Product Scope"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is a program made for teenagers and young adults.For users who use multiple free streaming platforms or other open source stream websites,"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jazhten"
        },
        "content": "the application will track their progress in the different shows they watch, and the upcoming shows they wish to watch.In addition, it provides a tracker "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jazhten"
        },
        "content": "to limit your weekly show progress to help manage your time."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is optimized for users who prefer to work with the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jazhten"
        },
        "content": "There exists many options for streaming all sorts of video content from the giant media service provider company netflix, to other platforms that lean"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jazhten"
        },
        "content": "towards user sourced content.\u003cbr\u003e\u003cbr\u003e This poses a new challenge to any tech-savvy person who wants to make sure they do not miss a single episode of their "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jazhten"
        },
        "content": "favourite show. Netflix and other established streaming platforms are able to keep track of the user\u0027s progress, but should be the user use more than one"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jazhten"
        },
        "content": "streaming platform, there is no avenue of communication between the streaming platforms to synchronise this data.\u003cbr\u003e\u003cbr\u003e **WatchNext** seeks to fill in this gap "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jazhten"
        },
        "content": "by providing users with a single streamlined platform to keep track of the episodes of all their favourite shows. They do not need to worry about re-watching"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jazhten"
        },
        "content": "or missing episodes with the help of **WatchNext\u0027s** show progress tracking features. \u003cbr\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e**WatchNext** also helps users track the total time they spend watching shows across all platforms. This provides users with an encompassing view of the"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jazhten"
        },
        "content": "actual time they spend watching shows and is a feature that is not provided by most other platforms."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "##  Appendix B: User Stories"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v2.0|new user|limit my watching time sometimes|I do not get carried away and watch too many shows in one sitting|"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|user|be able to share my watch history |I can export and share the shows that I like with my friends.|"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|show enthusiast|revisit my ratings for shows i have watched|change the rating in the event that i want to.|"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|show enthusiast|know which current episode i am at|continue watching the show later.|"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|student|track my watchtime|not miss my deadlines.|"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|show enthusiast|revisit my ratings for shows i have watched|change the rating in the event that i want to.|"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|user|clear my watch history |I can protect my privacy.|"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|student|I want to track which zoom lectures / or webcasts that I have watched| I can make sure I don’t miss any important lessons.|"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "##  Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. WatchNext will work on any mainstream OS as long as it has Java 11 installed."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Users who can type fast and prefer typing over other means of input should be able to use WatchNext faster using commands than using the mouse in a GUI(Graphic User Interface)-based program."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "##  Appendix D: Glossary"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* *Graphic User Interface* - It is a user interface that includes graphical elements, such as windows, icons and buttons."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* *Continuous Integration* - A software practice that requires frequently committing code to a shared repository"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "##  Appendix E: Instructions for manual testing"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**[NOTE]** The instructions and sample test cases only act as a guide for you to start testing on some of our application features. You are free to test our features with more test cases of your own. Refer to [Section 2.a,“Prerequisites”](#2a-prerequisites) for the instructions to set up our program on your computer."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Managing shows"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Adding a show"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Test case: `add friends 2 9,10 60`\u003cbr\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message displayed indicating that the show has been added."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `add friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message displayed due to invalid format given by the user."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `add friends 2 9,10,11 60`\u003cbr\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message displayed due to the different number of seasons and episodes for each season given."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Deleting a show"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `delete Friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the show was not found. "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** The show name added is case-sensitive, as mentioned in the [User Guide](https://ay2021s1-cs2113t-w12-3.github.io/tp/UserGuide.html#3-command-format)"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `delete friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message displayed indicating that the show has been deleted from the list."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the show was not found."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Editing a show"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. Reach the edit prompt by the program using the `edit friends` command. "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** Refer to our manual testing for [adding a show](#adding-a-show) if you need help with the command. "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `season 3` followed by `episode 3,10`\u003cbr\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message displayed due to the different number of seasons and episodes for each season given."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `duration 1h0m` followed by `done`\u003cbr\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Expected: A message acknowledging the change. `Updated show details.`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Test case: `season 3` followed by `episode 10,10,10` followed by `done`\u003cbr\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Expected: A message acknowledging the change. `Updated show details.`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Managing Reviews and Ratings"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Adding a review"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]** Refer to our manual testing for [adding a show](#adding-a-show) if you need help with the command. "
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `add review friends 8 / Joey is my favourite character`\u003cbr\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Expected: An acknowledgement message `Your review for friends has been added.`"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `add review friends 8  Chandler is so funny!`\u003cbr\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the format of the command is invalid."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Changing a review"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `changereview friends / Chandler is so funny!`\u003cbr\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message `Your review for friends has been changed.` is displayed."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `changereview friends  I have rewatched friends 5 times`\u003cbr\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the format of the command is invalid."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Changing a rating"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `changerating friends 9`\u003cbr\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message `Your rating for friends has been added.` is displayed."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `changerating friends abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the rating input is invalid."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Test case: `changerating`\u003cbr\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the format of the command is invalid."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Deleting a rating"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `deleterating friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message `The rating for friends has been deleted.` is displayed."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `deleterating friends abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the format of the command is invalid."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Test case: `deleterating`\u003cbr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the format of the command is invalid."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Modifying current watch progress and watch time"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Updating current episode"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `episode friends 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message that indicates that the current episode has been updated, and watch progress for `friends` is displayed."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `episode friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the format of the command is invalid."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Updating current season"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `season friends 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message that indicates that the current episode has been updated, and watch progress for `friends` is displayed."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `season friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the format of the command is invalid."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Watching a show"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `watch friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message that displays the current show progress for `friends` and the updated watch time progress."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `watch friends 123`\u003cbr\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the program was unable to find the show that you requested."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Other incorrect select commands to try: `watch -1`, `watch \u003cany show not in the list\u003e`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Updating watch time limit"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Test case: `updatetimelimit 100`\u003cbr\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message that displays the current daily watch time limit now set to 100 minutes."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `updatetimelimit -100`\u003cbr\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message that displays the current daily watch time limit, decremented by 100 minutes."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `updatetimelimit test`\u003cbr\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the input supplied was in a wrong format."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Viewing show details"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Viewing your watch list"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Test case: `list`\u003cbr\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: A list of the shows you have added will be displayed into the terminal. If no shows have been added, the list wil be empty."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `list a`\u003cbr\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the input supplied was in a wrong format."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### Finding a show in your watch list"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Prerequisites: The show name `friends` has already been added into the list. "
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Test case: `search friends`\u003cbr\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An acknowledgement message that `friends` has been found from the watch list. The details for `friends` is also displayed in the terminal."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Test case: `search`\u003cbr\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the input supplied was in a wrong format."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Test case: `search a`\u003cbr\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected: An error message indicating that the show input was not found in the watch list."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 473,
      "jazhten": 40,
      "judowha": 19,
      "shikai-zhou": 89,
      "-": 23,
      "Bryanbeh1998": 208
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# WatchNext"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/quickstart.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### **WatchNext** is a show tracker made for teenagers and young adults."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Useful links to learn more about WatchNext:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# **WatchNext** User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/quickstart.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "#### **WatchNext** is a show tracker made for teenagers and young adults."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### 1.a. What is **WatchNext**?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is a show tracker designed for users who watch their favourite shows on multiple free streaming platforms and other open source streaming websites."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** records your progress for the different shows you are currently watching, and even for upcoming shows that you plan to watch."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eIt additionally serves as a tracker to limit your weekly watch time to help you better manage your time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eFor students, **WatchNext** serves the same purpose of tracking your learning progress for lectures and webcasts."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e\u003cbr\u003eThis motivated our team to create an application that would not only help track all your shows and lectures, "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "but also foster a community where everyone will be able to share their watchlist with like-minded individuals and friends. \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.b. Why use **WatchNext**?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "It is difficult and can be taxing to track your favourite shows through browser bookmarks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "This is especially pertinent for younger teenagers and adults who make up a large part of video entertainment media consumers."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "For students, there is also a need to manually track lecture videos and webcast progress as lecturers may use different learning management systems."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is optimized for users who prefer to work with the Command Line Interface (CLI).\u003cbr\u003e "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.c. What will this guide do?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "This guide aims to equip you with the knowledge on how to use our application by providing you with detailed examples for all of **WatchNext\u0027s** features. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The features can be found in [Section 4: “Features”](#4-features-br)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Interested in using **WatchNext**? Jump to [Section 2: “Quick Start”](#2-quick-start) to get started now!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Prerequisite: Ensure that you have Java 11 installed in your Computer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Download the latest version from [here](https://github.com/AY2021S1-CS2113T-W12-3/tp/releases)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Copy the file to the folder you want to use as the home folder for your program."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Open a command window in that folder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Run the command `java -jar WatchNext.jar`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "5. You will be greeted with this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/firstopen.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "If you are unfamilar with the CLI (Command Line Interface), do give this helpful [guide](https://www.cs.princeton.edu/courses/archive/spring14/cos126/precepts/CommandPromptTutorial.pdf) by Princeton a quick read!"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 3. Command Format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "* Words in `UPPER_CASE` and within the `\u003c\u003e` field are the inputs that need to be supplied by the user e.g. rating `\u003cSCORE\u003e`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The maximum length for a Show `SHOWNAME` is 100 characters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "* The `\u003cSHOWNAME\u003e` to be entered is case-sensitive.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "## 4. Features \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.a. `help` and `example` - Provides a condensed help list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The `help` command provides a list which contains information about all the possible accepted commands."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage: Let\u0027s say you want a quick description of each available command in **WatchNext**. Simply typing `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " will display a condensed list of each command and description to you."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/help.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  **[NOTE]**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  * The `help` command does not provide the correct format. The `example` command below provides the correct format for each command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "To supplement the `help` command, The `example` command provides the correct format for every command available in **WatchNext**."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `example`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/example.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  **[NOTE]**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  * The command format listed by the `example` command adheres to the same rules as the [command format in this user guide](#3-command-format)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  * The `example` command is meant to be a quick refresher on the correct format, and is in no way meant to replace the user guide.Please refer to the user guide if you want a better understanding of each command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.b. `add` - Adds a show"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The `add` command adds a show into your existing watchlist."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  Format:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": "   `add \u003cSHOWNAME\u003e \u003cNUMBER OF SEASONS\u003e \u003cNUMBER OF EPISODES PER SEASON\u003e \u003cDURATION OF EPISODE\u003e`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "   "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": "   Examples of usage: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     `add RunningMan 2 10,12 90` \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     `add Friends 3 10,20,30 25` \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazhten"
        },
        "content": "  Explanation of input: \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazhten"
        },
        "content": "  For the example input, `add Friends 3 10,20,30 25`, a show named `Friends` is being added.\u003cbr\u003e The show has `3` seasons, where season 1 has `10` episodes, season 2 has `20` and season 3 has `30` episodes."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "\u003e**[NOTE]**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "\u003eNote how the `10`,`20` and `30` are separated by commas without spaces in between."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazhten"
        },
        "content": "  The duration of each episode is `25` minutes.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/addCommandUG/addInput.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u0026nbsp;\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " After keying in the input as shown in the image above, the next image shows the expected output.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/addCommandUG/addResponse.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u0026nbsp;\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazhten"
        },
        "content": " If you see the outcome as pictured above, it means that the show has been successfully added to **WatchNext**."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " If you already have an entry with the same name in your list, the program will prompt you as follows:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " `This action will overwrite your existing data. Continue? (y/n)`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " If you want to replace your current entry, enter `y`. If you would like to keep your current entry, enter `n`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " After this, the program will carry on based on your reply. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " If you replied `y` you should see this:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " ```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "________________________________________________________________________________"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "friends was added to your watchlist."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " If you replied `n`:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " `The process is terminated. Your existing data is kept`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  **[NOTE]**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  * The overwrite prompt is not present in v2.0 of **WatchNext**, but will be available in future iterations."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jazhten"
        },
        "content": " \u003e  * The `\u003cDURATION OF EPISODE\u003e` input, which is `25` in the Friends example, is in minutes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jazhten"
        },
        "content": " \u003e  * If a show has 3 seasons, you will need to input the number of episodes for all three seasons in the `\u003cNUMBER OF EPISODES PER SEASONS\u003e` field. The program will not add the show into the watchlist otherwise."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jazhten"
        },
        "content": " \u003e  * You will need to input `\u003cSHOWNAME\u003e` as one word. If the name of your show contains more than one word you will need to input the name with no spaces (an example would be `\u003cRunningMan\u003e` or you may use `_` to represent a space and use `Running_Man`.)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.c. `edit` - Edits your show details"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The `edit` command allows you to edit the name of the show, number of seasons, number of episodes, or the duration "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " of an episode depending on the input of the user when prompted."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* Suppose you want to edit details for your favorite show, friends."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  Format:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     `edit \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* Input in the following format to use the edit feature"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  Example of usage:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "      `edit friends`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     \u003cimg src \u003d \"images/edit_step_1.PNG\" width \u003d \"550\"\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " * You will be prompted thereafter to enter the fields you want to change such as:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " name, season, episode, duration (of an episode)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `name \u003cSHOWNAME\u003e`, `season \u003cNUMBER OF SEASONS\u003e`, `episode \u003cNUMBER OF EPISODES PER SEASON,SEPERATED BY COMMAS\u003e`, `duration \u003cDURATION OF EPISODE\u003e`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* Suppose you would like to update the name of the show"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     `name F.r.i.e.n.d.s` "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* A new season of F.r.i.e.n.d.s just started airing and you would like to update your show details from 1 season to 2."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     `season 2`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* Suppose the first season has 10 episodes and the new season of F.r.i.e.n.d.s has 11 episodes."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     `episode 10,11`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* The duration of each episode of F.r.i.e.n.d.s is extended to 30 minutes"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     `duration 30`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "* When you have completed all changes, input `done`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    `done`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "\u003e  * The `\u003cDURATION OF EPISODE\u003e` can either be inputted in minutes, such as `duration 30` or in hours and minutes"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "\u003e such as `duration 1h25m` ."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e  * The program will wait for your command to edit the show details until you input `done`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/edit.PNG\" width \u003d \"550\"\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jazhten"
        },
        "content": " To help you better understand the flow of this command we have included a program flow diagram to illustrate the process."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/programFlowUG.png\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003csub\u003e\u003csup\u003eThe blue bubbles represent the Program portion of the interaction, while the yellow bubbles indicate the user input\u003c/sup\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.d. `addreview` - Adding a review"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `addreview` command allows you to add a review for a show, including adding a rating."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  `addreview \u003cSHOWNAME\u003e \u003cRATING\u003e / \u003cREVIEW\u003e`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e **[NOTE]**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e * The `\u003cRATING\u003e` is out of 10. The rating will not be added if it is not a value between 0 and 10."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " `addreview Friends 9 / very funny `"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Expected outcome:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  \u003cimg src \u003d \"images/addreview.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.e. `changereview` - Changing a review"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `changereview` command allows you to change a review for a show that is already in the show list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  `changereview \u003cSHOWNAME\u003e / \u003cREVIEW\u003e`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003e **[NOTE]**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003e * You can change the rating of your show with the [changerating](#4j-changerating---changes-rating-of-your-show) command."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `changereview friends / very unfunny `"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "   Expected outcome:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "   "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003cimg src \u003d \"images/changereview.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.f. `deletereview` - Deletes a review"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `deletereview` command allows you to delete a review for a show that is already in the show list."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  `deletereview \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " `deletereview Friends `"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "   Expected outcome: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "   "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003cimg src \u003d \"images/deletereview.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.g. `list` - Displays all your shows in the list"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `list` command displays all existing shows in your watchlist in an easy-to-read format, including the episode and"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "season that you are currently at."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The rating of your show will also be shown if you have added it using the [addreview](#4d-addreview---adding-a-review) command."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Format:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `list`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Example of usage:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   `list`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Expected outcome:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003cimg src \u003d \"images/list.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.h. `delete` - Deletes your show"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " The `delete` command removes a specified show from the watchlist."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `delete \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "judowha"
        },
        "content": " If you want to delete the show named friends, you can input the command: `delete friends`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "judowha"
        },
        "content": " Input:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "judowha"
        },
        "content": " \u003cimg src \u003d \"images/delete/input.png\" width \u003d \"400\"\u003e  "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "judowha"
        },
        "content": "  \u0026nbsp;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "judowha"
        },
        "content": " The show friends will be deleted from the list ,and a success message will be printed."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome :"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/delete/delete.PNG\" width \u003d \"350\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.i. `deleterating` - Deletes rating of your show"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `deleterating` command deletes the rating for an existing show in the watchlist."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `deleterating \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `deleterating Friends`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/deleterating.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.j. `changerating` - Changes rating of your show"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `changerating` command changes the rating for an existing show which already has a rating in the watchlist."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  `changerating \u003cSHOWNAME\u003e / \u003cNEWRATING\u003e`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e **[NOTE]**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e * The `\u003cNEWRATING\u003e` is out of 10. The rating will not be added if it is not a value between 0 and 10."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `changerating Friends 9`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/changerating.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "judowha"
        },
        "content": "### 4.k. `season` - Changes the season of the show you are currently watching"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "judowha"
        },
        "content": "The `season` command updates the current season of an existing show in your watchlist."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "judowha"
        },
        "content": "\u003e * This command changes the current season that you are watching in your watch history. To change the number of episodes a show has, use the [edit](#4c-edit---edits-your-show-details) command. "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "judowha"
        },
        "content": "  `season \u003cSHOWNAME\u003e \u003cSEASON\u003e`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "judowha"
        },
        "content": " If your are going to watch the third season of a show named friends, you can input `season friends 3`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "judowha"
        },
        "content": " Input:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003cimg src \u003d \"images/season/input.png\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "judowha"
        },
        "content": "    "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "judowha"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "judowha"
        },
        "content": " The current season you are watching of friends will be updated to season 3."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome :"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/season/output.png\" width \u003d \"650\"\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "judowha"
        },
        "content": "### 4.l. `episode` - Changes the episode of the show you are currently watching"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "judowha"
        },
        "content": "The `episode` command updates the current episode of an existing show in your watchlist."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "judowha"
        },
        "content": "\u003e * This command changes the current episode that you are watching in your watch history. To change the number of episodes a show has, use the [edit](#4c-edit---edits-your-show-details) command. "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "judowha"
        },
        "content": "  `episode \u003cSHOWNAME\u003e \u003cEPISODE\u003e`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "judowha"
        },
        "content": " In the current season, If your are going to watch the 10th episode of the show named friends, you can input a command: `episode friends 10`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "judowha"
        },
        "content": " Input: "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003cimg src \u003d \"images/episode/input.png\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "judowha"
        },
        "content": "   "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "judowha"
        },
        "content": "  \u0026nbsp;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "judowha"
        },
        "content": " The current episode you are watch of the show friends will be updated to 10."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "judowha"
        },
        "content": " \u003e **[NOTE]**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "judowha"
        },
        "content": " \u003e * In the example, the current season that you are watching is season 1"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e * If you are going to watch other episodes of other seasons, Please change the current season first using [season](#4k-season---changes-the-season-of-the-show-you-are-currently-watching) command."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "judowha"
        },
        "content": " Expected outcome for the example:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "judowha"
        },
        "content": "  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/episode/output.png\" width \u003d \"650\"\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.m. Managing your watch time limit"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " **WatchNext** allows you to set and track your daily watch time with its two commands , `watch` and `updatetimelimit`. "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.m.a. `watch` - Watch a show in your watchlist"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `watch` command updates the watching progress for your show, and automatically updates your watch time limit."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `watch \u003cSHOWNAME\u003e `"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `watch friends`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e **[NOTE]**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e * The show name must have already been added into the list."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e * Refer to our section on [adding a show](#4b-add---adds-a-show) if you need help with adding a show into your watch list. "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Explanation of input: Assuming `friends` has already been added into the watch list, we use the example input `watch friends`. "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Before input:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/watch_before.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " To illustrate the change in your watch time limit, we have added the time limit to 120 minutes."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The duration of the show friends is 60 minutes. the change in time limit can be seen in the expected outcome below. "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/watch_after.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Note from the expected outcome that the show WatchHistory has been updated from S1E1 to S1E2. That is because you have told the program that you have watched S1E1 of friends, and "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " are now watching S1E2 of friends!\u003cbr\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " In addition, the previously set time limit of 120 minutes has been reduced to 60 minutes."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.m.b. `updatetimelimit` - update your watch time limit"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `updatetimelimit` command updates your current watch time limit."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `updatetimelimit \u003cDURATION LIMIT\u003e `"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e **[NOTE]**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e * `\u003cDURATION LIMIT\u003e` should be entered in minutes. Your set duration will be stored until the next day."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e * If you have watched a show before updating your time limit, it will automatically be taken into account after you enter the `updatetimelimit` command."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `updatetimelimit 120 `"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/updatetimelimit.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.n. `search` - search a show in the watchlist  "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The `search` command helps you search for a specific show in the watchlist and prints out the show information.  "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "judowha"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "judowha"
        },
        "content": " `search \u003cSHOWNAME\u003e`  "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "judowha"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "judowha"
        },
        "content": " If you want to search a show named friends in the list, you can use the command: `search friends`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e **[NOTE]**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e * The `\u003cSHOWNAME\u003e` is case-sensitive."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "judowha"
        },
        "content": " Input:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "judowha"
        },
        "content": "   "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/search/search_input.png\" width \u003d \"550\"\u003e "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "judowha"
        },
        "content": " If the show is exist in the list, the details of the show will be printed out.  "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "judowha"
        },
        "content": "   "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "judowha"
        },
        "content": " Expected output:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/searchshows.png\" width \u003d \"600\"\u003e  "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "judowha"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "judowha"
        },
        "content": "  "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.o. `bye` - Exits the program"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `bye` command exits the program."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `bye`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/bye.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 5. FAQ "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Q**: Is my watchlist saved after I exit the program?  "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: Of course! The watchlist is saved into a local storage file after every input entered by the user.The same file will be loaded up when you start **WatchNext** again.  \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Q**: Where can I find the watchlist file if I want to share it with my friends?  "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: The file will be stored in the same path as the jar file, inside the \"data\" folder. Look for `data/userData.txt`.  \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Q**: Can I edit my watchlist directly in the local file?  "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: Yes, it is possible but not recommended. The save file stores the data in a specific format. If the format is not consistent, **WatchList** will be unable to load up file. Your stored shows may disappear.  \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**Q**: What should I do if there was an error while I was typing in some input?"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: It depends on the nature of the error. WatchNext provides insightful error messages which will inform and guide you on any actions necessary. \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Q**: What format should I use if I want to track my lectures?  "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: We suggest you try `add \u003cMODULENAME\u003e \u003cTOPICS\u003e \u003cNUMBER OF LECTURES PER TOPIC,SEPERATED BY COMMAS\u003e \u003cDURATION OF LECTURE\u003e`.However, feel free to be creative and think of any format that suits you!\u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 6. Command Summary"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This section showcases the list of available features and usage examples for your reference."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "             "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|--------|----------|---------------|"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Display help| `help`| `help`|"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Display command format| `example`| `example`|"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Add show|`add \u003cSHOWNAME\u003e \u003cSEASON\u003e \u003cNUMBER OF EPISODES\u003e,\u003cEPISODE YOU ARE WATCHING\u003e \u003cDURATION OF EPISODE\u003e` |`add Friends 2 10,10 90`|"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Edit show |`edit \u003cSHOWNAME\u003e`| `edit Friends`|"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Add review |`addreview \u003cSHOWNAME\u003e \u003cRATING\u003e / \u003cREVIEW\u003e`| `addreview Friends 9 / very funny`|"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Change review |`changereview \u003cSHOWNAME\u003e / \u003cREVIEW\u003e`| `changereview Friends / very unfunny`|"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Delete review |`deletereview \u003cSHOWNAME\u003e`| `deletereview Friends`|"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Show watchlist |`list`|  `list`|"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Delete show |`delete \u003cSHOWNAME\u003e`| `delete Friends`|"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Change rating |`changerating \u003cSHOWNAME\u003e \u003cNEWSCORE\u003e`| `changerating Friends 9`|"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Delete rating |`deleterating \u003cSHOWNAME\u003e`|  `deleterating Friends`|"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Update episode |`episode \u003cSHOWNAME\u003e \u003cEPISODE\u003e`|  `episode Friends 10`|"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Update season |`season \u003cSHOWNAME\u003e \u003cSEASON\u003e`|   `season Friends 3`|"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Watch a show  |`watch \u003cSHOWNAME\u003e`|  `watch Friends`|"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Update watch time limit |`updatetimelimit \u003cDURATION LIMIT\u003e`|   `updatetimelimit 100`|"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "judowha"
        },
        "content": "|Search a show |`search \u003cSHOWNAME\u003e`|  `search Friends`|"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Exit program |`bye`|   `bye`|"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 345,
      "jazhten": 44,
      "judowha": 76,
      "shikai-zhou": 49,
      "-": 31,
      "Bryanbeh1998": 48
    }
  },
  {
    "path": "docs/team/benardotang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# Benardo Tang - Project Portfolio Page for WatchNext"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**WatchNext** is a show tracker designed for users who watch their favourite shows on multiple free streaming platforms and other open source streaming websites."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**WatchNext** records your progress for the different shows you are currently watching, and even for upcoming shows that you plan to watch."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cbr\u003eIt additionally serves as a tracker to limit your weekly watch time to help you better manage your time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Code contributed: Please click this link to see a sample of my code: [Contributed code](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dBenardoTang\u0026tabRepo\u003dAY2021S1-CS2113T-W12-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Enhancements implemented:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Implemented WatchCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Implemented UpdateTimeLimitCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added overall structure for implementation of InputParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Sections of InputParser which some Command functionalities were reliant on"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Management of output messages to the user through UI class "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added functionality in SearchCommand, that was initially implemented by teammate [Jiqing](https://github.com/judowha), to be able to recognise case-insensitive or incomplete inputs as keywords."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Contributions to documentation:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added table of contents and overall structure for user guide."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added documentation for `watch` command, `updatetimelimit` command and Command Summary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * General formatting updates and fixes in user guide each time a new feature was added into the guide."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added documentation to some methods in the InputParser Class. Added full documentation to UI Class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Contributions to DG:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added table of contents and overall structure for developer guide."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added WatchCommand, UpdateTimeLimitCommand, sections in the developer guide."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * Added UML diagram for `WatchCommand` section in developer guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    * General formatting of developer guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Contributions to team-based tasks :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    *  Necessary general code enhancements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    *  Documenting the command summary of the user guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    *  Documenting the User Stories and Manual Testing sections in the developer guide."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Review/mentoring contributions:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Contributions beyond the project team:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.Ui.SAVE_DIRECTORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private ShowList shows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private WatchTime watchTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "            this.shows \u003d storage.loadState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.shows \u003d new ShowList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        watchTime \u003d new WatchTime(storage.getRecordedDate(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                storage.getDurationWatchedToday(), storage.getDailyWatchLimit());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ui.hello();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        InputParser parseManager \u003d new InputParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        while (!parseManager.isByeTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.promptUser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                storage.saveState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String input \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            parseManager.parseInput(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        new Duke(SAVE_DIRECTORY).run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 14,
      "jazhten": 28,
      "judowha": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/Show.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Show {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int numSeasons;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int[] numEpisodesForSeasons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int episodeDuration; //The average duration of episodes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private String review;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private LocalDateTime showTime;   //The time of the show, maybe include date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int currentSeason;    //to keep track of watch progress"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int currentEpisode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Show."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param name                  name of show"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param numSeasons            number of seasons"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param numEpisodesForSeasons number of episodes per season"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param episodeDuration       duration of episode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Show(String name, int numSeasons, int[] numEpisodesForSeasons, int episodeDuration) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.numSeasons \u003d numSeasons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.numEpisodesForSeasons \u003d numEpisodesForSeasons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.episodeDuration \u003d episodeDuration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.rating \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.review \u003d \"null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.currentEpisode \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.currentSeason \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getNumSeasons() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return numSeasons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int[] getNumEpisodesForSeasons() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return numEpisodesForSeasons;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getEpisodesForSeason(int season) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return numEpisodesForSeasons[season - 1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getRawEpisodesForSeason(int season) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return numEpisodesForSeasons[season];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getCurrentSeason() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return currentSeason;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getCurrentEpisode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return currentEpisode;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getReview() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return review;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setReview(String review) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setNumSeasons(int numSeasons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numSeasons \u003d numSeasons;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setNumEpisodesForSeasons(int[] numEpisodesForSeasons) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numEpisodesForSeasons \u003d numEpisodesForSeasons;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setEpisodeWatched(int watchedEpisode) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d watchedEpisode;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setCurrentSeason(int season) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentSeason \u003d season;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Overload/overwrite? the previous setCurrentSeason method signature."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Should check with user if they want to input an episode else default it to 1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * as in the previous declaration of setCurrentSeason"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param season  season num"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param episode episode num"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setCurrentSeason(int season, int episode) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d episode;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentSeason \u003d season;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setEpisodeDuration(int duration) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        episodeDuration \u003d duration;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getEpisodeDuration() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return episodeDuration;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        StringBuilder des \u003d new StringBuilder(name + \" | \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"WatchHistory : S\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(currentSeason);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"E\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(currentEpisode);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (rating !\u003d -1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            //TODO : make sure a review is always passed in with a rating"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(\"| Rating: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(rating);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\" | : \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"Seasons \").append(numSeasons).append(\" | Episodes: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (int episode : numEpisodesForSeasons) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(episode);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            des.append(\" ,\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        des.deleteCharAt(des.length() - 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (!review.equals(\"null\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            des.append(\"| Review:\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            des.append(review);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        des.append(\"| Duration: \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        des.append(episodeDuration);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return des.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 10,
      "jazhten": 115,
      "judowha": 1,
      "shikai-zhou": 36,
      "Bryanbeh1998": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.SaveState;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "judowha"
        },
        "content": "//@@author judowha"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "judowha"
        },
        "content": "public class Storage implements SaveState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private LocalDate recordedDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private int durationWatchedToday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private int dailyWatchLimit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public void saveState() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "judowha"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "judowha"
        },
        "content": "        fw.write(WatchTime.saveStateFormat());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "judowha"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "judowha"
        },
        "content": "        for (Map.Entry\u003cString, Show\u003e entry : ShowList.getShowList().entrySet()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(index + \". \" + entry.getValue().getName() + System.lineSeparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tSeason: \" + entry.getValue().getNumSeasons() + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String episodes \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "judowha"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d entry.getValue().getNumSeasons(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "judowha"
        },
        "content": "                episodes \u003d episodes + entry.getValue().getEpisodesForSeason(i) + \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "judowha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tEpisodes: \" + episodes + System.lineSeparator());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tRating: \" + entry.getValue().getRating() + System.lineSeparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tReview: \" + entry.getValue().getReview() + System.lineSeparator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tDuration: \" + entry.getValue().getEpisodeDuration() + System.lineSeparator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tCurrent Season: \" + entry.getValue().getCurrentSeason() + System.lineSeparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tCurrent Episode: \" + entry.getValue().getCurrentEpisode() + System.lineSeparator());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "judowha"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "judowha"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private WatchTime loadWatchTimeDetail(Scanner s) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (s.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitRecordedDate \u003d s.nextLine().split(\"recordedDate: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "judowha"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "judowha"
        },
        "content": "                recordedDate \u003d LocalDate.parse(splitRecordedDate[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "judowha"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "judowha"
        },
        "content": "                recordedDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "judowha"
        },
        "content": "                durationWatchedToday \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "judowha"
        },
        "content": "                dailyWatchLimit \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "judowha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitDurationWatched \u003d s.nextLine().split(\"durationWatchedToday: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "judowha"
        },
        "content": "            durationWatchedToday \u003d Integer.parseInt(splitDurationWatched[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitDailyWatchedLimit \u003d s.nextLine().split(\"dailyWatchLimit: \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "judowha"
        },
        "content": "            dailyWatchLimit \u003d Integer.parseInt(splitDailyWatchedLimit[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (WatchTime.checkIfDifferentDay(recordedDate)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "judowha"
        },
        "content": "            recordedDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "judowha"
        },
        "content": "            durationWatchedToday \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "judowha"
        },
        "content": "            dailyWatchLimit \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return new WatchTime(recordedDate,durationWatchedToday,dailyWatchLimit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public ShowList loadState() throws FileNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "judowha"
        },
        "content": "        File directory \u003d new File(\"data\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "judowha"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "judowha"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "judowha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "judowha"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "judowha"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "judowha"
        },
        "content": "            seedu.duke.utility.Ui.showCreateFileError();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "judowha"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "judowha"
        },
        "content": "        ShowList shows \u003d new ShowList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "judowha"
        },
        "content": "        // we just assume that advanced users who manually change the file can adhere to the correct format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "judowha"
        },
        "content": "        loadWatchTimeDetail(s);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "judowha"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String name \u003d s.nextLine().substring(3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitSeason \u003d s.nextLine().split(\"Season: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int season \u003d Integer.parseInt(splitSeason[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitEpisodes \u003d s.nextLine().split(\"Episodes: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] episodeString \u003d splitEpisodes[1].split(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int[] episodes \u003d new int[season];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "judowha"
        },
        "content": "            for (int i \u003d 0; i \u003c season; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "judowha"
        },
        "content": "                episodes[i] \u003d Integer.parseInt(episodeString[i]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "judowha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitRating \u003d s.nextLine().split(\"Rating: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int rating \u003d Integer.parseInt(splitRating[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitReview \u003d s.nextLine().split(\"Review: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String review \u003d splitReview[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitDuration \u003d s.nextLine().split(\"Duration: \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int duration \u003d Integer.parseInt(splitDuration[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.setShow(name, new Show(name, season, episodes, duration));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setReview(review);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setRating(rating);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitCurrentSeason \u003d s.nextLine().split(\"Current Season: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int currentSeason \u003d Integer.parseInt(splitCurrentSeason[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setCurrentSeason(currentSeason);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitCurrentEpisode \u003d s.nextLine().split(\"Current Episode: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int currentEpisode \u003d Integer.parseInt(splitCurrentEpisode[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setEpisodeWatched(currentEpisode);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return shows;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public LocalDate getRecordedDate() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return recordedDate;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public int getDurationWatchedToday() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return durationWatchedToday;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public int getDailyWatchLimit() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return dailyWatchLimit;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 13,
      "judowha": 128
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/WatchTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class WatchTime {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static LocalDate recordedDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static int durationWatchedToday;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static int dailyWatchLimit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * If no data, set durationWatchedToday to 0 and set recordedDate to LocalDate.now()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Default dailyWatchLimit to 60 minutes until user provides input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param recordedDate         the last date recorded when durationWatched is updated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param durationWatchedToday duration of shows watched today"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param dailyWatchLimit      total limit set by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public WatchTime(LocalDate recordedDate, int durationWatchedToday, int dailyWatchLimit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.recordedDate \u003d recordedDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.durationWatchedToday \u003d durationWatchedToday;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.dailyWatchLimit \u003d dailyWatchLimit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static int getDurationWatchedToday() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return durationWatchedToday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static LocalDate getRecordedDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return recordedDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static int getDailyWatchLimit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return dailyWatchLimit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static int getTimeLeftToday() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return dailyWatchLimit - durationWatchedToday;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static boolean isNewDay() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (currentDate.equals(recordedDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static boolean checkIfDifferentDay(LocalDate recordedDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (currentDate.equals(recordedDate)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void watchDurationUpdate(int showMinutes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (isNewDay()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            recordedDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            durationWatchedToday \u003d showMinutes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            durationWatchedToday +\u003d showMinutes;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (dailyWatchLimit \u003c durationWatchedToday) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printExceededWatchTimeLimit();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else if (dailyWatchLimit \u003d\u003d durationWatchedToday) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printUsedUpWatchTimeLimit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printDailyWatchTimeLeft();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void watchLimitUpdate(int timeLimit) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        dailyWatchLimit \u003d timeLimit;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printUpdatedTimeLimit(timeLimit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String userReportString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String response \u003d \"Date : \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d recordedDate.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "judowha"
        },
        "content": "        response +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d \"Time left today : \";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int timeLeft \u003d dailyWatchLimit - durationWatchedToday;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        response +\u003d (timeLeft / 60);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        response +\u003d \" hour(s) \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        response +\u003d (timeLeft % 60);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        response +\u003d \" minutes. To update the time allocated to watching shows, use the \u0027updateTimeLimit\u0027 command.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String saveStateFormat() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");  //TODO: May not be necessary"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String resultString \u003d String.format(\"recordedDate: %s\", recordedDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d String.format(\"durationWatchedToday: %d\", durationWatchedToday);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d String.format(\"dailyWatchLimit: %d\", dailyWatchLimit);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 36,
      "jazhten": 59,
      "judowha": 1,
      "shikai-zhou": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.TimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    static String[] input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public AddCommand(String[] input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Adds a new show."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws NullPointerException when the input does no match expected length"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws IndexOutOfBoundsException when the user input has too few or too many arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws RuntimeException when input is empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void processCommand() throws NullPointerException, IndexOutOfBoundsException, RuntimeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        //check that the user inputs are in the right format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (input.length \u003c 5 || input.length \u003e 6) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int numSeasons \u003d Integer.parseInt(input[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] tokenizedSeasonsEpisode \u003d input[3].split(\",\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] seasonEpisodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (tokenizedSeasonsEpisode.length !\u003d numSeasons) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        for (String s : tokenizedSeasonsEpisode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            seasonEpisodes[i] \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (seasonEpisodes[i] \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new RuntimeException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String name \u003d input[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (name.contentEquals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int duration;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (input.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            duration \u003d TimeParser.parseTime(input[4].concat(input[5]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            duration \u003d TimeParser.parseTime(input[4]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (duration \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Show show \u003d new Show(name, numSeasons, seasonEpisodes, duration);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        boolean isGoingToBeAdded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            isGoingToBeAdded \u003d checkExisting(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            isGoingToBeAdded \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (isGoingToBeAdded) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            ShowList.setShow(name, show);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printShowAdded(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printTerminated();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Check for conflict with existing shows."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param name Show Name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @return true if we overwrite, false if we keep existing show"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws NullPointerException when there is no existing show with the same name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static boolean checkExisting(String name) throws NullPointerException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        boolean exists \u003d ShowList.doesShowExist(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (!exists) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Ui.promptOverwrite();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String answer \u003d in.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (answer.equals(\"y\") || answer.equals(\"yes\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            DeleteCommand.delete(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "jazhten": 9,
      "shikai-zhou": 79
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class AddReviewCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public AddReviewCommand(String input) throws ArrayIndexOutOfBoundsException,NullPointerException,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int indexOfSlash \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int rating \u003d Integer.parseInt(tokenizedInput[2]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        String review \u003d input.substring(indexOfSlash + 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (tokenizedInput.length \u003c 3) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else if (rating \u003c 0 || rating \u003e 10) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String showName \u003d tokenizedInput[1];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Show s \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        s.setRating(rating);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        s.setReview(review);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(showName,s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printReviewAdded(showName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 3,
      "shikai-zhou": 15,
      "Bryanbeh1998": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ChangeRatingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class ChangeRatingCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ChangeRatingCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Changes a rating of a show the user requests to change."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName name of show which rating is to be changed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param targetRating  new rating to update"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void changeRating(String showName, int targetRating) throws NullPointerException,IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            if (targetRating \u003c 0 || targetRating \u003e 10) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                show.setRating(targetRating);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 14,
      "Bryanbeh1998": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ChangeReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class ChangeReviewCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public ChangeReviewCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void changeReview(String showName,String review) throws NullPointerException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        Show s \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        s.setReview(review);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(showName,s);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Command(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 17,
      "shikai-zhou": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ErrorHandling;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Deletes a show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName show to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws NullPointerException throws exception when show is not in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void delete(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            ShowList.getShowList().remove(showName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shikai-zhou": 1,
      "Bryanbeh1998": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteRatingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteRatingCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteRatingCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Deletes a rating of a show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName show which rating is to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws NullPointerException throws exception when show is not in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void deleteRating(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            show.setRating(-1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            ShowList.setShow(showName,show);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteReviewCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteReviewCommand(String showName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void deleteReview(String showName) throws NullPointerException,IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            if (show.getReview().equals(\"null\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                show.setReview(\"null\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                ShowList.setShow(showName,show);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.TimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class EditCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static Show show;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static String showName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public EditCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        showName \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Edits the number of seasons for a particular show."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param editCommand number of seasons"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws ArithmeticException when the input is negative"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws NumberFormatException when input is not int or"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     *      when current season is set more than the new number of seasons"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void editSeasons(String editCommand) throws ArithmeticException, NumberFormatException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int numSeasons \u003d Integer.parseInt(editCommand.substring(7));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (numSeasons \u003c 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            throw new ArithmeticException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int initialNumSeasons \u003d show.getNumSeasons();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setNumSeasons(numSeasons);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        //when the updated number of seasons exceed current number of season, initialise the number of episodes of the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        // new season to 1, otherwise remove the episodes for the extra seasons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (numSeasons \u003e initialNumSeasons) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            episodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c initialNumSeasons; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d show.getRawEpisodesForSeason(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d initialNumSeasons; i \u003c numSeasons; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (show.getCurrentSeason() \u003e numSeasons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            episodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            //Started from 1 to reference the correct season number"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c numSeasons; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d show.getRawEpisodesForSeason(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setNumEpisodesForSeasons(episodes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Changes duration of each episodes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param input length of episode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void editDuration(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] tokenizedInput \u003d input.split(\" \",2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            int duration \u003d TimeParser.parseTime(tokenizedInput[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (duration \u003c 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new RuntimeException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setEpisodeDuration(duration);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (RuntimeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * changes the number of episodes in each season."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param input number of episodes comma separated"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws NullPointerException if the number of episodes input by the user is invalid or empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws NumberFormatException when input is not a number"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void editEpisodes(String input) throws NullPointerException, NumberFormatException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] numOfEpisodes \u003d input.split(\",\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assert numOfEpisodes.length \u003d\u003d show.getNumSeasons();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] intNumOfEpisodes \u003d new int[show.getNumSeasons()];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        for (String s : numOfEpisodes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                intNumOfEpisodes[i] \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (intNumOfEpisodes[i] \u003c 1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //I put this below for now in case we need to add checks to ensure numOfEpisodes is not empty"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (i \u003d\u003d 0 || numOfEpisodes.length !\u003d show.getNumSeasons()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        show.setNumEpisodesForSeasons(intNumOfEpisodes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Changes the name of current show and add the update show into ShowList."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param newName the updated name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void editName(String newName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        show.setName(newName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        DeleteCommand.delete(showName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        showName \u003d newName;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Runs the parser for the edit command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @throws NullPointerException if the number of episodes input by the user is invalid or empty."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void processCommand() throws NullPointerException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        boolean isShowInList \u003d ShowList.doesShowExist(showName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (!isShowInList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printShowNotInList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printEditPrompt();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                String editCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                if (editCommand.startsWith(\"name\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                    editName(editCommand.substring(5));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                } else if (editCommand.startsWith(\"episode\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                    editEpisodes(editCommand.substring(8));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                } else if (editCommand.startsWith(\"season\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    editSeasons(editCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                } else if (editCommand.startsWith(\"duration\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                    editDuration(editCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                } else if (editCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                    ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printEditShow(showName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NumberFormatException | ArithmeticException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printInvalidEpisodesInputException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 3,
      "jazhten": 31,
      "shikai-zhou": 118
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "judowha"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "judowha"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "judowha"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public SearchCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "judowha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "judowha"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (inputs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public boolean processCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "judowha"
        },
        "content": "        String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String showsWithKeyword \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean searchSuccess \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        for (Show show : ShowList.showList.values()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (show.toString().contains(showName.toLowerCase())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                showsWithKeyword +\u003d show.toString() + \"\\n\\t\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                searchSuccess \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (searchSuccess) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printSearchSuccessful(showName, showsWithKeyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "judowha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "judowha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "judowha"
        },
        "content": "            Ui.printShowNotInList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "judowha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 12,
      "judowha": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateShowEpisodeProgressCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class UpdateShowEpisodeProgressCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public UpdateShowEpisodeProgressCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() !\u003d 3) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    //INPUT : episode \"show\" \"episode\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int episode \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            int currentSeason \u003d show.getCurrentSeason();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (episode \u003e show.getEpisodesForSeason(currentSeason) || episode \u003c\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new RuntimeException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setEpisodeWatched(episode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printChangeEpisode(showName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (RuntimeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printInputLargerThanExpected();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "jazhten": 29,
      "shikai-zhou": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateShowSeasonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class UpdateShowSeasonCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    java.util.ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public UpdateShowSeasonCommand(String description, java.util.ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() \u003c 3) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();   //insufficient input elements"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    //INPUT : season \"show\" \"season\" \"episode (optional)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateSeasonOnly();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateSeasonAndEpisode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Updates both season and episode."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void updateSeasonAndEpisode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int episode \u003d Integer.parseInt(inputs.get(3));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (season \u003e show.getNumSeasons() || season \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (episode \u003e show.getEpisodesForSeason(season) || episode \u003c\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setCurrentSeason(season, episode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printChangeSeason(showName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printInputLargerThanExpected();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Update only the season."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void updateSeasonOnly() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (season \u003e show.getNumSeasons() || season \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setCurrentSeason(season);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeSeason(showName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printInputLargerThanExpected();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 45,
      "shikai-zhou": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateTimeLimitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.TimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.Ui.printBadInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " * Represents a Command to update the watch time limit duration for the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class UpdateTimeLimitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public UpdateTimeLimitCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (inputs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Notifies the application that user has updated his daily watch limit to a new duration."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IllegalArgumentException when the time input is negative and invalid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException when the user input has too few or too many arguments"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            int newTimeLimit \u003d TimeParser.parseTime(inputs.get(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (newTimeLimit \u003d\u003d -1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            WatchTime.watchLimitUpdate(newTimeLimit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            printBadInputException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 37,
      "shikai-zhou": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/WatchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " * Represents a Command to update the watch progress of the user after watching a show."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class WatchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public WatchCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (inputs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Notifies the application that user has finished his current episode of a show"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * in which the current episode will be incremented by 1, and watch time will be updated."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * The watchlist updates the show to a new season if required."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int showEpisode \u003d show.getCurrentEpisode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int currentSeason \u003d show.getCurrentSeason();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int showSeason \u003d show.getNumSeasons();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int episodesInSeason \u003d show.getEpisodesForSeason(currentSeason);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean hasFinishedSeason \u003d (showEpisode \u003d\u003d episodesInSeason);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean isLastSeason \u003d (currentSeason \u003d\u003d showSeason);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean hasFinishedSeries \u003d (isLastSeason \u0026\u0026 hasFinishedSeason);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (hasFinishedSeries) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printFinishedAllSeasons(showName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else if (hasFinishedSeason) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int updatedSeason \u003d currentSeason + 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            show.setCurrentSeason(updatedSeason);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            show.setEpisodeWatched(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printWatchingNewSeason(showName, updatedSeason);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeEpisode(showName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            show.setEpisodeWatched(showEpisode + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeEpisode(showName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int showDuration \u003d show.getEpisodeDuration();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        WatchTime.watchDurationUpdate(showDuration);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 57,
      "jazhten": 2,
      "shikai-zhou": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/ErrorHandling.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles the various exceptions which may be encountered during the program\u0027s lifetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Some are slightly unnecessary but were included for the \u0027personality\u0027 of the Duke Bot"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class ErrorHandling extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public enum ExceptionResponse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_DESCRIPTION(\"\\tNo description\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_TIME_DATA(\"\\tNo time\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_UNIDENTIFIED_INPUT(\"\\tPlease input something\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_IO_EXCEPTION(\"\\tIO Error\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_SEARCH_DATE(\"\\tWhen is that???!!! Please put in a proper date in the format : \u0027yyyy-mm-dd\u0027\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        EXCEPTION_NOT_FOUND_EXCEPTION(\"\\tHey buddy, it seems like we don\u0027t have what you\u0027re looking for!\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        EXCEPTION_INVALID_INPUT("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                \"\\tI don\u0027t know what you just said. Please input a valid number/name. Try \" + \"\u0027example\u0027\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" for help with the command format.\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        EXCEPTION_INVALID_FORMAT(\"\\tIt seems like the format of the command is wrong, Try \" + \"\u0027help\u0027\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" for an explanation of the commands,\\n\\tor \u0027example\u0027 for assistance with command format.\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_CREATE_FILE_ERROR(\"\\tError creating file.\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_EPISODES_INPUT_EXCEPTION(\"\\tThe number of episodes input doesn\u0027t match \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"the number of seasons. The show was not added\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        EXCEPTION_INVALID_ADDING_NAME_FORMAT_EXCEPTION(\"\\tIf the name of your show contains more \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"than one word you will need to input the name with no spaces.\\n\\tExample: For show name \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\u0027Running Man\u0027 try `RunningMan` or `Running_Man`.\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        EXCEPTION_INVALID_RATING_INPUT(\"\\tSorry! This is an invalid rating! Try again!\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        EXCEPTION_INPUT_LARGER_THAN_EXPECTED(\"\\tSorry! It seems like you have entered the wrong number! Try again!\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        EXCEPTION_INVALID_TIME_INPUT(\"\\tSorry! It seems like you have entered the wrong time format.\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        EXCEPTION_EMPTY_REVIEW(\"\\tThere is no review for this show!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        private String exception;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ExceptionResponse(String exceptionMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            this.exception \u003d exceptionMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return exception;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ErrorHandling(ExceptionResponse exception) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(exception.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 8,
      "jazhten": 34,
      "shikai-zhou": 4,
      "Bryanbeh1998": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/InputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.ChangeRatingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.ChangeReviewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.DeleteRatingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.UpdateShowEpisodeProgressCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.UpdateShowSeasonCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.UpdateTimeLimitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.WatchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.StringOperations.removeFirstWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.StringOperations.tokenizeStringArray;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "//@@author BenardoTang"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " * Represents a parser to process the commands inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private boolean isBye;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public InputParser() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.isBye \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public boolean isByeTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return isBye;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses the input given by user and calls specific Commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * while checking the validity of the input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command entered by user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return Command based on the user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String parseInput(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] singleWordInputs \u003d new String[]{\"bye\", \"list\", \"help\", \"watchtime\", \"example\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String command \u003d StringOperations.getFirstWord(input).toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] splitInput \u003d input.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean commandFormatIsSingleInput \u003d Arrays.asList(singleWordInputs).contains(splitInput[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (splitInput.length \u003c 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (!commandFormatIsSingleInput) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (commandFormatIsSingleInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printByeMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.isBye \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printHelp();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"example\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printExample();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"episode\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseEpisodeUpdateCommand(input, command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"season\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseSeasonUpdateCommand(input, command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"deleterating\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteRatingCommand(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printShowList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"changerating\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseChangeRatingCommand(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseAddCommand(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteCommand(input);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseEditCommand(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"watch\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseWatchCommand(input, command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"updatetimelimit\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseUpdateTimeLimitCommand(input, command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"watchtime\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseWatchTimeCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"addreview\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseAddReviewCommand(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"changereview\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseChangeReviewCommand(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"deletereview\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteReviewCommand(input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseSearchCommand(command,input);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNoInputException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for editing the details of a show in the watch list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input full input of user in string format."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is invalid or show is not specified by the user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the number of episodes input by the user is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseEditCommand(String input) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (tokenizedString.size() \u003e 2) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            new EditCommand(tokenizedString.get(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            EditCommand.processCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printSpecifyShowName();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidEpisodesInputException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for updating the user\u0027s watch time limit."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input full input of user in string format."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param command command input by user in string format."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is invalid or unable to be processed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the command format input by the user is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NumberFormatException     if the time limit input by the user is not a number."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseUpdateTimeLimitCommand(String input, String command) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            UpdateTimeLimitCommand newTimeLimitCommand \u003d new UpdateTimeLimitCommand(command, tokenizedString);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            newTimeLimitCommand.processCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command when user has watched an episode of a show in the watch list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input full input of user in string format."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param command command input by user in string format."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the show specified is invalid or could not be found."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseWatchCommand(String input, String command) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            WatchCommand showWatched \u003d new WatchCommand(command, tokenizedString);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            showWatched.processCommand();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseSearchCommand(String command,String input) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            SearchCommand searchCommand \u003d new SearchCommand(command,tokenizedString);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            searchCommand.processCommand();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printSpecifyShowName();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseEpisodeUpdateCommand(String input, String command) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e updateInputs \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        UpdateShowEpisodeProgressCommand updateShowProgress;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            updateShowProgress \u003d new UpdateShowEpisodeProgressCommand(command, updateInputs);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            updateShowProgress.processCommand();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseSeasonUpdateCommand(String input, String command) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e seasonInputs \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        UpdateShowSeasonCommand updateShowSeason;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            updateShowSeason \u003d new UpdateShowSeasonCommand(command, seasonInputs);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateShowSeason.processCommand();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for deleting a rating in an existing show in the watch list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or invalid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the existing rating is invalid or show could not be found."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteRatingCommand(String input) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteRatingCommand deleteShowRating \u003d new DeleteRatingCommand(input);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            deleteShowRating.deleteRating(input);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteRating(input);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for changing a rating in an existing show in the watch list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or the rating is invalid."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the input is invalid or show could not be found."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NumberFormatException     if the input given does not have a rating."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseChangeRatingCommand(String input) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int showRating \u003d Integer.parseInt(tokenizedInput[1]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ChangeRatingCommand changeShowRating \u003d new ChangeRatingCommand(tokenizedInput[0]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            changeShowRating.changeRating(tokenizedInput[0], showRating);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeRating(tokenizedInput[0], tokenizedInput[1]);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidRatingInput();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidRatingInput();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for adding a show into the watch list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *      catches IndexOutOfBoundsException  if input is empty or the format is invalid."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *      catches  NullPointerException      if the format of episodes added is invalid."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *      catches  NumberFormatException     if the format of show name added is invalid."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseAddCommand(String input) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            new AddCommand(tokenizedInput);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            AddCommand.processCommand();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidEpisodesInputException();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (RuntimeException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for deleting a show in the watch list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or the command format is invalid."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the show could not be found."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteCommand(String input) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteCommand deletingShow \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            deletingShow.delete(input);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteShow(input);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command to outline the user\u0027s current watch time details."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * These include the recorded date,duration watched today, and time limit set by the user"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseWatchTimeCommand() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printDailyWatchTracking();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Adds a review."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private  static void parseAddReviewCommand(String input) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (!input.contains(\"/\")) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            new AddReviewCommand(input);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidRatingInput();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseChangeReviewCommand(String input) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (!input.contains(\"/\")) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String showName \u003d tokenizedInput[0];"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int indexOfSlash \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String review \u003d input.substring(indexOfSlash + 1);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ChangeReviewCommand changingReview \u003d new ChangeReviewCommand(showName);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            changingReview.changeReview(showName,review);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeReview(showName);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteReviewCommand(String input) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteReviewCommand deletingReview \u003d new DeleteReviewCommand(input);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            deletingReview.deleteReview(input);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteReview(input);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNoReview();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 402,
      "jazhten": 4,
      "Bryanbeh1998": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/SaveState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public interface SaveState {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void saveState() throws IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "    ShowList loadState() throws FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 10,
      "judowha": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/ShowList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class ShowList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static HashMap\u003cString, Show\u003e showList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ShowList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        showList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ShowList(HashMap\u003cString, Show\u003e showList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.showList \u003d showList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static Show getShow(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d showList.get(showName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        /* Do changes to show */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static boolean doesShowExist(String showName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return showList.containsKey(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void setShow(String showName, Show show) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        showList.put(showName, show);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public static HashMap\u003cString, Show\u003e getShowList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return showList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "jazhten": 31,
      "shikai-zhou": 2,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/StringOperations.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class StringOperations {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Tokenize the user input into an argument array."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input              User input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return ArrayList of tokenized user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException if input is empty or invalid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cString\u003e tokenizeStringArray(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputArray \u003d new java.util.ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (String token : input.split(\" \")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            inputArray.add(token);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            size \u003d inputArray.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (size \u003e 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return inputArray;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Extracts the first word from user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return String containing the first word."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String getFirstWord(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input.substring(0, index).trim(); // Extracts first word."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Removes the first word from user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return string without first word or empty string if user input contains one word."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String removeFirstWord(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input.substring(index + 1).trim(); // Extracts after space."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 23,
      "jazhten": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/TimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " * TimeParser converts user\u0027s time input into int."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public TimeParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Converts time from string format to int."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param input user\u0027s input \u0027xhym\u0027 or \u0027y\u0027, where x is the hours and y is the minutes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @return time in minutes as an integer if input is valid or -1 if input is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static int parseTime(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            String[] splitHours \u003d input.split(\"h\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            String[] splitMinutes \u003d splitHours[1].split(\"m\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            int hours \u003d Integer.parseInt(splitHours[0].strip());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            //set bounds for hours and minutes.  NOTE: 24 hours as the maximum limit sounds reasonable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (hours \u003e 24 || hours \u003c 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                Ui.printInvalidTimeInput();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            int minutes \u003d Integer.parseInt(splitMinutes[0].strip());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (minutes \u003e 59 || minutes \u003c 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                Ui.printInvalidTimeInput();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return hours * 60 + minutes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            String[] inputTime \u003d input.split(\"m\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            int result \u003d Integer.parseInt(inputTime[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (result \u003c 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                Ui.printInvalidTimeInput();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shikai-zhou": 48
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.ErrorHandling.ExceptionResponse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "//@@author BenardoTang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " * Represents a Ui class that is responsible for Output operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static final String SAVE_DIRECTORY \u003d \"data/userData.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String logo \u003d \" __          __  _______ _____ _    _ _   _ ________   _________ \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\\\ \\\\        / /\\\\|__   __/ ____| |  | | \\\\ | |  ____\\\\ \\\\ / /__   __|\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"  \\\\ \\\\  /\\\\  / /  \\\\  | | | |    | |__| |  \\\\| | |__   \\\\ V /   | |   \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"   \\\\ \\\\/  \\\\/ / /\\\\ \\\\ | | | |    |  __  | . ` |  __|   \u003e \u003c    | |   \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"    \\\\  /\\\\  / ____ \\\\| | | |____| |  | | |\\\\  | |____ / . \\\\   | |   \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"     \\\\/  \\\\/_/    \\\\_\\\\_|  \\\\_____|_|  |_|_| \\\\_|______/_/ \\\\_\\\\  |_|   \\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a greeting message to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Welcome to WatchNext\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printDailyWatchTracking();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Type \" + (\"help\") + \" to get started!\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a line in the terminal and line break to enhance readability."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"________________________________________________________________________________\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a farewell message to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printByeMessage() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printSavedList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\" Bye. Thank you for using WatchNext \u003c3\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a help list of available commands and description to the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String helpIcon \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                \" __    __   _______  __      .______   \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|  |  |  | |   ____||  |     |   _  \\\\  \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|  |__|  | |  |__   |  |     |  |_)  | \\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|   __   | |   __|  |  |     |   ___/  \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|  |  |  | |  |____ |  `----.|  |      \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|__|  |__| |_______||_______|| _|      \\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(helpIcon);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Enter the \u0027example\u0027 command for help on the command format.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((\"help\") + \" - Views help\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"example\") + \" - Outlines command format\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"add\") + \" - Adds a show\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"edit\") + \" - Edits your show details\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"list\") + \" - Displays all your shows in the watchlist\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"delete\") + \" - Deletes your show\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"addreview\") + \" - Adds a review to your show\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"changereview\") + \" - Changes review of your show\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"deletereview\") + \" - Deletes review of your show\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"deleterating\") + \" - Deletes rating of your show\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"changerating\") + \" - Changes rating of your show\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"episode\") + \" - Update your current episode progress\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"season\") + \" - Update your current season progress\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"search\") + \" - Look for your show in the watchlist\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"updatetimelimit\") + \" - Update your watch time limit\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"watch\") + \" - Update your watch progress\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"bye\") + \" - Exits the program\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Refer to our user guide for more help!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a help list of the correct command format to the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printExample() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String exampleIcon \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                \"  ________   __          __  __ _____  _      ______ \\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" |  ____\\\\ \\\\ / /    /\\\\   |  \\\\/  |  __ \\\\| |    |  ____|\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" | |__   \\\\ V /    /  \\\\  | \\\\  / | |__) | |    | |__   \\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" |  __|   \u003e \u003c    / /\\\\ \\\\ | |\\\\/| |  ___/| |    |  __|  \\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" | |____ / . \\\\  / ____ \\\\| |  | | |    | |____| |____ \\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" |______/_/ \\\\_\\\\/_/    \\\\_\\\\_|  |_|_|    |______|______|\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"                                                     \\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(exampleIcon);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Example of commands for our available features:\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((\"help\") + \" -\u003e help\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"add\") + \" -\u003e add \u003cSHOWNAME\u003e \u003cSEASON\u003e \u003cNUMBER OF EPISODES PER SEASON SEPARATED BY COMMAS\u003e \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\u003cDURATION OF EPISODE\u003e\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"edit\") + \" -\u003e edit \u003cSHOWNAME\u003e\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"list\") + \" -\u003e list\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"delete\") + \" -\u003e delete \u003cSHOWNAME\u003e\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"addreview\") + \" -\u003e addreview \u003cSHOWNAME\u003e \u003cRATING\u003e / \u003cREVIEW\u003e\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"changereview\") + \" -\u003e changereview \u003cSHOWNAME\u003e / \u003cREVIEW\u003e\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"deletereview\") + \" -\u003e deletereview \u003cSHOWNAME\u003e\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"deleterating\") + \" -\u003e deleterating \u003cSHOWNAME\u003e\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"changerating\") + \" -\u003e changerating \u003cSHOWNAME\u003e / \u003cNEWRATING\u003e\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"episode\") + \" -\u003e episode \u003cSHOWNAME\u003e \u003cEPISODE\u003e\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"season\") + \" -\u003e season \u003cSHOWNAME\u003e \u003cSEASON\u003e\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"search\") + \" -\u003e search \u003cSHOWNAME\u003e\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"updatetimelimit\") + \" -\u003e updatetimelimit \u003cDURATION LIMIT\u003e\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"watch\") + \" -\u003e watch \u003cSHOWNAME\u003e\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"bye\") + \" -\u003e bye\\n\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Refer to our user guide for more explanation on the format!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Removes empty/whitespace lines when user copy-pastes input that may result in unknown errors."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return valid input by user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        while (isInputEmpty(userInput)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private boolean isInputEmpty(String rawInput) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return rawInput.trim().isEmpty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Adds a marker to alert the user that the application is ready to process his input."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void promptUser() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Enter a command: \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints the watch list of the user."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printShowList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watchlist:\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        for (Show show : ShowList.showList.values()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"\\t\" + show.toString());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints out the current watch tracking progress of the user, on application startup."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDailyWatchTracking() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //Print when user starts program"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        LocalDate date \u003d WatchTime.getRecordedDate();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"It is \" + date + \".\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean isWatchLimitSet \u003d WatchTime.getDailyWatchLimit() !\u003d 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (isWatchLimitSet) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Time spent on shows today: \" + WatchTime.getDurationWatchedToday() + \" minutes.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Watch limit is set at \" + WatchTime.getDailyWatchLimit() + \" minutes.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Watch time remaining: \" + WatchTime.getTimeLeftToday() + \" minutes.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else if (!isWatchLimitSet) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Daily time limit for watching shows has not been set.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"To update the time allocated to watching shows, use the \u0027updatetimelimit\u0027 command.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Time spent on shows today: \" + WatchTime.getDurationWatchedToday() + \" minutes.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Unable to locate user watch time details. Please try running the program again.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the episode of the user\u0027s show has been updated."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeEpisode(String showName) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Updated current episode : \" + ShowList.getShow(showName).toString());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the review of the user\u0027s requested show has been added."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printReviewAdded(String showName) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your review for \" + (showName) + \" has been added.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printEditPrompt() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Input the detail of the show you want to change {name,season,episode,\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"duration} \");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"To finish editing, type \u0027done\u0027.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the details of the user\u0027s requested show has been edited."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printEditShow(String showName) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Updated show details for \" + showName + \".\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the season of the user\u0027s requested show has been updated."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeSeason(String showName) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Updated current season : \" + ShowList.getShow(showName).toString());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the rating of the user\u0027s requested show has been updated."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeRating(String showName, String rating) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been updated to \" + (rating));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the review of the user\u0027s requested show has been updated."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeReview(String showName) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The review for \" + (showName) + \" has been changed.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the rating of the user\u0027s requested show has been removed successfully."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDeleteRating(String showName) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the review of the user\u0027s requested show has been deleted successfully."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDeleteReview(String showName) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The review for \" + (showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the user\u0027s requested show has been deleted from the watch list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDeleteShow(String showName) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the user\u0027s requested show has been added into the watch list."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printShowAdded(String showName) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((showName) + \" was added to your watchlist.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints an acknowledgement message when the user\u0027s watch list is saved successfully."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printSavedList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watchlist has been saved.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a prompt to the user if he/she has finished all seasons of a show after using the \"watch\" command."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printFinishedAllSeasons(String showName) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"You have finished all seasons of \" + (showName) + \" !\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"If there is a new season, please add it using the \u0027edit\u0027 command and input the \u0027watch\u0027 \""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"command again.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a prompt to the user if he/she has finished the current seasons of a show after using the \"watch\" command."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param showName the name of the show that the user has requested."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printWatchingNewSeason(String showName, int newSeason) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"You are now at season \" +  newSeason + \" of \" + (showName) + \" !\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printIoException() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_IO_EXCEPTION);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printSpecifyShowName() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Please specify show name\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printShowNotInList() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The show that you have specified is not in the list.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a prompt to the user if he/she has exceeded the watch time limit after using the \"watch\" command."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printExceededWatchTimeLimit() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"You have exceeded your allocated watch time today!\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watch time deficit will be highlighted below :(\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a prompt to the user if he/she has used up the watch time limit."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printUsedUpWatchTimeLimit() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"You have used up your allocated watch time today!\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints a prompt when the user has updated the daily watch time limit through the \"updatetimelimit\" command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param newTime the updated daily time limit that the user has requested."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printUpdatedTimeLimit(Integer newTime) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watch time limit has been updated to \" + newTime + \" minutes.\""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            + \"\\n\" + WatchTime.userReportString());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Prints search results of shows that contain the keyword requested by the user."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param name the name of the keyword that the user has requested for a search."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param searchResults the watch progress for each show that contains the keyword."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printSearchSuccessful(String name, String searchResults) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your shows containing the keyword: \" + name + \" is found, \""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"here is the detailed information: \");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"\\t\" + searchResults);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void promptOverwrite() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"This action will overwrite your existing data. Continue? (y/n)\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printTerminated() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The process is terminated. Your existing data is kept\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidEpisodesInputException() {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INVALID_EPISODES_INPUT_EXCEPTION);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNoDescriptionException() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNoTimeException() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_NO_TIME_DATA);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printAddNameFormatException() {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INVALID_ADDING_NAME_FORMAT_EXCEPTION);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNoInputException() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_UNIDENTIFIED_INPUT);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNoReview() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_EMPTY_REVIEW);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidDateException() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INVALID_SEARCH_DATE);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidTimeInput() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INVALID_TIME_INPUT);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidFormatException() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INVALID_FORMAT);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNotFoundException() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_NOT_FOUND_EXCEPTION);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printBadInputException() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INVALID_INPUT);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void showCreateFileError() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_CREATE_FILE_ERROR);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidRatingInput() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INVALID_RATING_INPUT);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDailyWatchTimeLeft() {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(WatchTime.userReportString());"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInputLargerThanExpected() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ExceptionResponse.EXCEPTION_INPUT_LARGER_THAN_EXPECTED);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 470,
      "jazhten": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/ShowTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class ShowTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"friends\", show.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getNumSeasons() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, show.getNumSeasons());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getNumEpisodesForSeasons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(episodes, show.getNumEpisodesForSeasons());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getEpisodesForSeason() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(21, show.getEpisodesForSeason(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getRating() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setRating(5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(5, show.getRating());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getReview() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setReview(\"Best show ever :)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"Best show ever :)\", show.getReview());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 43
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "judowha"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static ShowList shows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "        shows \u003d new ShowList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "judowha"
        },
        "content": "        storage \u003d new Storage(Ui.SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "judowha"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes, 20);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "judowha"
        },
        "content": "        shows.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "        assertEquals(show, shows.getShow(\"friends\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "judowha"
        },
        "content": "    void saveState() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "judowha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "judowha"
        },
        "content": "            storage.saveState();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "judowha"
        },
        "content": "            assertEquals(shows.getShow(\"friends\").toString(), storage.loadState().getShow(\"friends\").toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "judowha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "judowha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "judowha": 37,
      "jazhten": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/WatchTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "judowha"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "judowha"
        },
        "content": "class WatchTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "    WatchTime limitation \u003d new WatchTime(LocalDate.of(2020,10,19),60,120);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": "    void userReportString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(\"Date : 2020-10-19\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                + \"Time left today : 1 hour(s) 0 minutes.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                        + \" To update the time allocated to watching shows, use the \u0027updateTimeLimit\u0027 command.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                limitation.userReportString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "judowha": 14,
      "shikai-zhou": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static AddCommand updateObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Show show \u003d new Show(\"example\", 3, episodes,29);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(\"example\", show);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"example\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] inputExample \u003d {\"add\", \"example\",  \"3\", \"21,10,12\",\"20\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        updateObject \u003d new AddCommand(inputExample);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final InputStream sysInBackup \u003d System.in;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"yes\".getBytes());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        AddCommand.processCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(sysInBackup);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(21, ShowList.getShow(\"example\").getEpisodesForSeason(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "shikai-zhou": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/ChangeRatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class ChangeRatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void changeRating() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ChangeRatingCommand update \u003d new ChangeRatingCommand(\"friends\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        update.changeRating(\"friends\", 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(10,ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    Command command \u003d new Command(\"test command\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"test command\", command.getDescription());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void setDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        command.setDescription(\"set description\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"set description\", command.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void delete() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        DeleteCommand toDelete \u003d new DeleteCommand(\"friends\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        toDelete.delete(\"friends\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(null,ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteRatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class DeleteRatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void deleteRating() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        DeleteRatingCommand delete \u003d new DeleteRatingCommand(\"friends\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        delete.deleteRating(\"friends\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(-1,ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static EditCommand editObject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,29);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String inputExample \u003d \"friends\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        editObject \u003d new EditCommand(inputExample);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void editSeasons() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        //replace stdin with string of test user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final InputStream sysInBackup \u003d System.in;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"edit friends\\nseason 5\\ndone\".getBytes());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        EditCommand.processCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(5,ShowList.getShow(\"friends\").getNumSeasons());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(sysInBackup);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void editEpisodes() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final InputStream sysInBackup \u003d System.in;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"edit friends\\nepisode 10,20,30,40,50\\ndone\".getBytes());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        EditCommand.processCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(sysInBackup);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] correctAnswer \u003d {10, 20, 30, 40, 50};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] testAnswer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            testAnswer \u003d ShowList.getShow(\"friends\").getNumEpisodesForSeasons();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            testAnswer \u003d ShowList.getShow(\"f.r.i.e.n.d.s\").getNumEpisodesForSeasons();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertArrayEquals(correctAnswer, testAnswer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void editDuration() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final InputStream sysInBackup \u003d System.in;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"edit friends\\nduration 25\\ndone\".getBytes());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        EditCommand.processCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(25, ShowList.getShow(\"friends\").getEpisodeDuration());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(sysInBackup);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void editName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final InputStream sysInBackup \u003d System.in;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"edit friends\\nname f.r.i.e.n.d.s\\ndone\".getBytes());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        EditCommand.processCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(\"f.r.i.e.n.d.s\",ShowList.getShow(\"f.r.i.e.n.d.s\").getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.setIn(sysInBackup);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shikai-zhou": 78
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/RatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class RatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void rateShow() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes, 20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(5, ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateShowEpisodeProgressCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class UpdateShowEpisodeProgressCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static UpdateShowEpisodeProgressCommand updateObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\",3, episodes,20);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        java.util.ArrayList\u003cString\u003e inputExample \u003d new java.util.ArrayList\u003c\u003e(Arrays.asList(\"episode\", \"friends\", \"3\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowEpisodeProgressCommand(\"episode\", inputExample);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 32
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateShowSeasonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class UpdateShowSeasonCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static UpdateShowSeasonCommand updateObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"season\", \"friends\", \"2\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowSeasonCommand(\"season\", inputExample);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(2, ShowList.getShow(\"friends\").getCurrentSeason());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommandWithEpisodes() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputExample2 \u003d new ArrayList\u003c\u003e(Arrays.asList(\"season\", \"friends\", \"3\", \"4\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowSeasonCommand(\"season\", inputExample2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, ShowList.getShow(\"friends\").getCurrentSeason());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(4, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 43
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateTimeLimitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "class UpdateTimeLimitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static UpdateTimeLimitCommand updateObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        WatchTime limitation \u003d new WatchTime(java.time.LocalDate.of(2020,10,19),60,120);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(WatchTime.getDailyWatchLimit(), 120);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    void minutesTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"updatetimelimit\", \"420\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject \u003d new UpdateTimeLimitCommand(\"updatetimelimit\", inputExample);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(420,WatchTime.getDailyWatchLimit());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    void hoursAndMinutesTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"updatetimelimit\", \"2h30m\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        updateObject \u003d new UpdateTimeLimitCommand(\"updatetimelimit\", inputExample);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(150,WatchTime.getDailyWatchLimit());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 27,
      "shikai-zhou": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/WatchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "class WatchCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static WatchCommand updateObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        WatchTime limitation \u003d new WatchTime(java.time.LocalDate.of(2020,10,19),0,120);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(WatchTime.getDailyWatchLimit(), 120);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"watch\", \"friends\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject \u003d new WatchCommand(\"watch\", inputExample);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(2, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(WatchTime.getDurationWatchedToday(), 20);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/utility/InputParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "class InputParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private InputParser parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        parser \u003d new InputParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ShowList showList \u003d new ShowList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void isByeTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(false, parser.isByeTime());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"help\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_editCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_addCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"add Blacklist 1 10\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"add\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_ratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_changeratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_deleteratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_seasonCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_episodeCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_byeCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"bye\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"bye\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"list\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private String parseAndShowCommandType(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String result \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 72
    }
  },
  {
    "path": "src/test/java/seedu/duke/utility/TimeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class TimeParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private TimeParser parser \u003d new TimeParser();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void timeParseTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final String input \u003d \"2h45m\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(165, parser.parseTime(input));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void parseIntegerTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final String input \u003d \"45\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(45, parser.parseTime(input));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void parseInvalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        final String input \u003d \"onehour\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(-1,parser.parseTime(input));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shikai-zhou": 26
    }
  }
]
