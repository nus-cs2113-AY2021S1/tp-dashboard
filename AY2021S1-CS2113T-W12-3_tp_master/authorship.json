[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shikai-zhou": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jazhten Low | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhou Shikai | [Github](https://github.com/shikai-zhou) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jiqing | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Bryan Beh | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Benardo Tang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 1,
      "judowha": 1,
      "shikai-zhou": 1,
      "-": 4,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# WatchNext Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "- [WatchNext Developer Guide](#watchnext-developer-guide)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [1.a Purpose](#1a-purpose)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [1.b Scope](#1b-scope)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [2.a Prerequisites](#2a-prerequisites)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [2.b Setting up the project in your computer](#2b-setting-up-the-project-in-your-computer)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [2.c Verifying the setup](#2c-verifying-the-setup)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [2.d Before Writing Code](#2d-before-writing-code)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [3. Design](#3-design)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Add](#add)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Edit](#edit)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Rating Command](#rating-command)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Change Rating Command](#change-rating-command)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Delete Command](#delete-command)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [DeleteRating Command](#deleterating-command)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Add Review Command](#add-review-command)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Watch Command feature](#watch-command-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [UpdateTimeLimit Command feature](#updatetimelimit-command-feature)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Storage](#storage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  - [5. Documentation](#5-documentation)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  - [6. Testing](#6-testing)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  - [7. Dev Ops](#7-dev-ops)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [Appendices](#appendices)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Target user profile](#target-user-profile)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [Value proposition](#value-proposition)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [User Stories](#user-stories)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [Glossary](#glossary)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [Instructions for manual testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.a Purpose"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This guide aims to provide information for you: the developers, testers and future contributors of **WatchNext** "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "such that you will have an easy reference for understanding the features implemented in **WatchNext**."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.b Scope"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The guide outlines the architecture and design decisions for the implementation of WatchNext.The intended audience of this "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "document are the developers, testers and future contributors of WatchNext."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This section will show you the requirements that you need to fulfill in order to quickly start contributing to this project in no time!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.a Prerequisites"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. **JDK `11`**  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `WatchNext.jar` file is compiled using the Java version mentioned above. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. **IntelliJ IDEA** IDE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "IntelliJ has Gradle and JavaFx plugins installed by default."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.b Setting up the project in your computer"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " **Fork** this [repo](https://github.com/AY2021S1-CS2113T-W12-3/tp), and clone the fork to your computer."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. You should set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "5. Click `Import Project`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "6. Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "7. Click `Open as Project`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "8. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "9. Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This will generate all the resources required by the application and tests."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.c Verifying the setup"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. You can run `Duke` and try a few commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. You can also run tests using our instructions for manual testing to explore our features."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.d Before Writing Code"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " 1. Set up CI"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the master branch or to any PR. No set up required."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " 2. Learn the design"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " When you are ready to start coding, we recommend that you get some sense of the overall design by reading about WatchNext’s architecture [here](#3-design)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazhten"
        },
        "content": "WatchNext was designed drawing from the ideas of the __Event-driven architectural style__. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eThe Ui and the Scanner components work together as event emitters. The `Ui` class prompts the user for input, and the scanner is ready to receive the input. Should the format of the input be unrecognised or incorrect, the `Ui` class guides the user with prompts to rectify the errors.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eEvents will be passed onto the `InputParser` which serves as the dispatcher. The `InputParser` uses various string manipulation operations from the `StringOperations` class to recognise the intention of the user input. After recognising the command, the input will be parsed, and the command information will be passed onto the various command classes for processing. The `InputParser` communicates the events to event consumers which are the command classes in this case. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eAll available operations will be processed by the classes in the commands package. Every command class, like the `AddCommand` class, inherits from the `Command` class. Each individual command class is able to contain all the processing required for each command with the inputs passed in during the initiation of each command object. \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eDuring runtime, the show related data is all stored in the `ShowList` class. The data is accessible and can be modified statically by all the command classes. The `ShowList` contains `Show` objects which describes the attributes of a show. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eCertain commands relating to the monitoring of the amount of time users spend watching shows depend on information from the `WatchTime` class. The class tracks the date and time remaining for the users to watch shows for the day. The time limit will be set by the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eOn the initiation of WatchNext, the `Storage` object will be initiated and retrieves any user data that has been saved from previous runs. The data is stored in plain text and can be manually edited by advanced users. The data is stored in `data/showList.txt`. After the execution of every command, the `Storage` object calls upon the save command to automatically update the save data file. The commands relating to saving and loading data can be accessed from the `SaveState` interface.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eThroughout the lifespan of the program, various errors may occur. The `ErrorHandling` class stores the various errors that could occur. The expected errors usually stem from invalid user input or Input Output (IO) errors during file loading. The `Ui` class informs the users of the errors detected and suggests actions for rectification. \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `add` command allows users to add a new show which they are watching to the `ShowList`. It is invoked by the "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "inputParser."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Given below is an example of usage scenario of how the add command behaves at each step"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `add friends 2 10,10 30` , adding the show to the showlist. The details added to the show list include"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "the title of the show, the number of seasons of the show, the number of episodes in each season(seperated by the comma) and "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "the duration of each episode. "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The parseInput method in InputParser class is called to parse the command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**[NOTE]** "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Customised exceptions are thrown when the number of arguments entered by the user is mismatched"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The AddCommand class calls the AddCommand method which then creates a new instance of the Show class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* After the AddCommand method is called,the following steps will are carried out:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "1.Splits the input from the user to 4 separate parameters (Title,Number of seasons,Number of episodes,Duration)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "2.Creates a new Show instance with the 4 parameters"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "3.Adds the show into the show list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "4.Reflect the changes back to the user. At the same time, saving the changes into the showList.txt file"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "### Edit "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `edit` command allows the user to change the details of each show that they are waatching after they have added the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "show. It is self-contained, including its own parser and methods which allows the user to change any parameter they "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "wish, after the user enters `done`, `edit` replaces the old entry with the updated one."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Rating Command"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `rating` command was implemented in such a way where it takes in 2 parameters, the show to be rated and the desired"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "rating for the show."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "After having retrieved the show from the show list, the rating command sets the rating of the show and then proceeds to"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "update it back into the show list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Given below is an example of usage scenario of how the rating command behaves at each step"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `rating friends 10` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The parseInput method in InputParser class is called to parse the command."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**[NOTE]** "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Customised IndexOutOfBoundsException will be thrown if user enters a rating with value less than 0 or more than 10. "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Customised NullPointerException will be thrown when show entered by user is not found in the show list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* A new instance of RatingCommand class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The rateShow method in RatingCommand class is called."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* After the rateShow method is called, it the following things:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "1.Retrieves the show to be rated from the show list"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "2.Sets the rating for the show to the rating provided by the user "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "3.Updates the show back into the show list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "4.Reflect the changes back to the user. At the same time, saving the changes into the showList.txt file"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Change Rating Command"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `changerating` command takes in 2 parameters, the show which rating is to be changed and the new rating to be"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "updated to."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The command changes the rating of a desired show"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Given below is an example usage scenario and how the ChangeRatingCommand Class behaves at each step."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `changerating friends 3` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The parseInput method in InputParser class is called to parse the command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**[NOTE]** "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Customised IndexOutOfBoundsException will be thrown if user enters a rating with value less than 0 or more than 10. "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Customised NullPointerException will be thrown when show entered by user is not found in the show list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* A new instance of ChangeRatingCommand class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The changeRating method in ChangeRatingCommand class is called."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* After the changeRating method is called, it does the following things:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "1.Retrieves the show to be updated from the show list"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "2.Updates the new rating to the show"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "3.Updates the show back into the show list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "4.Reflect the changes back to the user. At the same time, saving the changes into the showList.txt file"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Delete Command"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `delete` command takes in 1 parameter, the show to be deleted. Following that, the command proceeds to delete the show"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "from the showlist"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Given below is an example usage scenario and how the DeleteCommand Class behaves at each step."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `delete friends` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The parseInput method in InputParser class is called to parse the command."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**[NOTE]** "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Customised NullPointerException will be thrown when show entered by user is not found in the show list"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* A new instance of DeleteCommand class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The delete method in DeleteCommand class is called."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* After the delete method is called, it does the following things:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "1.Retrieves the show to be updated from the show list"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "2.Deletes the show from the show list"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "3.Reflect the changes back to the user. At the same time, saving the changes into the showList.txt file"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### DeleteRating Command "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `deleterating` command takes in 1 parameter, the show which rating is to be deleted.Following that, the command "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "proceeds to delete the rating of the show that was inputted by the user."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Given below is an example usage scenario and how the DeleteCommand Class behaves at each step."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* The user types in `deleterating friends` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The parseInput method in InputParser class is called to parse the command."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**[NOTE]** "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "Customised NullPointerException will be thrown when show entered by user is not found in the show list"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* A new instance of DeleteRatingCommand class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The deleteRating method in DeleteRatingCommand class is called."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "* After the deleteRating method is called, it does the following things:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "1.Retrieves the show to be updated from the show list"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "2.Deletes the show\u0027s rating by setting the rating to -1 (essentially deleting it)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "3.Updates the show back into the show list"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "4.Reflect the changes back to the user. At the same time, saving the changes into the showList.txt file"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "### Add Review Command"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The add review command is invoked by the InputParser method parseAddReview. It takes a string as input. Within the AddReview class"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The string is tokenised into separate words"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The corresponding show is retrieved from the WatchList"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The rating of the show is updated"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "**Step 4**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The review of the rating is added to the show"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Watch Command feature"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The WatchCommand class extends Command by providing methods to "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "increment the current episode in the persistent watch history of the user. It also updates the watch time limit as indicated previously by the user."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the WatchCommand class behaves at each step."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user types in `watch friends` , assuming that friends has been added by the user beforehand."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The parseInput method in InputParser class is called to parse the command."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**[NOTE]** Customised IndexOutOfBoundsException and NullPointerException will be thrown if the user enters invalid commands."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of WatchCommand class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The processCommand method in WatchCommand class is called."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The processCommand method in WatchCommand class is then called. This method does three main things:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1.Check the status of user\u0027s watch progress: In middle of series , finished season and finished series."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2.Increment current episode  and new season if applicable. No change is done if user has finished series. "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3.Reflect the new changes to the user. A prompt is made to the user if the user has already finished the series. Changes are also saved in the userData.txt file."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### UpdateTimeLimit Command feature"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The UpdateTimeLimit class extends Command by providing methods to "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "update the current time limit of the user from the WatchTime class. "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Given below is an example usage scenario and how the UpdateTimeLimit class behaves at each step."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 1**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The user types in `updatetimelimit 120`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The parseInput method in InputParser class is called to parse the command."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**[NOTE]** Customised IndexOutOfBoundsException and NullPointerException will be thrown if the user enters invalid commands."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 2**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* A new instance of UpdateTimeLimit class is called and the command is returned to the main program. "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The processCommand method in UpdateTimeLimit class is called."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Step 3**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The processCommand method in UpdateTimeLimit class will call the WatchTIme class and update its `dailywatchtime` variable"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "to the desired value, which is 120 in this case."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The change will then be reflected to the user, and be saved to the userData.txt file."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### Storage  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "For the storage function, the file which named userData will be put in a specific file path with a fixed format.  "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The saveState function will save the watch time detail at the beginning and then follow by the show list. Everytime a command is executed by users, the file will be rewrite to update new contain. If the file or the folder does not exist in the specific path, the app will create it automatically.  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The loadState function will read the file line by line. It will first call the loadWatchTimeDetail function to read the watch time detail, which is always the first three lines of the file, and then return a WatchTime instance."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The rest contain of the file will be all shows details. A hash map called shows is create to collect shows information. Each show has a seven line recorded format so seven lines will be read in each loop to get a show information and then record the show into the shows class. when the function finish reading the last line, it will return shows.  "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 5. Documentation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "This project comes with 2 pieces of documentation, the developers\u0027 guide, which you are reading right now and the user guide, which helps new users get acquainted with the program."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 6. Testing"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "We have written J-Unit test for the main functionalities for the program, such as `command` classes. The test can be found under `/src/test`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "When using gradle to build the project, these tests are run automatically and will catch any runtime errors. If you have added new functionality, please remember to add a J-Unit test for the new functionality."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Two main forms of testing was used for the development of **WatchNext**. "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jazhten"
        },
        "content": "1. Text-ui-test"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    1. This seeks to test the general flow of the program and simulates the \"expected\" or \"smooth\" lifespan of the program."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    2. This is useful to ensure that the changes to one class does not inadvertently affect the operation of another. Any changes to the operation of another class will show through this test and can be rectified by the developer."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    3. Text-ui-test is also a good final litmus test on the smooth running of the program before it is released to production. "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jazhten"
        },
        "content": "2. J-unit"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    1. The test mainly focuses on the correctness of each individual class."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    2. This tests the functions within each class and ensures that it behaves as expected by testing the output of each function against what is expected."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    3. The benefits include ensuring that the coupling between the classes do not cause any unexpected behaviour when another class has been modified."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    4. The errors thrown from the J-unit tests allow the developer to zoom in on the classes which are not showing the expected behaviour to quickly and effectively rectify the bugs."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 7. Dev Ops"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "When the project is finalised and released, if you find any bugs or problems, or if you have suggestions for new functionality, please create a new issue on our [github page](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues)."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "##  Appendices"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is a program made for teenagers and young adults.For users who use multiple free streaming platforms or other open source stream websites,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jazhten"
        },
        "content": "the application will track their progress in the different shows they watch, and the upcoming shows they wish to watch.In addition, it provides a tracker "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jazhten"
        },
        "content": "to limit your weekly show progress to help manage your time."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is optimized for users who prefer to work with the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jazhten"
        },
        "content": "There exists many options for streaming all sorts of video content from the giant media service provider company netflix, to other platforms that lean"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jazhten"
        },
        "content": "towards user sourced content.\u003cbr\u003e\u003cbr\u003e This poses a new challenge to any tech-savvy person who wants to make sure they do not miss a single episode of their "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jazhten"
        },
        "content": "favourite show. Netflix and other established streaming platforms are able to keep track of the user\u0027s progress, but should be the user use more than one"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jazhten"
        },
        "content": "streaming platform, there is no avenue of communication between the streaming platforms to synchronise this data.\u003cbr\u003e\u003cbr\u003e **WatchNext** seeks to fill in this gap "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jazhten"
        },
        "content": "by providing users with a single streamlined platform to keep track of the episodes of all their favourite shows. They do not need to worry about re-watching"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jazhten"
        },
        "content": "or missing episodes with the help of **WatchNext\u0027s** show progress tracking features. \u003cbr\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e**WatchNext** also helps users track the total time they spend watching shows across all platforms. This provides users with an encompassing view of the"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jazhten"
        },
        "content": "actual time they spend watching shows and is a feature that is not provided by most other platforms."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v2.0|new user|limit my watching time sometimes|I do not get carried away and watch too many shows in one sitting|"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|user|be able to share my watch history |I can export and share the shows that I like with my friends.|"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|show enthusiast|revisit my ratings for shows i have watched|change the rating in the event that i want to.|"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|show enthusiast|know which current episode i am at|continue watching the show later.|"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|student|track my watchtime|not miss my deadlines.|"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|show enthusiast|revisit my ratings for shows i have watched|change the rating in the event that i want to.|"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|user|clear my watch history |I can protect my privacy.|"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|v1.0|student|I want to track which zoom lectures / or webcasts that I have watched| I can make sure I don’t miss any important lessons.|"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. WatchNext will work on any mainstream OS as long as it has Java 11 installed."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Users who can type fast and prefer typing over other means of input should be able to use WatchNext faster using commands than using the mouse in a GUI(Graphic User Interface)-based program."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* *Graphic User Interface* - It is a user interface that includes graphical elements, such as windows, icons and buttons."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**[NOTE]** The instructions and sample test cases only act as a guide for you to start testing on some of our application features. You are free to test our features with more test cases of your own. Refer to [Section 2.a,“Prerequisites”](#2a-prerequisites) for the instructions to set up our program on your computer."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 175,
      "jazhten": 33,
      "shikai-zhou": 61,
      "-": 24,
      "Bryanbeh1998": 177
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# WatchNext"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/quickstart.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### **WatchNext** is a show tracker made for teenagers and young adults."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Useful links to learn more about WatchNext:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# **WatchNext** User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "- [**WatchNext** User Guide](#watchnext-user-guide)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    - [1.a. What is **WatchNext**?](#1a-what-is-watchnext)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [1.b. Why use **WatchNext**?](#1b-why-use-watchnext)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [1.c. What will this guide do?](#1c-what-will-this-guide-do)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "  - [3. Command Format](#3-command-format)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  - [4. Features](#4-features-br)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "      - [4.a. `help` - Views help](#4a-help---views-help)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "      - [4.b. `add` - Adds a show](#4b-add---adds-a-show)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "      - [4.c. `edit` - Edits your show details](#4c-edit---edits-your-show-details)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    - [4.d. `addreview` - Adding a review](#4d-addreview---adding-a-review)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [4.e. `list` - Displays all your shows in the list](#4e-list---displays-all-your-shows-in-the-list)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [4.f. `delete` - Deletes your show](#4f-delete---deletes-your-show)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [4.g. `deleterating` - Deletes rating of your show](#4g-deleterating---deletes-rating-of-your-show)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [4.h. `changerating` - Changes rating of your show](#4h-changerating---changes-rating-of-your-show)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [4.i. `episode` - Changes the episode of the show you are currently watching](#4i-episode---changes-the-episode-of-the-show-you-are-currently-watching)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    - [4.j. `season` - Changes the season of the show you are currently watching](#4j-season---changes-the-season-of-the-show-you-are-currently-watching)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    - [4.k Managing your watch time limit](#4k-managing-your-watch-time-limit)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    - [4.k.a. `watch` - Watch a show in your watchlist](#4ka-watch---watch-a-show-in-your-watchlist)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    - [4.k.b. `updatetimelimit` - update your watch time limit](#4kb-updatetimelimit---update-your-watch-time-limit)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    - [4.l. `search` - search a show in the watchlist](#4l-search---search-a-show-in-the-watchlist)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    - [4.m. `bye` - Exits the program](#4m-bye---exits-the-program)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [5. FAQ](#5-faq)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [6. Command Summary](#6-command-summary)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/quickstart.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "#### **WatchNext** is a show tracker made for teenagers and young adults."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "### 1.a. What is **WatchNext**?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is a show tracker designed for users who watch their favourite shows on multiple free streaming platforms and other open source streaming websites."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** records your progress for the different shows you are currently watching, and even for upcoming shows that you plan to watch."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eIt additionally serves as a tracker to limit your weekly watch time to help you better manage your time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "For students, **WatchNext** serves the same purpose of tracking your learning progress for lectures and webcasts."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**WatchNext** is optimized for users who prefer to work with the Command Line Interface (CLI).\u003cbr\u003e "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.b. Why use **WatchNext**?"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**WatchNext** allows you to watch shows on multiple free streaming platforms or other open source stream websites and keep track of which episode you are at."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003eIt is difficult and can be taxing to track your favourite shows through browser bookmarks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "This is especially pertinent for younger teenagers and adults who make up a large part of video entertainment media consumers."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "For students, there is also a need for to manually track lecture videos and webcast progress as lecturers may use different learning management systems."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "This motivated our team to create an application that would not only help track all your shows and lectures, "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "but also foster a community where everyone will be able to share their favourite shows and their watchlist with like-minded individuals and friends. \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003c!-- I used foster for ambiguous language so we can get away with the feature not being implemented yet --\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.c. What will this guide do?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "This guide aims to equip you with the knowledge on how to use our application by providing you with detailed examples for all of **WatchNext\u0027s** features. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The features can be found in [Section 4: “Features”](#4-features-br)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "Interested in using **WatchNext**? Jump to [Section 2: “Quick Start”](#2-quick-start) to get started now!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "Prerequisite: Ensure that you have Java 11 installed in your Computer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Download the latest version from [here](https://github.com/AY2021S1-CS2113T-W12-3/tp/releases)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. Copy the file to the folder you want to use as the home folder for your program."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Open a command window in that folder."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Run the command `java -jar WatchNext.jar`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "5. You will be greeted with this:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/firstopen.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 3. Command Format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Words in `UPPER_CASE` and within the `\u003c\u003e` field are the parameters to be supplied by the user e.g. rating `\u003cSCORE\u003e`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* The maximum length for a Show `SHOWNAME` is 100 characters."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "* The `\u003cSHOWNAME\u003e` to be entered is case-sensitive.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "## 4. Features \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.a. `help` - Views help"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " The help list contains information about all the possible accepted commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `help`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `help`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/help.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.b. `add` - Adds a show"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The `add` command adds a show into your existing watchlist."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  Format:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "   `add \u003cSHOWNAME\u003e \u003cSEASON\u003e \u003cNUMBER OF EPISODES PER SEASON,SEPERATED BY COMMAS\u003e \u003cDURATION OF EPISODE\u003e`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  **[NOTE]**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  * The `\u003cDURATION OF EPISODE\u003e` is in minutes."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  * If a show has 2 seasons, you will need to input the number of episodes for both seasons (see example of usage below) for the `\u003cNUMBER OF EPISODES PER SEASON,SEPERATED BY COMMAS\u003e` field. The program will not add the show into the watchlist otherwise."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e  * You will need to input `\u003cSHOWNAME\u003e` as one word. If the name of your show contains more than one word you will need to input the name with no spaces (example of usage below for `\u003cRunningMan\u003e` or you may use `_` to represent a space.)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  Example of usage:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `add Friends 2 10,10 60`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `add RunningMan 3 10,12,11 90`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/add.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.c. `edit` - Edits your show details"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The `edit` command allows you to edit the name of the show, number of seasons, number of episodes, or the duration "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " of an episode depending on the input of the user when prompted."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "   Format:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     `edit \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "   Example of usage:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `edit Friends`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " You will be prompted thereafter to enter the fields you want to change such as:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " name, season, episode, duration (of an episode)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `name \u003cSHOWNAME\u003e`, `season \u003cNUMBER OF SEASONS\u003e`, `episode \u003cNUMBER OF EPISODES PER SEASON,SEPERATED BY COMMAS\u003e`, `duration \u003cDURATION OF EPISODE\u003e`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     `name F.r.i.e.n.d.s` , `season 2`, `episode 10,11`, `duration 90`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " When you have completed all changes, input `done`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e  * The `\u003cDURATION OF EPISODE\u003e` is in minutes.  "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e  * The program will wait for your command to edit the show details until you input `done`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/edit.PNG\" width \u003d \"550\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jazhten"
        },
        "content": " To help you better understand the flow of this command we have included a program flow diagram to illustrate the process."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/programFlowUG.png\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003csub\u003e\u003csup\u003eThe blue bubbles represent the Program portion of the interaction, while the yellow bubbles indicate the user input\u003c/sup\u003e\u003c/sub\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.d. `addreview` - Adding a review"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `addreview` command allows you to add a review for a show, including adding a rating."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  `addreview \u003cSHOWNAME\u003e \u003cRATING\u003e \u003cREVIEW\u003e`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  * The `\u003cRATING\u003e` is out of 10. The rating will not be added if it is not a value between 0 and 10."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " `addreview Friends 9 very funny `"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Expected outcome:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  \u003cimg src \u003d \"images/addreview.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.e. `list` - Displays all your shows in the list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `list` command displays all existing shows in your watchlist in an easy-to-read format, including the episode and"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "season that you are currently at."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The rating of your show will also be shown if you have added it using the [addreview](#4d-addreview---adding-a-review) command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Format:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `list`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Example of usage:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   `list`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Expected outcome:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003cimg src \u003d \"images/list.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.f. `delete` - Deletes your show"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": " The `delete` command removes a specified show from the watchlist."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `delete \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `delete Friends`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/delete.PNG\" width \u003d \"350\"\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.g. `deleterating` - Deletes rating of your show"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `deleterating` command deletes the rating for an existing show in the watchlist."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `deleterating \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `deleterating Friends`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/deleterating.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.h. `changerating` - Changes rating of your show"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `changerating` command changes the rating for an existing show which already has a rating in the watchlist."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "  `changerating \u003cSHOWNAME\u003e \u003cNEWRATING\u003e`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e **[NOTE]**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  \u003e * The `\u003cNEWRATING\u003e` is out of 10. The rating will not be added if it is not a value between 0 and 10."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `changerating Friends 10`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/changerating.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.i. `episode` - Changes the episode of the show you are currently watching"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `episode` command updates the current episode of an existing show in your watchlist."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e * This command changes the current episode that you are watching in your watch history. To change the number of episodes a show has, use the [edit](#4c-edit---edits-your-show-details) command. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `episode \u003cSHOWNAME\u003e \u003cEPISODE\u003e`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `episode Friends 10`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/episode.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.j. `season` - Changes the season of the show you are currently watching"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `season` command updates the current season of an existing show in your watchlist."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e **[NOTE]**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003e * This command changes the current season that you are watching in your watch history. To change the number of episodes a show has, use the [edit](#4c-edit---edits-your-show-details) command. "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `season \u003cSHOWNAME\u003e \u003cSEASON\u003e`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `season Friends 3`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/season.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.k. Managing your watch time limit"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " **WatchNext** allows you to set and track your daily watch time with its two commands , `watch` and `updatetimelimit`. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.k.a. `watch` - Watch a show in your watchlist"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The `watch` command increments the current episode that you are on, and automatically updates your watch time limit."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `watch \u003cSHOWNAME\u003e `"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `watch friends`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/watch.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.k.b. `updatetimelimit` - update your watch time limit"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `updatetimelimit` command updates your current watch time limit."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `updatetimelimit \u003cDURATION LIMIT\u003e `"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e **[NOTE]**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e * `\u003cDURATION LIMIT\u003e` should be entered in minutes. Your set duration will be stored until the next day."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e * If you have watched a show before updating your time limit, it will automatically be taken into account after you enter the `updatetimelimit` command."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `updatetimelimit 120 `"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/updatetimelimit.PNG\" width \u003d \"800\"\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.l. `search` - search a show in the watchlist  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "The `search` command helps you search for a specific show in the watchlist and prints out the show information.  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "judowha"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "judowha"
        },
        "content": " `search \u003cSHOWNAME\u003e`  "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "judowha"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "judowha"
        },
        "content": " `search Friends`  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e **[NOTE]**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003e * The `\u003cSHOWNAME\u003e` is case-sensitive."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "judowha"
        },
        "content": " Expected output:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/searchshows.png\" width \u003d \"550\"\u003e  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "judowha"
        },
        "content": " "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "judowha"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "judowha"
        },
        "content": "  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "### 4.m. `bye` - Exits the program"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "The `bye` command exits the program."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `bye`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/bye.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 5. FAQ "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Q**: Is my watchlist saved after I exit the program?  "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: Of course! The watchlist is saved into a local storage file after every input entered by the user.The same file will be loaded up when you start **WatchNext** again.  \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Q**: Where can I find the watchlist file if I want to share it with my friends?  "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: The file will be stored in the same path as the jar file, inside the \"data\" folder. Look for `data/userData.txt`.  \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Q**: Can I edit my watchlist directly in the local file?  "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: Yes, it is possible but not recommended. The save file stores the data in a specific format. If the format is not consistent, **WatchList** will be unable to load up file. Your stored shows may disappear.  \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**Q**: What should I do if there was an error while I was typing in some input?"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: It depends on the nature of the error. WatchNext provides insightful error messages which will inform and guide you on any actions necessary. \u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "judowha"
        },
        "content": "**Q**: What format should I use if I want to track my lectures?  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jazhten"
        },
        "content": "**A**: We suggest you try `add \u003cMODULENAME\u003e \u003cTOPICS\u003e \u003cNUMBER OF LECTURES PER TOPIC,SEPERATED BY COMMAS\u003e \u003cDURATION OF LECTURE\u003e`.However, feel free to be creative and think of any format that suits you!\u003cbr\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jazhten"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 6. Command Summary"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This section showcases the list of available features and usage examples for your reference."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "             "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|--------|----------|---------------|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Display help| `help`| `help`|"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Add show|`add \u003cSHOWNAME\u003e \u003cSEASON\u003e \u003cNUMBER OF EPISODES\u003e,\u003cEPISODE YOU ARE WATCHING\u003e \u003cDURATION OF EPISODE\u003e` |`add Friends 2 10,10 90`|"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Edit show |`edit \u003cSHOWNAME\u003e`| `edit Friends`|"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Add review |`addreview \u003cSHOWNAME\u003e \u003cRATING\u003e \u003cREVIEW\u003e`| `rating Friends 9 very funny`|"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Show watchlist |`list`|  `list`|"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Delete show |`delete \u003cSHOWNAME\u003e`|   `delete Friends`|"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Change rating |`changerating \u003cSHOWNAME\u003e \u003cNEWSCORE\u003e`|   `changerating Friends 10`|"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Delete rating |`deleterating \u003cSHOWNAME\u003e`|  `deleterating Friends`|"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Update episode |`episode \u003cSHOWNAME\u003e \u003cEPISODE\u003e`|  `episode Friends 10`|"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Update season |`season \u003cSHOWNAME\u003e \u003cSEASON\u003e`|   `season Friends 3`|"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Watch a show  |`watch \u003cSHOWNAME\u003e`|  `watch Friends`|"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Update watch time limit |`updatetimelimit \u003cDURATION LIMIT\u003e`|   `updatetimelimit 100`|"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "judowha"
        },
        "content": "|Search a show |`search \u003cSHOWNAME\u003e`|  `search Friends`|"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "|Exit program |`bye`|   `bye`|"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 313,
      "jazhten": 30,
      "judowha": 22,
      "shikai-zhou": 24,
      "-": 31,
      "Bryanbeh1998": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.Ui.SAVE_DIRECTORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private ShowList shows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private WatchTime watchTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "            this.shows \u003d storage.loadState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.shows \u003d new ShowList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        watchTime \u003d new WatchTime(storage.getRecordedDate(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                storage.getDurationWatchedToday(), storage.getDailyWatchLimit());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ui.hello();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        InputParser parseManager \u003d new InputParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        while (!parseManager.isByeTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.promptUser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                storage.saveState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String input \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            parseManager.parseInput(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        new Duke(SAVE_DIRECTORY).run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 14,
      "jazhten": 28,
      "judowha": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/Show.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Show {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int numSeasons;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int[] numEpisodesForSeasons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int episodeDuration; //The average duration of episodes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String review;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected LocalDateTime showTime;   //The time of the show, maybe include date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int currentSeason;    //to keep track of watch progress"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int currentEpisode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Show."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param name                  name of show"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param numSeasons            number of seasons"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param numEpisodesForSeasons number of episodes per season"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param episodeDuration       duration of episode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Show(String name, int numSeasons, int[] numEpisodesForSeasons, int episodeDuration) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.numSeasons \u003d numSeasons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.numEpisodesForSeasons \u003d numEpisodesForSeasons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.episodeDuration \u003d episodeDuration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.rating \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.review \u003d \"null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.currentEpisode \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.currentSeason \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getNumSeasons() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return numSeasons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int[] getNumEpisodesForSeasons() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return numEpisodesForSeasons;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getEpisodesForSeason(int season) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return numEpisodesForSeasons[season - 1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getRawEpisodesForSeason(int season) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return numEpisodesForSeasons[season];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getCurrentSeason() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return currentSeason;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getCurrentEpisode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return currentEpisode;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getReview() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return review;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setReview(String review) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setNumSeasons(int numSeasons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numSeasons \u003d numSeasons;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setNumEpisodesForSeasons(int[] numEpisodesForSeasons) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numEpisodesForSeasons \u003d numEpisodesForSeasons;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setEpisodeWatched(int watchedEpisode) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d watchedEpisode;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setCurrentSeason(int season) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentSeason \u003d season;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Overload/overwrite? the previous setCurrentSeason method signature."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Should check with user if they want to input an episode else default it to 1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * as in the previous declaration of setCurrentSeason"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param season  season num"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param episode episode num"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setCurrentSeason(int season, int episode) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d episode;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentSeason \u003d season;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setEpisodeDuration(int duration) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        episodeDuration \u003d duration;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getEpisodeDuration() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return episodeDuration;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        StringBuilder des \u003d new StringBuilder(name + \" | \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"WatchHistory : S\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(currentSeason);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"E\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(currentEpisode);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (rating !\u003d -1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            //TODO : make sure a review is always passed in with a rating"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(\"| Rating: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(rating);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\" | : \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"Seasons \").append(numSeasons).append(\" | Episodes: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (int episode : numEpisodesForSeasons) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(episode);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(\" \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (review !\u003d \"null\") {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            des.append(\"| Review: \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            des.append(review);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return des.toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 8,
      "jazhten": 116,
      "shikai-zhou": 34,
      "Bryanbeh1998": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.SaveState;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "judowha"
        },
        "content": "//@@author judowha"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "judowha"
        },
        "content": "public class Storage implements SaveState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private LocalDate recordedDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private int durationWatchedToday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "judowha"
        },
        "content": "    private int dailyWatchLimit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public void saveState() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "judowha"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "judowha"
        },
        "content": "        fw.write(WatchTime.saveStateFormat());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "judowha"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "judowha"
        },
        "content": "        for (Map.Entry\u003cString, Show\u003e entry : ShowList.getShowList().entrySet()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(index + \". \" + entry.getValue().getName() + System.lineSeparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tSeason: \" + entry.getValue().getNumSeasons() + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String episodes \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "judowha"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d entry.getValue().getNumSeasons(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "judowha"
        },
        "content": "                episodes \u003d episodes + entry.getValue().getEpisodesForSeason(i) + \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "judowha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tEpisodes: \" + episodes + System.lineSeparator());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tRating: \" + entry.getValue().getRating() + System.lineSeparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tReview: \" + entry.getValue().getReview() + System.lineSeparator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tDuration: \" + entry.getValue().getEpisodeDuration() + System.lineSeparator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tCurrent Season: \" + entry.getValue().getCurrentSeason() + System.lineSeparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "judowha"
        },
        "content": "            fw.write(\"\\t\\tCurrent Episode: \" + entry.getValue().getCurrentEpisode() + System.lineSeparator());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "judowha"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "judowha"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public WatchTime loadWatchTimeDetail(Scanner s) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (s.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitRecordedDate \u003d s.nextLine().split(\"recordedDate: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "judowha"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "judowha"
        },
        "content": "                recordedDate \u003d LocalDate.parse(splitRecordedDate[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "judowha"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "judowha"
        },
        "content": "                recordedDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "judowha"
        },
        "content": "                durationWatchedToday \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "judowha"
        },
        "content": "                dailyWatchLimit \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "judowha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitDurationWatched \u003d s.nextLine().split(\"durationWatchedToday: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "judowha"
        },
        "content": "            durationWatchedToday \u003d Integer.parseInt(splitDurationWatched[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitDailyWatchedLimit \u003d s.nextLine().split(\"dailyWatchLimit: \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "judowha"
        },
        "content": "            dailyWatchLimit \u003d Integer.parseInt(splitDailyWatchedLimit[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (WatchTime.checkIfDifferentDay(recordedDate)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "judowha"
        },
        "content": "            recordedDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "judowha"
        },
        "content": "            durationWatchedToday \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "judowha"
        },
        "content": "            dailyWatchLimit \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return new WatchTime(recordedDate,durationWatchedToday,dailyWatchLimit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public ShowList loadState() throws FileNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "judowha"
        },
        "content": "        File directory \u003d new File(\"data\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "judowha"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "judowha"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "judowha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "judowha"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "judowha"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "judowha"
        },
        "content": "            seedu.duke.utility.Ui.showCreateFileError();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "judowha"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "judowha"
        },
        "content": "        ShowList shows \u003d new ShowList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "judowha"
        },
        "content": "        // we just assume that advanced users who manually change the file can adhere to the correct format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "judowha"
        },
        "content": "        loadWatchTimeDetail(s);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "judowha"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String name \u003d s.nextLine().substring(3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitSeason \u003d s.nextLine().split(\"Season: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int season \u003d Integer.parseInt(splitSeason[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitEpisodes \u003d s.nextLine().split(\"Episodes: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] episodeString \u003d splitEpisodes[1].split(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int[] episodes \u003d new int[season];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "judowha"
        },
        "content": "            for (int i \u003d 0; i \u003c season; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "judowha"
        },
        "content": "                episodes[i] \u003d Integer.parseInt(episodeString[i]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "judowha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitRating \u003d s.nextLine().split(\"Rating: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int rating \u003d Integer.parseInt(splitRating[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitReview \u003d s.nextLine().split(\"Review: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String review \u003d splitReview[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setReview(String.join(\" \", review));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitDuration \u003d s.nextLine().split(\"Duration: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int duration \u003d Integer.parseInt(splitDuration[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.setShow(name, new Show(name, season, episodes, duration));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setRating(rating);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitCurrentSeason \u003d s.nextLine().split(\"Current Season: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int currentSeason \u003d Integer.parseInt(splitCurrentSeason[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setCurrentSeason(currentSeason);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "judowha"
        },
        "content": "            String[] splitCurrentEpisode \u003d s.nextLine().split(\"Current Episode: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "judowha"
        },
        "content": "            int currentEpisode \u003d Integer.parseInt(splitCurrentEpisode[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setEpisodeWatched(currentEpisode);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return shows;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public LocalDate getRecordedDate() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return recordedDate;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public int getDurationWatchedToday() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return durationWatchedToday;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public int getDailyWatchLimit() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return dailyWatchLimit;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 13,
      "judowha": 128
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/WatchTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class WatchTime {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static LocalDate recordedDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static int durationWatchedToday;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static int dailyWatchLimit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * If no data, set durationWatchedToday to 0 and set recordedDate to LocalDate.now()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Default dailyWatchLimit to 60 minutes until user provides input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param recordedDate         the last date recorded when durationWatched is updated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param durationWatchedToday duration of shows watched today"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param dailyWatchLimit      total limit set by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public WatchTime(LocalDate recordedDate, int durationWatchedToday, int dailyWatchLimit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.recordedDate \u003d recordedDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.durationWatchedToday \u003d durationWatchedToday;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.dailyWatchLimit \u003d dailyWatchLimit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static int getDurationWatchedToday() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return durationWatchedToday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static LocalDate getRecordedDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return recordedDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static int getDailyWatchLimit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return dailyWatchLimit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static int getTimeLeftToday() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return dailyWatchLimit - dailyWatchLimit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static boolean isNewDay() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (currentDate.equals(recordedDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static boolean checkIfDifferentDay(LocalDate recordedDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (currentDate.equals(recordedDate)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void watchDurationUpdate(int showMinutes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (isNewDay()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            recordedDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            durationWatchedToday \u003d showMinutes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            durationWatchedToday +\u003d showMinutes;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Ui.printDailyWatchTimeLeft();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void watchLimitUpdate(int timeLimit) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        dailyWatchLimit \u003d timeLimit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printUpdatedTimeLimit(timeLimit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String userReportString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String response \u003d \"Date : \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d recordedDate.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "judowha"
        },
        "content": "        response +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d \"Time left today : \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int timeLeft \u003d dailyWatchLimit - durationWatchedToday;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        response +\u003d (timeLeft / 60);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        response +\u003d \" hour(s) \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        response +\u003d (timeLeft % 60);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        response +\u003d \" minutes. To update the time allocated to watching shows, use the \u0027updateTimeLimit\u0027 command.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String saveStateFormat() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");  //TODO: May not be necessary"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String resultString \u003d String.format(\"recordedDate: %s\", recordedDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d String.format(\"durationWatchedToday: %d\", durationWatchedToday);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d String.format(\"dailyWatchLimit: %d\", dailyWatchLimit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        resultString +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 31,
      "jazhten": 59,
      "judowha": 1,
      "shikai-zhou": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    String[] description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Add a new show."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public AddCommand(String[] input) throws NullPointerException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (input.length \u003c 3) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int numSeasons \u003d Integer.parseInt(input[2]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String[] tokenizedSeasons \u003d input[3].split(\",\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] seasonEpisodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (tokenizedSeasons.length !\u003d numSeasons) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        for (String s : tokenizedSeasons) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            seasonEpisodes[i] \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String name \u003d input[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int duration \u003d Integer.parseInt(input[4]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //check that the episodes do not exceed seasons"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        /* when the episode length is provided"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        * TODO: Allow user to add episode duration when adding a new show"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (input.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            String[] tokenized"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(input[1], numSeasons, seasonEpisodes, duration);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(name, show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 17,
      "shikai-zhou": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class AddReviewCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public AddReviewCommand(String input) throws ArrayIndexOutOfBoundsException,NullPointerException,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int rating \u003d Integer.parseInt(tokenizedInput[2]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        if (tokenizedInput.length \u003c 3) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else if (rating \u003c 0 || rating \u003e 10) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String showName \u003d tokenizedInput[1];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Show s \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        s.setRating(rating);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        s.setReview(String.join(\" \", tokenizedInput[3]));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(showName,s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printReviewAdded(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 3,
      "shikai-zhou": 16,
      "Bryanbeh1998": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ChangeRatingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class ChangeRatingCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ChangeRatingCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Changes a rating of a show the user requests to change."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName name of show which rating is to be changed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param targetRating  new rating to update"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void changeRating(String showName, int targetRating) throws NullPointerException,IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            if (targetRating \u003c 0 || targetRating \u003e 10) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                show.setRating(targetRating);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 14,
      "Bryanbeh1998": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ChangeReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class ChangeReviewCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public ChangeReviewCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void changeReview(String showName,String review) throws NullPointerException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        Show s \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        s.setReview(review);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(showName,s);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Command(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 17,
      "shikai-zhou": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ErrorHandling;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Deletes a show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName show to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws NullPointerException throws exception when show is not in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void delete(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            ShowList.getShowList().remove(showName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteRatingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteRatingCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteRatingCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Deletes a rating of a show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName show which rating is to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws NullPointerException throws exception when show is not in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void deleteRating(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            show.setRating(-1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            ShowList.setShow(showName,show);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteReviewCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteReviewCommand(String showName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void deleteReview(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            show.setReview(\"null\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            ShowList.setShow(showName,show);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class EditCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static Show show;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static String showName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public EditCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        showName \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void editSeasons(String editCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int numSeasons \u003d Integer.parseInt(editCommand.substring(7));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int initialNumSeasons \u003d show.getNumSeasons();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setNumSeasons(numSeasons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (numSeasons \u003e initialNumSeasons) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            episodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c initialNumSeasons; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d show.getRawEpisodesForSeason(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d initialNumSeasons; i \u003c numSeasons; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            episodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            //Started for 1 to reference the correct season number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c numSeasons; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d show.getRawEpisodesForSeason(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setNumEpisodesForSeasons(episodes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void editDuration(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int duration \u003d Integer.parseInt(tokenizedInput[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setEpisodeDuration(duration);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void processCommand() throws NullPointerException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean isShowInList \u003d ShowList.doesShowExist(showName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (!isShowInList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printShowNotInList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Ui.printEditPrompt();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            String editCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (editCommand.startsWith(\"name\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                show.setName(editCommand.substring(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            } else if (editCommand.startsWith(\"episode\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                String[] numOfEpisodes \u003d editCommand.substring(8).split(\",\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                int i \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                int[] intNumOfEpisodes \u003d new int[show.getNumSeasons()];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                for (String s : numOfEpisodes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                        intNumOfEpisodes[i] \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                        throw new NullPointerException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                //I put this below for now in case we need to add checks to ensure numOfEpisodes is not empty"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                if (i \u003d\u003d 0 || numOfEpisodes.length !\u003d show.getNumSeasons()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    throw new NullPointerException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                show.setNumEpisodesForSeasons(intNumOfEpisodes);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            } else if (editCommand.startsWith(\"season\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                editSeasons(editCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            } else if (editCommand.startsWith(\"duration\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                editDuration(editCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            } else if (editCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printEditShow(showName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 9,
      "jazhten": 35,
      "shikai-zhou": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "judowha"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "judowha"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public SearchCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "judowha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "judowha"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (inputs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public boolean processCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "judowha"
        },
        "content": "        String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "judowha"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "            Ui.printSearchSuccessful(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "judowha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "judowha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "judowha"
        },
        "content": "            Ui.printShowNotInList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "judowha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "judowha": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateShowEpisodeProgressCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class UpdateShowEpisodeProgressCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public UpdateShowEpisodeProgressCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() !\u003d 3) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    //INPUT : episode \"show\" \"episode\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int episode \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setEpisodeWatched(episode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printChangeEpisode(showName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "jazhten": 29,
      "shikai-zhou": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateShowSeasonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class UpdateShowSeasonCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    java.util.ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public UpdateShowSeasonCommand(String description, java.util.ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() \u003c 3) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();   //insufficient input elements"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    //INPUT : season \"show\" \"season\" \"episode (optional)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateSeasonOnly();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateSeasonAndEpisode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void updateSeasonAndEpisode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int episode \u003d Integer.parseInt(inputs.get(3));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setCurrentSeason(season, episode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printChangeSeason(showName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void updateSeasonOnly() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setCurrentSeason(season);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeSeason(showName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 45,
      "shikai-zhou": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateTimeLimitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.Ui.printBadInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class UpdateTimeLimitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public UpdateTimeLimitCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (inputs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //INPUT : updatetimelimit \u003cnew time\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Integer newTimeLimit \u003d Integer.parseInt((inputs.get(1)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            WatchTime.watchLimitUpdate(newTimeLimit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            printBadInputException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/WatchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class WatchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public WatchCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (inputs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Notifies the application that user has finished his current episode of a show"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * in which the current episode will be incremented by 1, and watch time will be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * The watchlist updates the show to a new season if required."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //INPUT : watch \u003cshow name\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int showEpisode \u003d show.getCurrentEpisode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int currentSeason \u003d show.getCurrentSeason();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int showSeason \u003d show.getNumSeasons();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int episodesInSeason \u003d show.getEpisodesForSeason(currentSeason);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean hasFinishedSeason \u003d (showEpisode \u003d\u003d episodesInSeason);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean isLastSeason \u003d (currentSeason \u003d\u003d showSeason);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean hasFinishedSeries \u003d (isLastSeason \u0026\u0026 hasFinishedSeason);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (hasFinishedSeries) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printFinishedAllSeasons(showName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else if (hasFinishedSeason) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int updatedSeason \u003d currentSeason + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            show.setCurrentSeason(updatedSeason);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            show.setEpisodeWatched(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printWatchingNewSeason(showName, updatedSeason);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeEpisode(showName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else if (!hasFinishedSeason) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            show.setEpisodeWatched(showEpisode + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeEpisode(showName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int showDuration \u003d show.getEpisodeDuration();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        WatchTime.watchDurationUpdate(showDuration);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 57,
      "jazhten": 2,
      "shikai-zhou": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/ErrorHandling.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles the various exceptions which may be encountered during the program\u0027s lifetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Some are slightly unnecessary but were included for the \u0027personality\u0027 of the Duke Bot"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class ErrorHandling extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public enum ExceptionResponse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_DESCRIPTION(\"\\tNo description\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_TIME_DATA(\"\\tNo time\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_UNIDENTIFIED_INPUT(\"\\tPlease input something\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_IO_EXCEPTION(\"\\tIO Error\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_SEARCH_DATE(\"\\tWhen is that???!!! Please put in a proper date in the format : \u0027yyyy-mm-dd\u0027\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        EXCEPTION_NOT_FOUND_EXCEPTION(\"\\tHey buddy, it seems like we don\u0027t have what you\u0027re looking for!\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        EXCEPTION_INVALID_INPUT(\"\\tI don\u0027t know what you just said.Try \" + (\"help\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" for a list of commands.\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_FORMAT(\"\\tIt seems like the format of the command is wrong, Try \" + (\"help\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \" for an explanation of the commands.\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_CREATE_FILE_ERROR(\"\\tError creating file.\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_EPISODES_INPUT_EXCEPTION(\"\\tThe number of episodes input doesn\u0027t match \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"the number of seasons. The show was not added\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        EXCEPTION_INVALID_RATING_INPUT(\"\\tSorry! This is an invalid rating! Try again!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        private String exception;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ExceptionResponse(String exceptionMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            this.exception \u003d exceptionMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return exception;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ErrorHandling(ExceptionResponse exception) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(exception.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 3,
      "jazhten": 36,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/InputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.ChangeReviewCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.DeleteRatingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.ChangeRatingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.SearchCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.UpdateShowEpisodeProgressCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.UpdateShowSeasonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.WatchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.commands.UpdateTimeLimitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.StringOperations.removeFirstWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.StringOperations.tokenizeStringArray;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "//@@author BenardoTang"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " * Represents a parser to process the commands inputted by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private boolean isBye;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public InputParser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.isBye \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public boolean isByeTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return isBye;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses the input given by user and calls specific Commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * while checking the validity of the input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command entered by user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return Command based on the user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String parseInput(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] singleWordInputs \u003d new String[]{\"bye\", \"list\", \"help\", \"watchtime\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String command \u003d StringOperations.getFirstWord(input).toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (splitInput.length \u003c 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (!Arrays.asList(singleWordInputs).contains(splitInput[0])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printByeMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.isBye \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printHelp();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"episode\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseEpisodeUpdateCommand(input, command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"season\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseSeasonUpdateCommand(input, command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"deleterating\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteRatingCommand(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printShowList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"changerating\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseChangeRatingCommand(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseAddCommand(input);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteCommand(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseEditCommand(input);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"watch\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseWatchCommand(input, command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"updatetimelimit\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseUpdateTimeLimitCommand(input, command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"watchtime\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseWatchTimeCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"addreview\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseAddReviewCommand(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"changereview\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseChangeReviewCommand(input);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"deletereview\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteReviewCommand(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseSearchCommand(command,input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNoInputException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for editing the details of a show in the watch list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input full input of user in string format."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is invalid or show is not specified by the user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the number of episodes input by the user is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseEditCommand(String input) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            EditCommand edit \u003d new EditCommand(tokenizedString.get(1));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            edit.processCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printSpecifyShowName();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidEpisodesInputException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for updating the user\u0027s watch time limit."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input full input of user in string format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param command command input by user in string format."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is invalid or unable to be processed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the command format input by the user is invalid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseUpdateTimeLimitCommand(String input, String command) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            UpdateTimeLimitCommand newTimeLimitCommand \u003d new UpdateTimeLimitCommand(command, tokenizedString);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            newTimeLimitCommand.processCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command when user has watched an episode of a show in the watch list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input full input of user in string format."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param command command input by user in string format."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or show was not specified."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the show specified is invalid or could not be found."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseWatchCommand(String input, String command) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            WatchCommand showWatched \u003d new WatchCommand(command, tokenizedString);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            showWatched.processCommand();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printSpecifyShowName();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseSearchCommand(String command,String input) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            SearchCommand searchCommand \u003d new SearchCommand(command,tokenizedString);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            searchCommand.processCommand();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printSpecifyShowName();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseEpisodeUpdateCommand(String input, String command) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e updateInputs \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        UpdateShowEpisodeProgressCommand updateShowProgress;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            updateShowProgress \u003d new UpdateShowEpisodeProgressCommand(command, updateInputs);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateShowProgress.processCommand();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseSeasonUpdateCommand(String input, String command) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e seasonInputs \u003d tokenizeStringArray(input);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        UpdateShowSeasonCommand updateShowSeason;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            updateShowSeason \u003d new UpdateShowSeasonCommand(command, seasonInputs);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateShowSeason.processCommand();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for deleting a rating in an existing show in the watch list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or invalid."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the existing rating is invalid or show could not be found."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteRatingCommand(String input) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteRatingCommand deleteShowRating \u003d new DeleteRatingCommand(input);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            deleteShowRating.deleteRating(input);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteRating(input);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for changing a rating in an existing show in the watch list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or the rating is invalid."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the input is invalid or show could not be found."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseChangeRatingCommand(String input) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int showRating \u003d Integer.parseInt(tokenizedInput[1]);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ChangeRatingCommand changeShowRating \u003d new ChangeRatingCommand(tokenizedInput[0]);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            changeShowRating.changeRating(tokenizedInput[0], showRating);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeRating(tokenizedInput[0], tokenizedInput[1]);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidRatingInput();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for adding a show into the watch list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or the format is invalid."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the format of episodes added is invalid."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseAddCommand(String input) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            new AddCommand(tokenizedInput);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidEpisodesInputException();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printShowAdded(tokenizedInput[1]);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command for deleting a show in the watch list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws IndexOutOfBoundsException if input is empty or the command format is invalid."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException      if the show could not be found."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteCommand(String input) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteCommand deletingShow \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            deletingShow.delete(input);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteShow(input);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Parses command to outline the user\u0027s current watch time details."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * These include the recorded date,duration watched today, and time limit set by the user"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseWatchTimeCommand() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printDailyWatchTracking();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Adds a review."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private  static void parseAddReviewCommand(String input) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            new AddReviewCommand(input);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidRatingInput();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseChangeReviewCommand(String input) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String showName \u003d tokenizedInput[0];"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String review \u003d tokenizedInput[1];"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ChangeReviewCommand changingReview \u003d new ChangeReviewCommand(showName);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            changingReview.changeReview(showName,review);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeReview(showName);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteReviewCommand(String input) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteReviewCommand deletingReview \u003d new DeleteReviewCommand(input);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            deletingReview.deleteReview(input);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteReview(input);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 360,
      "jazhten": 4,
      "Bryanbeh1998": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/SaveState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public interface SaveState {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void saveState() throws IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "    ShowList loadState() throws FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 10,
      "judowha": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/ShowList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class ShowList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static HashMap\u003cString, Show\u003e showList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ShowList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        showList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ShowList(HashMap\u003cString, Show\u003e showList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.showList \u003d showList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static Show getShow(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d showList.get(showName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        /* Do changes to show */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static boolean doesShowExist(String show) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return showList.containsKey(show);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void setShow(String showName, Show show) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        showList.put(showName, show);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public static HashMap\u003cString, Show\u003e getShowList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return showList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 4,
      "jazhten": 29,
      "shikai-zhou": 2,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/StringOperations.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class StringOperations {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Tokenize the user input into an argument array."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input              User input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return ArrayList of tokenized user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @throws NullPointerException if input is empty or invalid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cString\u003e tokenizeStringArray(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputArray \u003d new java.util.ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (String token : input.split(\" \")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            inputArray.add(token);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            size \u003d inputArray.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (size \u003e 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return inputArray;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Extracts the first word from user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return String containing the first word."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String getFirstWord(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input.substring(0, index).trim(); // Extracts first word."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * Removes the first word from user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     * @return string without first word or empty string if user input contains one word."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String removeFirstWord(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input.substring(index + 1).trim(); // Extracts after space."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 23,
      "jazhten": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "//@@author BenardoTang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " * Represents a Ui class that is responsible for Input/Output operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static final String SAVE_DIRECTORY \u003d \"data/userData.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String logo \u003d \" __          __  _______ _____ _    _ _   _ ________   _________ \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\\\ \\\\        / /\\\\|__   __/ ____| |  | | \\\\ | |  ____\\\\ \\\\ / /__   __|\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"  \\\\ \\\\  /\\\\  / /  \\\\  | | | |    | |__| |  \\\\| | |__   \\\\ V /   | |   \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"   \\\\ \\\\/  \\\\/ / /\\\\ \\\\ | | | |    |  __  | . ` |  __|   \u003e \u003c    | |   \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"    \\\\  /\\\\  / ____ \\\\| | | |____| |  | | |\\\\  | |____ / . \\\\   | |   \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"     \\\\/  \\\\/_/    \\\\_\\\\_|  \\\\_____|_|  |_|_| \\\\_|______/_/ \\\\_\\\\  |_|   \\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Welcome to WatchNext\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printDailyWatchTracking();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Type \" + (\"help\") + \" to get started!\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"________________________________________________________________________________\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printByeMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printSavedList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\" Bye. Thank you for using WatchNext \u003c3\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String helpIcon \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                \" __    __   _______  __      .______   \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|  |  |  | |   ____||  |     |   _  \\\\  \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|  |__|  | |  |__   |  |     |  |_)  | \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|   __   | |   __|  |  |     |   ___/  \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|  |  |  | |  |____ |  `----.|  |      \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    + \"|__|  |__| |_______||_______|| _|      \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(helpIcon);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The following options are available:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((\"help\") + \" - Views help\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"add\") + \" - Adds a show\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"edit\") + \" - Edits your show details\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"list\") + \" - Displays all your shows in thw watchlist\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"delete\") + \" - Deletes your show\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"deleterating\") + \" - Deletes rating of your show\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"changerating\") + \" - Changes rating of your show\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"addreview\") + \" - Adds a review to your show\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"changereview\") + \" - Changes review of your show\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"deletereview\") + \" - Deletes review of your show\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"episode\") + \" - Update your episode progress\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"season\") + \" - Update your season progress\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"search\") + \" - Look for your show in the watchlist\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"updatetimelimit\") + \" - Update your watch time limit\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"watch\") + \" - Update your watch progress\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"bye\") + \" - Exits the program\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Refer to our user guide for more help!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //Take out all empty/whitespace lines"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        while (isInputEmpty(userInput)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private boolean isInputEmpty(String rawInput) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return rawInput.trim().isEmpty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void promptUser() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Enter a command: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printShowList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watchlist:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        for (Show show : ShowList.showList.values()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(show.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDailyWatchTracking() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //Print when user starts program"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        LocalDate date \u003d WatchTime.getRecordedDate();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"It is \" + date + \".\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean isWatchLimitSet \u003d WatchTime.getDailyWatchLimit() !\u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (isWatchLimitSet) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Time spent on shows today: \" + WatchTime.getDurationWatchedToday() + \" minutes.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Watch limit is set at \" + WatchTime.getDailyWatchLimit() + \" minutes.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Watch time remaining: \" + WatchTime.getTimeLeftToday() + \" minutes.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else if (!isWatchLimitSet) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Daily time limit for watching shows has not been set.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"To update the time allocated to watching shows, use the \u0027updateTimeLimit\u0027 command.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Time spent on shows today: \" + WatchTime.getDurationWatchedToday() + \" minutes.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Unable to locate user watch time details. Please try running the program again.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printShowRating(String showName, String rating) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been updated to \" + (rating));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printAlertExceededTimeLimit(String showName, String rating) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been updated to \" + (rating));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeEpisode(String showName) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Updated current episode : \" + ShowList.getShow(showName).toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printReviewAdded(String showName) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your review for \" + (showName) + \" has been added.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printEditPrompt() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Input the detail of the show you want to change {name,season,episode,\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"duration} \");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"To finish editing, type \u0027done\u0027.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printEditShow(String showName) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Updated show details.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeSeason(String showName) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Updated current season : \" + ShowList.getShow(showName).toString());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeRating(String showName, String rating) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been updated to \" + (rating));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printChangeReview(String showName) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The review for \" + (showName) + \" has been changed\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDeleteRating(String showName) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDeleteReview(String showName) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.print(\"The review for \" + (showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDeleteShow(String showName) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printShowAdded(String showName) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((showName) + \" was added to your watchlist.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printSavedList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watchlist has been saved.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printFinishedAllSeasons(String showName) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"You have finished all seasons of \" + (showName) + \" !\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"If there is a new season, please add it using the \u0027edit\u0027 command and input the \u0027watch\u0027 \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \"command again.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printWatchingNewSeason(String showName, int newSeason) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"You are now at season \" +  newSeason + \" of \" + (showName) + \" !\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printIoException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_IO_EXCEPTION);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printSpecifyShowName() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Please specify show name\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printShowNotInList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The show that you have specified is not in the list.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printUpdatedTimeLimit(Integer newTime) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watch time limit has been updated to \" + newTime + \" minutes.\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            + \"\\n\" + WatchTime.userReportString());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printSearchSuccessful(String name) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The show: \" + name + \" is found, here is the detailed information: \");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ShowList.getShowList().get(name).toString());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidEpisodesInputException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_EPISODES_INPUT_EXCEPTION);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNoDescriptionException() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNoTimeException() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_NO_TIME_DATA);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNoInputException() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_UNIDENTIFIED_INPUT);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidDateException() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_SEARCH_DATE);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidFormatException() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_FORMAT);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printNotFoundException() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_NOT_FOUND_EXCEPTION);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printBadInputException() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_INPUT);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void showCreateFileError() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_CREATE_FILE_ERROR);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printInvalidRatingInput() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_RATING_INPUT);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDailyWatchTimeLeft() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(WatchTime.userReportString());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 301,
      "jazhten": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/ShowTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class ShowTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"friends\", show.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getNumSeasons() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, show.getNumSeasons());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getNumEpisodesForSeasons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(episodes, show.getNumEpisodesForSeasons());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getEpisodesForSeason() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(21, show.getEpisodesForSeason(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getRating() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setRating(5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(5, show.getRating());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getReview() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setReview(\"Best show ever :)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"Best show ever :)\", show.getReview());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 43
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "judowha"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static ShowList shows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "        shows \u003d new ShowList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "judowha"
        },
        "content": "        storage \u003d new Storage(Ui.SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "judowha"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes, 20);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "judowha"
        },
        "content": "        shows.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "        assertEquals(show, shows.getShow(\"friends\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "judowha"
        },
        "content": "    void saveState() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "judowha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "judowha"
        },
        "content": "            storage.saveState();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "judowha"
        },
        "content": "            assertEquals(shows.getShow(\"friends\").toString(), storage.loadState().getShow(\"friends\").toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "judowha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "judowha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "judowha": 37,
      "jazhten": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/WatchTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "judowha"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "judowha"
        },
        "content": "class WatchTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "    WatchTime limitation \u003d new WatchTime(LocalDate.of(2020,10,19),60,120);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": "    void userReportString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(\"Date : 2020-10-19\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                + \"Time left today : 1 hour(s) 0 minutes.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                        + \" To update the time allocated to watching shows, use the \u0027updateTimeLimit\u0027 command.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                limitation.userReportString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "judowha": 14,
      "shikai-zhou": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static AddCommand updateObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,29);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String[] inputExample \u003d {\"add\", \"friends\",  \"3\", \"21,10,12\",\"20\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        updateObject \u003d new AddCommand(inputExample);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(21, ShowList.getShow(\"friends\").getEpisodesForSeason(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 3,
      "shikai-zhou": 27
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/ChangeRatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class ChangeRatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void changeRating() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ChangeRatingCommand update \u003d new ChangeRatingCommand(\"friends\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        update.changeRating(\"friends\", 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(10,ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    Command command \u003d new Command(\"test command\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"test command\", command.getDescription());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void setDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        command.setDescription(\"set description\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"set description\", command.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void delete() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        DeleteCommand toDelete \u003d new DeleteCommand(\"friends\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        toDelete.delete(\"friends\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(null,ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteRatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class DeleteRatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void deleteRating() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        DeleteRatingCommand delete \u003d new DeleteRatingCommand(\"friends\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        delete.deleteRating(\"friends\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(-1,ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/RatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class RatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void rateShow() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes, 20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(5, ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 1,
      "Bryanbeh1998": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateShowEpisodeProgressCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class UpdateShowEpisodeProgressCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static UpdateShowEpisodeProgressCommand updateObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\",3, episodes,20);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        java.util.ArrayList\u003cString\u003e inputExample \u003d new java.util.ArrayList\u003c\u003e(Arrays.asList(\"episode\", \"friends\", \"3\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowEpisodeProgressCommand(\"episode\", inputExample);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 32
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateShowSeasonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class UpdateShowSeasonCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static UpdateShowSeasonCommand updateObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"season\", \"friends\", \"2\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowSeasonCommand(\"season\", inputExample);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(2, ShowList.getShow(\"friends\").getCurrentSeason());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommandWithEpisodes() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputExample2 \u003d new ArrayList\u003c\u003e(Arrays.asList(\"season\", \"friends\", \"3\", \"4\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowSeasonCommand(\"season\", inputExample2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, ShowList.getShow(\"friends\").getCurrentSeason());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(4, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 43
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateTimeLimitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "class UpdateTimeLimitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static UpdateTimeLimitCommand updateObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        WatchTime limitation \u003d new WatchTime(java.time.LocalDate.of(2020,10,19),60,120);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(WatchTime.getDailyWatchLimit(), 120);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"updatetimelimit\", \"420\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject \u003d new UpdateTimeLimitCommand(\"updatetimelimit\", inputExample);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(WatchTime.getDailyWatchLimit(), 420);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/WatchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "class WatchCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static WatchCommand updateObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes,20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        WatchTime limitation \u003d new WatchTime(java.time.LocalDate.of(2020,10,19),0,120);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(WatchTime.getDailyWatchLimit(), 120);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"watch\", \"friends\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject \u003d new WatchCommand(\"watch\", inputExample);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(2, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(WatchTime.getDurationWatchedToday(), 20);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/utility/InputParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "class InputParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private InputParser parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        parser \u003d new InputParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ShowList showList \u003d new ShowList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void isByeTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(false, parser.isByeTime());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"help\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_editCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_addCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"add Blacklist 1 10\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"add\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_ratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_changeratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_deleteratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_seasonCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_episodeCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_byeCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"bye\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"bye\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"list\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private String parseAndShowCommandType(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String result \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 72
    }
  }
]
