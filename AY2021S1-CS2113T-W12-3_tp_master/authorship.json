[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shikai-zhou": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jazhten Low | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhou Shikai | [Github](https://github.com/shikai-zhou) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Chen Jiqing | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Bryan Beh | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Benardo Tang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 1,
      "judowha": 1,
      "shikai-zhou": 1,
      "-": 4,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# WatchNext Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [1.a Purpose](#)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [1.b Scope](#1)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [2. Setting up](#)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [2.a Prerequisites](#)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [2.b Scope](#1)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [2.c Verifying the setup](#)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [2.d Before Writing Code](#1)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [3. Design](#3)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [4. Implementation](#4)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [5. Documentation](#5)   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [6. Testing](#6-)   "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [7. Dev Ops](#6--)  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [Appendices](#6--)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.a Purpose"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This guide aims to provide information for you: the developers, testers and future contributors of **WatchNext** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "such that you will have an easy reference for understanding the features implemented in **WatchNext**."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.b Scope"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The guide outlines the architecture and design decisions for the implementation of WatchNext.The intended audience of this "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "document are the developers, testers and future contributors of WatchNext."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This section will show you the requirements that you need to fulfill in order to quickly start contributing to this project in no time!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 2.a Prerequisites"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. **JDK `11`**  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The `WatchNext.jar` file is compiled using the Java version mentioned above. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. **IntelliJ IDEA** IDE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "IntelliJ has Gradle and JavaFx plugins installed by default."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " ### 2.b Setting up the project in your computer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " **Fork** this [repo](https://github.com/AY2021S1-CS2113T-W12-3/tp), and clone the fork to your computer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. You should set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "5. Click `Import Project`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "6. Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "7. Click `Open as Project`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "8. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "9. Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This will generate all the resources required by the application and tests."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " ### 2.c Verifying the setup"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. You can run `Duke` and try a few commands."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2. You can also run tests using our instructions for manual testing to explore our features."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " ### 2.d Before Writing Code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " 1. Set up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the master branch or to any PR. No set up required."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " 2. Learn the design"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " When you are ready to start coding, we recommend that you get some sense of the overall design by reading about WatchNext’s architecture [here](#3-design)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 5. Documentation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 6. Testing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 7. Dev Ops"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "##  Appendices"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 100,
      "-": 33
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# WatchNext"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "WatchNext is a Command Line Interface (CLI) program used to track their progress in the different shows they watch and also the upcoming shows they wish to watch.. This application is catered for teenagers or young adults, and is optimized for users who prefer to work with the CLI."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 3,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "# **WatchNext** User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [1.a What does **WatchNext** do?](#1a-what-does-watchnext-do)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [1.b. Why use **WatchNext**?](#1b-why-use-watchnext)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [1.c. What will this guide do?](#1c-what-will-this-guide-do)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [3. Command Format](#3-command-format)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* [4. Features](#4-features)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.a. Viewing Help](#4a-help---views-help)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.b. Adding shows](#4b-add---adds-a-show)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.c. Editing shows](#4c-edit---edits-your-show-details)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.d. Adding ratings](#4d-rating---modifies-rating-of-your-show)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.e. List shows](#4e-list---displays-all-your-shows-in-list)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.f. Deleting shows](#4f-delete---deletes-your-show)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.g. Deleting ratings](#4g-deleterating---deletes-rating-of-your-show)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.h. Change Rating](#4h-changerating---changes-rating-of-your-show)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.i. Update episode](#4i-episode---changes-the-episode-of-the-show-you-are-currently-watching)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.j. Update season](#4j-season---changes-the-season-of-the-show-you-are-currently-watching)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    + [4.k. Exiting **WatchNext**](#4k-bye---exits-the-program)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [5. Frequently Asked Questions](#5-faq)   "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "- [6. Command Summary](#6-command-summary)   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/quickstart.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.a What does **WatchNext** do?"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**WatchNext** is a program made for teenagers and young adults.For users who use multiple free streaming platforms or other open source stream websites,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "the application will track their progress in the different shows they watch, and the upcoming shows they wish to watch.In addition, it provides a timer "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "to limit your weekly show progress to help manage your time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**WatchNext** is optimized for users who prefer to work with the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.b Why use **WatchNext**?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**WatchNext** allows users who watch shows on multiple free streaming platforms or other open source stream websites.It is very difficult and especially taxing to track your favourite shows through browser bookmarks, "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "especially for younger teenagers and adults who serve a large part of the user demographic in consuming said media."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This motivated our team to create an application that would not only help track all your shows, but also potentially create a community where everyone will be able to share their favourite shows and their current watchlist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 1.c What will this guide do?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This guide aims to educate you on how to use our application by providing example usages of all its features. The features can be found in Section 4: “Features”."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Interested in using **WatchNext**? Jump to Section 2: “Quick Start” to get started!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Ensure that you have Java 11 installed in your Computer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1.Download the latest version from [here](https://github.com/AY2021S1-CS2113T-W12-3/tp)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "2.Copy the file to the folder you want to use as the home folder for your program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "3.Open a command window in that folder."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "4.Run the command `java -jar (Version Number).jar`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "*_(Version Number)_* refers to the name of our latest jar release."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 3. Command Format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. rating `SCORE`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "The maximum length for a Show or Movie’s `NAME` is 100 characters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.a `help` - Views help"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The help list contains information about all accepted commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `help`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `help`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/help.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.b `add` - Adds a show"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The `add` command adds a show into your existing watchlist."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  Format:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   `add \u003cSHOWNAME\u003e \u003cSEASON\u003e \u003cNUMBER OF EPISODES\u003e,\u003cEPISODE YOU ARE WATCHING\u003e`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  Example of usage:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `add Friends 2 10,10`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/add.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "#### 4.c `edit` - Edits your show details"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " The `edit` command edits the name or number of seasons/episodes an existing show in your watchlist."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "   Format:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     `edit \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "   Example of usage:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `edit Friends`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " Then you will be prompted to enter the fields you want to change such as:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " name, season, episode"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    Example of usage:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     `name F.r.i.e.n.d.s` , `season 2`, `episode 10,11`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "     "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": " When you have completed all changes, use `done`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/edit.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.d `rating` - Modifies rating of your show"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " The `rating` command gives a rating (out of 10) for an existing show in your watchlist."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Format:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `rating \u003cSHOWNAME\u003e \u003cSCORE\u003e`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Example of usage:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   `rating Friends 9`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Expected outcome:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003cimg src \u003d \"images/rating.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.e `list` - Displays all your shows in list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This command displays all existing shows in your watchlist in an easy-to-read format, including the episode and season that you are currently at."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Format:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    `list`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Example of usage:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   `list`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   Expected outcome:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u003cimg src \u003d \"images/list.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.f `delete` - Deletes your show"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " This command removes a specified show from the watchlist."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `delete \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `delete Friends`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/delete.PNG\" width \u003d \"450\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.g `deleterating` - Deletes rating of your show"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This command deletes the rating for an existing show in the watchlist."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `deleterating \u003cSHOWNAME\u003e`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `deleterating Friends`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/deleterating.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.h `changerating` - Changes rating of your show"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This command changes the rating for an existing show which already has a rating in the watchlist."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `changerating \u003cSHOWNAME\u003e \u003cNEWSCORE\u003e`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `changerating Friends 10`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/changerating.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.i `episode` - Changes the episode of the show you are currently watching"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This command updates the episode for an existing show that you currently have in your watchlist."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `episode \u003cSHOWNAME\u003e \u003cEPISODE\u003e`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `episode Friends 10`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/episode.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.j `season` - Changes the season of the show you are currently watching"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This command updates the season for an existing show that you currently have in your watchlist."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Format:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  `season \u003cSHOWNAME\u003e \u003cSEASON\u003e`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Example of usage:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `season Friends 3`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u003cimg src \u003d \"images/season.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "  "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " \u0026nbsp;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 4.k `bye` - Exits the program"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "This command exits the program."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " `bye`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u003cimg src \u003d \"images/bye.PNG\" width \u003d \"500\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 5. FAQ"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**Q**: Is my watchlist saved after i exit the program?"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "**A**: Of course! The watchlist is saved into a local storage file after every input entered by the user.The same file will be loaded up when you start **WatchNext** again."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "### 6. Command Summary"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Display help  `help`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Add show   `add Friends 2 10,10`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Edit show   `edit Friends`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Add rating  `rating Friends 9`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Show watchlist  `list`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Delete show   `delete Friends`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Change rating   `changerating Friends 10`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Delete rating  `deleterating Friends`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Update episode  `episode Friends 10`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Update season   `season Friends 3`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "* Exit program  `bye`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 243,
      "shikai-zhou": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.WatchTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.InputParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static seedu.duke.utility.Ui.SAVE_DIRECTORY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private ShowList shows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "            this.shows \u003d storage.loadState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.shows \u003d new ShowList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //TODO: Update this after state is loaded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //watchTime \u003d new WatchTime(LocalDate recordedDate, int durationWatchedToday, int dailyWatchLimit);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ui.hello();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        InputParser parseManager \u003d new InputParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        while (!parseManager.isByeTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printLineIcon();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                storage.saveState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String input \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            parseManager.parseInput(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        new Duke(SAVE_DIRECTORY).run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 14,
      "jazhten": 28,
      "judowha": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/Show.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Show {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int numSeasons;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int[] numEpisodesForSeasons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    protected int[][] durationEpisodeForSeasons; //The duration of each episode for each season"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String review;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected LocalDateTime showTime;   //The time of the show, maybe include date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int currentSeason;    //to keep track of watch progress"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected int currentEpisode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Show(String name, int numSeasons, int[] numEpisodesForSeasons) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numSeasons \u003d numSeasons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numEpisodesForSeasons \u003d numEpisodesForSeasons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.rating \u003d -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.review \u003d \"null\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentSeason \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getNumSeasons() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return numSeasons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int[] getNumEpisodesForSeasons() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return numEpisodesForSeasons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getEpisodesForSeason(int season) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return numEpisodesForSeasons[season - 1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getRawEpisodesForSeason(int season) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return numEpisodesForSeasons[season];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getCurrentSeason() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return currentSeason;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public int getCurrentEpisode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return currentEpisode;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getReview() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return review;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setReview(String review) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setNumSeasons(int numSeasons) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numSeasons \u003d numSeasons;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setNumEpisodesForSeasons(int[] numEpisodesForSeasons) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.numEpisodesForSeasons \u003d numEpisodesForSeasons;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setEpisodeWatched(int watchedEpisode) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d watchedEpisode;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setCurrentSeason(int season) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentSeason \u003d season;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Overload/overwrite? the previous setCurrentSeason method signature."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Should check with user if they want to input an episode else default it to 1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * as in the previous declaration of setCurrentSeason"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param season  season num"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param episode episode num"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setCurrentSeason(int season, int episode) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentEpisode \u003d episode;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.currentSeason \u003d season;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //TODO: Bernado\u0026jiqing verify if the new toString works well"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        StringBuilder des \u003d new StringBuilder(name + \" | \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"WatchHistory : S\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(currentSeason);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"E\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(currentEpisode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (rating !\u003d -1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            //TODO : make sure a review is always passed in with a rating"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(\"| Rating: \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(rating);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\" | : \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        des.append(\"Seasons \").append(numSeasons).append(\" | Episodes: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (int episode : numEpisodesForSeasons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(episode);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            des.append(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return des.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 8,
      "jazhten": 115,
      "shikai-zhou": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.SaveState;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Storage implements SaveState {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void saveState() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Map.Entry\u003cString, Show\u003e entry : ShowList.getShowList().entrySet()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            fw.write(index + \". \" + entry.getValue().getName() + System.lineSeparator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            fw.write(\"      Season: \" + entry.getValue().getNumSeasons() + System.lineSeparator());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String episodes \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d entry.getValue().getNumSeasons(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes \u003d episodes + entry.getValue().getEpisodesForSeason(i) + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            fw.write(\"      Episodes: \" + episodes + System.lineSeparator());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            fw.write(\"      Rating: \" + entry.getValue().getRating() + System.lineSeparator());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            fw.write(\"      Current Season: \" + entry.getValue().getCurrentSeason() + System.lineSeparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            fw.write(\"      Current Episode: \" + entry.getValue().getCurrentEpisode() + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            //this is another save format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String textToAdd\u003dindex+\". \"+entry.getValue().getName()+\" | Season: \"+entry.getValue().getNumSeasons()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    +\" | Episodes: \" +entry.getValue().getEpisodesForSeason(entry.getValue().getNumSeasons())+\" |"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    Rating: \"+entry.getValue().getRating();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "             */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public ShowList loadState() throws FileNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        File directory \u003d new File(\"data\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            seedu.duke.utility.Ui.showCreateFileError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "judowha"
        },
        "content": "        ShowList shows \u003d new ShowList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "judowha"
        },
        "content": "        //HashMap\u003cString, Show\u003e showList \u003d new java.util.HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        // we just assume that users will not change the contain in the file then the format will be fixed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String name \u003d s.nextLine().substring(3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitSeason \u003d s.nextLine().split(\"Season: \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003d Integer.parseInt(splitSeason[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitEpisodes \u003d s.nextLine().split(\"Episodes: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] episodeString \u003d splitEpisodes[1].split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int[] episodes \u003d new int[season];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c season; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d Integer.parseInt(episodeString[i]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitRating \u003d s.nextLine().split(\"Rating: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int rating \u003d Integer.parseInt(splitRating[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            shows.setShow(name, new Show(name, season, episodes));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "judowha"
        },
        "content": "            //shows(name, new Show(name, season, episodes));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "judowha"
        },
        "content": "            shows.getShow(name).setRating(rating);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] splitCurrentSeason \u003d s.nextLine().split(\"Current Season: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int currentSeason \u003d Integer.parseInt(splitCurrentSeason[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            shows.getShow(name).setCurrentSeason(currentSeason);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] splitCurrentEpisode \u003d s.nextLine().split(\"Current Episode: \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int currentEpisode \u003d Integer.parseInt(splitCurrentEpisode[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            shows.getShow(name).setEpisodeWatched(currentEpisode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "judowha"
        },
        "content": "            //showList.get(name).setRating(rating);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            //another load format which corresponding to the backup save format"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String contain\u003ds.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitName\u003dcontain.split(\" | Season: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String name\u003dsplitName[0].substring(3);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitSeason\u003dsplitName[1].split(\" | Episodes: \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003dInteger.parseInt(splitSeason[0]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String[] splitEpisodes\u003dsplitName[1].split(\" | Rating: \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int episodes \u003dInteger.parseInt(splitEpisodes[0]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int Rating \u003d Integer.parseInt(splitEpisodes[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            showList.put(name,Show())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazhten"
        },
        "content": "             */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "judowha"
        },
        "content": "        return shows;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 20,
      "jazhten": 84,
      "judowha": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/classes/WatchTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class WatchTime {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private LocalDate recordedDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int durationWatchedToday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private int dailyWatchLimit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * If no data, set durationWatchedToday to 0 and set recordedDate to LocalDate.now()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * Default dailyWatchLimit to 60 minutes until user provides input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param recordedDate         the last date recorded when durationWatched is updated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param durationWatchedToday duration of shows watched today"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     * @param dailyWatchLimit      total limit set by user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public WatchTime(LocalDate recordedDate, int durationWatchedToday, int dailyWatchLimit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.recordedDate \u003d recordedDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.durationWatchedToday \u003d durationWatchedToday;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.dailyWatchLimit \u003d dailyWatchLimit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public boolean isNewDay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (currentDate \u003d\u003d this.recordedDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void watchDurationUpdate(int showMinutes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (isNewDay()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            this.recordedDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            durationWatchedToday \u003d showMinutes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            durationWatchedToday +\u003d showMinutes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //TODO: Ui.printDailyWatchTimeLeft();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String userReportString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String response \u003d \"Date : \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d recordedDate.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d \" Time left today : \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d (dailyWatchLimit - durationWatchedToday);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        response +\u003d \" minutes. To update the time allocated to watching shows, use the \u0027updateTimeLimit\u0027 command\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return recordedDate.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //TODO: Jiqing to update for saving purposes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //Use the LocalDate.parse(String) to convert I think. \u003c3 jaz"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 58,
      "shikai-zhou": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    String[] description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * Add a new show."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public AddCommand(String[] input) throws NullPointerException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (input.length \u003c 3) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int numSeasons \u003d Integer.parseInt(input[2]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String[] tokenizedSeasons \u003d input[3].split(\",\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] seasonEpisodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (tokenizedSeasons.length !\u003d numSeasons) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        for (String s : tokenizedSeasons) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            seasonEpisodes[i] \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //check that the episodes do not exceed seasons"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(input[1], numSeasons, seasonEpisodes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String name \u003d input[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(name, show);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 17,
      "shikai-zhou": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ChangeRatingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class ChangeRatingCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ChangeRatingCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Changes a rating of a show the user requests to change."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName name of show which rating is to be changed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param targetRating  new rating to update"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void changeRating(String showName, int targetRating) throws NullPointerException,IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            if (targetRating \u003c 0 || targetRating \u003e 10) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                show.setRating(targetRating);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 14,
      "Bryanbeh1998": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public Command(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 17,
      "shikai-zhou": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ErrorHandling;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Deletes a show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName show to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws NullPointerException throws exception when show is not in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void delete(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            ShowList.getShowList().remove(showName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteRatingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class DeleteRatingCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public DeleteRatingCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Deletes a rating of a show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName show which rating is to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws NullPointerException throws exception when show is not in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void deleteRating(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            show.setRating(-1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            ShowList.setShow(showName,show);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "public class EditCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static Show show;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static String showName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public EditCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        showName \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void editSeasons(String editCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int numSeasons \u003d Integer.parseInt(editCommand.substring(7));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int initialNumSeasons \u003d show.getNumSeasons();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setNumSeasons(numSeasons);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (numSeasons \u003e initialNumSeasons) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            episodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c initialNumSeasons; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d show.getRawEpisodesForSeason(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d initialNumSeasons; i \u003c numSeasons; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            episodes \u003d new int[numSeasons];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            //Started for 1 to reference the correct season number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            for (int i \u003d 0; i \u003c numSeasons; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                episodes[i] \u003d show.getRawEpisodesForSeason(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setNumEpisodesForSeasons(episodes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void processCommand() throws NullPointerException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Ui.printEditPrompt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            String editCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            if (editCommand.startsWith(\"name\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                show.setName(editCommand.substring(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            } else if (editCommand.startsWith(\"episode\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                String[] numOfEpisodes \u003d editCommand.substring(8).split(\",\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                int i \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                int[] intNumOfEpisodes \u003d new int[show.getNumSeasons()];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                for (String s : numOfEpisodes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                        intNumOfEpisodes[i] \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                        throw new NullPointerException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                //I put this below for now in case we need to add checks to ensure numOfEpisodes is not empty"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                if (i \u003d\u003d 0 || numOfEpisodes.length !\u003d show.getNumSeasons()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                    throw new NullPointerException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                show.setNumEpisodesForSeasons(intNumOfEpisodes);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            } else if (editCommand.startsWith(\"season\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                editSeasons(editCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            } else if (editCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Ui.printEditShow(showName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 3,
      "jazhten": 33,
      "shikai-zhou": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/RatingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "public class RatingCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    String showName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public RatingCommand(String showName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * Adds rating to a show."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param showName show which is to be rated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @param rating rating to be given to show"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws NullPointerException throws exception when show is not in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     * @throws IndexOutOfBoundsException throws exception when input is an invalid rating"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public void rateShow(String showName, int rating) throws NullPointerException,IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        if (ShowList.getShowList().containsKey(showName)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            if (rating \u003c 0 || rating \u003e 10) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "                Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                show.setRating(rating);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                ShowList.setShow(showName,show);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 15,
      "Bryanbeh1998": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateShowEpisodeProgressCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class UpdateShowEpisodeProgressCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public UpdateShowEpisodeProgressCommand(String description, ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() !\u003d 3) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    //INPUT : episode \"show\" \"episode\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int episode \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setEpisodeWatched(episode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printChangeEpisode(showName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "jazhten": 29,
      "shikai-zhou": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UpdateShowSeasonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class UpdateShowSeasonCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    java.util.ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public UpdateShowSeasonCommand(String description, java.util.ArrayList\u003cString\u003e inputs) throws NullPointerException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() \u003c 3) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            throw new NullPointerException();   //insufficient input elements"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    //INPUT : season \"show\" \"season\" \"episode (optional)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (inputs.size() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateSeasonOnly();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateSeasonAndEpisode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void updateSeasonAndEpisode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int episode \u003d Integer.parseInt(inputs.get(3));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setCurrentSeason(season, episode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printChangeSeason(showName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void updateSeasonOnly() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            String showName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            int season \u003d Integer.parseInt(inputs.get(2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Show show \u003d ShowList.getShow(showName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            show.setCurrentSeason(season);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            ShowList.setShow(showName, show);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeSeason(showName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 45,
      "shikai-zhou": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/ErrorHandling.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Handles the various exceptions which may be encountered during the program\u0027s lifetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Some are slightly unnecessary but were included for the \u0027personality\u0027 of the Duke Bot"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class ErrorHandling extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public enum ExceptionResponse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_DESCRIPTION(\"\\tNo description\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_NO_TIME_DATA(\"\\tNo time\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_UNIDENTIFIED_INPUT(\"\\tPlease input something\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_IO_EXCEPTION(\"\\tIO Error\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_SEARCH_DATE(\"\\tWhen is that???!!! Please put in a proper date in the format : \u0027yyyy-mm-dd\u0027\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        EXCEPTION_NOT_FOUND_EXCEPTION(\"\\tHey buddy, it seems like we don\u0027t have what you\u0027re looking for!\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        EXCEPTION_INVALID_INPUT(\"\\tI don\u0027t know what you just said.Try \" + (\"help\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" for a list of commands.\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_FORMAT(\"\\tIt seems like the format of the command is wrong, Try \" + (\"help\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \" for an explanation of the commands.\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_CREATE_FILE_ERROR(\"\\tError creating file.\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        EXCEPTION_INVALID_EPISODES_INPUT_EXCEPTION(\"\\tThe number of episodes input doesn\u0027t match \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"the number of seasons. The show was not added\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        EXCEPTION_INVALID_RATING_INPUT(\"\\tSorry! This is an invalid rating! Try again!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        private String exception;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ExceptionResponse(String exceptionMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            this.exception \u003d exceptionMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return exception;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ErrorHandling(ExceptionResponse exception) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        super(exception.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 3,
      "jazhten": 36,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/InputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.ChangeRatingCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.DeleteRatingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.RatingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.UpdateShowEpisodeProgressCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import seedu.duke.commands.UpdateShowSeasonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Represents a parser to process the commands inputted by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private boolean isBye;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public InputParser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.isBye \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public boolean isByeTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return isBye;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String parseInput(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        String[] singleWordInputs \u003d new String[]{\"bye\", \"list\", \"help\", \"watchtime\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String command \u003d StringOperations.getFirstWord(input).toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (splitInput.length \u003c 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            if (!Arrays.asList(singleWordInputs).contains(splitInput[0])) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printByeMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            this.isBye \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printHelp();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"episode\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            parseEpisodeUpdateCommand(input, command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"season\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            parseSeasonUpdateCommand(input, command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"rating\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseAddRatingCommand(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"deleterating\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteRatingCommand(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printShowList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"changerating\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseChangeRatingCommand(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            parseAddCommand(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseDeleteCommand(input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            parseEditCommand(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        case \"updatetimelimit\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            parseUpdateTimeLimitCommand(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        case \"watchtime\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            parseWatchTimeCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printNoInputException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private static void parseEditCommand(String input) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e tokenizedString \u003d StringOperations.tokenizeStringArray(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            EditCommand edit \u003d new EditCommand(tokenizedString.get(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            edit.processCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            System.out.println(\"Please specify show name\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidEpisodesInputException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseUpdateTimeLimitCommand(String input) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        input \u003d StringOperations.removeFirstWord(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int newWatchLimit \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            WatchTime changeWatchLimit \u003d new WatchTime(//insert args here);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            changeWatchLimit.watchDurationUpdate(newWatchLimit);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private static void parseEpisodeUpdateCommand(String input, String command) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e updateInputs \u003d StringOperations.tokenizeStringArray(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        UpdateShowEpisodeProgressCommand updateShowProgress;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateShowProgress \u003d new UpdateShowEpisodeProgressCommand(command, updateInputs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateShowProgress.processCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private static void parseSeasonUpdateCommand(String input, String command) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e seasonInputs \u003d StringOperations.tokenizeStringArray(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        UpdateShowSeasonCommand updateShowSeason;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            updateShowSeason \u003d new UpdateShowSeasonCommand(command, seasonInputs);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateShowSeason.processCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseAddRatingCommand(String input) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        input \u003d StringOperations.removeFirstWord(input);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int showRating \u003d Integer.parseInt(tokenizedInput[1]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            RatingCommand newShowRating \u003d new RatingCommand(tokenizedInput[0]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            newShowRating.rateShow(tokenizedInput[0], showRating);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printShowRating(tokenizedInput[0], tokenizedInput[1]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Ui.printInvalidRatingInput();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteRatingCommand(String input) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        input \u003d StringOperations.removeFirstWord(input);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteRatingCommand deleteShowRating \u003d new DeleteRatingCommand(input);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            deleteShowRating.deleteRating(input);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteRating(input);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseChangeRatingCommand(String input) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        input \u003d StringOperations.removeFirstWord(input);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            int showRating \u003d Integer.parseInt(tokenizedInput[1]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            ChangeRatingCommand changeShowRating \u003d new ChangeRatingCommand(tokenizedInput[0]);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            changeShowRating.changeRating(tokenizedInput[0], showRating);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printChangeRating(tokenizedInput[0], tokenizedInput[1]);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Ui.printInvalidRatingInput();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    private static void parseAddCommand(String input) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String[] tokenizedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "            new AddCommand(tokenizedInput);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidEpisodesInputException();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printInvalidFormatException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Ui.printShowAdded(tokenizedInput[1]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void parseDeleteCommand(String input) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        input \u003d StringOperations.removeFirstWord(input);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        DeleteCommand deletingShow \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            deletingShow.delete(input);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Ui.printDeleteShow(input);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "            Ui.printNotFoundException();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    private static void parseWatchTimeCommand() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        Ui.printDailyWatchTracking();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 89,
      "jazhten": 116,
      "shikai-zhou": 16,
      "Bryanbeh1998": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/SaveState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public interface SaveState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void saveState() throws IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": "    ShowList loadState() throws FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 13,
      "judowha": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/ShowList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class ShowList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static HashMap\u003cString, Show\u003e showList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ShowList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        showList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public ShowList(HashMap\u003cString, Show\u003e showList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        this.showList \u003d showList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static Show getShow(String showName) throws NullPointerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d showList.get(showName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        /* Do changes to show */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void setShow(String showName, Show show) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        showList.put(showName, show);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public static HashMap\u003cString, Show\u003e getShowList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        return showList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 29,
      "shikai-zhou": 2,
      "Bryanbeh1998": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/StringOperations.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class StringOperations {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static ArrayList\u003cString\u003e tokenizeStringArray(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputArray \u003d new java.util.ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (String token : input.split(\" \")) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            inputArray.add(token);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            size \u003d inputArray.size();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            Ui.printBadInputException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (size \u003e 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return inputArray;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String getFirstWord(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input.substring(0, index).trim(); // Extracts first word."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static String removeFirstWord(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            return input.substring(index + 1).trim(); // Extracts after space."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "jazhten": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/utility/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static java.util.Calendar.getInstance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": " * Represents a Ui class that is responsible for Input/Output operations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static final String SAVE_DIRECTORY \u003d \"data/showList.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String logo \u003d \" __          __  _______ _____ _    _ _   _ ________   _________ \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \" \\\\ \\\\        / /\\\\|__   __/ ____| |  | | \\\\ | |  ____\\\\ \\\\ / /__   __|\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"  \\\\ \\\\  /\\\\  / /  \\\\  | | | |    | |__| |  \\\\| | |__   \\\\ V /   | |   \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"   \\\\ \\\\/  \\\\/ / /\\\\ \\\\ | | | |    |  __  | . ` |  __|   \u003e \u003c    | |   \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"    \\\\  /\\\\  / ____ \\\\| | | |____| |  | | |\\\\  | |____ / . \\\\   | |   \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"     \\\\/  \\\\/_/    \\\\_\\\\_|  \\\\_____|_|  |_|_| \\\\_|______/_/ \\\\_\\\\  |_|   \\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Welcome to WatchNext\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printDailyWatchTracking();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Type \" + (\"help\") + \" to get started!\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"________________________________________________________________________________\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printByeMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printSavedList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\" Bye. Thank you for using WatchNext \u003c3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String helpIcon \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                \" __    __   _______  __      .______   \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                        + \"|  |  |  | |   ____||  |     |   _  \\\\  \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                        + \"|  |__|  | |  |__   |  |     |  |_)  | \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                        + \"|   __   | |   __|  |  |     |   ___/  \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                        + \"|  |  |  | |  |____ |  `----.|  |      \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                        + \"|__|  |__| |_______||_______|| _|      \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(helpIcon);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"The following options are available:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((\"help\") + \" - Views help\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"add\") + \" - Adds a show\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"edit\") + \" - Edits your show details\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"rating\") + \" - Set rating of your show\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"list\") + \" - Displays all your shows in list\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"delete\") + \" - Deletes your show\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"deleterating\") + \" - Deletes rating of your show\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"changerating\") + \" - Changes rating of your show\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"episode\") + \" - Update your episode progress\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"season\") + \" - Update your season progress\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazhten"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                + (\"bye\") + \" - Exits the program\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Refer to our user guide for more help!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //Take out all empty/whitespace lines"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        while (isInputEmpty(userInput)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private boolean isInputEmpty(String rawInput) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return rawInput.trim().isEmpty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printLineIcon() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"Enter a command: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printShowList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"Your watchlist:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        for (Show show : ShowList.showList.values()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazhten"
        },
        "content": "            System.out.println(show.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDailyWatchTracking() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //Print when user starts program"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Date date \u003d getInstance().getTime();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"It is \" + date + \" today.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Time spent on shows today: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Watch time remaining \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printDailyWatchTimeRemaining() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //System.out.println(\"Showtime left : \" + watchTime.userReportString() /*the object*/);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printShowRating(String showName, String rating) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been updated to \" + (rating));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printChangeEpisode(String showName) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"Updated current episode : \" + ShowList.getShow(showName).toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void printEditPrompt() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.out.println(\"What do you want to change , input done to stop editing\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        System.out.println(\"{name,season,episode}\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void printEditShow(String showName) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Updated show details.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printChangeSeason(String showName) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(\"Updated current season : \" + ShowList.getShow(showName).toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printChangeRating(String showName, String rating) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been updated to \" + (rating));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printDeleteRating(String showName) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"The rating for \" + (showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printDeleteShow(String showName) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((showName) + \" has been deleted.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printShowAdded(String showName) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println((showName) + \" was added to your watchlist.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void queryEditShow(String showName) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"What details would you like to edit for \" + (showName) + \"?\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printSavedList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Your watchlist has been saved.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printIoException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_IO_EXCEPTION);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printInvalidEpisodesInputException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_EPISODES_INPUT_EXCEPTION);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printNoDescriptionException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printNoTimeException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_NO_TIME_DATA);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printNoInputException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_UNIDENTIFIED_INPUT);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printInvalidDateException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_SEARCH_DATE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printInvalidFormatException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_FORMAT);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printNotFoundException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_NOT_FOUND_EXCEPTION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printBadInputException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_INPUT);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void showCreateFileError() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_CREATE_FILE_ERROR);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    public static void printInvalidRatingInput() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        System.out.println(ErrorHandling.ExceptionResponse.EXCEPTION_INVALID_RATING_INPUT);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void printDailyWatchTimeLeft() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //System.out.println(\"Showtime left : \" + watchTime.userReportString() /*the object*/);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        //TODO: format the ui to print the time left to the user upon watching a new episode"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 72,
      "jazhten": 156,
      "shikai-zhou": 6,
      "Bryanbeh1998": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/ShowTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class ShowTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"friends\", show.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getNumSeasons() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, show.getNumSeasons());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getNumEpisodesForSeasons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(episodes, show.getNumEpisodesForSeasons());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getEpisodesForSeason() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(21, show.getEpisodesForSeason(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getRating() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setRating(5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(5, show.getRating());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getReview() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        show.setReview(\"Best show ever :)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"Best show ever :)\", show.getReview());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "jazhten": 43
    }
  },
  {
    "path": "src/test/java/seedu/duke/classes/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "judowha"
        },
        "content": "package seedu.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "judowha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.commands.UpdateShowEpisodeProgressCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "judowha"
        },
        "content": "import seedu.duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "judowha"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "judowha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "judowha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "judowha"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static ShowList shows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "judowha"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "judowha"
        },
        "content": "        shows \u003d new ShowList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "judowha"
        },
        "content": "        storage \u003d new Storage(Ui.SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "judowha"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "judowha"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "judowha"
        },
        "content": "        shows.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "judowha"
        },
        "content": "        assertEquals(show, shows.getShow(\"friends\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "judowha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "judowha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "judowha"
        },
        "content": "    void saveState() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "judowha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "judowha"
        },
        "content": "            storage.saveState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "judowha"
        },
        "content": "            assertEquals(shows.getShow(\"friends\").toString(), storage.loadState().getShow(\"friends\").toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "judowha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "judowha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "judowha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "judowha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "judowha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "judowha": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static AddCommand updateObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        String[] inputExample \u003d {\"add\", \"friends\",  \"3\", \"21,10,12\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        updateObject \u003d new AddCommand(inputExample);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    public void processCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "        assertEquals(21, ShowList.getShow(\"friends\").getEpisodesForSeason(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shikai-zhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 3,
      "shikai-zhou": 27
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/ChangeRatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class ChangeRatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void changeRating() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ChangeRatingCommand update \u003d new ChangeRatingCommand(\"friends\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        update.changeRating(\"friends\", 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(10,ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    Command command \u003d new Command(\"test command\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"test command\", command.getDescription());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void setDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        command.setDescription(\"set description\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(\"set description\", command.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void delete() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        DeleteCommand toDelete \u003d new DeleteCommand(\"friends\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        toDelete.delete(\"friends\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(null,ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteRatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class DeleteRatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void deleteRating() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        DeleteRatingCommand delete \u003d new DeleteRatingCommand(\"friends\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        delete.deleteRating(\"friends\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(-1,ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/RatingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "class RatingCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    void rateShow() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.setShow(\"friends\",show);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        ShowList.getShow(\"friends\").setRating(5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "        assertEquals(5, ShowList.getShow(\"friends\").getRating());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bryanbeh1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bryanbeh1998": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateShowEpisodeProgressCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class UpdateShowEpisodeProgressCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static UpdateShowEpisodeProgressCommand updateObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\",3, episodes);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        java.util.ArrayList\u003cString\u003e inputExample \u003d new java.util.ArrayList\u003c\u003e(Arrays.asList(\"episode\", \"friends\", \"3\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowEpisodeProgressCommand(\"episode\", inputExample);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 32
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UpdateShowSeasonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazhten"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.classes.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import seedu.duke.utility.ShowList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazhten"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazhten"
        },
        "content": "class UpdateShowSeasonCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static UpdateShowSeasonCommand updateObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        new ShowList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        int[] episodes \u003d new int[]{21, 10, 12};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        Show show \u003d new Show(\"friends\", 3, episodes);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ShowList.setShow(\"friends\", show);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(show, ShowList.getShow(\"friends\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputExample \u003d new ArrayList\u003c\u003e(Arrays.asList(\"season\", \"friends\", \"2\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowSeasonCommand(\"season\", inputExample);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(2, ShowList.getShow(\"friends\").getCurrentSeason());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazhten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    void processCommandWithEpisodes() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        ArrayList\u003cString\u003e inputExample2 \u003d new ArrayList\u003c\u003e(Arrays.asList(\"season\", \"friends\", \"3\", \"4\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject \u003d new UpdateShowSeasonCommand(\"season\", inputExample2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        updateObject.processCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(3, ShowList.getShow(\"friends\").getCurrentSeason());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazhten"
        },
        "content": "        assertEquals(4, ShowList.getShow(\"friends\").getCurrentEpisode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazhten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazhten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazhten": 43
    }
  },
  {
    "path": "src/test/java/seedu/duke/utility/InputParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package seedu.duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "class InputParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private InputParser parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        parser \u003d new InputParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        ShowList showList \u003d new ShowList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    void isByeTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(false, parser.isByeTime());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"help\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_editCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_addCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"add Blacklist 1 10\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"add\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_ratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_changeratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_deleteratingCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_seasonCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_episodeCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_byeCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"bye\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"bye\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void parse_listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        assertEquals(\"list\",parseAndShowCommandType(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private String parseAndShowCommandType(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        final String result \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 72
    }
  }
]
