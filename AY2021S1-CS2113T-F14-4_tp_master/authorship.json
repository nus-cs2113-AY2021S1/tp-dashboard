[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/test/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"   \u003e Event :compileJava"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"   \u003e Event :processResources NO-SOURCE"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"   \u003e Event :classes"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   "},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"   \u003e Event :Duke.main()"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   "},{"lineNumber":25,"author":{"gitId":"-"},"content":"   What is your name?"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Type some word and press enter to let the execution proceed to the end."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Build automation using Gradle"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Testing"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"### I/O redirection tests"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"### JUnit tests"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"* A skeleton JUnit test (`src/test/java/seedu/test/DukeTest.java`) is provided with this project template. "},{"lineNumber":43,"author":{"gitId":"-"},"content":"* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Checkstyle"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* A sample CheckStyle rule configuration is provided in this project."},{"lineNumber":48,"author":{"gitId":"-"},"content":"* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"## CI using GitHub Actions"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"## Documentation"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"`/docs` folder contains a skeleton version of the project documentation."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"Steps for publishing documentation to the public: "},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   If you are using this project template for a team project, go to the team fork on GitHub."},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. Click on the `settings` tab."},{"lineNumber":62,"author":{"gitId":"-"},"content":"1. Scroll down to the `GitHub Pages` section."},{"lineNumber":63,"author":{"gitId":"-"},"content":"1. Set the `source` as `master branch /docs folder`."},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Optionally, use the `choose a theme` button to choose a theme for your documentation."}],"authorContributionMap":{"-":58,"Lee-Juntong":6}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"    mainClassName \u003d \"NuSchedule\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    archiveBaseName \u003d \"TPv1.0\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    enableAssertions \u003d true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":""}],"authorContributionMap":{"-":44,"Lee-Juntong":4}},{"path":"data/bus_stops.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"EA:B2,C,BTC2"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":"Raffles Hall:B2,C"},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"Information Technology:A2,B1,B2,D1"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"Opp YIH:A2,B1,B2,D1"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"NUS Museum:A2,BTC1,BTC2,C,D1,D2"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"YIH:A1,B1,BTC1,D1"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"CLB:A1,B1,BTC1,D1"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"LT13:A1,B,D1,BTC1"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"AS5:A1,B,D1,BTC1"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"Ventus:A2,A2E,B,D1"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"BIZ2:A1,A1E,D1,BTC1"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"Opp NUSSU:A2,D1"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"Opp HSSML:A2,D1"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"Opp UHC:A1,C,D2"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"COM2:A1,A2,B,D1"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"UTown:D1,D2,B1,B1,C,BTC"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"PGP:A1"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"LT27:A1,A1E,C,D2"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"S17:A2,A2E,C,D2"}],"authorContributionMap":{"jiaaaqi":19}},{"path":"data/locations.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"BLK/EA/EA"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":"BLK/EA/Information Technology"},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"BLK/E1A/EA"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"BLK/EW1/EA,Information Technology"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"BLK/EW1A/EA"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"BLK/E2/EA"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"BLK/E3/EA,Raffles Hall"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"BLK/E3A/EA"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"BLK/E4/Information Technology"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"BLK/E4A/Opp YIH,YIH"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"BLK/E5/Information Technology"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"BLK/E5A/Raffles Hall"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"BLK/E6/Opp YIH,YIH"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"BLK/IT/Information Technology,CLB"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS1/CLB,LT13"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS2/Ventus,LT13"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS3/Ventus,LT13"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS4/LT13,AS5"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS5/AS5"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS6/CLB,COM2"},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS7/Ventus,LT13"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"BLK/AS8/CLB"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"BLK/SDE1/IT"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"BLK/SDE2/IT"},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"BLK/SDE3/EA"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"BLK/SDE4/IT"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"BLK/CELC/IT"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"BLK/S1/LT27"},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"BLK/S2/LT27"},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"BLK/S3/LT27"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"BLK/S4/LT27"},{"lineNumber":32,"author":{"gitId":"jiaaaqi"},"content":"BLK/S5/LT27"},{"lineNumber":33,"author":{"gitId":"jiaaaqi"},"content":"BLK/S6/LT27"},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"BLK/S7/LT27"},{"lineNumber":35,"author":{"gitId":"jiaaaqi"},"content":"BLK/S8/LT27"},{"lineNumber":36,"author":{"gitId":"jiaaaqi"},"content":"BLK/S9/LT27"},{"lineNumber":37,"author":{"gitId":"jiaaaqi"},"content":"BLK/S10/LT27"},{"lineNumber":38,"author":{"gitId":"jiaaaqi"},"content":"BLK/S11/LT27"},{"lineNumber":39,"author":{"gitId":"jiaaaqi"},"content":"BLK/S12/LT27"},{"lineNumber":40,"author":{"gitId":"jiaaaqi"},"content":"BLK/S13/LT27"},{"lineNumber":41,"author":{"gitId":"jiaaaqi"},"content":"BLK/S14/LT27"},{"lineNumber":42,"author":{"gitId":"jiaaaqi"},"content":"BLK/S15/LT27"},{"lineNumber":43,"author":{"gitId":"jiaaaqi"},"content":"BLK/S16/LT27"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"BLK/S17/S17,LT27"},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD1/LT27"},{"lineNumber":46,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD2/LT27"},{"lineNumber":47,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD3/LT27"},{"lineNumber":48,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD4/LT27"},{"lineNumber":49,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD5/LT27"},{"lineNumber":50,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD6/LT27"},{"lineNumber":51,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD7/LT27"},{"lineNumber":52,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD8/LT27"},{"lineNumber":53,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD9/LT27"},{"lineNumber":54,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD10/LT27"},{"lineNumber":55,"author":{"gitId":"jiaaaqi"},"content":"BLK/MD11/LT27"},{"lineNumber":56,"author":{"gitId":"jiaaaqi"},"content":"BLK/COM1/COM2"},{"lineNumber":57,"author":{"gitId":"jiaaaqi"},"content":"BLK/COM2/COM2"},{"lineNumber":58,"author":{"gitId":"jiaaaqi"},"content":"BLK/BIZ1/BIZ2,COM2"},{"lineNumber":59,"author":{"gitId":"jiaaaqi"},"content":"BLK/BIZ2/BIZ2"},{"lineNumber":60,"author":{"gitId":"jiaaaqi"},"content":"BLK/Shaw Foundation Alumni House/Opp NUSSU"},{"lineNumber":61,"author":{"gitId":"jiaaaqi"},"content":"H/Raffles Hall/Raffles Hall,NUS Museum"},{"lineNumber":62,"author":{"gitId":"jiaaaqi"},"content":"H/Kent Ridge Hall/Opp HSSML"},{"lineNumber":63,"author":{"gitId":"jiaaaqi"},"content":"H/King Edward VII Hall/PGP"},{"lineNumber":64,"author":{"gitId":"jiaaaqi"},"content":"H/Sheares Hall/Opp HSSML"},{"lineNumber":65,"author":{"gitId":"jiaaaqi"},"content":"H/Eusoff Hall/Ventus"},{"lineNumber":66,"author":{"gitId":"jiaaaqi"},"content":"H/Temasek Hall/Opp NUSSU"},{"lineNumber":67,"author":{"gitId":"jiaaaqi"},"content":"H/Cinnamon College/UTown"},{"lineNumber":68,"author":{"gitId":"jiaaaqi"},"content":"H/College of Alice and Peter Tan/UTown"},{"lineNumber":69,"author":{"gitId":"jiaaaqi"},"content":"H/Residental College 4/UTown"},{"lineNumber":70,"author":{"gitId":"jiaaaqi"},"content":"H/RVRC/Opp UHC"},{"lineNumber":71,"author":{"gitId":"jiaaaqi"},"content":"H/Tembusu College/UTown"},{"lineNumber":72,"author":{"gitId":"jiaaaqi"},"content":"H/Prince George\u0027s Park/PGP"},{"lineNumber":73,"author":{"gitId":"jiaaaqi"},"content":"H/UTown Residence/UTown"},{"lineNumber":74,"author":{"gitId":"jiaaaqi"},"content":"L/LT1/E2"},{"lineNumber":75,"author":{"gitId":"jiaaaqi"},"content":"L/LT2/E2"},{"lineNumber":76,"author":{"gitId":"jiaaaqi"},"content":"L/LT6/E4"},{"lineNumber":77,"author":{"gitId":"jiaaaqi"},"content":"L/LT7/EA"},{"lineNumber":78,"author":{"gitId":"jiaaaqi"},"content":"L/LT7A/EA"},{"lineNumber":79,"author":{"gitId":"jiaaaqi"},"content":"L/LT8/AS5"},{"lineNumber":80,"author":{"gitId":"jiaaaqi"},"content":"L/LT9/AS1"},{"lineNumber":81,"author":{"gitId":"jiaaaqi"},"content":"L/LT10/AS1"},{"lineNumber":82,"author":{"gitId":"jiaaaqi"},"content":"L/LT11/AS2"},{"lineNumber":83,"author":{"gitId":"jiaaaqi"},"content":"L/LT12/AS3"},{"lineNumber":84,"author":{"gitId":"jiaaaqi"},"content":"L/LT13/AS3"},{"lineNumber":85,"author":{"gitId":"jiaaaqi"},"content":"L/LT14/AS6"},{"lineNumber":86,"author":{"gitId":"jiaaaqi"},"content":"L/LT15/AS6"},{"lineNumber":87,"author":{"gitId":"jiaaaqi"},"content":"L/LT16/COM2"},{"lineNumber":88,"author":{"gitId":"jiaaaqi"},"content":"L/LT17/COM2"},{"lineNumber":89,"author":{"gitId":"jiaaaqi"},"content":"L/LT18/COM2"},{"lineNumber":90,"author":{"gitId":"jiaaaqi"},"content":"L/LT19/COM2"},{"lineNumber":91,"author":{"gitId":"jiaaaqi"},"content":"L/LT20/S3"},{"lineNumber":92,"author":{"gitId":"jiaaaqi"},"content":"L/LT21/S5"},{"lineNumber":93,"author":{"gitId":"jiaaaqi"},"content":"L/LT24/MD4"},{"lineNumber":94,"author":{"gitId":"jiaaaqi"},"content":"L/LT25/MD7"},{"lineNumber":95,"author":{"gitId":"jiaaaqi"},"content":"L/LT26/MD9"},{"lineNumber":96,"author":{"gitId":"jiaaaqi"},"content":"L/LT27/LT27"},{"lineNumber":97,"author":{"gitId":"jiaaaqi"},"content":"L/LT28/LT27"},{"lineNumber":98,"author":{"gitId":"jiaaaqi"},"content":"L/LT29/LT27"},{"lineNumber":99,"author":{"gitId":"jiaaaqi"},"content":"L/LT31/S16"},{"lineNumber":100,"author":{"gitId":"jiaaaqi"},"content":"L/LT32/S1"},{"lineNumber":101,"author":{"gitId":"jiaaaqi"},"content":"L/LT33/S17"},{"lineNumber":102,"author":{"gitId":"jiaaaqi"},"content":"L/LT34/S17"}],"authorContributionMap":{"jiaaaqi":102}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio "},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:"},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wu Nan | [Github](https://github.com/max-wunan/) | [Portfolio](team/max-wunan.md)"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xu Che | [Github](https://github.com/xuche123) | [Portfolio](team/xuche123.md)"},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Jiaqi | [Github](https://github.com/jiaaaqi) | [Portfolio](team/jiaaaqi.md)"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wan Shi Jie Brendan | [Github](https://github.com/madbeez) | [Portfolio](team/madbeez.md)"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"![](diagrams/Lee_Juntong\u0027sCat.jpg) | Zhuang Mengjin | [Github](https://github.com/Lee-Juntong) | [Portfolio](team/Lee-Juntong.md)"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":""}],"authorContributionMap":{"xuche123":1,"madbeez":1,"max-wunan":2,"-":4,"Lee-Juntong":2}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":"![](diagrams/Logo.png)\u003cbr\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"max-wunan"},"content":"Yang Jiaqi\u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":"Zhuang Mengjin\u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"Xu Che\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":"Wu Nan\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"Wan Shi Jie Brendan\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"## Table of Contents"},{"lineNumber":19,"author":{"gitId":"max-wunan"},"content":"* [Introduction](#introduction)"},{"lineNumber":20,"author":{"gitId":"max-wunan"},"content":"* [Getting Started](#getting-started)\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"max-wunan"},"content":"    * [Prerequisites](#prerequisites)\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"max-wunan"},"content":"    * [Setting Up](#setting-up)\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"max-wunan"},"content":"* [Design](#design) \u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"max-wunan"},"content":"    * [Architecture](#architecture) \u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"max-wunan"},"content":"    * [UI](#ui) \u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"max-wunan"},"content":"    * [Storage](#storage) \u003cbr\u003e"},{"lineNumber":27,"author":{"gitId":"max-wunan"},"content":"    * [Logic](#logic) \u003cbr\u003e"},{"lineNumber":28,"author":{"gitId":"max-wunan"},"content":"    * [Model](#model) \u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"max-wunan"},"content":"        * [Event](#event) \u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"max-wunan"},"content":"        * [Location](#location) \u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"max-wunan"},"content":"* [Implementation](#implementation) \u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"max-wunan"},"content":"    * [Add events](#add-events) \u003cbr\u003e"},{"lineNumber":33,"author":{"gitId":"max-wunan"},"content":"    * [Clear events](#clear-events) \u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"max-wunan"},"content":"    * [Edit events](#edit-events) \u003cbr\u003e"},{"lineNumber":35,"author":{"gitId":"max-wunan"},"content":"    * [Locate](#locate) \u003cbr\u003e "},{"lineNumber":36,"author":{"gitId":"max-wunan"},"content":"    * [Reminders](#reminder) \u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"max-wunan"},"content":"    * [Sort events](#sort-events) \u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"max-wunan"},"content":"    * [View events](#view-events) \u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"max-wunan"},"content":"    * [Help](#help) \u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"max-wunan"},"content":"    * [Repeat](#repeat) \u003cbr\u003e"},{"lineNumber":41,"author":{"gitId":"max-wunan"},"content":"    * [Delete](#delete) \u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"max-wunan"},"content":"    * [Find](#find) \u003cbr\u003e"},{"lineNumber":43,"author":{"gitId":"max-wunan"},"content":"    * [Find based on date](#find-based-on-date) \u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"max-wunan"},"content":"    * [Print locations of a certain group](#print-locations-of-a-certain-group) \u003cbr\u003e"},{"lineNumber":45,"author":{"gitId":"max-wunan"},"content":"    * [Study time](#study-time) \u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"max-wunan"},"content":"    * [Done](#done) \u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"max-wunan"},"content":"    * [User Info](#user-info) \u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    * [Exit](#exit) \u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"max-wunan"},"content":"* [Documentation](#documentation) \u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"max-wunan"},"content":"* [Testing](#testing)\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"* [Appendix A. Product scope](#appendix-a-product-scope)\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"* [Appendix B. User stories](#appendix-b-user-stories)\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"xuche123"},"content":"* [Appendix C. Non-functional requirements](#appendix-c-non-functional-requirements)\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"jiaaaqi"},"content":"* [Appendix D. Instructions for manual testing](#appendix-d-instructions-for-manual-testing)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"max-wunan"},"content":"## Introduction"},{"lineNumber":57,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":58,"author":{"gitId":"xuche123"},"content":"NUSchedule is a Command-Line based application that manages all of your commitments. Built with a clean and intuitive"},{"lineNumber":59,"author":{"gitId":"xuche123"},"content":"interface, NUSchedule will help you manage your commitments without any hassle. If you are a proficient in typing, "},{"lineNumber":60,"author":{"gitId":"xuche123"},"content":"NUSchedule will prove itself to be the most efficient way to manage your commitments.  "},{"lineNumber":61,"author":{"gitId":"-"},"content":"  "},{"lineNumber":62,"author":{"gitId":"xuche123"},"content":"This developer guide provides information on the architecture and design of the application, NUSchedule. This guide"},{"lineNumber":63,"author":{"gitId":"xuche123"},"content":"provides information that will not only help you get started as a NUSchedule contributor, but that you will find useful"},{"lineNumber":64,"author":{"gitId":"jiaaaqi"},"content":"to refer to even if you are already a contributor."},{"lineNumber":65,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":66,"author":{"gitId":"max-wunan"},"content":"## Getting Started"},{"lineNumber":67,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":68,"author":{"gitId":"xuche123"},"content":"This section provides information to help you get NUSchedule up and running on your own computers."},{"lineNumber":69,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":70,"author":{"gitId":"max-wunan"},"content":"### Prerequisites  "},{"lineNumber":71,"author":{"gitId":"xuche123"},"content":"1. JDK 11"},{"lineNumber":72,"author":{"gitId":"xuche123"},"content":"2. Intellij IDEA"},{"lineNumber":73,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":74,"author":{"gitId":"max-wunan"},"content":"### Setting Up"},{"lineNumber":75,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":76,"author":{"gitId":"xuche123"},"content":"1. Fork [this repo](https://github.com/AY2021S1-CS2113T-F14-4/tp), and clone the fork onto your computer.   "},{"lineNumber":77,"author":{"gitId":"xuche123"},"content":"2. Open IntelliJ (if you are not in the welcome screen, click File \u003e Close Project"},{"lineNumber":78,"author":{"gitId":"xuche123"},"content":"to close the existing project dialog "},{"lineNumber":79,"author":{"gitId":"xuche123"},"content":"first).   "},{"lineNumber":80,"author":{"gitId":"xuche123"},"content":"3. Set up the correct JDK version for Gradle  "},{"lineNumber":81,"author":{"gitId":"xuche123"},"content":"    1. Click Configure \u003e Project Defaults \u003e Project Structure"},{"lineNumber":82,"author":{"gitId":"xuche123"},"content":"    2. Click New… and set it to the directory of the JDK."},{"lineNumber":83,"author":{"gitId":"xuche123"},"content":"4. Click Import Project (or Open or Import in newer version of Intellij)."},{"lineNumber":84,"author":{"gitId":"xuche123"},"content":"5. Locate the build.gradle file (not the root folder as you would do in a normal importing) and select it. Click OK."},{"lineNumber":85,"author":{"gitId":"xuche123"},"content":"   If asked, choose to Open as Project (not Open as File)."},{"lineNumber":86,"author":{"gitId":"xuche123"},"content":"6. Click OK to accept the default settings but do ensure that the selected version of Gradle JVM matches the JDK "},{"lineNumber":87,"author":{"gitId":"xuche123"},"content":"   being used for the project."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"max-wunan"},"content":"## Design"},{"lineNumber":90,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":91,"author":{"gitId":"jiaaaqi"},"content":"This section describes the different components of the application and how each component interact with"},{"lineNumber":92,"author":{"gitId":"jiaaaqi"},"content":"each other to run the program. "},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"max-wunan"},"content":"### Architecture"},{"lineNumber":95,"author":{"gitId":"max-wunan"},"content":"![architecture](diagrams/architecture.png)\u003cbr\u003e"},{"lineNumber":96,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":97,"author":{"gitId":"xuche123"},"content":"The Architecture Diagram above provides a high-level view of the design of NUSchedule. The app can be broken down into "},{"lineNumber":98,"author":{"gitId":"xuche123"},"content":"5 different components:  "},{"lineNumber":99,"author":{"gitId":"xuche123"},"content":"1. Main: Initializes the other components and connects them with each other."},{"lineNumber":100,"author":{"gitId":"xuche123"},"content":"2. UI: Manages the User Interface that the user interacts with."},{"lineNumber":101,"author":{"gitId":"xuche123"},"content":"3. Logic: Interprets user commands."},{"lineNumber":102,"author":{"gitId":"xuche123"},"content":"4. Storage: Reads data from and writes data to the hard disk."},{"lineNumber":103,"author":{"gitId":"xuche123"},"content":"5. Model: Stores the data the app uses in memory."},{"lineNumber":104,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":105,"author":{"gitId":"max-wunan"},"content":"### UI"},{"lineNumber":106,"author":{"gitId":"max-wunan"},"content":"![UI Class Diagram](diagrams/Ui.png)\u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":108,"author":{"gitId":"madbeez"},"content":"*Figure 3.2.1 Class diagram for UI component*"},{"lineNumber":109,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":110,"author":{"gitId":"xuche123"},"content":" __API__:`UI.java`  "},{"lineNumber":111,"author":{"gitId":"xuche123"},"content":"The UI consists of various parts, e.g. `printGreetingMessage`, `printEventList`, `showError`, `printNumEvent`, etc."},{"lineNumber":112,"author":{"gitId":"jiaaaqi"},"content":" "},{"lineNumber":113,"author":{"gitId":"madbeez"},"content":"The `UI` component reads user input using readCommand() and then executes user commands according to the Logic component."},{"lineNumber":114,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":115,"author":{"gitId":"max-wunan"},"content":"### Storage"},{"lineNumber":116,"author":{"gitId":"xuche123"},"content":"__API__:`Storage.java`"},{"lineNumber":117,"author":{"gitId":"xuche123"},"content":"The `Storage` component can save the list of event data in .txt format and read it back.   "},{"lineNumber":118,"author":{"gitId":"max-wunan"},"content":"### Logic"},{"lineNumber":119,"author":{"gitId":"xuche123"},"content":"__API__:`Parser.java`  "},{"lineNumber":120,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":121,"author":{"gitId":"max-wunan"},"content":"![Logic Class Diagram](diagrams/LogicClass.png)\u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":123,"author":{"gitId":"madbeez"},"content":"*Figure 3.4.1 Class diagram for Logic component*"},{"lineNumber":124,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":125,"author":{"gitId":"madbeez"},"content":"The `Logic` component parses the user input and executes commands based on the given input."},{"lineNumber":126,"author":{"gitId":"madbeez"},"content":" 1.\tParser reads the user input and returns a command to be executed by `NuSchedule`."},{"lineNumber":127,"author":{"gitId":"xuche123"},"content":" 2.\tThe command execution affects the EventList (e.g. clearing the list)."},{"lineNumber":128,"author":{"gitId":"madbeez"},"content":" 3.\tThe result passes back to the UI, which then displays relevant feedback to the user (e.g. successful execution).  "},{"lineNumber":129,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":130,"author":{"gitId":"max-wunan"},"content":"### Model"},{"lineNumber":131,"author":{"gitId":"jiaaaqi"},"content":"The `Model` component stores an ArrayList, events, that represents the current list of events and available locations."},{"lineNumber":132,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":133,"author":{"gitId":"max-wunan"},"content":"#### Event"},{"lineNumber":134,"author":{"gitId":"xuche123"},"content":"__API__:`EventList.java`   "},{"lineNumber":135,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":136,"author":{"gitId":"max-wunan"},"content":"### Location"},{"lineNumber":137,"author":{"gitId":"jiaaaqi"},"content":"![location class diagram](diagrams/LocationClass.png) \u003cbr\u003e"},{"lineNumber":138,"author":{"gitId":"jiaaaqi"},"content":"*Figure 3.6.1 Class diagram for location component*"},{"lineNumber":139,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":140,"author":{"gitId":"jiaaaqi"},"content":"__API:__ `LocationList.java`  "},{"lineNumber":141,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":142,"author":{"gitId":"jiaaaqi"},"content":"The `LocationList` is made up of an ArrayList of Locations, which is a type of variable that stores different information "},{"lineNumber":143,"author":{"gitId":"jiaaaqi"},"content":"for different types of location (eg. `Building`, `Hostel`, etc.). However, do note that any place that is "},{"lineNumber":144,"author":{"gitId":"jiaaaqi"},"content":"not within the list of saved locations will be saved as type `OutOfNUS`, and would not be saved into the `location.txt` "},{"lineNumber":145,"author":{"gitId":"jiaaaqi"},"content":"file. The location will still be part of the location list before the app closes, and it will also be "},{"lineNumber":146,"author":{"gitId":"jiaaaqi"},"content":"saved as part of the Event information."},{"lineNumber":147,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":148,"author":{"gitId":"jiaaaqi"},"content":"\u003cbr\u003eThere is a separate api for bus stops (`BusStopList.java`), which stores all available bus stops "},{"lineNumber":149,"author":{"gitId":"jiaaaqi"},"content":"and their information. Although the variable is declared in the main NUSchedule class, it is only referenced "},{"lineNumber":150,"author":{"gitId":"jiaaaqi"},"content":"and not edited in any part of the program."},{"lineNumber":151,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":152,"author":{"gitId":"jiaaaqi"},"content":"\u003cbr\u003eThe `Location` component "},{"lineNumber":153,"author":{"gitId":"jiaaaqi"},"content":"* stores information about various types of locations "},{"lineNumber":154,"author":{"gitId":"jiaaaqi"},"content":"* prints the list of locations that is saved in the data file "},{"lineNumber":155,"author":{"gitId":"Lee-Juntong"},"content":"* checks if a location is being saved in the list and returns the location when asked"},{"lineNumber":156,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":157,"author":{"gitId":"max-wunan"},"content":"## Implementation"},{"lineNumber":158,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":159,"author":{"gitId":"xuche123"},"content":"This section describes the implementation of some noteworthy features. "},{"lineNumber":160,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":161,"author":{"gitId":"max-wunan"},"content":"### Add events"},{"lineNumber":162,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":163,"author":{"gitId":"xuche123"},"content":"This feature allows users to add events and relevant information about them (description, time and location) to the list"},{"lineNumber":164,"author":{"gitId":"xuche123"},"content":". There are three possible types of events that can be added: classes, assignments, and personal events."},{"lineNumber":165,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":166,"author":{"gitId":"xuche123"},"content":"Given below is an example usage scenario:"},{"lineNumber":167,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":168,"author":{"gitId":"xuche123"},"content":"Step 1. The user launches the application to add a class to his schedule. The user executes "},{"lineNumber":169,"author":{"gitId":"Lee-Juntong"},"content":"`class CS1010 Lecture /t 2020-05-05 10:00 /e 2020-05-05 12:00 /l LT27` to add a new class to the list.  "},{"lineNumber":170,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":171,"author":{"gitId":"Lee-Juntong"},"content":"Step 2. The Parser class parses the input as a new class with description ‘CS1010 Lecture’,"},{"lineNumber":172,"author":{"gitId":"Lee-Juntong"},"content":"starting time ‘2020-05-05 at 10:00’, ending time ’2020-05-05 at 12:00’, and location ‘LT27’.  "},{"lineNumber":173,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":174,"author":{"gitId":"madbeez"},"content":"Step 3. `addCommand()` is then called with the above parameters, and calls `addEvent()` from EventList to adds it to the list of events. It also checks "},{"lineNumber":175,"author":{"gitId":"madbeez"},"content":"whether there are any events that overlap in timing with the newly added event. The newly added event is then printed for the user through `UI`."},{"lineNumber":176,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":177,"author":{"gitId":"madbeez"},"content":"The sequence diagram below shows the process of adding a new event."},{"lineNumber":178,"author":{"gitId":"max-wunan"},"content":"![AddCommand Sequence Diagram](diagrams/AddCommand.png)\u003cbr\u003e"},{"lineNumber":179,"author":{"gitId":"max-wunan"},"content":"*Figure 4.1 Sequence Diagram for add function*"},{"lineNumber":180,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":181,"author":{"gitId":"max-wunan"},"content":"### Clear events"},{"lineNumber":182,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":183,"author":{"gitId":"xuche123"},"content":"This feature allows users to completely delete the existing event information that is previously typed in by users."},{"lineNumber":184,"author":{"gitId":"max-wunan"},"content":"Users may choose to delete all events, events happened one month ago, or events happened before a certain date."},{"lineNumber":185,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":186,"author":{"gitId":"xuche123"},"content":"Given below is an example usage scenario:"},{"lineNumber":187,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":188,"author":{"gitId":"max-wunan"},"content":"Step 1. The user launches the application and wants to clear some events that happened a long time ago as there is no"},{"lineNumber":189,"author":{"gitId":"max-wunan"},"content":"need to refer to these events anymore. The user types `clearBefore 2020-06-01` to clear all events before 1st June, 2020."},{"lineNumber":190,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":191,"author":{"gitId":"max-wunan"},"content":"Step 2. The Parser class parses the input and identifies the full command to be a ClearBeforeCommand class, and so"},{"lineNumber":192,"author":{"gitId":"max-wunan"},"content":"`clearBeforeCommand()` will be called to create a `clearBeforeCommand` object with parameter `2020-06-01`. "},{"lineNumber":193,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":194,"author":{"gitId":"max-wunan"},"content":"Step 3. After that, the `execute()` function of `clearBeforeCommand` will be called and as a result `EventList#clearBefore(clearDate)` will"},{"lineNumber":195,"author":{"gitId":"max-wunan"},"content":"also be called, where `2020-06-01` will be passed as the parameter `clearDate`."},{"lineNumber":196,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":197,"author":{"gitId":"max-wunan"},"content":"Step 4. The user wants to clear all the extra information of events but does not want to do it manually, hence the user "},{"lineNumber":198,"author":{"gitId":"max-wunan"},"content":"types in `autoClear on` to turn on the autoClear function, which will clear all events happened one month ago automatically."},{"lineNumber":199,"author":{"gitId":"max-wunan"},"content":"This function can be switched off by typing `autoClear off`."},{"lineNumber":200,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":201,"author":{"gitId":"max-wunan"},"content":"Note that the command `clear` does not require any parameter input."},{"lineNumber":202,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":203,"author":{"gitId":"max-wunan"},"content":"The sequence diagram below shows the process of clearing events before a certain date."},{"lineNumber":204,"author":{"gitId":"max-wunan"},"content":"![ClearBeforeCommand Sequence Diagram](diagrams/ClearBeforeCommand.png)\u003cbr\u003e"},{"lineNumber":205,"author":{"gitId":"max-wunan"},"content":"*Figure 4.2.1 Sequence Diagram for clearBefore function*"},{"lineNumber":206,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":207,"author":{"gitId":"max-wunan"},"content":"The sequence diagram below shows the process of clearing all events."},{"lineNumber":208,"author":{"gitId":"max-wunan"},"content":"![ClearCommand Sequence Diagram](diagrams/ClearCommand.png)\u003cbr\u003e"},{"lineNumber":209,"author":{"gitId":"max-wunan"},"content":"*Figure 4.2.2 Sequence Diagram for clear function*"},{"lineNumber":210,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":211,"author":{"gitId":"max-wunan"},"content":"### Edit events"},{"lineNumber":212,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":213,"author":{"gitId":"xuche123"},"content":"This feature allows users to edit the information of events that was previously added. "},{"lineNumber":214,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":215,"author":{"gitId":"xuche123"},"content":"Given below is an example usage scenario:"},{"lineNumber":216,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":217,"author":{"gitId":"xuche123"},"content":"Step 1. The user launches the application and inputs `assignment homework \\t 2020-02-02 20:00 \\l home` command to add an event. "},{"lineNumber":218,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":219,"author":{"gitId":"xuche123"},"content":"Step 2. The user realises that there was a mistake in the event added and decides to edit the task information by "},{"lineNumber":220,"author":{"gitId":"xuche123"},"content":"entering `edit 1`, which will be parsed by `Parser` and calls an `EditCommand` object.  "},{"lineNumber":221,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":222,"author":{"gitId":"xuche123"},"content":"Step 3. The user follows the instructions on screen and enters the desired changes.  "},{"lineNumber":223,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":224,"author":{"gitId":"xuche123"},"content":"Step 4. `EditCommand#execute()` will call `EventList#editEvents` to edit the event.  "},{"lineNumber":225,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":226,"author":{"gitId":"max-wunan"},"content":"![EditCommand Sequence Diagram](diagrams/EditCommand.png)\u003cbr\u003e"},{"lineNumber":227,"author":{"gitId":"xuche123"},"content":"*Figure 4.3 Sequence Diagram for EditCommand()*"},{"lineNumber":228,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":229,"author":{"gitId":"max-wunan"},"content":"### Locate"},{"lineNumber":230,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":231,"author":{"gitId":"xuche123"},"content":"This feature allows users to add locations as part of the event information. If the place is located within the school, "},{"lineNumber":232,"author":{"gitId":"xuche123"},"content":"additional information about the location will be provided such as nearest bus stops or buildings. If the place is a "},{"lineNumber":233,"author":{"gitId":"jiaaaqi"},"content":"bus stop, the buses available will be provided instead. The user will add location name as the last piece of information "},{"lineNumber":234,"author":{"gitId":"jiaaaqi"},"content":"when adding an event. The LocationList has a method that searches for the place with the exact same name, if such a "},{"lineNumber":235,"author":{"gitId":"jiaaaqi"},"content":"place is not found, it will create a location and allocate it to be OutOfNUS.  "},{"lineNumber":236,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":237,"author":{"gitId":"jiaaaqi"},"content":"This feature also allows users to search for a location based on a given location name, or the location where an event "},{"lineNumber":238,"author":{"gitId":"jiaaaqi"},"content":"is held. It will print out additional information about the location to the user. "},{"lineNumber":239,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":240,"author":{"gitId":"jiaaaqi"},"content":"The `locate` command executes with the following steps: "},{"lineNumber":241,"author":{"gitId":"jiaaaqi"},"content":"  "},{"lineNumber":242,"author":{"gitId":"jiaaaqi"},"content":"Step 1. When the user type in `locate [input]`, the Parser class will extract the input from the command and call a "},{"lineNumber":243,"author":{"gitId":"jiaaaqi"},"content":"`LocateCommand` object.  "},{"lineNumber":244,"author":{"gitId":"jiaaaqi"},"content":"* `input` will always be a String when passed into the command object. "},{"lineNumber":245,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":246,"author":{"gitId":"jiaaaqi"},"content":"Step 2. `LocateCommand` will then try to convert the input into an integer, if possible.  "},{"lineNumber":247,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":248,"author":{"gitId":"jiaaaqi"},"content":"Step 3. If conversion is possible, the method will obtain the event at the given index and return its location "},{"lineNumber":249,"author":{"gitId":"jiaaaqi"},"content":"information.  "},{"lineNumber":250,"author":{"gitId":"jiaaaqi"},"content":"* Tries to catch `IndexOutOfBoundException` to check if the given index is within the range of the"},{"lineNumber":251,"author":{"gitId":"jiaaaqi"},"content":"event list."},{"lineNumber":252,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":253,"author":{"gitId":"jiaaaqi"},"content":"Step 4. If conversion is not possible, then it will check if the given string is a valid location.  "},{"lineNumber":254,"author":{"gitId":"jiaaaqi"},"content":"* Returns the location if valid"},{"lineNumber":255,"author":{"gitId":"jiaaaqi"},"content":"* Prints an error message if invalid   "},{"lineNumber":256,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":257,"author":{"gitId":"jiaaaqi"},"content":"The sequence diagram below shows exactly which methods, from which classes, are called to obtain the required location. "},{"lineNumber":258,"author":{"gitId":"jiaaaqi"},"content":"![locate sequence diagram](diagrams/LocateSequence.png)\u003cbr\u003e"},{"lineNumber":259,"author":{"gitId":"max-wunan"},"content":"*Figure 4.4 Sequence diagram for locate function*"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"max-wunan"},"content":"### Reminder"},{"lineNumber":262,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":263,"author":{"gitId":"madbeez"},"content":"This feature allows users to get a reminder of the events that will occur today."},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"madbeez"},"content":"Given below is an example usage scenario:"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"madbeez"},"content":"Step 1. The user wants to see all the events that are happening today. He inputs the command `reminder`."},{"lineNumber":268,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":269,"author":{"gitId":"madbeez"},"content":"Step 2. The command filters the list of all events based on the current date."},{"lineNumber":270,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":271,"author":{"gitId":"madbeez"},"content":"Step 3. It then calls `UI` to print the filtered list."},{"lineNumber":272,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":273,"author":{"gitId":"madbeez"},"content":"The sequence diagram belows shows the process of executing the reminder command."},{"lineNumber":274,"author":{"gitId":"madbeez"},"content":"![ReminderCommand Sequence Diagram](diagrams/ReminderCommand.png)"},{"lineNumber":275,"author":{"gitId":"madbeez"},"content":"*Figure 4.5 Sequence Diagram for reminder function*"},{"lineNumber":276,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":277,"author":{"gitId":"max-wunan"},"content":"### Sort events"},{"lineNumber":278,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":279,"author":{"gitId":"xuche123"},"content":"This feature allows users to sort the available task by a sorting criteria. Currently, the sorting criteria available"},{"lineNumber":280,"author":{"gitId":"xuche123"},"content":"are sorting by time, description and location.  "},{"lineNumber":281,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":282,"author":{"gitId":"xuche123"},"content":"Given below is an example usage scenario:"},{"lineNumber":283,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":284,"author":{"gitId":"madbeez"},"content":"Step 1. The user wants to view the events in a chronological order. "},{"lineNumber":285,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":286,"author":{"gitId":"xuche123"},"content":"Step 2. The user enters `sort time`, which will call the `sortCommand()` function which will sort all events.  "},{"lineNumber":287,"author":{"gitId":"max-wunan"},"content":"![](diagrams/SortCommand.png)\u003cbr\u003e"},{"lineNumber":288,"author":{"gitId":"xuche123"},"content":"*Figure 4.6 Sequence diagram for SortCommand()*"},{"lineNumber":289,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":290,"author":{"gitId":"max-wunan"},"content":"### View events"},{"lineNumber":291,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":292,"author":{"gitId":"madbeez"},"content":"This feature allows users to view a numbered list of all the events/tasks they have added so far,"},{"lineNumber":293,"author":{"gitId":"madbeez"},"content":"in the order which they were added."},{"lineNumber":294,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":295,"author":{"gitId":"madbeez"},"content":"Given below is an example usage scenario:"},{"lineNumber":296,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":297,"author":{"gitId":"madbeez"},"content":"Step 1. The user wants to see a list of all the events he has added so far, and executes the command `list`."},{"lineNumber":298,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":299,"author":{"gitId":"madbeez"},"content":"Step 2. The command calls the `printEventList` function from `UI`, which then prints the list of events."},{"lineNumber":300,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":301,"author":{"gitId":"madbeez"},"content":"The sequence diagram below shows what happens when the list command is executed."},{"lineNumber":302,"author":{"gitId":"madbeez"},"content":"![ListCommand Sequence Diagram](diagrams/ListCommand.png)"},{"lineNumber":303,"author":{"gitId":"madbeez"},"content":"*Figure 4.7 Sequence Diagram for list function*"},{"lineNumber":304,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":305,"author":{"gitId":"max-wunan"},"content":"### Help"},{"lineNumber":306,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":307,"author":{"gitId":"max-wunan"},"content":"This feature allows users to view a summary of all the features available for the current version of NUSchedule. "},{"lineNumber":308,"author":{"gitId":"max-wunan"},"content":"When the user inputs `help`, all available commands and a simple description for each of them will be printed."},{"lineNumber":309,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":310,"author":{"gitId":"max-wunan"},"content":"The sequence diagram below shows what happens when user enters `help`:"},{"lineNumber":311,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":312,"author":{"gitId":"max-wunan"},"content":"![HelpCommand Sequence Diagram](diagrams/HelpCommand.png)\u003cbr\u003e"},{"lineNumber":313,"author":{"gitId":"max-wunan"},"content":"*Figure 4.8 Sequence Diagram for help function*"},{"lineNumber":314,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":315,"author":{"gitId":"max-wunan"},"content":"### Repeat"},{"lineNumber":316,"author":{"gitId":"Lee-Juntong"},"content":"This feature allows users to repeat all classes in the current week or a selected event for several weeks."},{"lineNumber":317,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":318,"author":{"gitId":"max-wunan"},"content":"### Delete"},{"lineNumber":319,"author":{"gitId":"jiaaaqi"},"content":"This feature allows the user to delete unwanted events. `DeleteCommand#Execute` deletes the specified event in the "},{"lineNumber":320,"author":{"gitId":"jiaaaqi"},"content":"following steps:  "},{"lineNumber":321,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":322,"author":{"gitId":"jiaaaqi"},"content":"Step 1. The user enters `delete NUMBER` where `NUMBER` refers to the index of the command to be deleted. The user input is parsed by the Parser class which creates a new `DeleteCommand` object."},{"lineNumber":323,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":324,"author":{"gitId":"jiaaaqi"},"content":"Step 2. `Eventlist#remove()` is called which will delete the event with the specified index."},{"lineNumber":325,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":326,"author":{"gitId":"max-wunan"},"content":"### Find"},{"lineNumber":327,"author":{"gitId":"jiaaaqi"},"content":"This feature allows the user to filter his/her events by a particular keyword. This command will search through all the events and find events that have descriptions"},{"lineNumber":328,"author":{"gitId":"jiaaaqi"},"content":"containing the search criteria. The process takes place in the following steps:"},{"lineNumber":329,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":330,"author":{"gitId":"jiaaaqi"},"content":"Step 1. The user enters `find CRITERIA` which will be parsed by the `Parser` class. The `Parser` class will create a new `FindCommand`"},{"lineNumber":331,"author":{"gitId":"jiaaaqi"},"content":"object."},{"lineNumber":332,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":333,"author":{"gitId":"jiaaaqi"},"content":"Step 2. `EventList#filterWith()` will be called which will create a ArrayList containing events that match the specified criteria."},{"lineNumber":334,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":335,"author":{"gitId":"jiaaaqi"},"content":"Step 3. `UI#printFilteredEventList` is called to print out the events."},{"lineNumber":336,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":337,"author":{"gitId":"max-wunan"},"content":"### Find based on date"},{"lineNumber":338,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":339,"author":{"gitId":"madbeez"},"content":"This feature allows users to find events on the date inputted by the user."},{"lineNumber":340,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":341,"author":{"gitId":"madbeez"},"content":"Given below is an example usage scenario:"},{"lineNumber":342,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":343,"author":{"gitId":"madbeez"},"content":"Step 1. The user wishes to find events happening on a certain date, so he inputs `date 2020-10-10`."},{"lineNumber":344,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":345,"author":{"gitId":"madbeez"},"content":"Step 2. This executes FindDateCommand, which calls `filterDateWith(2020-10-10)` to create a new filtered list."},{"lineNumber":346,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":347,"author":{"gitId":"madbeez"},"content":"Step 3. This filtered list is then printed by calling `printFilteredDateEventList` from UI."},{"lineNumber":348,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":349,"author":{"gitId":"max-wunan"},"content":"### Print locations of a certain group"},{"lineNumber":350,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":351,"author":{"gitId":"max-wunan"},"content":"This feature allows users to know locations in a certain faculty, including blocks and lecture theatres when users input"},{"lineNumber":352,"author":{"gitId":"max-wunan"},"content":"abbreviations of various faculties (e.g. FOS)."},{"lineNumber":353,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":354,"author":{"gitId":"max-wunan"},"content":"The sequence diagram belows shows what happens when user input any faculty abbreviation: \u003cbr\u003e"},{"lineNumber":355,"author":{"gitId":"max-wunan"},"content":"![PrintAreaLocationsCommand Sequence Diagram](diagrams/printAreaLocationsCommand.png)\u003cbr\u003e"},{"lineNumber":356,"author":{"gitId":"max-wunan"},"content":"*Figure 4.13 Sequence Diagram for print area locations function*"},{"lineNumber":357,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":358,"author":{"gitId":"max-wunan"},"content":"### Study time"},{"lineNumber":359,"author":{"gitId":"max-wunan"},"content":"This feature allows the user to know the amount of time spent on study for certain date. The command is `studyTime DATE`.  "},{"lineNumber":360,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":361,"author":{"gitId":"max-wunan"},"content":"### Done"},{"lineNumber":362,"author":{"gitId":"jiaaaqi"},"content":"This feature allows users to mark an event as done, provided the event\u0027s time has passed. With the exception of event "},{"lineNumber":363,"author":{"gitId":"jiaaaqi"},"content":"type `Assignment`, all the other event types cannot be marked as done before event occurs. "},{"lineNumber":364,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":365,"author":{"gitId":"jiaaaqi"},"content":"`DoneCommand` marks an event as done with the following steps: "},{"lineNumber":366,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":367,"author":{"gitId":"jiaaaqi"},"content":"Step 1. The user will input `done` followed by an integer that represents the index of the event they want to mark as "},{"lineNumber":368,"author":{"gitId":"jiaaaqi"},"content":"done. "},{"lineNumber":369,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":370,"author":{"gitId":"jiaaaqi"},"content":"Step 2. The program will first check if the index is valid. If invalid, application will print an error message. "},{"lineNumber":371,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":372,"author":{"gitId":"jiaaaqi"},"content":"Step 3. Then it will check for the type and time of event. If the time of event is later, and the event is not an "},{"lineNumber":373,"author":{"gitId":"jiaaaqi"},"content":"`Assignment`, then it will print a warning message. Else, it will mark the event as done."},{"lineNumber":374,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":375,"author":{"gitId":"max-wunan"},"content":"### User Info"},{"lineNumber":376,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":377,"author":{"gitId":"max-wunan"},"content":"This feature allows users to input information about themselves into the app, specifically their name, and"},{"lineNumber":378,"author":{"gitId":"max-wunan"},"content":"whether they are a student or a professor."},{"lineNumber":379,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":380,"author":{"gitId":"max-wunan"},"content":"Given below is an example usage scenario:"},{"lineNumber":381,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":382,"author":{"gitId":"max-wunan"},"content":"Step 1: The user wishes to store his personal information, so he inputs `student Harry`."},{"lineNumber":383,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":384,"author":{"gitId":"max-wunan"},"content":"Step 2: This calls the UserInfoCommand, which stores his name, Harry, and type, student in UserInfo."},{"lineNumber":385,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":386,"author":{"gitId":"max-wunan"},"content":"1. The user enters `delete NUMBER` where `NUMBER` refers to the index of the command to be deleted. The user input is parsed by the Parser class which creates a new `DeleteCommand` object."},{"lineNumber":387,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":388,"author":{"gitId":"max-wunan"},"content":"2. `Eventlist#remove()` is called which will delete the event with the specified index."},{"lineNumber":389,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":390,"author":{"gitId":"Lee-Juntong"},"content":"### Exit  "},{"lineNumber":391,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":392,"author":{"gitId":"Lee-Juntong"},"content":"This feature allows users to terminate this app. By inputting `bye`, the isExit flag of the app will be changed to true, and the app will exit with "},{"lineNumber":393,"author":{"gitId":"Lee-Juntong"},"content":"an exit message.  "},{"lineNumber":394,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":395,"author":{"gitId":"max-wunan"},"content":"## Documentation  "},{"lineNumber":396,"author":{"gitId":"max-wunan"},"content":"All documentation can be found in the `docs/` folder."},{"lineNumber":397,"author":{"gitId":"xuche123"},"content":"* [Jekyll](https://jekyllrb.com/) is used to manage documentation."},{"lineNumber":398,"author":{"gitId":"xuche123"},"content":"* [Markdown](https://guides.github.com/features/mastering-markdown/) style is used for the documentation."},{"lineNumber":399,"author":{"gitId":"xuche123"},"content":"* [PlantUML](https://plantuml.com/) is used to create the diagrams."},{"lineNumber":400,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":401,"author":{"gitId":"max-wunan"},"content":"## Testing"},{"lineNumber":402,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":403,"author":{"gitId":"xuche123"},"content":"JUnit is used to write tests for the project. Learn more about JUnit [here](https://se-education.org/guides/tutorials/gradle.html)."},{"lineNumber":404,"author":{"gitId":"xuche123"},"content":"If you are using IntelliJ, you can run all test by right-clicking on the `test/java` folder and selecting `Run \u0027Tests\u0027` or press `CRTL` + `SHIFT` + `F10`"},{"lineNumber":405,"author":{"gitId":"xuche123"},"content":"on your keyboard. Alternatively, you can open a console and run the command `gradelw clean test` (Mac/linus: `.gradlew clean test`).  "},{"lineNumber":406,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":407,"author":{"gitId":"Lee-Juntong"},"content":"## Appendix A: Product scope"},{"lineNumber":408,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":409,"author":{"gitId":"xuche123"},"content":"### User profile"},{"lineNumber":410,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":411,"author":{"gitId":"jiaaaqi"},"content":"__Target user profile:__"},{"lineNumber":412,"author":{"gitId":"jiaaaqi"},"content":"* NUS student or staff"},{"lineNumber":413,"author":{"gitId":"jiaaaqi"},"content":"* able to type quickly"},{"lineNumber":414,"author":{"gitId":"jiaaaqi"},"content":"* has quite a number of events to keep track of  "},{"lineNumber":415,"author":{"gitId":"jiaaaqi"},"content":"* prefers to use desktop apps"},{"lineNumber":416,"author":{"gitId":"jiaaaqi"},"content":"* prefers using Command Line Interface (CLI) apps"},{"lineNumber":417,"author":{"gitId":"jiaaaqi"},"content":"* prefers typing instead of mouse interactions"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"Lee-Juntong"},"content":"### Value proposition"},{"lineNumber":420,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":421,"author":{"gitId":"jiaaaqi"},"content":"NUSchedule aims to assist the target audience with:  "},{"lineNumber":422,"author":{"gitId":"jiaaaqi"},"content":"* managing all their events in one application (personal or work)"},{"lineNumber":423,"author":{"gitId":"jiaaaqi"},"content":"* easily finding out about the location of their events "},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"jiaaaqi"},"content":"## Appendix B: User stories"},{"lineNumber":426,"author":{"gitId":"-"},"content":"  "},{"lineNumber":427,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|"},{"lineNumber":428,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|"},{"lineNumber":429,"author":{"gitId":"xuche123"},"content":"|1.0|busy individual|keep track of both personal and school activities|avoid clashing events"},{"lineNumber":430,"author":{"gitId":"xuche123"},"content":"|1.0|freshman|know module details and lesson venues|be on time for my activities"},{"lineNumber":431,"author":{"gitId":"xuche123"},"content":"|1.0|forgetful person|be reminded of the deadlines for my assignments|submit on time"},{"lineNumber":432,"author":{"gitId":"xuche123"},"content":"|1.0|tutor|know the estimated time for my students to travel to their next class|pace my lesson suitably"},{"lineNumber":433,"author":{"gitId":"jiaaaqi"},"content":"|1.0|hardworking student|track how much time I have spent studying|allocate my time efficiently"},{"lineNumber":434,"author":{"gitId":"xuche123"},"content":"|2.0|exchange student|know the optimal path to reach my next destination|avoid getting lost"},{"lineNumber":435,"author":{"gitId":"xuche123"},"content":"|2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"},{"lineNumber":436,"author":{"gitId":"xuche123"},"content":"|2.0|professor|Know whether my students have another lesson after mine and the expected time of travelling|Pace my lesson appropriately"},{"lineNumber":437,"author":{"gitId":"Lee-Juntong"},"content":"|2.0|student using zoom for lessons|record the virtual locations|store the links and passwords of the meetings"},{"lineNumber":438,"author":{"gitId":"Lee-Juntong"},"content":"|2.1|student having periodic lessons|repeat the classes on a weekly basis|spend less time in adding same classes but just different weeks  "},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"jiaaaqi"},"content":"\u003ca id\u003d\"appendixC\"\u003e\u003c/a\u003e"},{"lineNumber":441,"author":{"gitId":"xuche123"},"content":"## Appendix C: Non-Functional Requirements"},{"lineNumber":442,"author":{"gitId":"-"},"content":"  "},{"lineNumber":443,"author":{"gitId":"xuche123"},"content":"1. This application will work on any computers running either Windows, macOS or Unix that has Java 11 or a higher version installed."},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"xuche123"},"content":"2. A user that is proficient in typing will find this application to be faster and more convenient to use than applications that requires mouse clicks."},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"jiaaaqi"},"content":"\u003ca id\u003d\"appendixD\"\u003e\u003c/a\u003e"},{"lineNumber":448,"author":{"gitId":"jiaaaqi"},"content":"## Appendix D: Instructions for manual testing"},{"lineNumber":449,"author":{"gitId":"-"},"content":"  "},{"lineNumber":450,"author":{"gitId":"xuche123"},"content":"1. Initial launch"},{"lineNumber":451,"author":{"gitId":"xuche123"},"content":"   * Download the jar file [here](https://github.com/AY2021S1-CS2113T-F14-4/tp/releases) and place it in an empty folder."},{"lineNumber":452,"author":{"gitId":"xuche123"},"content":"   * Open the command prompt and enter the command `java -jar NuSchedule.jar`."},{"lineNumber":453,"author":{"gitId":"xuche123"},"content":"   * Expected: The application shows the NuSchedule logo."},{"lineNumber":454,"author":{"gitId":"xuche123"},"content":"   "},{"lineNumber":455,"author":{"gitId":"xuche123"},"content":"2. Adding events"},{"lineNumber":456,"author":{"gitId":"xuche123"},"content":"   * Test case: `assignment homework /t 2020-02-02 20:00 /l home`"},{"lineNumber":457,"author":{"gitId":"xuche123"},"content":"   * Expected: Confirmation message to indicate that the assignment has been added successfully."},{"lineNumber":458,"author":{"gitId":"xuche123"},"content":"   * Test case: `class cs2113 /t 2020-02-02 20:00 /e 2020-02-02 21:00 /o zoom.com /p 123`"},{"lineNumber":459,"author":{"gitId":"xuche123"},"content":"   * Expected: Confirmation message to indicate that the class has been added successfully."},{"lineNumber":460,"author":{"gitId":"xuche123"},"content":"   * Test case: `personalEvent shopping /t 2020-02-02 21:00 /e 2020-02-02 22:00 /l supermarket`"},{"lineNumber":461,"author":{"gitId":"xuche123"},"content":"   * Expected: Confirmation message to indicate that the personal event has been added successfully."},{"lineNumber":462,"author":{"gitId":"xuche123"},"content":"   "},{"lineNumber":463,"author":{"gitId":"xuche123"},"content":"3. Editing events"},{"lineNumber":464,"author":{"gitId":"xuche123"},"content":"   * Test case: `edit NUMBER` where `NUMBER` is the index of the event to be editted."},{"lineNumber":465,"author":{"gitId":"xuche123"},"content":"   * Expected: Confirmation message asking for the desired changes."},{"lineNumber":466,"author":{"gitId":"-"},"content":"   "}],"authorContributionMap":{"xuche123":131,"madbeez":50,"max-wunan":129,"-":27,"jiaaaqi":108,"Lee-Juntong":21}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"max-wunan"},"content":"# NUSchedule"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"A scheduler help you, who live in NUS, to manage your classes, assignments, personal events easily and efficiently."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"![Logo](diagrams/Logo.png)\u003cbr\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Useful links:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)"},{"lineNumber":11,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":""}],"authorContributionMap":{"max-wunan":5,"-":7}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"![](diagrams/Logo.png)"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"Yang Jiaqi"},{"lineNumber":6,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":"Zhuang Mengjin"},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":9,"author":{"gitId":"max-wunan"},"content":"Xu Che"},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":11,"author":{"gitId":"max-wunan"},"content":"Wu Nan"},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"Wan Shi Jie Brendan"},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":16,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Introduction"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"max-wunan"},"content":"NUSchedule is a straightforward yet sophisticated application that helps you manage your events. It allows you "},{"lineNumber":20,"author":{"gitId":"madbeez"},"content":" to keep track of not only your school events or activities (eg. lectures, tutorials, assignments), but "},{"lineNumber":21,"author":{"gitId":"madbeez"},"content":"also your personal activities. It utilises a command line interface (CLI), which accepts user input in the form of text. "},{"lineNumber":22,"author":{"gitId":"madbeez"},"content":"This gives the application both simplicity and speed, setting it apart from other apps such as NUSMods and Luminus. "},{"lineNumber":23,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":24,"author":{"gitId":"xuche123"},"content":"* [Quick Start](#quick-start)"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":"* [Features](#features)"},{"lineNumber":26,"author":{"gitId":"xuche123"},"content":"    * [View available commands](#view-available-commands---wu-nan)"},{"lineNumber":27,"author":{"gitId":"madbeez"},"content":"    * [Add an event](#add-an-event---brendan)"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    * [Edit an event](#edit-an-event---xu-che)"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"    * [Sort events](#sort-events---xu-che)"},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"    * [Find a location](#find-a-location---yang-jiaqi)"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"    * [List all locations](#list-all-locations---yang-jiaqi)"},{"lineNumber":32,"author":{"gitId":"madbeez"},"content":"    * [List all events](#list-all-events---brendan)"},{"lineNumber":33,"author":{"gitId":"xuche123"},"content":"    * [Clear events](#clear-events---wu-nan)"},{"lineNumber":34,"author":{"gitId":"xuche123"},"content":"    * [Mark event as done](#mark-event-as-done---wu-nan)"},{"lineNumber":35,"author":{"gitId":"madbeez"},"content":"    * [Reminder of deadlines](#reminder-of-deadlines---brendan)"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    * [Repeat of events](#repeat-of-events---zhuang-mengjin)"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    * [Delete an event](#delete-an-event---zhuang-mengjin)"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    * [Find a keyword](#find-a-keyword---zhuang-mengjin)"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"    * [Find a date](#find-a-date---zhuang-mengjin)"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"    * [Find locations exist in a certain group](#find-locations-exist-in-a-certain-group---zhuang-mengjin)"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"    * [Keep track on the study time](#keep-track-on-the-study-time---zhuang-mengjin)"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"    * [Make the app know you](#make-the-app-know-you---zhuang-mengjin)"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"    * [Exit the app](#exit-the-app---zhuang-mengjin)"},{"lineNumber":44,"author":{"gitId":"xuche123"},"content":"* [FAQs](#faq)"},{"lineNumber":45,"author":{"gitId":"madbeez"},"content":"* [Command Summary](#command-summary---brendan)"},{"lineNumber":46,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Quick Start"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"xuche123"},"content":"1. Ensure that you have Java 11 or above installed in your Computer."},{"lineNumber":51,"author":{"gitId":"xuche123"},"content":"2. Download the latest `nuschedule.jar` from here."},{"lineNumber":52,"author":{"gitId":"jiaaaqi"},"content":"3. Copy the file into a new folder, which will serve as the home folder for NuSchedule. "},{"lineNumber":53,"author":{"gitId":"jiaaaqi"},"content":"4. Copy the latest `location.txt` and `bus_stops.txt` files into a directory named `data` in the home folder."},{"lineNumber":54,"author":{"gitId":"jiaaaqi"},"content":"5. Open the command prompt and navigate to the home folder."},{"lineNumber":55,"author":{"gitId":"jiaaaqi"},"content":"6. Run `nuschedule.jar` using the following command: `java -jar nuschedule.jar`"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"### Tips:"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"In the following description, `DATE` refers to the date in the format yyyy-MM-dd. e.g. `2020-10-31` "},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"`TIME` refers to the time in the format HH:mm. e.g. `10:00`  "},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"`/t` refers to the starting time for PersonalEvent and Class, and deadline for Assignment  "},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"`/e` refers to the ending time for PersonalEvent and Class  "},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":68,"author":{"gitId":"max-wunan"},"content":"### View available commands - Wu Nan"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":70,"author":{"gitId":"xuche123"},"content":"Shows list of commands and provides a link to the user guide for more details. "},{"lineNumber":71,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":72,"author":{"gitId":"xuche123"},"content":"Format: `help`"},{"lineNumber":73,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"madbeez"},"content":"### Add an event - Brendan"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":77,"author":{"gitId":"madbeez"},"content":"Adds events/tasks to the schedule. Can support various types of tasks:  "},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":"* PersonalEvent  "},{"lineNumber":80,"author":{"gitId":"madbeez"},"content":"  Format:  "},{"lineNumber":81,"author":{"gitId":"madbeez"},"content":"  `personalEvent EVENTNAME /t DATE TIME /e DATE TIME /l LOCATION` for offline events.  "},{"lineNumber":82,"author":{"gitId":"madbeez"},"content":"  OR  "},{"lineNumber":83,"author":{"gitId":"madbeez"},"content":"  `personalEvent EVENTNAME /t DATE TIME /e DATE TIME /o MEETING_LINK /p MEETING_PASSWORD` for online events.  "},{"lineNumber":84,"author":{"gitId":"madbeez"},"content":"    "},{"lineNumber":85,"author":{"gitId":"madbeez"},"content":"  Note that `/e DATE TIME` is optional. You may input a personal event without an ending time.  "},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":"  In `/e DATE TIME`, `DATE` is optional. If you enter `/e TIME`, the default date will be the same "},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"  as the date that the event starts.  "},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":"  For online events, `/p MEETING_PASSWORD` is optional, since not all online events require a password."},{"lineNumber":89,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":90,"author":{"gitId":"Lee-Juntong"},"content":"* Assignment  "},{"lineNumber":91,"author":{"gitId":"madbeez"},"content":"  Format:  "},{"lineNumber":92,"author":{"gitId":"madbeez"},"content":"  `assignment EVENTNAME /t DATE TIME /l LOCATION`  "},{"lineNumber":93,"author":{"gitId":"madbeez"},"content":"  OR  "},{"lineNumber":94,"author":{"gitId":"madbeez"},"content":"  `assignment EVENTNAME /t DATE TIME /o SUBMISSION_LINK`  "},{"lineNumber":95,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"* Class  "},{"lineNumber":97,"author":{"gitId":"madbeez"},"content":"  Format:  "},{"lineNumber":98,"author":{"gitId":"madbeez"},"content":"  `class CLASSNAME /t DATE TIME /e DATE TIME /l LOCATION`  "},{"lineNumber":99,"author":{"gitId":"madbeez"},"content":"  OR  "},{"lineNumber":100,"author":{"gitId":"madbeez"},"content":"  `class CLASSNAME /t DATE TIME /e DATE TIME /o MEETING_LINK /p MEETING_PASSWORD`  "},{"lineNumber":101,"author":{"gitId":"-"},"content":"    "},{"lineNumber":102,"author":{"gitId":"madbeez"},"content":"  Similar to personal events, in `/e DATE TIME`, `DATE` is optional. For online events,`/p MEETING_PASSWORD` is optional.  "},{"lineNumber":103,"author":{"gitId":"madbeez"},"content":"  However, `/e DATE TIME` or `/e TIME` is required, since all classes should have an ending time. "},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"* SelfStudy"},{"lineNumber":106,"author":{"gitId":"Lee-Juntong"},"content":"  Format:"},{"lineNumber":107,"author":{"gitId":"Lee-Juntong"},"content":"   `selfStudy EVENTNAME /t DATE TIME /e DATE TIME /l LOCATION` for offline events.  "},{"lineNumber":108,"author":{"gitId":"Lee-Juntong"},"content":"    OR  "},{"lineNumber":109,"author":{"gitId":"Lee-Juntong"},"content":"    `selfStudy EVENTNAME /t DATE TIME /e DATE TIME /o MEETING_LINK /p MEETING_PASSWORD` for online events.  "},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":"      "},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":"    Note that `/e DATE TIME` is optional. You may input a personal event without an ending time.  "},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":"    In `/e DATE TIME`, `DATE` is optional. If you enter `/e TIME`, the default date will be the same "},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"    as the date that the event starts.  "},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":"    For online events, `/p MEETING_PASSWORD` is optional, since not all online events require a password.  "},{"lineNumber":115,"author":{"gitId":"-"},"content":"    "},{"lineNumber":116,"author":{"gitId":"madbeez"},"content":"Examples of usage: "},{"lineNumber":117,"author":{"gitId":"madbeez"},"content":"  "},{"lineNumber":118,"author":{"gitId":"Lee-Juntong"},"content":"`class CS2113 Lecture /t 2020-09-23 10:00 /e 12:00 /l LT27`"},{"lineNumber":119,"author":{"gitId":"madbeez"},"content":"`personalEvent Mom’s Birthday /t 2020-10-26 19:00 /l home`"},{"lineNumber":120,"author":{"gitId":"madbeez"},"content":"`assignment CS1010 Assignment /t 2020-01-04 23:59 /o Luminus`"},{"lineNumber":121,"author":{"gitId":"Lee-Juntong"},"content":"`selfStudy Prepare for exam /t 2020-11-26 15:00 /l home`  "},{"lineNumber":122,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":123,"author":{"gitId":"madbeez"},"content":"Adding a class:  "},{"lineNumber":124,"author":{"gitId":"madbeez"},"content":"![add1](diagrams/add1.png)  "},{"lineNumber":125,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":126,"author":{"gitId":"madbeez"},"content":"Adding a personal event:  "},{"lineNumber":127,"author":{"gitId":"madbeez"},"content":"![add2](diagrams/add2.png)  "},{"lineNumber":128,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":129,"author":{"gitId":"madbeez"},"content":"Adding an assignment:  "},{"lineNumber":130,"author":{"gitId":"madbeez"},"content":"![add3](diagrams/add3.png)  "},{"lineNumber":131,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":132,"author":{"gitId":"max-wunan"},"content":"Adding a self study event:\u003cbr\u003e"},{"lineNumber":133,"author":{"gitId":"Lee-Juntong"},"content":"![add5](diagrams/add5.png)  "},{"lineNumber":134,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":135,"author":{"gitId":"madbeez"},"content":"Adding an event with a timing clash:  "},{"lineNumber":136,"author":{"gitId":"madbeez"},"content":"![add4](diagrams/add4.png)"},{"lineNumber":137,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":138,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":139,"author":{"gitId":"xuche123"},"content":"### Edit an event - Xu Che"},{"lineNumber":140,"author":{"gitId":"xuche123"},"content":"The `edit` command allows you to edit the event type, description, start/end date and location for an existing "},{"lineNumber":141,"author":{"gitId":"xuche123"},"content":"event. You can start using this command by entering `edit INDEX`, where INDEX is the number of the task you want to"},{"lineNumber":142,"author":{"gitId":"xuche123"},"content":"edit. "},{"lineNumber":143,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":144,"author":{"gitId":"xuche123"},"content":"Format: `edit INDEX`  "},{"lineNumber":145,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":146,"author":{"gitId":"xuche123"},"content":"Example:  "},{"lineNumber":147,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":148,"author":{"gitId":"xuche123"},"content":"Let\u0027s say you have one event stored in NuSchedule currently:  "},{"lineNumber":149,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":150,"author":{"gitId":"xuche123"},"content":"![edit1](diagrams/edit1.png)"},{"lineNumber":151,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":152,"author":{"gitId":"xuche123"},"content":"Suppose you entered the timing incorrectly and would like to edit it to the correct timing. Enter the following command"},{"lineNumber":153,"author":{"gitId":"xuche123"},"content":"to edit the event:  "},{"lineNumber":154,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":155,"author":{"gitId":"xuche123"},"content":"![edit2](diagrams/edit2.png) "},{"lineNumber":156,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":157,"author":{"gitId":"xuche123"},"content":"Next, you will be prompted to enter the new values for the 5 fields which are type, description, location start and end "},{"lineNumber":158,"author":{"gitId":"xuche123"},"content":"date respectively. Enter your desired changes and press the `ENTER` key to go through the fields. You can leave a field "},{"lineNumber":159,"author":{"gitId":"xuche123"},"content":"blank and simply press enter if you do not want to make any changes.  "},{"lineNumber":160,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":161,"author":{"gitId":"xuche123"},"content":"![edit3](diagrams/edit3.png)"},{"lineNumber":162,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":163,"author":{"gitId":"xuche123"},"content":"Expected Outcome:  "},{"lineNumber":164,"author":{"gitId":"xuche123"},"content":"![edit4](diagrams/edit4.png)"},{"lineNumber":165,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":166,"author":{"gitId":"xuche123"},"content":"![edit5](diagrams/edit5.png)"},{"lineNumber":167,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":168,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":169,"author":{"gitId":"xuche123"},"content":"### Sort events - Xu Che"},{"lineNumber":170,"author":{"gitId":"xuche123"},"content":"With this command, you can sort all events by either their end time, location or their description. When sorting by time, events"},{"lineNumber":171,"author":{"gitId":"xuche123"},"content":"will be sorted in a chronological order. Events with an earlier end date will be sorted on top of events with later end"},{"lineNumber":172,"author":{"gitId":"xuche123"},"content":"dates. This way, you can prioritize the events that are due soon.   "},{"lineNumber":173,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":174,"author":{"gitId":"xuche123"},"content":"When sorting by description, the events will be sorted in alphabetical order according to their descriptions. Events "},{"lineNumber":175,"author":{"gitId":"xuche123"},"content":"with descriptions starting with \u0027a\u0027 will be sorted on top of events with descriptions starting with \u0027z\u0027 for example.  "},{"lineNumber":176,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":177,"author":{"gitId":"xuche123"},"content":"When sorting by location, the events will be sorted in alphabetical order according to their location. Events with"},{"lineNumber":178,"author":{"gitId":"xuche123"},"content":"offline locations will be sorted on top of locations with online locations.  "},{"lineNumber":179,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":180,"author":{"gitId":"xuche123"},"content":"Format: `sort SORT_CRITERIA`  "},{"lineNumber":181,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":182,"author":{"gitId":"xuche123"},"content":"Example: `sort description`"},{"lineNumber":183,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":184,"author":{"gitId":"xuche123"},"content":"Before sorting:  "},{"lineNumber":185,"author":{"gitId":"xuche123"},"content":"![sort1](diagrams/sort1.png)"},{"lineNumber":186,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":187,"author":{"gitId":"xuche123"},"content":"After sorting:  "},{"lineNumber":188,"author":{"gitId":"xuche123"},"content":"![sort2](diagrams/sort2.png)"},{"lineNumber":189,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":190,"author":{"gitId":"xuche123"},"content":"Sort by time:  "},{"lineNumber":191,"author":{"gitId":"xuche123"},"content":"![sort3](diagrams/sort3.png)"},{"lineNumber":192,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":193,"author":{"gitId":"xuche123"},"content":"Sort by location:  "},{"lineNumber":194,"author":{"gitId":"xuche123"},"content":"![sort4](diagrams/sort4.png)"},{"lineNumber":195,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":196,"author":{"gitId":"jiaaaqi"},"content":"### Find a location - Yang Jiaqi"},{"lineNumber":197,"author":{"gitId":"jiaaaqi"},"content":"With this command, you can find out about locations around NUS. Depending on the type of location, different additional "},{"lineNumber":198,"author":{"gitId":"jiaaaqi"},"content":"information will be shown together with the location (e.g. nearest building, nearest bus stops). "},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"jiaaaqi"},"content":"Format: `locate LOCATIONNAME` or `locate EVENTINDEX` "},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"jiaaaqi"},"content":"Example: `locate lt1`"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"jiaaaqi"},"content":"Find lecture theatres using location name: "},{"lineNumber":205,"author":{"gitId":"jiaaaqi"},"content":"![locate1](diagrams/locate1.png)"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"jiaaaqi"},"content":"Find buildings using location name: "},{"lineNumber":208,"author":{"gitId":"jiaaaqi"},"content":"![locate2](diagrams/locate2.png)"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"jiaaaqi"},"content":"Find locations using event index: "},{"lineNumber":211,"author":{"gitId":"jiaaaqi"},"content":"![locate3](diagrams/locate3.png)"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"jiaaaqi"},"content":"### List all locations - Yang Jiaqi"},{"lineNumber":214,"author":{"gitId":"jiaaaqi"},"content":"Displays a list of all locations within NUS"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"jiaaaqi"},"content":"Format: `locations`"},{"lineNumber":217,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":218,"author":{"gitId":"jiaaaqi"},"content":"Expected output: (list given here is incomplete) "},{"lineNumber":219,"author":{"gitId":"jiaaaqi"},"content":"![locations](diagrams/locations.png)"},{"lineNumber":220,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":221,"author":{"gitId":"madbeez"},"content":"### List all events - Brendan"},{"lineNumber":222,"author":{"gitId":"xuche123"},"content":"Shows you a list of all events.  "},{"lineNumber":223,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":224,"author":{"gitId":"xuche123"},"content":"Format: `list`  "},{"lineNumber":225,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":226,"author":{"gitId":"madbeez"},"content":"Example Output:  "},{"lineNumber":227,"author":{"gitId":"madbeez"},"content":"![list](diagrams/list.png)"},{"lineNumber":228,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":229,"author":{"gitId":"max-wunan"},"content":"### Clear events - Wu Nan"},{"lineNumber":230,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":231,"author":{"gitId":"max-wunan"},"content":"Delete events existing in the list, you can choose to delete all, auto delete or delete events before a certain date:"},{"lineNumber":232,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":233,"author":{"gitId":"max-wunan"},"content":"* Clear all events"},{"lineNumber":234,"author":{"gitId":"Lee-Juntong"},"content":"  Format: `clear`"},{"lineNumber":235,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":236,"author":{"gitId":"max-wunan"},"content":"* Switch the autoClear function on so that events happened one month ago will be automatically cleared."},{"lineNumber":237,"author":{"gitId":"Lee-Juntong"},"content":"  Format: `autoClear on`"},{"lineNumber":238,"author":{"gitId":"max-wunan"},"content":"  Note that this function will clear all events which happened one month ago no matter they are done or not.  "},{"lineNumber":239,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":240,"author":{"gitId":"Lee-Juntong"},"content":"* Switch the autoClear function off  "},{"lineNumber":241,"author":{"gitId":"Lee-Juntong"},"content":"  Format: `autoClear off`"},{"lineNumber":242,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":243,"author":{"gitId":"max-wunan"},"content":"* Clear events happened before a certain date"},{"lineNumber":244,"author":{"gitId":"max-wunan"},"content":"  Format: `clearBefore CLEAR_DATE`"},{"lineNumber":245,"author":{"gitId":"max-wunan"},"content":"  "},{"lineNumber":246,"author":{"gitId":"max-wunan"},"content":"  Example: `clearBefore 2020-03-10`"},{"lineNumber":247,"author":{"gitId":"xuche123"},"content":"  "},{"lineNumber":248,"author":{"gitId":"madbeez"},"content":"Example Output:  "},{"lineNumber":249,"author":{"gitId":"madbeez"},"content":"![clear](diagrams/clear.png)"},{"lineNumber":250,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":251,"author":{"gitId":"max-wunan"},"content":"### Mark event as done - Wu Nan"},{"lineNumber":252,"author":{"gitId":"madbeez"},"content":"Mark an event that has been completed with `DONE`.  "},{"lineNumber":253,"author":{"gitId":"Lee-Juntong"},"content":"Note that the events which are not assignments, cannot be done before its ending time."},{"lineNumber":254,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":255,"author":{"gitId":"xuche123"},"content":"Format: `done INDEX`  "},{"lineNumber":256,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":257,"author":{"gitId":"madbeez"},"content":"Example: `done 2`"},{"lineNumber":258,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":259,"author":{"gitId":"madbeez"},"content":"Example Output:  "},{"lineNumber":260,"author":{"gitId":"madbeez"},"content":"![done](diagrams/done.png)  "},{"lineNumber":261,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":262,"author":{"gitId":"madbeez"},"content":"### Reminder of deadlines - Brendan"},{"lineNumber":263,"author":{"gitId":"madbeez"},"content":"Shows a list of all events for today\u0027s date."},{"lineNumber":264,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":265,"author":{"gitId":"madbeez"},"content":"Format: `reminder`"},{"lineNumber":266,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":267,"author":{"gitId":"madbeez"},"content":"Example Output:  "},{"lineNumber":268,"author":{"gitId":"madbeez"},"content":"![reminder](diagrams/reminder.png)"},{"lineNumber":269,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":270,"author":{"gitId":"Lee-Juntong"},"content":"\u003c!-- @@author Lee-Juntong --\u003e"},{"lineNumber":271,"author":{"gitId":"Lee-Juntong"},"content":"### Repeat of events - Zhuang Mengjin"},{"lineNumber":272,"author":{"gitId":"Lee-Juntong"},"content":"Repeat the selected event for several weeks, or repeat all classes this week for several weeks."},{"lineNumber":273,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":274,"author":{"gitId":"Lee-Juntong"},"content":"Format: `repeat INDEX NUMBER_OF_WEEKS` OR `repeat all NUMBER_OF_WEEKS`  "},{"lineNumber":275,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":276,"author":{"gitId":"Lee-Juntong"},"content":"Example: `repeat 3 1`, `repeat all 2`  "},{"lineNumber":277,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":278,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":279,"author":{"gitId":"Lee-Juntong"},"content":"![Repeat1](diagrams/repeat1.png)  "},{"lineNumber":280,"author":{"gitId":"Lee-Juntong"},"content":"![Repeat2](diagrams/repeat2.png)"},{"lineNumber":281,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":282,"author":{"gitId":"Lee-Juntong"},"content":"### Delete an event - Zhuang Mengjin"},{"lineNumber":283,"author":{"gitId":"Lee-Juntong"},"content":"Delete the selected event from the list."},{"lineNumber":284,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":285,"author":{"gitId":"Lee-Juntong"},"content":"Format: `delete INDEX`"},{"lineNumber":286,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":287,"author":{"gitId":"Lee-Juntong"},"content":"Example: `delete 1`  "},{"lineNumber":288,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":289,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":290,"author":{"gitId":"Lee-Juntong"},"content":"![Delete](diagrams/delete.png)"},{"lineNumber":291,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":292,"author":{"gitId":"Lee-Juntong"},"content":"### Find a keyword - Zhuang Mengjin"},{"lineNumber":293,"author":{"gitId":"Lee-Juntong"},"content":"Find the events with given keyword. Note that it\u0027s case-sensitive."},{"lineNumber":294,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":295,"author":{"gitId":"Lee-Juntong"},"content":"Format: `find KEYWORD`  "},{"lineNumber":296,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":297,"author":{"gitId":"Lee-Juntong"},"content":"Example: `find CS`"},{"lineNumber":298,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":299,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":300,"author":{"gitId":"Lee-Juntong"},"content":"![Find](diagrams/find.png)  "},{"lineNumber":301,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":302,"author":{"gitId":"Lee-Juntong"},"content":"### Find a date - Zhuang Mengjin"},{"lineNumber":303,"author":{"gitId":"Lee-Juntong"},"content":"Find the events happen on the given date.  "},{"lineNumber":304,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":305,"author":{"gitId":"Lee-Juntong"},"content":"Format: `date yyyy-MM-dd`  "},{"lineNumber":306,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":307,"author":{"gitId":"Lee-Juntong"},"content":"Example `date 2020-11-10`  "},{"lineNumber":308,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":309,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":310,"author":{"gitId":"Lee-Juntong"},"content":"![findDate](diagrams/findDate.png)"},{"lineNumber":311,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":312,"author":{"gitId":"Lee-Juntong"},"content":"### Find locations exist in a certain group - Zhuang Mengjin"},{"lineNumber":313,"author":{"gitId":"Lee-Juntong"},"content":"Find the locations in NUS that belongs to certain faculty or the hostels."},{"lineNumber":314,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":315,"author":{"gitId":"Lee-Juntong"},"content":"Format: `FOS` OR `FOE` OR `SOC` OR `BIZ` OR `HOSTEL` OR `SDE` OR `FASS`  "},{"lineNumber":316,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":317,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":318,"author":{"gitId":"Lee-Juntong"},"content":"![locationsInNUS](diagrams/locationsInNUS.png)  "},{"lineNumber":319,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":320,"author":{"gitId":"Lee-Juntong"},"content":"### Keep track on the study time - Zhuang Mengjin"},{"lineNumber":321,"author":{"gitId":"Lee-Juntong"},"content":"Find the amount of time you spent on study on a certain date."},{"lineNumber":322,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":323,"author":{"gitId":"Lee-Juntong"},"content":"Format: `studyTime DATE`  "},{"lineNumber":324,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":325,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":326,"author":{"gitId":"Lee-Juntong"},"content":"![studyTime](diagrams/studyTime.png)"},{"lineNumber":327,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":328,"author":{"gitId":"Lee-Juntong"},"content":"### Make the app know you - Zhuang Mengjin"},{"lineNumber":329,"author":{"gitId":"Lee-Juntong"},"content":"Tell the app your name, and whether you are a professor or a student. Whether you indicate yourself as a professor,"},{"lineNumber":330,"author":{"gitId":"Lee-Juntong"},"content":" or a student, will make a difference in another function, which will come in a later version."},{"lineNumber":331,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":332,"author":{"gitId":"Lee-Juntong"},"content":"Format: `student NAME` OR `professor NAME`"},{"lineNumber":333,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":334,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":335,"author":{"gitId":"Lee-Juntong"},"content":"![userInfo1](diagrams/userInfo1.png)\u003cbr\u003e"},{"lineNumber":336,"author":{"gitId":"Lee-Juntong"},"content":"![userInfo2](diagrams/userInfo2.png)"},{"lineNumber":337,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":338,"author":{"gitId":"Lee-Juntong"},"content":"### Exit the app - Zhuang Mengjin"},{"lineNumber":339,"author":{"gitId":"Lee-Juntong"},"content":"Exit."},{"lineNumber":340,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":341,"author":{"gitId":"Lee-Juntong"},"content":"Format: `bye`"},{"lineNumber":342,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":343,"author":{"gitId":"Lee-Juntong"},"content":"Example Output:\u003cbr\u003e"},{"lineNumber":344,"author":{"gitId":"Lee-Juntong"},"content":"![Exit](diagrams/exit.png)"},{"lineNumber":345,"author":{"gitId":"Lee-Juntong"},"content":"\u003c!-- @@author --\u003e"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer? "},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"xuche123"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains "},{"lineNumber":352,"author":{"gitId":"xuche123"},"content":"the data of your previous AddressBook home folder."},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"max-wunan"},"content":"**Q**: What if I cannot run the application, or the application suddenly stops running unexpectedly?"},{"lineNumber":355,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":356,"author":{"gitId":"max-wunan"},"content":"**A**: If you cannot run the application at the beginning, please refer back to the Quick Start section and check"},{"lineNumber":357,"author":{"gitId":"max-wunan"},"content":"whether the jar file is in the correct folder. If you cannot find what is wrong, please take a screenshot of your computer"},{"lineNumber":358,"author":{"gitId":"max-wunan"},"content":"and report it as an issue to [this link](https://github.com/AY2021S1-CS2113T-F14-4/tp/issues)."},{"lineNumber":359,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":360,"author":{"gitId":"max-wunan"},"content":"**Q**: What should I do if I cannot get the input format for adding events correctly?"},{"lineNumber":361,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":362,"author":{"gitId":"max-wunan"},"content":"**A**: For all wrong input format, there will be an error message to tell you what exactly you have input wrongly. If"},{"lineNumber":363,"author":{"gitId":"max-wunan"},"content":"the error message is not helpful, please refer back to relevant sections in Features. We recommend you to follow the "},{"lineNumber":364,"author":{"gitId":"max-wunan"},"content":"instructions provided closely as the current version of NUSchedule has a relatively high requirement in terms of input "},{"lineNumber":365,"author":{"gitId":"max-wunan"},"content":"accuracy. If you really cannot find what is wrong, please report it as an issue to [this link](https://github.com/AY2021S1-CS2113T-F14-4/tp/issues)."},{"lineNumber":366,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":367,"author":{"gitId":"madbeez"},"content":"## Command Summary - Brendan"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"xuche123"},"content":"|Action|Command|Example|"},{"lineNumber":370,"author":{"gitId":"xuche123"},"content":"|------|-------|-------|"},{"lineNumber":371,"author":{"gitId":"Lee-Juntong"},"content":"|add|`EVENTTYPE EVENTNAME /t DATE TIME` `/e DATE TIME`(optional personal event and self study, compulsory for class, must not have for assignment) `/l LOCATION` OR `/o LINK` `/p PASSWORD`(optional)|`personalEvent Mom’s Birthday /t 2020-10-26 19:00 /l home`|"},{"lineNumber":372,"author":{"gitId":"max-wunan"},"content":"|clear|`clear` OR `autoClear STATUS` OR `clearBefore CLEAR_DATE` |`clearBefore 2020-10-22`|"},{"lineNumber":373,"author":{"gitId":"jiaaaqi"},"content":"|delete|`delete INDEX`|`delete 1`|"},{"lineNumber":374,"author":{"gitId":"xuche123"},"content":"|done|`done INDEX` |`done 1` |"},{"lineNumber":375,"author":{"gitId":"xuche123"},"content":"|edit|`edit`, then fill in each fields when prompted and press `ENTER` to move on to the next field|`edit 1` `ENTER` `class` `ENTER` `cs2113t` `ENTER` `\\l school` `ENTER` `2020-10-26 19:00` `ENTER` `2020-10-26 20:00`|"},{"lineNumber":376,"author":{"gitId":"Lee-Juntong"},"content":"|help|`help`|"},{"lineNumber":377,"author":{"gitId":"Lee-Juntong"},"content":"|list|`list`|"},{"lineNumber":378,"author":{"gitId":"jiaaaqi"},"content":"|locate|`locate LOCATION_NAME` OR `locate EVENT_INDEX`|`locate LT1`|"},{"lineNumber":379,"author":{"gitId":"xuche123"},"content":"|sort|`sort SORT_CRITERIA` |`sort description`|"},{"lineNumber":380,"author":{"gitId":"Lee-Juntong"},"content":"|reminder|`reminder`|`reminder`|"},{"lineNumber":381,"author":{"gitId":"Lee-Juntong"},"content":"|repeat|`repeat INDEX NUMBER_OF_WEEKS` OR `repeat all NUMBER_OF_WEEKS`|`repeat all 1`|   "},{"lineNumber":382,"author":{"gitId":"Lee-Juntong"},"content":"|find (keyword)|`find KEYWORD`|`find book`|"},{"lineNumber":383,"author":{"gitId":"Lee-Juntong"},"content":"|find (date)|`date`|`date 2020-11-08`|"},{"lineNumber":384,"author":{"gitId":"Lee-Juntong"},"content":"|calculate study time|`studyTime DATE`|`studyTime 2020-11-08`|"},{"lineNumber":385,"author":{"gitId":"Lee-Juntong"},"content":"|find locations belongs to a certain group|`FACULTY` or `HOSTEL`|`FOE`,`FOS`|"},{"lineNumber":386,"author":{"gitId":"Lee-Juntong"},"content":"|UserInfo|`student NAME` OR `professor NAME`|`student LeeJuntong`|"},{"lineNumber":387,"author":{"gitId":"Lee-Juntong"},"content":"|exit|`bye`|`bye`|"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"xuche123":94,"madbeez":62,"max-wunan":43,"-":33,"Lee-Juntong":132,"jiaaaqi":25}},{"path":"docs/team/jiaaaqi.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"# Yang Jiaqi - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"## Project: NUSchedule"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"NuSchedule is a desktop task management application used for keeping track of user\u0027s events. The user interacts with it "},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"using a Command Line Interface (CLI). It is written in Java and has around 5 kLoC."},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"Given below are my contributions to the project:  "},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"* __Main Frame:__ Added the Location classes to an event "},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"    * What it does: a location element will allow the user to save the location of their events. The location element "},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"    will also include additional information about the location. "},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"    * Justification: This feature will users to note down the location which the event is occurring at. "},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"    If the place is located within NUS, the additional information would include the nearest buildings and bus stops, "},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    which allows our target audience to be able to easily find the exact place. "},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"* __Main Frame:__ Added Location List classes"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"    * What it does: record all the pre-saved location data of places within NUS. It also includes a separate bus stops "},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"    list, which saves bus stop data. Users are able to view the entire list by keying in the command `locations` or "},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"    `busstops`."},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"    "},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"* __Storage:__ Added location data of locations within NUS"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"* __New Feature:__ Added a `locate` command to find a location using location name or event index"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"    * Justification: This feature will allow user to receive location information. It allows users to find more "},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"    information using a location name, or an event index based on the event list. "},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"* __Code Contributed:__ [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djiaaaqi)"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"* __Project Management:__ "},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"    * Managed releases `v1.0` - `v2.0` on GitHub"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":32,"author":{"gitId":"jiaaaqi"},"content":"* __Documentation:__"},{"lineNumber":33,"author":{"gitId":"jiaaaqi"},"content":"    * User guide: "},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"        * Added documentation for `locate` command ([#84](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/84), [#176](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/176))"},{"lineNumber":35,"author":{"gitId":"jiaaaqi"},"content":"    * Developer guide: "},{"lineNumber":36,"author":{"gitId":"jiaaaqi"},"content":"        * Added design details for Location, under Model ([#69](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/69/files), [#75](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/75))"},{"lineNumber":37,"author":{"gitId":"jiaaaqi"},"content":"        * Added implementation details for `locate` feature ([#69](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/69/files), [#75](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/75))"},{"lineNumber":38,"author":{"gitId":"jiaaaqi"},"content":"        * Added target user profile and value proposition ([#67](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/67/files))"},{"lineNumber":39,"author":{"gitId":"jiaaaqi"},"content":"        "},{"lineNumber":40,"author":{"gitId":"jiaaaqi"},"content":"* __Community:__"},{"lineNumber":41,"author":{"gitId":"jiaaaqi"},"content":"    * PRs reviewed (with non-trivial comments): [Fitr](https://github.com/nus-cs2113-AY2021S1/tp/pull/16)"},{"lineNumber":42,"author":{"gitId":"jiaaaqi"},"content":"    * Reported bugs in other teams: example [1](https://github.com/AY2021S1-CS2113T-W12-4/tp/issues/323), [2](https://github.com/AY2021S1-CS2113T-W12-4/tp/issues/319), [3](https://github.com/AY2021S1-CS2113T-W12-4/tp/issues/322)"}],"authorContributionMap":{"jiaaaqi":42}},{"path":"docs/team/lee-juntong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"# Project: NUSchedule"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"NuSchedule is a desktop task management application used for keeping track of user\u0027s events. The user interacts with it using a CLI. It is written in Java and has around 5 kLoC."},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"Given below are my contributions to the project.  "},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"* **Main Frame**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"  * Events and its subclasses: the basic elements in this product. All commands depend on them."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"  * EventList class: provides the functions to operate on the list of events. "},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"  * Storage: the way to store the data as well as load them from the hard disk."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"  * UI,Parser, Command, and the main running class: makes the product object oriented. "},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"  "},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to add events, and manage different cases accordingly."},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"  "},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to record amount of time spent on study on certain date."},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"  * What it does: allows the user to check what is the amount of time spent on study on the day."},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"  * Justification: this feature provides the way to know the amount of effort the user spent on study, which is useful for NUS students."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"  * Highlights: the implementation uses several filters of the stream of the list of events, and only the appropriate ones are "},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"  recorded. It also considers the case when certain event is across more than one day, the study time will be calculated correctly"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"  for different dates."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":" "},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to mark an event as done, as well as reject it if the current time is before the ending time."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to delete an event."},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to set the name of the user, as well as indicate the occupation. (i.e. student or professor)"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to find the events with given keyword in the description."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to find the events happening on the given date."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to Repeat of required events for several weeks."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"  * Highlights: Added copy constructor for Event and its subclasses, because Java does not pass reference as a copy, so "},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"  we need to create a copy to avoid the edit being effective to the original object."},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"  * Credits: The code to compare whether 2 localDateTimes are within the same week. "},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"  Provided by Sunil Katti [here](https://stackoverflow.com/a/56246095)  "},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"  "},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to exit the application. "},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"* **New Feature**: Added the ability to print the list of locations at the selected area in NUS. "},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dLee-Juntong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dLee-Juntong\u0026tabRepo\u003dAY2021S1-CS2113T-F14-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"* **Project management**:"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"  * Managed releases `v1.0` - `v2.1` (3 releases) on GitHub"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"* **Enhancements to existing features**:"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"  * Fix bugs happening to the features. (Pull requests [\\#37](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/37), [\\#145](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/145))"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"  * Make Auto Clear as an option that user can turn on or off. (Pull request [\\#182](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/182))"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"  "},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"* **Documentation**:"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"  * User Guide:"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"    * Add documentation for the features delete, find, studyTime, add events, exit, repeat, find base on date, make the app know you, and find locations exist in a certain group  [\\#199](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/199)"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"    * Did cosmetic tweaks to existing documentation of features `done`, `autoClear` : [\\#199](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/199)"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"  * Developer Guide:"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"    * Make the hyperlinks work properly [\\#92](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/92)"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"* **Community**:"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"  * PRs reviewed (with non-trivial review comments):[\\#162](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/162), [\\#172](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/172), [\\#147](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/147), [\\#144](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/144)"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2113-AY2021S1/forum/issues/48#issuecomment-709282848))"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/Lee-Juntong/ped/issues/9), [2](https://github.com/Lee-Juntong/ped/issues/13), [3](https://github.com/Lee-Juntong/ped/issues/14))"}],"authorContributionMap":{"Lee-Juntong":61}},{"path":"docs/team/madbeez.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"# Wan Shi Jie Brendan\u0027s Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"# Project: NUSchedule"},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":"NuSchedule is a task scheduling app targeted at NUS students and staff. It is written in Java and has about 5 kLoC. "},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":"The user interacts with the app via a command line interface."},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"## Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"Given below are my contributions to the project."},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"* **New Feature**: Implemented the ability to add new events"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"  * What it does: This function allows users to add new events to their schedule, like classes and assignments."},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"  It then provides feedback on whether the event was added successfully."},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"  * Justification: This function is core to the app as it allows"},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"  * Highlights: The parameters of this command must be updated when new features are added to the app."},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"  "},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":"* **New Feature**: Added the ability to get a reminder of events/tasks for the current date"},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":"  * What it does: Allows users to know what events they have for the day, and the deadlines they need to submit assignments by."},{"lineNumber":18,"author":{"gitId":"madbeez"},"content":"  * Justification: Helps forgetful users to remember what tasks are due.  "},{"lineNumber":19,"author":{"gitId":"madbeez"},"content":"  "},{"lineNumber":20,"author":{"gitId":"madbeez"},"content":"* **Enhancements to existing features**:"},{"lineNumber":21,"author":{"gitId":"madbeez"},"content":"  * Updated Parser to work with new features"},{"lineNumber":22,"author":{"gitId":"madbeez"},"content":"  * Fixed bugs related to Parser and AddCommand"},{"lineNumber":23,"author":{"gitId":"madbeez"},"content":"* **Code Contributed**: [Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmadbeez\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)   "},{"lineNumber":24,"author":{"gitId":"madbeez"},"content":"* **Project management**:"},{"lineNumber":25,"author":{"gitId":"madbeez"},"content":"  * Managed releases `v1.0` - `v2.1` (3 releases) on GitHub"},{"lineNumber":26,"author":{"gitId":"madbeez"},"content":"  "},{"lineNumber":27,"author":{"gitId":"madbeez"},"content":"* **Documentation**:"},{"lineNumber":28,"author":{"gitId":"madbeez"},"content":"  * User Guide"},{"lineNumber":29,"author":{"gitId":"madbeez"},"content":"    * Added documentation for add, reminder and list features"},{"lineNumber":30,"author":{"gitId":"madbeez"},"content":"    * Added section for command summary "},{"lineNumber":31,"author":{"gitId":"madbeez"},"content":"  * Developer Guide"},{"lineNumber":32,"author":{"gitId":"madbeez"},"content":"    * Added documentation for UI and Logic components"},{"lineNumber":33,"author":{"gitId":"madbeez"},"content":"    * Added documentation for add, reminder, list, find based on date, and user info features"},{"lineNumber":34,"author":{"gitId":"madbeez"},"content":"    * Added sections on target user profile and user stories"},{"lineNumber":35,"author":{"gitId":"madbeez"},"content":"    "},{"lineNumber":36,"author":{"gitId":"madbeez"},"content":"* **Community**"},{"lineNumber":37,"author":{"gitId":"madbeez"},"content":"  * PRs reviewed(with non-trivial review comments): [1](https://github.com/nus-cs2113-AY2021S1/tp/pull/14), [2](https://github.com/nus-cs2113-AY2021S1/ip/pull/215)"},{"lineNumber":38,"author":{"gitId":"madbeez"},"content":"  * Reported bugs for other teams in the class (examples: [1](https://github.com/madbeez/ped/issues/4), [2](https://github.com/madbeez/ped/issues/5), [3](https://github.com/madbeez/ped/issues/8) )"},{"lineNumber":39,"author":{"gitId":"madbeez"},"content":"  "}],"authorContributionMap":{"madbeez":38,"jiaaaqi":1}},{"path":"docs/team/max-wunan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"max-wunan"},"content":"# Wu Nan - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"## Project: NUSchedule:"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"NUSchedule is a desktop task management application used for keeping track of user\u0027s events. The user interacts with it "},{"lineNumber":6,"author":{"gitId":"max-wunan"},"content":"using a Command Line Interface (CLI). It is written in Java and has around 5 kLoC."},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":"Given below are my contributions to this project:"},{"lineNumber":9,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"* __New Feature:__ Added the ability to view all available commands"},{"lineNumber":11,"author":{"gitId":"max-wunan"},"content":"    * What it does: This function allows users to view the current version of this application by typing in `help`, and gives them a brief "},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":"    description of all features. This function also provides users with a link to the detailed user guide."},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"    * Justification: This feature improves the user-friendliness of this application greatly as users may choose to "},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"    refer to help message whenever they feel lost or are unfamiliar yet with the usage of NUSchedule. Also, with further"},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":"    development of NuSchedule, there will be more and more features/commands available, this function will become more "},{"lineNumber":16,"author":{"gitId":"max-wunan"},"content":"    and more useful for users to refer to."},{"lineNumber":17,"author":{"gitId":"max-wunan"},"content":"    * Highlights: The code for this function needs to be updated everytime there is a new feature, or a new version release."},{"lineNumber":18,"author":{"gitId":"max-wunan"},"content":"    \u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"max-wunan"},"content":"* __New Feature:__ Added the ability to clear events based on users\u0027 needs"},{"lineNumber":20,"author":{"gitId":"max-wunan"},"content":"    * What it does:  This function allows users to clear all events by typing in `clear`, or clear events that happened "},{"lineNumber":21,"author":{"gitId":"max-wunan"},"content":"    before a certain date by typing in `clearBefore CLEAR_DATE`, or enable autoClear function of this application by"},{"lineNumber":22,"author":{"gitId":"max-wunan"},"content":"    typing in `autoClear`, which clears all events that happened one month ago automatically."},{"lineNumber":23,"author":{"gitId":"max-wunan"},"content":"    * Justification: This feature improves the product efficiency and user-friendliness as it allows the space and memory"},{"lineNumber":24,"author":{"gitId":"max-wunan"},"content":"    for data storage to be reduced, hence the speed of running this application can be increased. This function also "},{"lineNumber":25,"author":{"gitId":"max-wunan"},"content":"    allows users to view all their events more efficiently as those unwanted events are cleared, users will be able to"},{"lineNumber":26,"author":{"gitId":"max-wunan"},"content":"    have a more clean and straight-forward view of all ongoing events."},{"lineNumber":27,"author":{"gitId":"max-wunan"},"content":"    * Highlights: This function allows 3 different commands, and the status of `autoClear` function can be kept after"},{"lineNumber":28,"author":{"gitId":"max-wunan"},"content":"    the application stops running."},{"lineNumber":29,"author":{"gitId":"max-wunan"},"content":"    \u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"max-wunan"},"content":"* __Code Contributed:__ [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmax-wunan\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":31,"author":{"gitId":"max-wunan"},"content":"    \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"max-wunan"},"content":"* __Project Management:__"},{"lineNumber":33,"author":{"gitId":"max-wunan"},"content":"    * Managed releases `v1.0` - `v2.1` (3 releases) on GitHub"},{"lineNumber":34,"author":{"gitId":"max-wunan"},"content":"    \u003cbr\u003e"},{"lineNumber":35,"author":{"gitId":"max-wunan"},"content":"* __Documentation:__"},{"lineNumber":36,"author":{"gitId":"max-wunan"},"content":"    * User Guide:"},{"lineNumber":37,"author":{"gitId":"max-wunan"},"content":"        * Added the project logo picture [#79](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/79), [#179](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/179)"},{"lineNumber":38,"author":{"gitId":"max-wunan"},"content":"        * Added documentation for help and clear function [#169](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/169), [#175](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/175)"},{"lineNumber":39,"author":{"gitId":"max-wunan"},"content":"        * Added several solutions in Q\u0026A section [#189](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/189)"},{"lineNumber":40,"author":{"gitId":"max-wunan"},"content":"    * Developer Guide:"},{"lineNumber":41,"author":{"gitId":"max-wunan"},"content":"        * Added the project logo picture [#79](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/79), [#179](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/179)"},{"lineNumber":42,"author":{"gitId":"max-wunan"},"content":"        * Added implementation details and sequence diagrams for help and clear function [#83](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/83)"},{"lineNumber":43,"author":{"gitId":"max-wunan"},"content":"    \u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"max-wunan"},"content":"* __Community:__"},{"lineNumber":45,"author":{"gitId":"max-wunan"},"content":"    * Reviewed Developer Guide of the team and fixed format error [#86](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/86/files)"},{"lineNumber":46,"author":{"gitId":"max-wunan"},"content":"    * PRs reviewed (with non-trivial review comments): [#174](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/174#pullrequestreview-526179937)"},{"lineNumber":47,"author":{"gitId":"max-wunan"},"content":"    * Reported for bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/221), [2](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/223), [3](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/224))"},{"lineNumber":48,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":49,"author":{"gitId":"max-wunan"},"content":"    "}],"authorContributionMap":{"max-wunan":49}},{"path":"docs/team/xuche123.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"# Project: NUSchedule"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"NUSchedule is a task management application written in Java. It is operated on the command line interface."},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"Given below are my contributions to the project."},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"* **New Feature**: Added the ability to edit previous events."},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"  * What it does: Allows the user to edit previous commands. The user can choose to edit individual fields of an event such as just choosing to edit the location of an event."},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"  * Justification: This feature improves the product significantly because it provides the user a quick and simple method to correct any mistakes made in the addition of an event. Instead of deleting the event and creating a new one, the user can just edit that particular event with the correct field information."},{"lineNumber":10,"author":{"gitId":"xuche123"},"content":"  * Highlights: This command has to be constantly updated whenever a new event class is added to allow for the editing of an event into that event class. Testing and implementation of this command was difficult as the command has to cover for all of the event classes.  "},{"lineNumber":11,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":12,"author":{"gitId":"xuche123"},"content":"* **New Feature**: Added a sort command that allows the user to sort events."},{"lineNumber":13,"author":{"gitId":"xuche123"},"content":"  * What it does: Allows the user to sort previous commands. The user can organise their events to by sorting them in a specified order."},{"lineNumber":14,"author":{"gitId":"xuche123"},"content":"  * Justification: This feature improves the product significantly as it allows the user to order the events, allowing the user to prioritise certain events over others. For example, the user can choose to sort by time, which will cause eventing that are due soon to be sorted on top of events that are due later in the future."},{"lineNumber":15,"author":{"gitId":"xuche123"},"content":"  * Highlights: This command was implemented by making use of comparators. Sorting by location was challenging to implement as there were two location types, online and offline locations and the command had to account for situations where either of them where null.  "},{"lineNumber":16,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":17,"author":{"gitId":"xuche123"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dxuche123\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":18,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":19,"author":{"gitId":"xuche123"},"content":"* **Project management**:"},{"lineNumber":20,"author":{"gitId":"xuche123"},"content":"  * Managed releases `v1.0` - `v2.1` (3 releases) on GitHub"},{"lineNumber":21,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":22,"author":{"gitId":"xuche123"},"content":"* **Documentation**:"},{"lineNumber":23,"author":{"gitId":"xuche123"},"content":"  * User Guide:"},{"lineNumber":24,"author":{"gitId":"xuche123"},"content":"    * Added documentation for the features `edit` and `sort` [\\#167](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/167)"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":"    * Added sections on Introduction, quick start and command summary [\\#78](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/78)"},{"lineNumber":26,"author":{"gitId":"xuche123"},"content":"  * Developer Guide:"},{"lineNumber":27,"author":{"gitId":"xuche123"},"content":"    * Added implementation details and sequence diagrams of the `edit` and `sort` feature. [\\#171](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/171)"},{"lineNumber":28,"author":{"gitId":"xuche123"},"content":"    * Added sections on Introduction, Architecture, Documentation and Appendix [\\#74](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/74), [\\#171](https://github.com/AY2021S1-CS2113T-F14-4/tp/pull/171)"},{"lineNumber":29,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":30,"author":{"gitId":"xuche123"},"content":"* **Community**:"},{"lineNumber":31,"author":{"gitId":"max-wunan"},"content":"  * Reviewed developer guide for team [Study It](https://github.com/nus-cs2113-AY2021S1/tp/pulls?q\u003dis%3Aopen+is%3Apr+CS2113T-T12-1+)."},{"lineNumber":32,"author":{"gitId":"xuche123"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues/177), [2](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues/175), [3](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues/174))"},{"lineNumber":33,"author":{"gitId":"xuche123"},"content":""}],"authorContributionMap":{"xuche123":32,"max-wunan":1}},{"path":"src/main/java/NuSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"import command.AutoClearCommand;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":"import command.Command;"},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.CreatingFileException;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NuScheduleException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import parser.Parser;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":" * Main entry-point for the NUSchedule application."},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"public class NuSchedule {"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    private Storage storage;"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    private EventList events;"},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"    private static BusStopList busStops;"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"    private static LocationList locations;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    private final UI ui;"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    private UserInfo userInfo \u003d new UserInfo(\"\", \"\",false);"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"    public NuSchedule(String... filePaths) {"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"        ui \u003d new UI();"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"        busStops \u003d new BusStopList();"},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"        locations \u003d new LocationList();"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"            storage \u003d new Storage(filePaths);"},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"        } catch (CreatingFileException e) {"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"jiaaaqi"},"content":"            events \u003d new EventList(storage.loadEvents(locations));"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"            userInfo \u003d storage.loadUserInfo();"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (NuScheduleException e) {"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"            ui.showLoadingError();"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"            events \u003d new EventList();"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"        storage.loadBusStopData(busStops.getBusStopList());"},{"lineNumber":46,"author":{"gitId":"jiaaaqi"},"content":"        storage.loadLocationData(locations.getLocationList());"},{"lineNumber":47,"author":{"gitId":"jiaaaqi"},"content":"        // ui.printBusStopList(busStops.getBusStopList());"},{"lineNumber":48,"author":{"gitId":"jiaaaqi"},"content":"        // ui.printLocationList(locations.getLocationList());"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"     * Runs the program until termination."},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"    public void run() {"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printGreetingMessage(userInfo);"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"            AutoClearCommand.autoClear(events, storage, userInfo);"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (WritingFileException e) {"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"        boolean isExit \u003d false;"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"        while (!isExit) {"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"                ui.printLine(); // show the divider line (\"_______\")"},{"lineNumber":67,"author":{"gitId":"xuche123"},"content":"                int size \u003d events.getSize();"},{"lineNumber":68,"author":{"gitId":"max-wunan"},"content":"                //Command auto_clear \u003d new AutoClearCommand();"},{"lineNumber":69,"author":{"gitId":"max-wunan"},"content":"                //auto_clear.execute(events, locations, busStops, ui, storage);"},{"lineNumber":70,"author":{"gitId":"xuche123"},"content":"                Command c \u003d Parser.parse(fullCommand, locations, size);"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"                c.execute(events, locations, busStops, ui, storage,userInfo);"},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (NuScheduleException e) {"},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"            } finally {"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"                ui.printLine();"},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":81,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"    public static void main(String[] args) {"},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"        new NuSchedule(\"data/events.txt\", \"data/UserInfo.txt\").run();"},{"lineNumber":84,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"xuche123":2,"max-wunan":3,"Lee-Juntong":67,"jiaaaqi":13}},{"path":"src/main/java/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"import event.Event;"},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":"import eventlist.EventList;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.ExistingEventInListException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"import ui.UI;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":" * Represents the command call when the user adds a new event."},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":" */"},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    private final Event event;"},{"lineNumber":19,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":20,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * Sets the task to be added to the list."},{"lineNumber":22,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     * @param event The event to be added."},{"lineNumber":24,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"madbeez"},"content":"    public AddCommand(Event event) {"},{"lineNumber":26,"author":{"gitId":"madbeez"},"content":"        this.event \u003d event;"},{"lineNumber":27,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":29,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"madbeez"},"content":"     * Adds the appropriate type of event/task to the list."},{"lineNumber":31,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"madbeez"},"content":"     * @param events    the list of events."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":35,"author":{"gitId":"madbeez"},"content":"     * @param ui        do outputs."},{"lineNumber":36,"author":{"gitId":"madbeez"},"content":"     * @param storage   store the data."},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException the file is not correctly written."},{"lineNumber":39,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"madbeez"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"            throws WritingFileException, ExistingEventInListException {"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printConflictEvents(events.checkConflictTiming(event));"},{"lineNumber":45,"author":{"gitId":"madbeez"},"content":"        events.addEvent(event);"},{"lineNumber":46,"author":{"gitId":"madbeez"},"content":"        ui.printAddEventMessage(event);"},{"lineNumber":47,"author":{"gitId":"madbeez"},"content":"        ui.printNumEvent(events.getSize());"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeFile(events.getEventList());"},{"lineNumber":49,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":33,"Lee-Juntong":15,"jiaaaqi":2}},{"path":"src/main/java/command/AutoClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"max-wunan"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"import event.Event;"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":"import eventlist.EventList;"},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"import exception.EmptyEventListException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"max-wunan"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"import ui.UI;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":16,"author":{"gitId":"max-wunan"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"max-wunan"},"content":" * Represents the command call when the user wants to turn on/off the auto-clear function."},{"lineNumber":18,"author":{"gitId":"max-wunan"},"content":" * Everytime the user input the function, events of one month ago will be cleared."},{"lineNumber":19,"author":{"gitId":"max-wunan"},"content":" */"},{"lineNumber":20,"author":{"gitId":"max-wunan"},"content":"public class AutoClearCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"    protected boolean isAutoClear;"},{"lineNumber":23,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    public AutoClearCommand(boolean isAutoClear) {"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"        this.isAutoClear \u003d isAutoClear;"},{"lineNumber":26,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":28,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * Set the AutoClear flag as ON or OFF."},{"lineNumber":30,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"max-wunan"},"content":"     * @param events    the list of Events."},{"lineNumber":32,"author":{"gitId":"max-wunan"},"content":"     * @param locations the list of Locations."},{"lineNumber":33,"author":{"gitId":"max-wunan"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":34,"author":{"gitId":"max-wunan"},"content":"     * @param ui        do outputs."},{"lineNumber":35,"author":{"gitId":"max-wunan"},"content":"     * @param storage   store the data."},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":37,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"max-wunan"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo) throws WritingFileException {"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"        userInfo.setAutoClear(isAutoClear);"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeUserInfo(userInfo);"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        if (isAutoClear) {"},{"lineNumber":44,"author":{"gitId":"max-wunan"},"content":"            ui.printAutoClearOn();"},{"lineNumber":45,"author":{"gitId":"max-wunan"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printAutoClearOff();"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"     * Clear all events one month ago."},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events   the list of Events."},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage  store the data."},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo User\u0027s information."},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException the file is not correctly written."},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"    public static void autoClear(EventList events, Storage storage, UserInfo userInfo) throws WritingFileException {"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"        if (userInfo.isAutoClear() \u0026\u0026 events !\u003d null) {"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"            if (events.getSize() !\u003d 0) {"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"                try {"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"                    events.clearBefore(LocalDate.now().minusMonths(1));"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"                } catch (EmptyEventListException e) {"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"                    return;//this exception is unreachable because of the if condition"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"                storage.writeFile(events.getEventList());"},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"max-wunan"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":70,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"max-wunan"},"content":"}"}],"authorContributionMap":{"max-wunan":36,"Lee-Juntong":35}},{"path":"src/main/java/command/ClearBeforeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"max-wunan"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"import event.Event;"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":"import eventlist.EventList;"},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"import exception.NoDateBeforeException;"},{"lineNumber":6,"author":{"gitId":"max-wunan"},"content":"import exception.EmptyEventListException;"},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"max-wunan"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"import ui.UI;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":16,"author":{"gitId":"max-wunan"},"content":"/*"},{"lineNumber":17,"author":{"gitId":"max-wunan"},"content":" * Represents the command when the user wants to clear all events before a certain date"},{"lineNumber":18,"author":{"gitId":"max-wunan"},"content":" * */"},{"lineNumber":19,"author":{"gitId":"max-wunan"},"content":"public class ClearBeforeCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"max-wunan"},"content":"    protected LocalDate clearDate;"},{"lineNumber":21,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":22,"author":{"gitId":"max-wunan"},"content":"    public ClearBeforeCommand(LocalDate date) {"},{"lineNumber":23,"author":{"gitId":"max-wunan"},"content":"        clearDate \u003d date;"},{"lineNumber":24,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":26,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"max-wunan"},"content":"     * Execute the command based on the specific command type."},{"lineNumber":28,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"max-wunan"},"content":"     * @param events    the list of Events."},{"lineNumber":30,"author":{"gitId":"max-wunan"},"content":"     * @param locations the list of Locations."},{"lineNumber":31,"author":{"gitId":"max-wunan"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":32,"author":{"gitId":"max-wunan"},"content":"     * @param ui        do outputs."},{"lineNumber":33,"author":{"gitId":"max-wunan"},"content":"     * @param storage   store the data."},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":35,"author":{"gitId":"max-wunan"},"content":"     * @throws EmptyEventListException the exceptions when the user try to clear an empty list."},{"lineNumber":36,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"max-wunan"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":40,"author":{"gitId":"max-wunan"},"content":"            throws NoDateBeforeException, EmptyEventListException {"},{"lineNumber":41,"author":{"gitId":"max-wunan"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterDateBefore(clearDate);"},{"lineNumber":42,"author":{"gitId":"max-wunan"},"content":"        if (filteredEventList.size() \u003d\u003d 0) {"},{"lineNumber":43,"author":{"gitId":"max-wunan"},"content":"            throw new NoDateBeforeException();"},{"lineNumber":44,"author":{"gitId":"max-wunan"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"max-wunan"},"content":"            events.clearBefore(clearDate);"},{"lineNumber":46,"author":{"gitId":"max-wunan"},"content":"            ui.printClearBefore(clearDate);"},{"lineNumber":47,"author":{"gitId":"max-wunan"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":49,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"max-wunan"},"content":"}"}],"authorContributionMap":{"max-wunan":46,"Lee-Juntong":4}},{"path":"src/main/java/command/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyEventListException;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user clears all events."},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"public class ClearCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     * Execute the command based on the specific command type."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws EmptyEventListException the exceptions when the user try to clear an empty list."},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"            throws EmptyEventListException, WritingFileException {"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"        if (events.getSize() \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"            throw new EmptyEventListException();"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"        events.clearEvents();"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeFile(events.getEventList());"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printClearEventsSuccessful();"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":38}},{"path":"src/main/java/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NuScheduleException;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command to be executed."},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    protected boolean isExit \u003d false;"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"     * Execute the command based on the specific command type."},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws NuScheduleException the exceptions can happen in this program,"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     *                             to be handled based on the specific exception."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"    public abstract void execute(EventList events, LocationList locations, BusStopList busStops, UI ui,"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"                                 Storage storage, UserInfo userInfo)"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"            throws NuScheduleException;"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean isExit() {"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"        return isExit;"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":34,"jiaaaqi":2}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.UndefinedEventException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user deletes some event."},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    private final int eventIndex;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    public DeleteCommand(int eventIndex) {"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"        this.eventIndex \u003d eventIndex;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     * Delete the event, and update the file."},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws UndefinedEventException the user trying to operate (delete/edit/done) some events that does not exist."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException    the file is not correctly written."},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"            throws UndefinedEventException, WritingFileException {"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"        if (eventIndex \u003c\u003d -1 || eventIndex \u003e\u003d events.getSize()) {"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"            throw new UndefinedEventException(eventIndex + 1);"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printDeleteMessage(events.get(eventIndex));"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        events.remove(eventIndex);"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printNumEvent(events.getSize());"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeFile(events.getEventList());"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":47}},{"path":"src/main/java/command/DoneCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.DoneBeforeEndException;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.UndefinedEventException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user mark a task as done."},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"public class DoneCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    private final int eventIndex;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    public DoneCommand(int eventIndex) {"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"        this.eventIndex \u003d eventIndex;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     * Mark the task as done, and update the file."},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws UndefinedEventException the case when the the user trying to operate (delete/edit/done) some events"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     *                                 that does not exist."},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException    the file is not correctly written."},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"            throws UndefinedEventException, WritingFileException, DoneBeforeEndException {"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"        if (eventIndex \u003c\u003d -1 || eventIndex \u003e\u003d events.getSize()) {"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"            throw new UndefinedEventException(eventIndex + 1);"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        events.doneEvent(eventIndex);"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printDoneMessage(events.get(eventIndex));"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeFile(events.getEventList());"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":47}},{"path":"src/main/java/command/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"import event.Event;"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"import eventlist.EventList;"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"import exception.EditNoEndTimeException;"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"import exception.EndBeforeStartEventException;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import exception.UndefinedEventException;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"import location.Location;"},{"lineNumber":10,"author":{"gitId":"xuche123"},"content":"import location.OnlineLocation;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":13,"author":{"gitId":"xuche123"},"content":"import storage.Storage;"},{"lineNumber":14,"author":{"gitId":"xuche123"},"content":"import ui.UI;"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":16,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":17,"author":{"gitId":"xuche123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":18,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":19,"author":{"gitId":"xuche123"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"xuche123"},"content":" * Represents the command call when the user adds a new event."},{"lineNumber":21,"author":{"gitId":"xuche123"},"content":" */"},{"lineNumber":22,"author":{"gitId":"xuche123"},"content":"public class EditCommand extends Command {"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    private final int index;"},{"lineNumber":24,"author":{"gitId":"xuche123"},"content":"    private final String[] editInformation;"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":"    private final LocalDateTime[] startEnd;"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":27,"author":{"gitId":"xuche123"},"content":"    private final Location location;"},{"lineNumber":28,"author":{"gitId":"xuche123"},"content":"    private final OnlineLocation onlineLocation;"},{"lineNumber":29,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":30,"author":{"gitId":"xuche123"},"content":"    public EditCommand(int index, String[] editInformation, LocalDateTime[] startEnd, Location location,"},{"lineNumber":31,"author":{"gitId":"xuche123"},"content":"                       OnlineLocation onlineLocation) {"},{"lineNumber":32,"author":{"gitId":"xuche123"},"content":"        this.index \u003d index;"},{"lineNumber":33,"author":{"gitId":"xuche123"},"content":"        this.editInformation \u003d editInformation;"},{"lineNumber":34,"author":{"gitId":"xuche123"},"content":"        this.startEnd \u003d startEnd;"},{"lineNumber":35,"author":{"gitId":"xuche123"},"content":"        this.location \u003d location;"},{"lineNumber":36,"author":{"gitId":"xuche123"},"content":"        this.onlineLocation \u003d onlineLocation;"},{"lineNumber":37,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":39,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"xuche123"},"content":"     * Edits the corresponding event/task in the list."},{"lineNumber":41,"author":{"gitId":"xuche123"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"xuche123"},"content":"     * @param events    the list of events."},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":45,"author":{"gitId":"xuche123"},"content":"     * @param ui        do outputs."},{"lineNumber":46,"author":{"gitId":"xuche123"},"content":"     * @param storage   store the data."},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws UndefinedEventException the user trying to operate (delete/edit/done) some events that does not"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"     *                                 exist."},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException    Represents the exception when the file is not correctly written."},{"lineNumber":51,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":55,"author":{"gitId":"xuche123"},"content":"            throws UndefinedEventException, WritingFileException, EndBeforeStartEventException, EditNoEndTimeException {"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"        if (index \u003e\u003d events.getSize() || index \u003d\u003d -1) {"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"            throw new UndefinedEventException(index + 1);"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"xuche123"},"content":"        Event newEvent \u003d events.editEvent(index, editInformation, startEnd, location, onlineLocation);"},{"lineNumber":60,"author":{"gitId":"xuche123"},"content":"        ui.printConflictEvents(events.checkConflictTiming(newEvent));"},{"lineNumber":61,"author":{"gitId":"xuche123"},"content":"        ui.printEditEventMessage(newEvent);"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeFile(events.getEventList());"},{"lineNumber":63,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":65,"author":{"gitId":"xuche123"},"content":"    public static String[] newEditInformation() {"},{"lineNumber":66,"author":{"gitId":"xuche123"},"content":"        UI ui \u003d new UI();"},{"lineNumber":67,"author":{"gitId":"xuche123"},"content":"        return ui.readEditCommand();"},{"lineNumber":68,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":50,"Lee-Juntong":19}},{"path":"src/main/java/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user exits this program."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"public class ExitCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"     * Mark the status of the program, isExit, as true."},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"     * Also prints the exit message."},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of tasks."},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo) {"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"        isExit \u003d true;"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printExitMessage();"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":29,"jiaaaqi":2}},{"path":"src/main/java/command/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import event.Event;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoMatchingEventException;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user want to find the tasks having a certain keyword."},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"public class FindCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    private final String filterString;"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    public FindCommand(String filterString) {"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"        this.filterString \u003d filterString;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * Find the tasks having the keyword provided by the user, and print that filtered list."},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws NoMatchingEventException the user trying to find a Task with a certain keyword, but such task does not"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"     *                                  exist in the list."},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"            throws NoMatchingEventException {"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterWith(filterString);"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        if (filteredEventList.size() \u003d\u003d 0) {"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"            throw new NoMatchingEventException();"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printFilteredEventList(filteredEventList);"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":47}},{"path":"src/main/java/command/FindDateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import event.Event;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoEventDateException;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user want to find the tasks in certain date."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"public class FindDateCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    private final LocalDate date;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"    public FindDateCommand(LocalDate date) {"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * Execute the command based on the specific command type."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws NoEventDateException the user trying to find a Event with a certain date, but such Event does not"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"     *                              exist in the list."},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"            throws NoEventDateException {"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterDateWith(date);"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        if (filteredEventList.size() \u003d\u003d 0) {"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"            throw new NoEventDateException();"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printFilteredDateEventList(filteredEventList);"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":48}},{"path":"src/main/java/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user asking for helps."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"public class HelpCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"     * Execute the command based on the specific command type."},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo) {"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printHelp();"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":29}},{"path":"src/main/java/command/LocateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import location.Location;"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import storage.Storage;"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"import ui.UI;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":" * Represents the command call when the user wants to locate an event."},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"public class LocateCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    private final String input;"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"    public LocateCommand(String input) {"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"        this.input \u003d input;"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"     * Provides location information when user gives a number within size of EventList or name of a location."},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"     * @param events    the list of Events."},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"     * @param locations the list of Locations."},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"     * @param ui        do outputs."},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"     * @param storage   store the data."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo) {"},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"        int eventNum;"},{"lineNumber":35,"author":{"gitId":"jiaaaqi"},"content":"        if (locations.checkIfInteger(input)) {"},{"lineNumber":36,"author":{"gitId":"jiaaaqi"},"content":"            eventNum \u003d Integer.parseInt(input) - 1;"},{"lineNumber":37,"author":{"gitId":"jiaaaqi"},"content":"            Location location \u003d events.get(eventNum).getLocation();"},{"lineNumber":38,"author":{"gitId":"jiaaaqi"},"content":"            System.out.println(events.get(eventNum).getDescription() + \" is located at:\");"},{"lineNumber":39,"author":{"gitId":"jiaaaqi"},"content":"            System.out.println(location);"},{"lineNumber":40,"author":{"gitId":"jiaaaqi"},"content":"        } else if (locations.checkValidLocation(input)) {"},{"lineNumber":41,"author":{"gitId":"jiaaaqi"},"content":"            Location location \u003d locations.findLocation(input);"},{"lineNumber":42,"author":{"gitId":"jiaaaqi"},"content":"            System.out.println(\"Location Information: \");"},{"lineNumber":43,"author":{"gitId":"jiaaaqi"},"content":"            System.out.println(location);"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":41,"Lee-Juntong":5}},{"path":"src/main/java/command/PrintAreaLocationsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command for printing locations available at some areas in NUS."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"public class PrintAreaLocationsCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    String area;"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    public PrintAreaLocationsCommand(String area) {"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"        this.area \u003d area;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * Purely print the available locations at the area selected by the user."},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo) {"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"        switch (area.toUpperCase()) {"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"        case \"FOS\":"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printFosLocations();"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"        case \"FOE\":"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printFoeLocations();"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"        case \"FASS\":"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printFassLocations();"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        case \"SDE\":"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printSdeLocations();"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"        case \"SOC\":"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"        case \"BIZ\":"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printSocAndBizLocations();"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"        case \"HOSTEL\":"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printHostelLocations();"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"        default:"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":57}},{"path":"src/main/java/command/PrintFullListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyEventListException;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" * Represent the command for printing everything in the list."},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"public class PrintFullListCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the list of Events."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws EmptyEventListException the exception when the user want to print an empty list."},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"            throws EmptyEventListException {"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printEventList(events.getEventList());"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":31,"jiaaaqi":2}},{"path":"src/main/java/command/PrintLocationCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"import storage.Storage;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import ui.UI;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":" * Represent the command for print the locations."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"public class PrintLocationCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints list of locations."},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"     * @param events    the list of Events."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"     * @param ui        do outputs."},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"     * @param storage   store the data."},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo) {"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"        ui.printLocationList(locations.getLocationList());"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":19,"Lee-Juntong":10}},{"path":"src/main/java/command/ReminderCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"import event.Event;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import eventlist.EventList;"},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":"import exception.NoEventDateRemindException;"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.BusStopList;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"import storage.Storage;"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"import ui.UI;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":" * Represents the command call when the user wants a list of events within the day."},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":" */"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"public class ReminderCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"madbeez"},"content":"    private final LocalDate filterDate;"},{"lineNumber":20,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":21,"author":{"gitId":"madbeez"},"content":"    public ReminderCommand() {"},{"lineNumber":22,"author":{"gitId":"madbeez"},"content":"        filterDate \u003d LocalDate.now();"},{"lineNumber":23,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"     * Command to print list of events within the day when called."},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"     * @param events    the list of Events."},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"     * @param locations the list of Locations."},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"     * @param ui        do outputs."},{"lineNumber":32,"author":{"gitId":"jiaaaqi"},"content":"     * @param storage   store the data."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":38,"author":{"gitId":"madbeez"},"content":"            throws NoEventDateRemindException {"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterDateNotDoneWith(filterDate);"},{"lineNumber":40,"author":{"gitId":"madbeez"},"content":"        if (filteredEventList.size() \u003d\u003d 0) {"},{"lineNumber":41,"author":{"gitId":"madbeez"},"content":"            throw new NoEventDateRemindException();"},{"lineNumber":42,"author":{"gitId":"madbeez"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printRemindEventList(filteredEventList);"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"madbeez":18,"jiaaaqi":21,"Lee-Juntong":6}},{"path":"src/main/java/command/RepeatCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NuScheduleException;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.UndefinedEventException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command to repeat certain classes for several weeks."},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"public class RepeatCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    private int index;"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    private final int numWeeks;//repeat the event for numWeeks weeks"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    private boolean isAllClasses \u003d false;"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    public RepeatCommand(int index, int numWeeks) {"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"        this.index \u003d index;"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"        this.numWeeks \u003d numWeeks;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"    public RepeatCommand(boolean isAllClasses, int numWeeks) {"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"        this.isAllClasses \u003d true;"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"        this.numWeeks \u003d numWeeks;"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * Execute the command based on the input. If the input is \"repeat INDEX NUMBER_OF_WEEKS\", repeat the event for"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * NUMBER_OF_WEEKS."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * If the input is \"repeat all NUMBER_OF_WEEKS\", repeat all the classes happening in the current week for"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * NUMBER_OF_WEEKS."},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws NuScheduleException the exceptions can happen in this program,"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"     *                             to be handled based on the specific exception."},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"            throws NuScheduleException {"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"        if (isAllClasses) {"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"            events.repeatAllClasses(numWeeks);"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printRepeatAll(numWeeks);"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"        } else if (index \u003c 0 || index \u003e\u003d events.getSize()) {"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"            throw new UndefinedEventException(index + 1);"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"            events.repeatEvent(index, numWeeks);"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"            ui.printRepeatEvent(numWeeks);"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeFile(events.getEventList());"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":61}},{"path":"src/main/java/command/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NuScheduleException;"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"import exception.WritingFileException;"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"import locationlist.BusStopList;"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"import locationlist.LocationList;"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"import storage.Storage;"},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"import ui.UI;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user wants to sort the list."},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"xuche123"},"content":"public class SortCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"xuche123"},"content":"    private final String type;"},{"lineNumber":17,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":18,"author":{"gitId":"xuche123"},"content":"    public SortCommand(String type) {"},{"lineNumber":19,"author":{"gitId":"xuche123"},"content":"        this.type \u003d type;"},{"lineNumber":20,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     * Sort the list with given condition."},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException the file is not correctly written."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":36,"author":{"gitId":"xuche123"},"content":"            throws WritingFileException {"},{"lineNumber":37,"author":{"gitId":"xuche123"},"content":"        events.sortEvent(type);"},{"lineNumber":38,"author":{"gitId":"xuche123"},"content":"        ui.printSortEventMessage();"},{"lineNumber":39,"author":{"gitId":"xuche123"},"content":"        storage.writeFile(events.getEventList());"},{"lineNumber":40,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":22,"Lee-Juntong":19}},{"path":"src/main/java/command/StudyTimeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import event.Event;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoEventDoneException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the Command for finding the study time spent on a certain day."},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"public class StudyTimeCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    protected LocalDate date;"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    public StudyTimeCommand(LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * Execute the command based on the specific command type."},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws NoEventDoneException the users try to find the study time but he had not done any thing related to"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"     *                              academics on that day."},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"            throws NoEventDoneException {"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterDateDoneAcademicEventWith(date);"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        if (filteredEventList.size() \u003d\u003d 0) {"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"            throw new NoEventDoneException();"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        ui.printStudyTime(filteredEventList, date);"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":47}},{"path":"src/main/java/command/UserInfoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NuScheduleException;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the command call when the user wants to change the type of himself or herself."},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"public class UserInfoCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    private String name;"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    private String userType;"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    public UserInfoCommand(String name, String userType) {"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"        this.name \u003d name;"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"        this.userType \u003d userType;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"     * Execute the command based on the specific command type."},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events    the list of Events."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locations the list of Locations."},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param busStops  the list of BusStops."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param ui        do outputs."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @param storage   store the data."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo  personal information and settings about the user."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws NuScheduleException the exceptions can happen in this program,"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     *                             to be handled based on the specific exception."},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage,"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"                        UserInfo userInfo)"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"            throws NuScheduleException {"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"        userInfo.setName(name);"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"        userInfo.setType(userType);"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        storage.writeUserInfo(userInfo);"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        ui.helloWithName(userInfo.getName());"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":45}},{"path":"src/main/java/event/Assignment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package event;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":"import location.Location;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import location.OnlineLocation;"},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"xuche123"},"content":"import java.util.Comparator;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the Assignment Events."},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"public class Assignment extends Event {"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    protected LocalDateTime by;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     * Convert the information about this assignment to a string that is to be stored in a file."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the result string to be stored."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"        return \"A//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + by + \"//\" + (location !\u003d null"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"                ? location.fileString() : link.fileString());"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":29,"author":{"gitId":"madbeez"},"content":"    public Assignment(String description, Location location, LocalDateTime by) {"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location);"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"        this.by \u003d by;"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"    public Assignment(String description, OnlineLocation location, LocalDateTime by) {"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location);"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"        this.by \u003d by;"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the date of the Assignment."},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDate get from LocalDateTime."},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getDate() {"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        return LocalDate.from(by);"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"     * A dummy method which provides the same function as getDate()."},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDate get from LocalDateTime."},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getEndDate() {"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"        return getDate();"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":57,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"xuche123"},"content":"     * Provides the date time of the class."},{"lineNumber":59,"author":{"gitId":"xuche123"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"xuche123"},"content":"     * @return the LocalDateTime get from LocalDateTime."},{"lineNumber":61,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"xuche123"},"content":"    public LocalDateTime getEndDateTime() {"},{"lineNumber":63,"author":{"gitId":"xuche123"},"content":"        return LocalDateTime.from(by);"},{"lineNumber":64,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDateTime getStartDateTime() {"},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"        return getEndDateTime();"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":70,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the string to be printed in the list."},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the string required in a certain format."},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"        return \"[A]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\""},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"                + \"\\n\" + (location !\u003d null ? location : link);"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the binary operator for checking whether 2 assignments are the same."},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean equals(Object object) {"},{"lineNumber":85,"author":{"gitId":"Lee-Juntong"},"content":"        boolean isEqual \u003d false;"},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"        if (object instanceof Assignment) {"},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":"            isEqual \u003d (this.description.equalsIgnoreCase(((Assignment) object).description))"},{"lineNumber":89,"author":{"gitId":"Lee-Juntong"},"content":"                    \u0026\u0026 (this.link !\u003d null ? (this.link.equals(((Assignment) object).link))"},{"lineNumber":90,"author":{"gitId":"Lee-Juntong"},"content":"                    : (this.location.equals(((Assignment) object).location)))"},{"lineNumber":91,"author":{"gitId":"Lee-Juntong"},"content":"                    \u0026\u0026 (this.by.isEqual(((Assignment) object).by));"},{"lineNumber":92,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":94,"author":{"gitId":"Lee-Juntong"},"content":"        return isEqual;"},{"lineNumber":95,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":97,"author":{"gitId":"Lee-Juntong"},"content":"    public void setDateTime(LocalDateTime newDateTime) {"},{"lineNumber":98,"author":{"gitId":"Lee-Juntong"},"content":"        this.by \u003d newDateTime;"},{"lineNumber":99,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":101,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Lee-Juntong"},"content":"     * A copy constructor."},{"lineNumber":103,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"Lee-Juntong"},"content":"     * @param anotherAssignment the assignment to be copied."},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Lee-Juntong"},"content":"    public Assignment(Assignment anotherAssignment) {"},{"lineNumber":107,"author":{"gitId":"Lee-Juntong"},"content":"        super(anotherAssignment);"},{"lineNumber":108,"author":{"gitId":"Lee-Juntong"},"content":"        this.by \u003d anotherAssignment.by;"},{"lineNumber":109,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":"    public Assignment clone() {"},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":"        return new Assignment(this);"},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"xuche123":10,"madbeez":3,"Lee-Juntong":101}},{"path":"src/main/java/event/Class.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package event;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EndBeforeStartEventException;"},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":"import location.Location;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import location.OnlineLocation;"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the Class events."},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"public class Class extends Event {"},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":"    protected LocalDateTime at;"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    protected LocalDateTime end;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    public void setDateTime(LocalDateTime at) {"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    public void setEndDateTime(LocalDateTime end) {"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"        this.end \u003d end;"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    public Class(String description, Location location, LocalDateTime at, LocalDateTime end)"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"            throws EndBeforeStartEventException {"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location);"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d at;"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"        this.end \u003d end;"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"        if (!end.isAfter(at)) {"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"            throw new EndBeforeStartEventException();"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    public Class(String description, OnlineLocation meeting, LocalDateTime at, LocalDateTime end)"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"            throws EndBeforeStartEventException {"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, meeting);"},{"lineNumber":41,"author":{"gitId":"madbeez"},"content":"        this.at \u003d at;"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        this.end \u003d end;"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"        if (!end.isAfter(at)) {"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"            throw new EndBeforeStartEventException();"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"     * Convert the information about this class to a string that is to be stored in a file."},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the result string to be stored."},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"        return \"C//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at + \"//\" + end + \"//\" + (location !\u003d null"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"                ? location.fileString() : link.fileString());"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the date of the class."},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDate get from LocalDateTime."},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getDate() {"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"        return LocalDate.from(at);"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getEndDate() {"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"        return LocalDate.from(end);"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the date time of the class."},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDateTime get from LocalDateTime."},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDateTime getStartDateTime() {"},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"        return LocalDateTime.from(at);"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the end date time of the class."},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDateTime get from LocalDateTime."},{"lineNumber":84,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDateTime getEndDateTime() {"},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":"        return LocalDateTime.from(end);"},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":89,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the string to be printed in the list."},{"lineNumber":91,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the string required in a certain format."},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Lee-Juntong"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitId":"Lee-Juntong"},"content":"        return \"[C]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\"))"},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"                + \")\\n\""},{"lineNumber":97,"author":{"gitId":"Lee-Juntong"},"content":"                + \"(end at: \" + end.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\""},{"lineNumber":98,"author":{"gitId":"Lee-Juntong"},"content":"                + \"\\n\" + (location !\u003d null ? location : link);"},{"lineNumber":99,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":101,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the binary operator for checking whether 2 classes are the same."},{"lineNumber":103,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean equals(Object object) {"},{"lineNumber":106,"author":{"gitId":"Lee-Juntong"},"content":"        boolean isEqual \u003d false;"},{"lineNumber":107,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":108,"author":{"gitId":"Lee-Juntong"},"content":"        if (object instanceof Class) {"},{"lineNumber":109,"author":{"gitId":"Lee-Juntong"},"content":"            isEqual \u003d (this.description.equalsIgnoreCase(((Class) object).description))"},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":"                    \u0026\u0026 (this.link !\u003d null ? (this.link.equals(((Class) object).link))"},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":"                    : (this.location.equals(((Class) object).location)))"},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":"                    \u0026\u0026 (this.at.isEqual(((Class) object).at));"},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":115,"author":{"gitId":"Lee-Juntong"},"content":"        return isEqual;"},{"lineNumber":116,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":118,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Lee-Juntong"},"content":"     * A copy constructor."},{"lineNumber":120,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"Lee-Juntong"},"content":"     * @param anotherClass the class to be copied."},{"lineNumber":122,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Lee-Juntong"},"content":"    public Class(Class anotherClass) {"},{"lineNumber":124,"author":{"gitId":"Lee-Juntong"},"content":"        super(anotherClass);"},{"lineNumber":125,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d anotherClass.at;"},{"lineNumber":126,"author":{"gitId":"Lee-Juntong"},"content":"        this.end \u003d anotherClass.end;"},{"lineNumber":127,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":129,"author":{"gitId":"Lee-Juntong"},"content":"    public Class clone() {"},{"lineNumber":130,"author":{"gitId":"Lee-Juntong"},"content":"        return new Class(this);"},{"lineNumber":131,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"xuche123":5,"madbeez":7,"Lee-Juntong":120}},{"path":"src/main/java/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package event;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import location.Location;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import location.OnlineLocation;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the event objects."},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":" * Contains a String description , which is the description of the event,"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":" * and a boolean isDone, which is the status of the Event."},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":" * Provides methods to mark an event as done(either during user input or reading from file),"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":" * get the value of isDone,"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":" * convert the event object to a string to be printed out or write to a file."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class Event {"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    protected String description;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    protected boolean isDone;"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"    protected Location location \u003d null;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    protected OnlineLocation link \u003d null;"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"    public Event(Event anotherEvent) {"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"        this.description \u003d anotherEvent.description;"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"        this.isDone \u003d anotherEvent.isDone;"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"        this.location \u003d anotherEvent.location;"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"        this.link \u003d anotherEvent.link;"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"    public Event clone() {"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"        return null;"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":36,"author":{"gitId":"xuche123"},"content":"    public void setDescription(String description) {"},{"lineNumber":37,"author":{"gitId":"xuche123"},"content":"        this.description \u003d description;"},{"lineNumber":38,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":40,"author":{"gitId":"xuche123"},"content":"    public void setLink(OnlineLocation link) {"},{"lineNumber":41,"author":{"gitId":"xuche123"},"content":"        this.link \u003d link;"},{"lineNumber":42,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":44,"author":{"gitId":"xuche123"},"content":"    public void setLocation(Location location) {"},{"lineNumber":45,"author":{"gitId":"xuche123"},"content":"        this.location \u003d location;"},{"lineNumber":46,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    public Event(String description, Location location) {"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"        this.description \u003d description;"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"        this.isDone \u003d false;"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"        this.location \u003d location;"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"    public Event(String description, OnlineLocation location) {"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"        this.description \u003d description;"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"        this.isDone \u003d false;"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"        this.link \u003d location;"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"     * Mark a Event\u0027s status as done."},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"    public void markAsDone() {"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"        this.isDone \u003d true;"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean isDone() {"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"        return isDone;"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"    public abstract String fileString();"},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the status of the Event as a icon."},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"     * @return returns a tick if the Event is done, and returns a cross if the Event is not done."},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"    public String getStatus() {"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":"        return (isDone ? \"Done\" : \"Not Done\");"},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":"        //return tick or X symbols"},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the string to be printed in the list."},{"lineNumber":85,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the common part for Event, Assignment, Class."},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":"    public String toString() {"},{"lineNumber":89,"author":{"gitId":"Lee-Juntong"},"content":"        return \"[\" + getStatus() + \"]\" + description;"},{"lineNumber":90,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":92,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the date of the Event."},{"lineNumber":94,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDate get from LocalDateTime."},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getDate() {"},{"lineNumber":98,"author":{"gitId":"Lee-Juntong"},"content":"        return null;"},{"lineNumber":99,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":101,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDateTime getStartDateTime() {"},{"lineNumber":102,"author":{"gitId":"Lee-Juntong"},"content":"        return null;"},{"lineNumber":103,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDateTime getEndDateTime() {"},{"lineNumber":106,"author":{"gitId":"Lee-Juntong"},"content":"        return null;"},{"lineNumber":107,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":109,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getEndDate() {"},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":"        return null;"},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"    public void setDateTime(LocalDateTime newDateTime) {"},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":116,"author":{"gitId":"Lee-Juntong"},"content":"    public void setEndDateTime(LocalDateTime newDateTime) {"},{"lineNumber":117,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":119,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the String variable of the description of this Event."},{"lineNumber":121,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the description of this Event."},{"lineNumber":123,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"Lee-Juntong"},"content":"    public String getDescription() {"},{"lineNumber":125,"author":{"gitId":"Lee-Juntong"},"content":"        return description;"},{"lineNumber":126,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":128,"author":{"gitId":"jiaaaqi"},"content":"    public Location getLocation() {"},{"lineNumber":129,"author":{"gitId":"jiaaaqi"},"content":"        return location;"},{"lineNumber":130,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":132,"author":{"gitId":"xuche123"},"content":"    public OnlineLocation getLink() {"},{"lineNumber":133,"author":{"gitId":"xuche123"},"content":"        return link;"},{"lineNumber":134,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":136,"author":{"gitId":"xuche123"},"content":"    public static Comparator\u003cEvent\u003e descriptionComparator \u003d (o1, o2) -\u003e"},{"lineNumber":137,"author":{"gitId":"xuche123"},"content":"            o1.getDescription().compareToIgnoreCase(o2.getDescription());"},{"lineNumber":138,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":139,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":140,"author":{"gitId":"xuche123"},"content":"    public static Comparator\u003cEvent\u003e locationComparator \u003d (e1, e2) -\u003e {"},{"lineNumber":141,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":142,"author":{"gitId":"xuche123"},"content":"        if (e2.getLocation() \u003d\u003d null \u0026\u0026 e1.getLocation() \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitId":"xuche123"},"content":"            if (e1.getLink() \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitId":"xuche123"},"content":"                return 1;"},{"lineNumber":145,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"xuche123"},"content":"            if (e2.getLink() \u003d\u003d null) {"},{"lineNumber":147,"author":{"gitId":"xuche123"},"content":"                return -1;"},{"lineNumber":148,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"xuche123"},"content":"            return e1.getLink().getLink().compareToIgnoreCase(e2.getLink().getLink());"},{"lineNumber":150,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":152,"author":{"gitId":"xuche123"},"content":"        if (e1.getLocation() \u003d\u003d null) {"},{"lineNumber":153,"author":{"gitId":"xuche123"},"content":"            return 1;"},{"lineNumber":154,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"xuche123"},"content":"        if (e2.getLocation() \u003d\u003d null) {"},{"lineNumber":156,"author":{"gitId":"xuche123"},"content":"            return -1;"},{"lineNumber":157,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"xuche123"},"content":"        return e1.getLocation().getName().compareToIgnoreCase(e2.getLocation().getName());"},{"lineNumber":159,"author":{"gitId":"xuche123"},"content":"    };"},{"lineNumber":160,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":161,"author":{"gitId":"Lee-Juntong"},"content":"}"},{"lineNumber":162,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":163,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":164,"author":{"gitId":"Lee-Juntong"},"content":""}],"authorContributionMap":{"xuche123":43,"Lee-Juntong":117,"jiaaaqi":4}},{"path":"src/main/java/event/PersonalEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package event;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EndBeforeStartEventException;"},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":"import location.Location;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import location.OnlineLocation;"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"xuche123"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the PersonalEvent Events."},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":" * PersonalEvent may or may not have an end time."},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"public class PersonalEvent extends Event {"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    protected LocalDateTime at;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    protected LocalDateTime end \u003d null;"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    public void setDateTime(LocalDateTime at) {"},{"lineNumber":24,"author":{"gitId":"xuche123"},"content":"        this.at \u003d at;"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"    public void setEndDateTime(LocalDateTime end) {"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"        if (this.end !\u003d null) {"},{"lineNumber":29,"author":{"gitId":"xuche123"},"content":"            this.end \u003d end;"},{"lineNumber":30,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"     * Convert the information about this personal event to a string that is to be stored in a file."},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the result string to be stored"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"        return \"P//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at + \"//\" + (end !\u003d null ? end + \"//\" : \"\")"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"                + (location !\u003d null ? location.fileString() : link.fileString());"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the date of the Event."},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDate get from LocalDateTime"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getDate() {"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"        return LocalDate.from(at);"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDate getEndDate() {"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"            return LocalDate.from(end);"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"            return LocalDate.from(at);"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":60,"author":{"gitId":"madbeez"},"content":"    public PersonalEvent(String description, Location location, LocalDateTime at) {"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location);"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d at;"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"    public PersonalEvent(String description, Location location, LocalDateTime at, LocalDateTime end)"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"            throws EndBeforeStartEventException {"},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location);"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d at;"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":"        this.end \u003d end;"},{"lineNumber":70,"author":{"gitId":"Lee-Juntong"},"content":"        if (!end.isAfter(at)) {"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"            throw new EndBeforeStartEventException();"},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"    public PersonalEvent(String description, OnlineLocation location, LocalDateTime at) {"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location);"},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d at;"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":"    public PersonalEvent(String description, OnlineLocation location, LocalDateTime at, LocalDateTime end)"},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"            throws EndBeforeStartEventException {"},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location);"},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d at;"},{"lineNumber":84,"author":{"gitId":"Lee-Juntong"},"content":"        this.end \u003d end;"},{"lineNumber":85,"author":{"gitId":"Lee-Juntong"},"content":"        if (!end.isAfter(at)) {"},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":"            throw new EndBeforeStartEventException();"},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":90,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the date time of the personal event."},{"lineNumber":92,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDateTime get from LocalDateTime."},{"lineNumber":94,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDateTime getStartDateTime() {"},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"        return LocalDateTime.from(at);"},{"lineNumber":97,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":99,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the end date time of the personal event."},{"lineNumber":101,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the LocalDateTime get from LocalDateTime."},{"lineNumber":103,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Lee-Juntong"},"content":"    public LocalDateTime getEndDateTime() {"},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"Lee-Juntong"},"content":"            return LocalDateTime.from(end);"},{"lineNumber":107,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":108,"author":{"gitId":"Lee-Juntong"},"content":"            return LocalDateTime.from(at);"},{"lineNumber":109,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the string to be printed in the list."},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the string required in a certain format."},{"lineNumber":116,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"Lee-Juntong"},"content":"    public String toString() {"},{"lineNumber":118,"author":{"gitId":"Lee-Juntong"},"content":"        return \"[P]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\""},{"lineNumber":119,"author":{"gitId":"Lee-Juntong"},"content":"                + (end !\u003d null ? \"\\n(end at: \" + end.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\" :"},{"lineNumber":120,"author":{"gitId":"Lee-Juntong"},"content":"                \"\")"},{"lineNumber":121,"author":{"gitId":"Lee-Juntong"},"content":"                + \"\\n\" + (location !\u003d null ? location : link);"},{"lineNumber":122,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":124,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"Lee-Juntong"},"content":"     * Provides the binary operator for checking whether 2 classes are the same."},{"lineNumber":126,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean equals(Object object) {"},{"lineNumber":129,"author":{"gitId":"Lee-Juntong"},"content":"        boolean isEqual \u003d false;"},{"lineNumber":130,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":131,"author":{"gitId":"Lee-Juntong"},"content":"        if (object instanceof PersonalEvent) {"},{"lineNumber":132,"author":{"gitId":"Lee-Juntong"},"content":"            isEqual \u003d (this.description.equalsIgnoreCase(((PersonalEvent) object).description))"},{"lineNumber":133,"author":{"gitId":"Lee-Juntong"},"content":"                    \u0026\u0026 (this.link !\u003d null ? (this.link.equals(((PersonalEvent) object).link))"},{"lineNumber":134,"author":{"gitId":"Lee-Juntong"},"content":"                    : (this.location.equals(((PersonalEvent) object).location)))"},{"lineNumber":135,"author":{"gitId":"Lee-Juntong"},"content":"                    \u0026\u0026 (this.at.isEqual(((PersonalEvent) object).at));"},{"lineNumber":136,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":138,"author":{"gitId":"Lee-Juntong"},"content":"        return isEqual;"},{"lineNumber":139,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":141,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"Lee-Juntong"},"content":"     * A copy constructor."},{"lineNumber":143,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"Lee-Juntong"},"content":"     * @param anotherPersonalEvent the PersonalEvent to be copied."},{"lineNumber":145,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"Lee-Juntong"},"content":"    public PersonalEvent(PersonalEvent anotherPersonalEvent) {"},{"lineNumber":147,"author":{"gitId":"Lee-Juntong"},"content":"        super(anotherPersonalEvent);"},{"lineNumber":148,"author":{"gitId":"Lee-Juntong"},"content":"        this.at \u003d anotherPersonalEvent.at;"},{"lineNumber":149,"author":{"gitId":"Lee-Juntong"},"content":"        this.end \u003d anotherPersonalEvent.end;"},{"lineNumber":150,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":152,"author":{"gitId":"Lee-Juntong"},"content":"    public PersonalEvent clone() {"},{"lineNumber":153,"author":{"gitId":"Lee-Juntong"},"content":"        return new PersonalEvent(this);"},{"lineNumber":154,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"xuche123":7,"madbeez":3,"Lee-Juntong":145}},{"path":"src/main/java/event/SelfStudy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package event;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EndBeforeStartEventException;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import location.Location;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import location.OnlineLocation;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"public class SelfStudy extends PersonalEvent {"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"    public SelfStudy(String description, Location location, LocalDateTime at) {"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location, at);"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    public SelfStudy(String description, Location location, LocalDateTime at, LocalDateTime end)"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"            throws EndBeforeStartEventException {"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location, at, end);"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    public SelfStudy(String description, OnlineLocation location, LocalDateTime at) {"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location, at);"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    public SelfStudy(String description, OnlineLocation location, LocalDateTime at, LocalDateTime end)"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"            throws EndBeforeStartEventException {"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"        super(description, location, at, end);"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the string to be printed in the list."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the string required in a certain format."},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"        return \"[S]\" + \"[\" + getStatus() + \"]\" + description + \" (at: \" + at.format(DateTimeFormatter.ofPattern("},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"                \"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\""},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"                + (end !\u003d null ? \"\\n(end at: \" + end.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\" :"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"                \"\")"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"                + \"\\n\" + (location !\u003d null ? location : link);"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"     * Convert the information about this self study event to a string that is to be stored in a file."},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the result string to be stored"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"        return \"S//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at + \"//\" + (end !\u003d null ? end + \"//\" : \"\")"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"                + (location !\u003d null ? location.fileString() : link.fileString());"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"     * A copy constructor."},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"     * @param anotherSelfStudy the SelfStudy to be copied."},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"    public SelfStudy(SelfStudy anotherSelfStudy) {"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"        super(anotherSelfStudy);"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"    public SelfStudy clone() {"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"        return new SelfStudy(this);"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":64}},{"path":"src/main/java/eventlist/EventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package eventlist;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import event.Assignment;"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"import event.Class;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import event.Event;"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"import event.PersonalEvent;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import event.SelfStudy;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import exception.DoneBeforeEndException;"},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"import exception.ExistingEventInListException;"},{"lineNumber":11,"author":{"gitId":"max-wunan"},"content":"import exception.UndefinedEventException;"},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":"import exception.EndBeforeStartEventException;"},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"import exception.EditNoEndTimeException;"},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"import exception.EmptyEventListException;"},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":"import exception.NoClassWeekException;"},{"lineNumber":16,"author":{"gitId":"xuche123"},"content":"import location.Location;"},{"lineNumber":17,"author":{"gitId":"xuche123"},"content":"import location.OnlineLocation;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.DayOfWeek;"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.temporal.TemporalAdjusters;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitId":"xuche123"},"content":"import java.util.Comparator;"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"import static java.util.stream.Collectors.toList;"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":" * Contains the list of the events and provides ways to delete/add/mark as done events."},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"public class EventList {"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    private final ArrayList\u003cEvent\u003e events;"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"     * Construct the events as an empty ArrayList."},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    public EventList() {"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"        events \u003d new ArrayList\u003cEvent\u003e();"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"     * When loading from the file, create the list as provided in the file."},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events provided by \u003ccode\u003eStorage::load()\u003c/code\u003e"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"     * @see storage.Storage"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    public EventList(ArrayList\u003cEvent\u003e events) {"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"        this.events \u003d events;"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"     * Adds an event to the list."},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"madbeez"},"content":"     * @param eventToBeAdded may be Assignment/Class/Personal Event based on the usage"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"    public void addEvent(Event eventToBeAdded) throws ExistingEventInListException {"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"        if (events.contains(eventToBeAdded)) {"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"            throw new ExistingEventInListException();"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"        events.add(eventToBeAdded);"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"     * Mark a event as done."},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"     * @param eventIndex the index of the event being done"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":"     *                   //     * @throws UndefinedEventException the event is not defined but"},{"lineNumber":70,"author":{"gitId":"Lee-Juntong"},"content":"     *                   // the user want to mark it as done"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":"    public void doneEvent(int eventIndex) throws UndefinedEventException, DoneBeforeEndException {"},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":"            if (events.get(eventIndex).getEndDateTime().isAfter(LocalDateTime.now())"},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"                    \u0026\u0026 !(events.get(eventIndex) instanceof Assignment)) {"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"                throw new DoneBeforeEndException();"},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"            events.get(eventIndex).markAsDone();"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":"            throw new UndefinedEventException(eventIndex);"},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":84,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"xuche123"},"content":"     * Edit the contents of an existing event."},{"lineNumber":86,"author":{"gitId":"xuche123"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"xuche123"},"content":"     * @param index           the index of the event being edited."},{"lineNumber":88,"author":{"gitId":"xuche123"},"content":"     * @param editInformation array containing command type and description."},{"lineNumber":89,"author":{"gitId":"xuche123"},"content":"     * @param startEnd        array containing start date and end date."},{"lineNumber":90,"author":{"gitId":"xuche123"},"content":"     * @param location        new location."},{"lineNumber":91,"author":{"gitId":"xuche123"},"content":"     * @param onlineLocation  new online location."},{"lineNumber":92,"author":{"gitId":"xuche123"},"content":"     * @return Event new edited events"},{"lineNumber":93,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"xuche123"},"content":"    public Event editEvent(int index, String[] editInformation, LocalDateTime[] startEnd, Location location,"},{"lineNumber":95,"author":{"gitId":"xuche123"},"content":"                           OnlineLocation onlineLocation) throws EndBeforeStartEventException, EditNoEndTimeException {"},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"        assert events !\u003d null;"},{"lineNumber":97,"author":{"gitId":"xuche123"},"content":"        // no change in event type"},{"lineNumber":98,"author":{"gitId":"xuche123"},"content":"        if (editInformation[0].isBlank()) {"},{"lineNumber":99,"author":{"gitId":"xuche123"},"content":"            editSameType(index, editInformation, startEnd, location, onlineLocation);"},{"lineNumber":100,"author":{"gitId":"xuche123"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"xuche123"},"content":"            // create new event object with user input"},{"lineNumber":102,"author":{"gitId":"xuche123"},"content":"            editNewType(index, editInformation, startEnd, location, onlineLocation);"},{"lineNumber":103,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":105,"author":{"gitId":"xuche123"},"content":"        return events.get(index);"},{"lineNumber":106,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":108,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"xuche123"},"content":"     * Edit the contents of an existing event. Will only be called when the event type is changed."},{"lineNumber":110,"author":{"gitId":"xuche123"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"xuche123"},"content":"     * @param index           the index of the event being edited."},{"lineNumber":112,"author":{"gitId":"xuche123"},"content":"     * @param editInformation array containing command type and description."},{"lineNumber":113,"author":{"gitId":"xuche123"},"content":"     * @param startEnd        array containing start date and end date."},{"lineNumber":114,"author":{"gitId":"xuche123"},"content":"     * @param location        new location."},{"lineNumber":115,"author":{"gitId":"xuche123"},"content":"     * @param onlineLocation  new online location."},{"lineNumber":116,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"xuche123"},"content":"    private void editNewType(int index, String[] editInformation, LocalDateTime[] startEnd, Location location,"},{"lineNumber":118,"author":{"gitId":"xuche123"},"content":"                             OnlineLocation onlineLocation) throws EditNoEndTimeException,"},{"lineNumber":119,"author":{"gitId":"xuche123"},"content":"            EndBeforeStartEventException {"},{"lineNumber":120,"author":{"gitId":"xuche123"},"content":"        Event newEvent;"},{"lineNumber":121,"author":{"gitId":"xuche123"},"content":"        String newDescription;"},{"lineNumber":122,"author":{"gitId":"xuche123"},"content":"        Location newLocation \u003d null;"},{"lineNumber":123,"author":{"gitId":"xuche123"},"content":"        OnlineLocation newOnlineLocation \u003d null;"},{"lineNumber":124,"author":{"gitId":"xuche123"},"content":"        LocalDateTime start;"},{"lineNumber":125,"author":{"gitId":"xuche123"},"content":"        LocalDateTime end \u003d null;"},{"lineNumber":126,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":127,"author":{"gitId":"xuche123"},"content":"        // newDescription is set to the user input if it is not null. Otherwise, set it to the original value."},{"lineNumber":128,"author":{"gitId":"xuche123"},"content":"        if (editInformation[1].isBlank()) {"},{"lineNumber":129,"author":{"gitId":"xuche123"},"content":"            newDescription \u003d events.get(index).getDescription();"},{"lineNumber":130,"author":{"gitId":"xuche123"},"content":"        } else {"},{"lineNumber":131,"author":{"gitId":"xuche123"},"content":"            newDescription \u003d editInformation[1];"},{"lineNumber":132,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":134,"author":{"gitId":"xuche123"},"content":"        // newLocation is set to the user input if it is not null. Otherwise, set it to the original value."},{"lineNumber":135,"author":{"gitId":"xuche123"},"content":"        if (location \u003d\u003d null \u0026\u0026 onlineLocation \u003d\u003d null) {"},{"lineNumber":136,"author":{"gitId":"xuche123"},"content":"            if (events.get(index).getLocation() !\u003d null) {"},{"lineNumber":137,"author":{"gitId":"xuche123"},"content":"                newLocation \u003d events.get(index).getLocation();"},{"lineNumber":138,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"xuche123"},"content":"            if (events.get(index).getLink() !\u003d null) {"},{"lineNumber":140,"author":{"gitId":"xuche123"},"content":"                newOnlineLocation \u003d events.get(index).getLink();"},{"lineNumber":141,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"xuche123"},"content":"        } else if (location !\u003d null \u0026\u0026 onlineLocation \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitId":"xuche123"},"content":"            newLocation \u003d location;"},{"lineNumber":144,"author":{"gitId":"xuche123"},"content":"            newOnlineLocation \u003d null;"},{"lineNumber":145,"author":{"gitId":"xuche123"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"xuche123"},"content":"            newLocation \u003d null;"},{"lineNumber":147,"author":{"gitId":"xuche123"},"content":"            newOnlineLocation \u003d onlineLocation;"},{"lineNumber":148,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":150,"author":{"gitId":"xuche123"},"content":"        // start and end are set to the user input if they are not null. Otherwise, set them to their original value."},{"lineNumber":151,"author":{"gitId":"xuche123"},"content":"        if (startEnd[0] \u003d\u003d null) {"},{"lineNumber":152,"author":{"gitId":"xuche123"},"content":"            if (events.get(index) instanceof Assignment) {"},{"lineNumber":153,"author":{"gitId":"xuche123"},"content":"                start \u003d events.get(index).getEndDateTime();"},{"lineNumber":154,"author":{"gitId":"xuche123"},"content":"            } else {"},{"lineNumber":155,"author":{"gitId":"xuche123"},"content":"                start \u003d events.get(index).getStartDateTime();"},{"lineNumber":156,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":157,"author":{"gitId":"xuche123"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"xuche123"},"content":"            start \u003d startEnd[0];"},{"lineNumber":159,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":161,"author":{"gitId":"xuche123"},"content":"        if (startEnd[1] \u003d\u003d null) {"},{"lineNumber":162,"author":{"gitId":"xuche123"},"content":"            end \u003d events.get(index).getEndDateTime();"},{"lineNumber":163,"author":{"gitId":"xuche123"},"content":"            if (editInformation[4].equals(\"nil\")) {"},{"lineNumber":164,"author":{"gitId":"xuche123"},"content":"                end \u003d null;"},{"lineNumber":165,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":167,"author":{"gitId":"Lee-Juntong"},"content":"            if (end \u003d\u003d null \u0026\u0026 editInformation[0].equalsIgnoreCase(\"class\")) {"},{"lineNumber":168,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":169,"author":{"gitId":"xuche123"},"content":"                throw new EditNoEndTimeException();"},{"lineNumber":170,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":171,"author":{"gitId":"xuche123"},"content":"        } else {"},{"lineNumber":172,"author":{"gitId":"xuche123"},"content":"            end \u003d startEnd[1];"},{"lineNumber":173,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":175,"author":{"gitId":"xuche123"},"content":"        // create new event object using the new fields."},{"lineNumber":176,"author":{"gitId":"xuche123"},"content":"        switch (editInformation[0]) {"},{"lineNumber":177,"author":{"gitId":"xuche123"},"content":"        case \"assignment\":"},{"lineNumber":178,"author":{"gitId":"xuche123"},"content":"            if (newLocation !\u003d null) {"},{"lineNumber":179,"author":{"gitId":"xuche123"},"content":"                newEvent \u003d new Assignment(newDescription, newLocation, start);"},{"lineNumber":180,"author":{"gitId":"xuche123"},"content":"            } else {"},{"lineNumber":181,"author":{"gitId":"xuche123"},"content":"                newEvent \u003d new Assignment(newDescription, newOnlineLocation, start);"},{"lineNumber":182,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"xuche123"},"content":"            break;"},{"lineNumber":184,"author":{"gitId":"xuche123"},"content":"        case \"class\":"},{"lineNumber":185,"author":{"gitId":"Lee-Juntong"},"content":"            assert end !\u003d null;"},{"lineNumber":186,"author":{"gitId":"xuche123"},"content":"            if (newLocation !\u003d null) {"},{"lineNumber":187,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":188,"author":{"gitId":"xuche123"},"content":"                newEvent \u003d new Class(newDescription, newLocation, start, end);"},{"lineNumber":189,"author":{"gitId":"xuche123"},"content":"            } else {"},{"lineNumber":190,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":191,"author":{"gitId":"xuche123"},"content":"                newEvent \u003d new Class(newDescription, newOnlineLocation, start, end);"},{"lineNumber":192,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"xuche123"},"content":"            break;"},{"lineNumber":194,"author":{"gitId":"xuche123"},"content":"        case \"selfStudy\":"},{"lineNumber":195,"author":{"gitId":"xuche123"},"content":"            if (newLocation !\u003d null) {"},{"lineNumber":196,"author":{"gitId":"xuche123"},"content":"                if (end \u003d\u003d null) {"},{"lineNumber":197,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new SelfStudy(newDescription, newLocation, start);"},{"lineNumber":198,"author":{"gitId":"xuche123"},"content":"                } else {"},{"lineNumber":199,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new SelfStudy(newDescription, newLocation, start, end);"},{"lineNumber":200,"author":{"gitId":"xuche123"},"content":"                }"},{"lineNumber":201,"author":{"gitId":"xuche123"},"content":"            } else {"},{"lineNumber":202,"author":{"gitId":"xuche123"},"content":"                if (end \u003d\u003d null) {"},{"lineNumber":203,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new SelfStudy(newDescription, newOnlineLocation, start);"},{"lineNumber":204,"author":{"gitId":"xuche123"},"content":"                } else {"},{"lineNumber":205,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new SelfStudy(newDescription, newOnlineLocation, start, end);"},{"lineNumber":206,"author":{"gitId":"xuche123"},"content":"                }"},{"lineNumber":207,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"xuche123"},"content":"            break;"},{"lineNumber":209,"author":{"gitId":"xuche123"},"content":"        default:"},{"lineNumber":210,"author":{"gitId":"xuche123"},"content":"            if (newLocation !\u003d null) {"},{"lineNumber":211,"author":{"gitId":"xuche123"},"content":"                if (end \u003d\u003d null) {"},{"lineNumber":212,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new PersonalEvent(newDescription, newLocation, start);"},{"lineNumber":213,"author":{"gitId":"xuche123"},"content":"                } else {"},{"lineNumber":214,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new PersonalEvent(newDescription, newLocation, start, end);"},{"lineNumber":215,"author":{"gitId":"xuche123"},"content":"                }"},{"lineNumber":216,"author":{"gitId":"xuche123"},"content":"            } else {"},{"lineNumber":217,"author":{"gitId":"xuche123"},"content":"                if (end \u003d\u003d null) {"},{"lineNumber":218,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new PersonalEvent(newDescription, newOnlineLocation, start);"},{"lineNumber":219,"author":{"gitId":"xuche123"},"content":"                } else {"},{"lineNumber":220,"author":{"gitId":"xuche123"},"content":"                    newEvent \u003d new PersonalEvent(newDescription, newOnlineLocation, start, end);"},{"lineNumber":221,"author":{"gitId":"xuche123"},"content":"                }"},{"lineNumber":222,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"xuche123"},"content":"            break;"},{"lineNumber":224,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"xuche123"},"content":"        events.set(index, newEvent);"},{"lineNumber":226,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":228,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"xuche123"},"content":"     * Edit the contents of an existing event. Will only be called when the event type remains the same."},{"lineNumber":230,"author":{"gitId":"xuche123"},"content":"     *"},{"lineNumber":231,"author":{"gitId":"xuche123"},"content":"     * @param index           the index of the event being edited."},{"lineNumber":232,"author":{"gitId":"xuche123"},"content":"     * @param editInformation array containing command type and description."},{"lineNumber":233,"author":{"gitId":"xuche123"},"content":"     * @param startEnd        array containing start date and end date."},{"lineNumber":234,"author":{"gitId":"xuche123"},"content":"     * @param location        new location."},{"lineNumber":235,"author":{"gitId":"xuche123"},"content":"     * @param onlineLocation  new online location."},{"lineNumber":236,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"xuche123"},"content":"    private void editSameType(int index, String[] editInformation, LocalDateTime[] startEnd, Location location,"},{"lineNumber":238,"author":{"gitId":"xuche123"},"content":"                              OnlineLocation onlineLocation) {"},{"lineNumber":239,"author":{"gitId":"xuche123"},"content":"        // set new description"},{"lineNumber":240,"author":{"gitId":"xuche123"},"content":"        if (!editInformation[1].isBlank()) {"},{"lineNumber":241,"author":{"gitId":"xuche123"},"content":"            events.get(index).setDescription(editInformation[1]);"},{"lineNumber":242,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":244,"author":{"gitId":"xuche123"},"content":"        // set new location"},{"lineNumber":245,"author":{"gitId":"xuche123"},"content":"        if (location !\u003d null) {"},{"lineNumber":246,"author":{"gitId":"xuche123"},"content":"            events.get(index).setLocation(location);"},{"lineNumber":247,"author":{"gitId":"xuche123"},"content":"            events.get(index).setLink(null);"},{"lineNumber":248,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"xuche123"},"content":"        if (onlineLocation !\u003d null) {"},{"lineNumber":250,"author":{"gitId":"xuche123"},"content":"            events.get(index).setLink(onlineLocation);"},{"lineNumber":251,"author":{"gitId":"xuche123"},"content":"            events.get(index).setLocation(null);"},{"lineNumber":252,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":254,"author":{"gitId":"xuche123"},"content":"        // set new time"},{"lineNumber":255,"author":{"gitId":"xuche123"},"content":"        if (events.get(index) instanceof Assignment) {"},{"lineNumber":256,"author":{"gitId":"xuche123"},"content":"            if (startEnd[0] !\u003d null) {"},{"lineNumber":257,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setDateTime(startEnd[0]);"},{"lineNumber":258,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":259,"author":{"gitId":"xuche123"},"content":"        } else if (events.get(index) instanceof PersonalEvent) {"},{"lineNumber":260,"author":{"gitId":"xuche123"},"content":"            if (startEnd[0] !\u003d null) {"},{"lineNumber":261,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setDateTime(startEnd[0]);"},{"lineNumber":262,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":263,"author":{"gitId":"xuche123"},"content":"            if (startEnd[1] !\u003d null) {"},{"lineNumber":264,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setEndDateTime(startEnd[1]);"},{"lineNumber":265,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":266,"author":{"gitId":"Lee-Juntong"},"content":"            if (editInformation[4].equalsIgnoreCase(\"nil\")) {"},{"lineNumber":267,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setEndDateTime(null);"},{"lineNumber":268,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":269,"author":{"gitId":"xuche123"},"content":"        } else if (events.get(index) instanceof Class) {"},{"lineNumber":270,"author":{"gitId":"xuche123"},"content":"            if (startEnd[0] !\u003d null) {"},{"lineNumber":271,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setDateTime(startEnd[0]);"},{"lineNumber":272,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":273,"author":{"gitId":"xuche123"},"content":"            if (startEnd[1] !\u003d null) {"},{"lineNumber":274,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setEndDateTime(startEnd[1]);"},{"lineNumber":275,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":276,"author":{"gitId":"xuche123"},"content":"        } else if (events.get(index) instanceof SelfStudy) {"},{"lineNumber":277,"author":{"gitId":"xuche123"},"content":"            if (startEnd[0] !\u003d null) {"},{"lineNumber":278,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setDateTime(startEnd[0]);"},{"lineNumber":279,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":280,"author":{"gitId":"xuche123"},"content":"            if (startEnd[1] !\u003d null) {"},{"lineNumber":281,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setEndDateTime(startEnd[1]);"},{"lineNumber":282,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":283,"author":{"gitId":"Lee-Juntong"},"content":"            if (editInformation[4].equalsIgnoreCase(\"nil\")) {"},{"lineNumber":284,"author":{"gitId":"Lee-Juntong"},"content":"                (events.get(index)).setEndDateTime(null);"},{"lineNumber":285,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":286,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":287,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":289,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":290,"author":{"gitId":"xuche123"},"content":"     * Sorts the events alphabetically."},{"lineNumber":291,"author":{"gitId":"xuche123"},"content":"     *"},{"lineNumber":292,"author":{"gitId":"xuche123"},"content":"     * @param type the sorting criteria."},{"lineNumber":293,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":294,"author":{"gitId":"xuche123"},"content":"    public void sortEvent(String type) {"},{"lineNumber":295,"author":{"gitId":"xuche123"},"content":"        assert events !\u003d null;"},{"lineNumber":296,"author":{"gitId":"Lee-Juntong"},"content":"        if (type.equalsIgnoreCase(\"description\")) {"},{"lineNumber":297,"author":{"gitId":"Lee-Juntong"},"content":"            events.sort(Event.descriptionComparator);"},{"lineNumber":298,"author":{"gitId":"Lee-Juntong"},"content":"        } else if (type.equalsIgnoreCase(\"time\")) {"},{"lineNumber":299,"author":{"gitId":"xuche123"},"content":"            events.sort(Comparator.comparing(Event::getEndDateTime));"},{"lineNumber":300,"author":{"gitId":"xuche123"},"content":"        } else {"},{"lineNumber":301,"author":{"gitId":"xuche123"},"content":"            events.sort(Event.locationComparator);"},{"lineNumber":302,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":303,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":305,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":306,"author":{"gitId":"Lee-Juntong"},"content":"     * Gives the access to the list of events."},{"lineNumber":307,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":308,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the list to be printed."},{"lineNumber":309,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":310,"author":{"gitId":"Lee-Juntong"},"content":"    public ArrayList\u003cEvent\u003e getEventList() {"},{"lineNumber":311,"author":{"gitId":"Lee-Juntong"},"content":"        return events;"},{"lineNumber":312,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":314,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":315,"author":{"gitId":"Lee-Juntong"},"content":"     * Returns how many events are in the list."},{"lineNumber":316,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":317,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the size of the ArrayList in the EventList object."},{"lineNumber":318,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":319,"author":{"gitId":"madbeez"},"content":"    public int getSize() {"},{"lineNumber":320,"author":{"gitId":"Lee-Juntong"},"content":"        return events.size();"},{"lineNumber":321,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":323,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":324,"author":{"gitId":"Lee-Juntong"},"content":"     * Remove the event indicated by the user."},{"lineNumber":325,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":326,"author":{"gitId":"Lee-Juntong"},"content":"    public void remove(int eventIndex) {"},{"lineNumber":327,"author":{"gitId":"madbeez"},"content":"        assert events !\u003d null;"},{"lineNumber":328,"author":{"gitId":"Lee-Juntong"},"content":"        events.remove(eventIndex);"},{"lineNumber":329,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":331,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":332,"author":{"gitId":"Lee-Juntong"},"content":"     * Returns the element at the specified position in this list."},{"lineNumber":333,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":334,"author":{"gitId":"Lee-Juntong"},"content":"     * @param eventIndex index of the event to return."},{"lineNumber":335,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the event at the specified position in this list."},{"lineNumber":336,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":337,"author":{"gitId":"Lee-Juntong"},"content":"    public Event get(int eventIndex) {"},{"lineNumber":338,"author":{"gitId":"Lee-Juntong"},"content":"        return events.get(eventIndex);"},{"lineNumber":339,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":341,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":342,"author":{"gitId":"Lee-Juntong"},"content":"     * Filter the event list to find the events contain the information looking for by the user."},{"lineNumber":343,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":344,"author":{"gitId":"Lee-Juntong"},"content":"     * @param filterString the keyword that the user is looking for."},{"lineNumber":345,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the filtered list. this list contains only the events that satisfy the requirement."},{"lineNumber":346,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":347,"author":{"gitId":"Lee-Juntong"},"content":"    public ArrayList\u003cEvent\u003e filterWith(String filterString) {"},{"lineNumber":348,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"},{"lineNumber":349,"author":{"gitId":"Lee-Juntong"},"content":"                .filter(s -\u003e s.getDescription().contains(filterString))"},{"lineNumber":350,"author":{"gitId":"Lee-Juntong"},"content":"                .collect(toList());"},{"lineNumber":351,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":352,"author":{"gitId":"Lee-Juntong"},"content":"        return filteredEventList;"},{"lineNumber":353,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":355,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":356,"author":{"gitId":"Lee-Juntong"},"content":"     * Filter the event list to find the events happen on the date looking for by the user."},{"lineNumber":357,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":358,"author":{"gitId":"Lee-Juntong"},"content":"     * @param date the date that the user is looking for."},{"lineNumber":359,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the filtered list. this list contains only the events that satisfy the requirement."},{"lineNumber":360,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":361,"author":{"gitId":"Lee-Juntong"},"content":"    public ArrayList\u003cEvent\u003e filterDateWith(LocalDate date) {"},{"lineNumber":362,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"},{"lineNumber":363,"author":{"gitId":"Lee-Juntong"},"content":"                .filter(s -\u003e (s.getDate().isEqual(date)"},{"lineNumber":364,"author":{"gitId":"Lee-Juntong"},"content":"                        || (s.getDate().isBefore(date) \u0026\u0026 s.getEndDate().isAfter(date))))"},{"lineNumber":365,"author":{"gitId":"Lee-Juntong"},"content":"                .collect(toList());"},{"lineNumber":366,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":367,"author":{"gitId":"Lee-Juntong"},"content":"        return filteredEventList;"},{"lineNumber":368,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":370,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":371,"author":{"gitId":"max-wunan"},"content":"     * Filter the event list to find the events happen before the date looking for by the user."},{"lineNumber":372,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":373,"author":{"gitId":"max-wunan"},"content":"     * @param date the date that the user is looking for."},{"lineNumber":374,"author":{"gitId":"max-wunan"},"content":"     * @return the filtered list. this list contains only the events that satisfy the requirement."},{"lineNumber":375,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":376,"author":{"gitId":"max-wunan"},"content":"    public ArrayList\u003cEvent\u003e filterDateBefore(LocalDate date) {"},{"lineNumber":377,"author":{"gitId":"max-wunan"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"},{"lineNumber":378,"author":{"gitId":"max-wunan"},"content":"                .filter(s -\u003e (s.getDate().compareTo(date) \u003c 0))"},{"lineNumber":379,"author":{"gitId":"max-wunan"},"content":"                .collect(toList());"},{"lineNumber":380,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":381,"author":{"gitId":"max-wunan"},"content":"        return filteredEventList;"},{"lineNumber":382,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":383,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":384,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":385,"author":{"gitId":"Lee-Juntong"},"content":"     * Filter the event list to find the academic related events happen on the date that have been done already."},{"lineNumber":386,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":387,"author":{"gitId":"Lee-Juntong"},"content":"     * @param date the date that the user is looking for."},{"lineNumber":388,"author":{"gitId":"Lee-Juntong"},"content":"     * @return he filtered list. this list contains only the events that satisfy the requirement."},{"lineNumber":389,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":390,"author":{"gitId":"Lee-Juntong"},"content":"    public ArrayList\u003cEvent\u003e filterDateDoneAcademicEventWith(LocalDate date) {"},{"lineNumber":391,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d filterDateWith(date);"},{"lineNumber":392,"author":{"gitId":"Lee-Juntong"},"content":"        filteredEventList \u003d (ArrayList\u003cEvent\u003e) filteredEventList.stream()"},{"lineNumber":393,"author":{"gitId":"Lee-Juntong"},"content":"                .filter(s -\u003e (s.isDone() \u0026\u0026 ((s instanceof Class) || (s instanceof SelfStudy))))"},{"lineNumber":394,"author":{"gitId":"Lee-Juntong"},"content":"                .collect(toList());"},{"lineNumber":395,"author":{"gitId":"Lee-Juntong"},"content":"        return filteredEventList;"},{"lineNumber":396,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":398,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":399,"author":{"gitId":"max-wunan"},"content":"     * Clear the ArrayList events if it is not empty."},{"lineNumber":400,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":401,"author":{"gitId":"max-wunan"},"content":"     * @throws EmptyEventListException when the user tries to clear a list that is already empty."},{"lineNumber":402,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":403,"author":{"gitId":"max-wunan"},"content":"    public void clearEvents() throws EmptyEventListException {"},{"lineNumber":404,"author":{"gitId":"max-wunan"},"content":"        //assert events !\u003d null;"},{"lineNumber":405,"author":{"gitId":"max-wunan"},"content":"        if (events \u003d\u003d null) {"},{"lineNumber":406,"author":{"gitId":"max-wunan"},"content":"            throw new EmptyEventListException();"},{"lineNumber":407,"author":{"gitId":"max-wunan"},"content":"        } else {"},{"lineNumber":408,"author":{"gitId":"max-wunan"},"content":"            events.clear();"},{"lineNumber":409,"author":{"gitId":"max-wunan"},"content":"        }"},{"lineNumber":410,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":411,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":412,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":413,"author":{"gitId":"Lee-Juntong"},"content":"     * Checks whether there is any conflicting events in terms of timing."},{"lineNumber":414,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":415,"author":{"gitId":"Lee-Juntong"},"content":"     * @param event the new added event."},{"lineNumber":416,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the filtered event arraylist. If there is no conflict, return null."},{"lineNumber":417,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":418,"author":{"gitId":"Lee-Juntong"},"content":"    public ArrayList\u003cEvent\u003e checkConflictTiming(Event event) {"},{"lineNumber":419,"author":{"gitId":"Lee-Juntong"},"content":"        LocalDateTime eventStartDateTime \u003d event.getStartDateTime();"},{"lineNumber":420,"author":{"gitId":"Lee-Juntong"},"content":"        LocalDateTime eventEndDateTime;"},{"lineNumber":421,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":422,"author":{"gitId":"Lee-Juntong"},"content":"            eventEndDateTime \u003d event.getEndDateTime();"},{"lineNumber":423,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":424,"author":{"gitId":"Lee-Juntong"},"content":"            eventEndDateTime \u003d null;"},{"lineNumber":425,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":426,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList;"},{"lineNumber":427,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList2 \u003d null;"},{"lineNumber":428,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":429,"author":{"gitId":"Lee-Juntong"},"content":"            filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"},{"lineNumber":430,"author":{"gitId":"Lee-Juntong"},"content":"                    .filter(s -\u003e s.getEndDateTime() !\u003d null)"},{"lineNumber":431,"author":{"gitId":"Lee-Juntong"},"content":"                    .filter(s -\u003e ((!(s instanceof Assignment))"},{"lineNumber":432,"author":{"gitId":"Lee-Juntong"},"content":"                            \u0026\u0026 (s.getStartDateTime().isBefore(eventStartDateTime)"},{"lineNumber":433,"author":{"gitId":"Lee-Juntong"},"content":"                            || s.getStartDateTime().isEqual(eventStartDateTime))"},{"lineNumber":434,"author":{"gitId":"Lee-Juntong"},"content":"                            \u0026\u0026 (s.getEndDateTime().isAfter(eventStartDateTime)"},{"lineNumber":435,"author":{"gitId":"Lee-Juntong"},"content":"                            || s.getEndDateTime().isEqual(eventStartDateTime))))"},{"lineNumber":436,"author":{"gitId":"Lee-Juntong"},"content":"                    .collect(toList());"},{"lineNumber":437,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":438,"author":{"gitId":"Lee-Juntong"},"content":"            filteredEventList \u003d null;"},{"lineNumber":439,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":440,"author":{"gitId":"Lee-Juntong"},"content":"        if (eventEndDateTime !\u003d null) {"},{"lineNumber":441,"author":{"gitId":"Lee-Juntong"},"content":"            //this considers when the events already in the list lie in the duration of the new event"},{"lineNumber":442,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":443,"author":{"gitId":"Lee-Juntong"},"content":"                LocalDateTime finalEventEndDateTime \u003d eventEndDateTime;"},{"lineNumber":444,"author":{"gitId":"Lee-Juntong"},"content":"                filteredEventList2 \u003d (ArrayList\u003cEvent\u003e) events.stream()"},{"lineNumber":445,"author":{"gitId":"Lee-Juntong"},"content":"                        .filter(s -\u003e ((!(s instanceof Assignment))"},{"lineNumber":446,"author":{"gitId":"Lee-Juntong"},"content":"                                \u0026\u0026 (s.getStartDateTime().isAfter(eventStartDateTime)"},{"lineNumber":447,"author":{"gitId":"Lee-Juntong"},"content":"                                || s.getStartDateTime().isEqual(eventStartDateTime))"},{"lineNumber":448,"author":{"gitId":"Lee-Juntong"},"content":"                                \u0026\u0026 (s.getStartDateTime().isBefore(finalEventEndDateTime)"},{"lineNumber":449,"author":{"gitId":"Lee-Juntong"},"content":"                                || s.getStartDateTime().isEqual(finalEventEndDateTime))))"},{"lineNumber":450,"author":{"gitId":"Lee-Juntong"},"content":"                        .collect(toList());"},{"lineNumber":451,"author":{"gitId":"Lee-Juntong"},"content":"                filteredEventList2.removeAll(filteredEventList);"},{"lineNumber":452,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":453,"author":{"gitId":"Lee-Juntong"},"content":"                filteredEventList2 \u003d null;"},{"lineNumber":454,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":455,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":456,"author":{"gitId":"Lee-Juntong"},"content":"        if (filteredEventList !\u003d null \u0026\u0026 filteredEventList2 !\u003d null) {"},{"lineNumber":457,"author":{"gitId":"Lee-Juntong"},"content":"            filteredEventList.addAll(filteredEventList2);"},{"lineNumber":458,"author":{"gitId":"Lee-Juntong"},"content":"            filteredEventList.remove(event);"},{"lineNumber":459,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":460,"author":{"gitId":"Lee-Juntong"},"content":"        return filteredEventList;"},{"lineNumber":461,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":462,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":463,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":464,"author":{"gitId":"Lee-Juntong"},"content":"     * Filter the event list to find the events happen on the date that have not been done yet."},{"lineNumber":465,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":466,"author":{"gitId":"Lee-Juntong"},"content":"     * @param date the date that the user is looking for."},{"lineNumber":467,"author":{"gitId":"Lee-Juntong"},"content":"     * @return he filtered list. this list contains only the events that satisfy the requirement."},{"lineNumber":468,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":469,"author":{"gitId":"Lee-Juntong"},"content":"    public ArrayList\u003cEvent\u003e filterDateNotDoneWith(LocalDate date) {"},{"lineNumber":470,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredEventList \u003d filterDateWith(date);"},{"lineNumber":471,"author":{"gitId":"Lee-Juntong"},"content":"        filteredEventList \u003d (ArrayList\u003cEvent\u003e) filteredEventList.stream()"},{"lineNumber":472,"author":{"gitId":"Lee-Juntong"},"content":"                .filter(s -\u003e ((!s.isDone()) \u0026\u0026 (s.getEndDate().isEqual(date))))"},{"lineNumber":473,"author":{"gitId":"Lee-Juntong"},"content":"                .collect(toList());"},{"lineNumber":474,"author":{"gitId":"Lee-Juntong"},"content":"        return filteredEventList;"},{"lineNumber":475,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":476,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":477,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":478,"author":{"gitId":"Lee-Juntong"},"content":"     * Add all the classes happening in the current week for several weeks into the list."},{"lineNumber":479,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":480,"author":{"gitId":"Lee-Juntong"},"content":"     * @param numWeeks number of weeks to repeat."},{"lineNumber":481,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":482,"author":{"gitId":"Lee-Juntong"},"content":"    public void repeatAllClasses(int numWeeks) throws NoClassWeekException {"},{"lineNumber":483,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e filteredClassList;"},{"lineNumber":484,"author":{"gitId":"Lee-Juntong"},"content":"        //the filtered list are all the classes happening in the current week"},{"lineNumber":485,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":486,"author":{"gitId":"Lee-Juntong"},"content":"            filteredClassList \u003d (ArrayList\u003cEvent\u003e) events.stream()"},{"lineNumber":487,"author":{"gitId":"Lee-Juntong"},"content":"                    .filter(s -\u003e ((isLocalDateInTheSameWeek(s.getDate(), LocalDate.now()))"},{"lineNumber":488,"author":{"gitId":"Lee-Juntong"},"content":"                            \u0026\u0026 s instanceof Class))"},{"lineNumber":489,"author":{"gitId":"Lee-Juntong"},"content":"                    .collect(toList());"},{"lineNumber":490,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":491,"author":{"gitId":"Lee-Juntong"},"content":"            throw new NoClassWeekException();"},{"lineNumber":492,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":493,"author":{"gitId":"Lee-Juntong"},"content":"        if (filteredClassList.size() \u003d\u003d 0) {"},{"lineNumber":494,"author":{"gitId":"Lee-Juntong"},"content":"            throw new NoClassWeekException();"},{"lineNumber":495,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":496,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":497,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e copyList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":498,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":499,"author":{"gitId":"Lee-Juntong"},"content":"        for (int i \u003d 1; i \u003c\u003d numWeeks; i++) {"},{"lineNumber":500,"author":{"gitId":"Lee-Juntong"},"content":"            filteredClassList.forEach(s -\u003e copyList.add(s.clone()));"},{"lineNumber":501,"author":{"gitId":"Lee-Juntong"},"content":"            int finalI \u003d i;"},{"lineNumber":502,"author":{"gitId":"Lee-Juntong"},"content":"            copyList.forEach(s -\u003e s.setDateTime(s.getStartDateTime().plusWeeks(finalI)));"},{"lineNumber":503,"author":{"gitId":"Lee-Juntong"},"content":"            copyList.forEach(s -\u003e s.setEndDateTime(s.getEndDateTime().plusWeeks(finalI)));"},{"lineNumber":504,"author":{"gitId":"Lee-Juntong"},"content":"            events.addAll(copyList);"},{"lineNumber":505,"author":{"gitId":"Lee-Juntong"},"content":"            copyList.clear();"},{"lineNumber":506,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":507,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":508,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"    //@@author Sunil Katti-reused"},{"lineNumber":510,"author":{"gitId":"-"},"content":"    //Reused from https://stackoverflow.com/a/56246095 with minor modifications"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":513,"author":{"gitId":"-"},"content":"     * Check whether 2 dates are of the same week."},{"lineNumber":514,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":515,"author":{"gitId":"-"},"content":"     * @param date1 the first date"},{"lineNumber":516,"author":{"gitId":"-"},"content":"     * @param date2 the second date"},{"lineNumber":517,"author":{"gitId":"-"},"content":"     * @return ture if they are of the same week. false otherwise."},{"lineNumber":518,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":519,"author":{"gitId":"-"},"content":"    public static boolean isLocalDateInTheSameWeek(LocalDate date1, LocalDate date2) {"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        assert date1 !\u003d null;"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        assert date2 !\u003d null;"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        LocalDate mondayBeforeDate1 \u003d date1.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        LocalDate sundayAfterDate1 \u003d date1.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        return ((date2.isEqual(mondayBeforeDate1) || date2.isAfter(mondayBeforeDate1))"},{"lineNumber":525,"author":{"gitId":"-"},"content":"                \u0026\u0026 (date2.isEqual(sundayAfterDate1) || date2.isBefore(sundayAfterDate1)));"},{"lineNumber":526,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":528,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":529,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":530,"author":{"gitId":"Lee-Juntong"},"content":"     * Add the selected event for several weeks into the list."},{"lineNumber":531,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":532,"author":{"gitId":"Lee-Juntong"},"content":"     * @param numWeeks number of weeks to repeat."},{"lineNumber":533,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":534,"author":{"gitId":"Lee-Juntong"},"content":"    public void repeatEvent(int eventIndex, int numWeeks) {"},{"lineNumber":535,"author":{"gitId":"Lee-Juntong"},"content":"        Event newEvent;"},{"lineNumber":536,"author":{"gitId":"Lee-Juntong"},"content":"        for (int i \u003d 1; i \u003c\u003d numWeeks; i++) {"},{"lineNumber":537,"author":{"gitId":"Lee-Juntong"},"content":"            newEvent \u003d events.get(eventIndex).clone();"},{"lineNumber":538,"author":{"gitId":"Lee-Juntong"},"content":"            newEvent.setDateTime(newEvent.getStartDateTime().plusWeeks(i));"},{"lineNumber":539,"author":{"gitId":"Lee-Juntong"},"content":"            newEvent.setEndDateTime(newEvent.getEndDateTime().plusWeeks(i));"},{"lineNumber":540,"author":{"gitId":"Lee-Juntong"},"content":"            events.add(newEvent);"},{"lineNumber":541,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":542,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":543,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":544,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":545,"author":{"gitId":"max-wunan"},"content":"     * Clear all events before a certain date."},{"lineNumber":546,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":547,"author":{"gitId":"max-wunan"},"content":"     * @param clearDate before which all events to be cleared"},{"lineNumber":548,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":549,"author":{"gitId":"max-wunan"},"content":"    public void clearBefore(LocalDate clearDate) throws EmptyEventListException {"},{"lineNumber":550,"author":{"gitId":"max-wunan"},"content":"        if (events !\u003d null) {"},{"lineNumber":551,"author":{"gitId":"Lee-Juntong"},"content":"            events.removeIf(event -\u003e event.getEndDate().compareTo(clearDate) \u003c 0);"},{"lineNumber":552,"author":{"gitId":"max-wunan"},"content":"        } else {"},{"lineNumber":553,"author":{"gitId":"max-wunan"},"content":"            throw new EmptyEventListException();"},{"lineNumber":554,"author":{"gitId":"max-wunan"},"content":"        }"},{"lineNumber":555,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":556,"author":{"gitId":"max-wunan"},"content":"}"}],"authorContributionMap":{"xuche123":205,"madbeez":3,"max-wunan":46,"-":19,"Lee-Juntong":283}},{"path":"src/main/java/exception/AssignmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions related to Assignment class."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class AssignmentException extends InvalidCommandException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/main/java/exception/ClassException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions related to Class class."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class ClassException extends InvalidCommandException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/main/java/exception/CreatingFileException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happen when the file is not created successfully."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class CreatingFileException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    private final String filePath;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"    public CreatingFileException(String filePath) {"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the error message."},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"        return \"The file \\\"\" + filePath + \"\\\" is not created\";"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":21}},{"path":"src/main/java/exception/DataFileNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happen when the data file is found."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class DataFileNotFoundException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    private String fileName;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"    public DataFileNotFoundException(String fileName) {"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"        return fileName + \"is not found. Did you forget to download the data folder provided in the release?\";"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":22}},{"path":"src/main/java/exception/DateFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to find the tasks on a certain date"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * but the date is not given in the correct format."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class DateFormatException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced,"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * gives suggestion to the user on how to solve the error."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"        return \"You entered a date in a format that is not accepted by this function.\\n\""},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"                + \"The format should be \\\"yyyy-MM-dd\\\"\\n\""},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"                + \"For example, 2000-01-01\";"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":19}},{"path":"src/main/java/exception/DeleteException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions when performing delete."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class DeleteException extends InvalidCommandException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/main/java/exception/DeleteNumberFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions when performing delete to a task not labeled with an int."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class DeleteNumberFormatException extends DeleteException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the error message"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please enter an integer after delete.\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":15}},{"path":"src/main/java/exception/DoneBeforeEndException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case that the user want to mark an Event has an end time that is after the current time as done."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class DoneBeforeEndException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"The selected event ends at a later time. Perhaps you want to edit the end time of it, if you have \""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"                + \"really done it.\";"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":17}},{"path":"src/main/java/exception/DoneException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions when performing done."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class DoneException extends InvalidCommandException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/main/java/exception/DoneNumberFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions when performing done to a task not labeled with an int."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class DoneNumberFormatException extends DoneException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the error message"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please enter an integer after done.\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":15}},{"path":"src/main/java/exception/DoubleTimeAssignmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represent the case when the user enters an end time for an assignment."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class DoubleTimeAssignmentException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Assignment should have only one time. If you want to indicate an exam, you may consider it as a class.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/EditIndexOutOfBoundsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class EditIndexOutOfBoundsException extends NuScheduleException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"        return \"Index provided is out of bound. Please provide a valid integer.\";"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":8}},{"path":"src/main/java/exception/EditNoEndTimeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class EditNoEndTimeException extends NuScheduleException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"        return \"This conversion requires a valid END time.\";"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":9}},{"path":"src/main/java/exception/EmptyAssignmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user want to create an empty Todo."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyAssignmentException extends AssignmentException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":15}},{"path":"src/main/java/exception/EmptyClassException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user want to create an empty Deadline."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyClassException extends ClassException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! The description of a class cannot be empty.\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":15}},{"path":"src/main/java/exception/EmptyClearDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"max-wunan"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"/*"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":"* Represents the case when the user input clear before but no date is given"},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"* */"},{"lineNumber":6,"author":{"gitId":"max-wunan"},"content":"public class EmptyClearDateException extends DeleteException {"},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"        return \"OOPS!!! You should input the date before which you want to delete all events :)\";"},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":"}"}],"authorContributionMap":{"max-wunan":15}},{"path":"src/main/java/exception/EmptyDeleteException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user types delete but do not specify"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * the task that should be deleted."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyDeleteException extends DeleteException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should enter the index of the task you want to delete.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/EmptyDoneException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user types done but do not specify"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * the task that should be done."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyDoneException extends DoneException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should enter the index of the task you have done.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/EmptyEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when no description is provided for the event."},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":" */"},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":"public class EmptyEventException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Event description is empty. Please give a title/description of the event.\";"},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":13,"Lee-Juntong":2}},{"path":"src/main/java/exception/EmptyEventIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyEventIndexException extends NuScheduleException {"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please provide a valid index.\";"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/main/java/exception/EmptyEventListException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when the event list is empty but the user want to print or clear the list."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyEventListException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Sorry, the list is empty.\";"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":11}},{"path":"src/main/java/exception/EmptyFindDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user types date but do not specify"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * the date."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyFindDateException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should enter the date you are looking for.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/EmptyFindException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user types find but do not specify"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * the keyword."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyFindException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should enter the keyword of the tasks you want to find.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/EmptyLocationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":" * Represents class when user does not input anything for locate command."},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"public class EmptyLocationException extends InvalidCommandException {"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"     * Prepare message to be printed when the exception occur."},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"     * @return"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"        return \"Please do not leave the location input empty.\";"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":15}},{"path":"src/main/java/exception/EmptyPersonalEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user want to create an empty Event."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyPersonalEventException extends PersonalEventException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! The description of an event cannot be empty.\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":15}},{"path":"src/main/java/exception/EmptyRepeatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents when the user call repeat with about argument provided."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyRepeatException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please enter the arguments for repeat in the following format.\\n \""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"                + \"\\\"repeat all NUMBER_OF_WEEKS\\\" OR \\\"repeat EVENT_INDEX NUMBER_OF_WEEKS\\\"\";"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":17}},{"path":"src/main/java/exception/EmptyStudyTimeDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user types studyTime but do not specify"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * the date."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class EmptyStudyTimeDateException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should enter the date that you want to know your study time.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/EndBeforeStartEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user want to create an Event that ends before it starts."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class EndBeforeStartEventException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Just like you cannot die before you exist, an event cannot end before it starts.\";"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":11}},{"path":"src/main/java/exception/ExistingEventInListException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * represent the user trys to add an event that is already in the list."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class ExistingEventInListException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Seems you have already added this event. Do not input duplicate events.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/InvalidCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions happen when the user input invalid command."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class InvalidCommandException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/main/java/exception/InvalidEditLocationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class InvalidEditLocationException extends InvalidCommandException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"        return \"Enter the location in the format /l LOCATION for offline location and /o LINK /p PASSWORD for \""},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"                + \"online location.\";"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":9}},{"path":"src/main/java/exception/InvalidEditTypeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class InvalidEditTypeException extends InvalidCommandException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"        return \"Event type can only be personalevent, class , selfStudy or assignment.\";"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":8}},{"path":"src/main/java/exception/InvalidEventIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":" * Represents exception when event index is out of list."},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"public class InvalidEventIndexException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"        return \"Please input an event number that is within the event list.\";"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":16}},{"path":"src/main/java/exception/InvalidLocationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"public class InvalidLocationException extends NuScheduleException {"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"        return \"Please input a valid location or event number.\";"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":8}},{"path":"src/main/java/exception/InvalidNumWeekException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the user call repeat but the number of weeks is entered in a wrong format."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class InvalidNumWeekException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please enter the number of weeks to repeat. This should be an integer between 1 and 50.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/InvalidSortCriteriaException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class InvalidSortCriteriaException extends NuScheduleException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"        return \"Invalid sorting criteria given. Possible sorting criteria includes\""},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"                + \" description , location and time.\";"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":9}},{"path":"src/main/java/exception/LoadingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when the user edit the file in a wrong way."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class LoadingException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"        return \"You edited the file in a wrong format. Please check.\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"madbeez":1,"Lee-Juntong":14}},{"path":"src/main/java/exception/NoClassTimeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to create a class"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * without giving it a time."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoClassTimeException extends ClassException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should enter a time for class.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoClassTimeMarkerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to create a Class"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * without using /t to give it a time."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoClassTimeMarkerException extends ClassException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should mark the time for a class with \\\"/t\\\"\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoClassWeekException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represent the case when the user type repeat all but there is no class in the current week."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class NoClassWeekException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Seems there is no class in this week, so there is nothing for me to repeat.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoDateBeforeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"max-wunan"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":" * Represents the case when the user input a date in clear before command but there is no event before the given date."},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":"public class NoDateBeforeException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"max-wunan"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"max-wunan"},"content":"     * @return the message."},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":"        return \"There is no events existing before the date given by you :(.\";"},{"lineNumber":16,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"max-wunan"},"content":"}"}],"authorContributionMap":{"max-wunan":17}},{"path":"src/main/java/exception/NoEditEventDescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class NoEditEventDescriptionException extends ClassException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"        return \"Please provide the details for the new event to be added.\";"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":8}},{"path":"src/main/java/exception/NoEditTypeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class NoEditTypeException extends NuScheduleException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"        return \"Please provide the details for the new event to be added.\";"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":8}},{"path":"src/main/java/exception/NoEndTimeClassException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represent the user want to input a class without give it an ending time."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class NoEndTimeClassException extends ClassException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * The message to be printed."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Every class should end at some time. Give it an ending, please. Mark it by \\\"/e\\\".\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":15}},{"path":"src/main/java/exception/NoEventDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to find a Event with a certain date,"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * but such Event does not exist in the list."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoEventDateException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Sorry, there isn\u0027t any event in the list on the given date.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoEventDateRemindException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":" * Represents the exception happens when the user trying to find a Event with a certain date,"},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":" * but such Event does not exist in the list."},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":" */"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"public class NoEventDateRemindException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"        return \"Sorry, there are no events in the list for today.\";"},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":16}},{"path":"src/main/java/exception/NoEventDoneException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when the users try to find the study time but he had not done any thing related to academics"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * on that day."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoEventDoneException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Seems you haven\u0027t done any thing related to academics on that day.\";"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":17}},{"path":"src/main/java/exception/NoEventLocationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when no location is provided when adding a new event."},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":" */"},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":"public class NoEventLocationException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please input a valid location and mark it with \\\"/l\\\" for underline locations or \\\"/o\\\" for online \""},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"                + \"locations.\";"},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":13,"Lee-Juntong":3}},{"path":"src/main/java/exception/NoEventLocationMarkerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to create an event"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * without using /l to give it a location."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoEventLocationMarkerException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please mark the location of the event by \\\"/l\\\".\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoEventOneMonthAgoException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"max-wunan"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":3,"author":{"gitId":"max-wunan"},"content":"/*"},{"lineNumber":4,"author":{"gitId":"max-wunan"},"content":"* Represents the case when there is no event happened one month ago but the user typed in autoclear"},{"lineNumber":5,"author":{"gitId":"max-wunan"},"content":"* */"},{"lineNumber":6,"author":{"gitId":"max-wunan"},"content":"public class NoEventOneMonthAgoException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"max-wunan"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"max-wunan"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"max-wunan"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"max-wunan"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"max-wunan"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"max-wunan"},"content":"        return \"OOPS!! There is no events happened one month ago for you to auto clear :(\";"},{"lineNumber":15,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"max-wunan"},"content":"}"}],"authorContributionMap":{"max-wunan":16}},{"path":"src/main/java/exception/NoEventTimeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":" * Represents the exception when no date/time is inputted as expected."},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":" */"},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":"public class NoEventTimeException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"        return \"Please input the date/time.\";"},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":15}},{"path":"src/main/java/exception/NoEventTimeMarkerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception where there is no time marker in the command."},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class NoEventTimeMarkerException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please mark the time of the event by \\\"/t\\\".\";"},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":11,"Lee-Juntong":4}},{"path":"src/main/java/exception/NoMatchingEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to find a Task with a certain keyword, but such"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * task does not exist in the list."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoMatchingEventException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Sorry, there isn\u0027t such event in the list with the given keyword.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoPasswordException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user enter \"/p\" but did not enter password."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class NoPasswordException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Seems you forget to enter the password. If there is no password needed, do not enter \\\"/p\\\"\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoPersonalEventTimeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to create an Event"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * without giving it a time."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoPersonalEventTimeException extends PersonalEventException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should enter a time for event.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoPersonalEventTimeMakerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception happens when the user trying to create an Event"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * without using \\by to give it a time."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class NoPersonalEventTimeMakerException extends PersonalEventException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! You should mark the time for an event with \\\"/at\\\"\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoRepeatWeekException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represent when the user call repeat without provide the number of weeks to repeat."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class NoRepeatWeekException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"Please enter the number of weeks to repeat the selected event(s).\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/NoSortCriteriaException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"public class NoSortCriteriaException extends NuScheduleException {"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"        return \"No sorting criteria given. Possible sorting criteria includes\""},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"                + \" description and time.\";"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":9}},{"path":"src/main/java/exception/NuScheduleException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class NuScheduleException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"    public abstract String getMessage();"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":10}},{"path":"src/main/java/exception/PersonalEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exceptions related to PersonalEvent class."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class PersonalEventException extends InvalidCommandException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/main/java/exception/RepeatIndexFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represent the user call repeat but provide an invalid index for the event."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class RepeatIndexFormatException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"If you want to selected an event to repeat, enter the index of it. If you want to repeat all class \""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"                + \"in the current week, enter \\\"all\\\".\";"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":17}},{"path":"src/main/java/exception/TimeFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when the date/time are entered incorrectly."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":"public class TimeFormatException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced,"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     * gives suggestion to the user on how to solve the error."},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"You entered the time in a format that is not accepted by this program.\\n\""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"                + \"The format should be \\\"yyyy-MM-dd HH:mm\\\", and both date and time should be valid.\\n\""},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"                + \"For example, 2000-01-01 00:00\";"},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":10,"Lee-Juntong":8}},{"path":"src/main/java/exception/UndefinedEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the the user trying to operate (delete/edit/done)"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * some events that does not exist."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"public class UndefinedEventException extends NuScheduleException {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    private final int index;//Task label of the task"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     * Create an exception according to the input of the user."},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"     * @param index the label of the event that the user want to operate on."},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    public UndefinedEventException(int index) {"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"        this.index \u003d index;"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the error message."},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! There isn\u0027t a event labeled \" + index;"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":27}},{"path":"src/main/java/exception/UnknownErrorException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when it should not happen."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class UnknownErrorException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"        return \"There shouldn\u0027t be such error.\";"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":11}},{"path":"src/main/java/exception/WritingFileException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when the file is not correctly written."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class WritingFileException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"        return \"Something went wrong when writing to the file.\";"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"madbeez":1,"Lee-Juntong":14}},{"path":"src/main/java/exception/WrongAutoClearArgumentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the case when the user types autoClear but did not provide an arguement."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class WrongAutoClearArgumentException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"You should type either \\\"autoClear on\\\" or \\\"autoClear off\\\" to use this function.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":16}},{"path":"src/main/java/exception/WrongCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":" * Represents the exception when an invalid command is inputted."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class WrongCommandException extends InvalidCommandException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"     * @return the message"},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"                + \"You may enter \\\"help\\\" for more information.\";"},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"madbeez":12,"Lee-Juntong":5}},{"path":"src/main/java/exception/WrongEditFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the exception when the index for edit is of a wrong format."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class WrongEditFormatException extends NuScheduleException {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepare the message to be printed when this exception is experienced."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the message."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"xuche123"},"content":"        return \"Index of an even should be an integer.\";"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"xuche123":1,"Lee-Juntong":15}},{"path":"src/main/java/location/Building.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" * Represents Building objects."},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":" * Contains an array of Strings nearestBusStops which represents the bus stops nearby."},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"public class Building extends Location {"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"    private final String[] nearestBusStops;"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"    public Building(String name, String[] nearestBusStops) {"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"        super(name);"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"        this.nearestBusStops \u003d nearestBusStops;"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"        this.type \u003d LocationType.BUILDING;"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepares string to be printed in a list."},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * @return object to be printed in a certain format."},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"        return \"(Building): \" + name + \"\\nNearest bus stop(s): \" + printNearestBusStops();"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * Convert the information about this Building to a string that is to be stored in a file."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the result string to be stored."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"        String busStops \u003d null;"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"        for (String additionalInfo : nearestBusStops) {"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"            busStops \u003d additionalInfo + \",\";"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"        assert busStops !\u003d null;"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"        return \"BLK/\" + name + \"/\" + busStops.substring(0, busStops.length() - 1);"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":42,"author":{"gitId":"jiaaaqi"},"content":"    private String printNearestBusStops() {"},{"lineNumber":43,"author":{"gitId":"jiaaaqi"},"content":"        String str \u003d Arrays.toString(nearestBusStops);"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"        str \u003d str.substring(1, str.indexOf(\"]\"));"},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"        return str;"},{"lineNumber":46,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":27,"Lee-Juntong":20}},{"path":"src/main/java/location/BusStop.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" * Represents bus stop objects."},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":" * Contains String name which is the name of the bus stop and"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":" * an array of Strings which is the list of buses available at the bus stop."},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"public class BusStop {"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"    private final String name;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"    private final String[] buses;"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    public BusStop(String name, String[] buses) {"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"        this.name \u003d name;"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"        this.buses \u003d buses;"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"    public String getName() {"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"        return name;"},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepares string to be printed in a list."},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"     * @return object to be printed in a certain format."},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"        return name + \"\\nBuses Available: \" + Arrays.toString(buses);"},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":25,"Lee-Juntong":6}},{"path":"src/main/java/location/Hostel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" * Represents Hostel objects."},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":" * Contains an array of Strings nearestBusStops which represents the bus stops nearby."},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"public class Hostel extends Location {"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"    String[] nearestBusStops;"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"    public Hostel(String name, String[] nearestBusStops) {"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"        super(name);"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"        this.type \u003d LocationType.HOSTEL;"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"        this.nearestBusStops \u003d nearestBusStops;"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepares string to be printed in a list."},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"     * @return object to be printed in a certain format."},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"        return \"(Hostel): \" + name + \"\\nNearest bus stop(s): \" + printNearestBusStops();"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * Convert the information about this Hostel to a string that is to be stored in a file."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the result string to be stored."},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"        String busStops \u003d null;"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"        for (String additionalInfo : nearestBusStops) {"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"            busStops \u003d additionalInfo + \",\";"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"        assert busStops !\u003d null;"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"        return \"H/\" + name + \"/\" + busStops.substring(0, busStops.length() - 1);"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":42,"author":{"gitId":"jiaaaqi"},"content":"    private String printNearestBusStops() {"},{"lineNumber":43,"author":{"gitId":"jiaaaqi"},"content":"        String str \u003d Arrays.toString(nearestBusStops);"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"        str \u003d str.substring(1, str.indexOf(\"]\"));"},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"        return str;"},{"lineNumber":46,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":28,"Lee-Juntong":19}},{"path":"src/main/java/location/LectureTheatre.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents lecture theatre objects."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * Contains a String nearestBuilding which represents the name of nearest building."},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"public class LectureTheatre extends Location {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    private final String nearestBuilding;"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"    public LectureTheatre(String name, String nearestBuilding) {"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"        super(name);"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"        this.type \u003d LocationType.LT;"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"        this.nearestBuilding \u003d nearestBuilding;"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepares string to be printed in a list."},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * @return object to be printed in a certain format."},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"        return \"(Lecture Theatre): \" + name + \"\\nNearest building: \" + nearestBuilding;"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * Convert the information about this LT to a string that is to be stored in a file."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the result string to be stored."},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"        return \"L/\" + name + \"/\" + nearestBuilding;"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":19,"Lee-Juntong":15}},{"path":"src/main/java/location/Location.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" * Represents location objects."},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" * Contains String name, which is the name of location, and type of location."},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"public class Location {"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"    protected String name;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"    protected LocationType type;"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"    // private int[] coordinates \u003d new int[2];  // will implement in version 2.0"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"    public Location(String name) {"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"        this.name \u003d name;"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"    public String getName() {"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"        return name;"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"    protected String printType() {"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"        String str;"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"        switch (type) {"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"        case BUILDING:"},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"            str \u003d \"Building\";"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"        case HOSTEL:"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"            str \u003d \"Hostel\";"},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"            break;"},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"        case LT:"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"            str \u003d \"Lecture Theatre\";"},{"lineNumber":32,"author":{"gitId":"jiaaaqi"},"content":"            break;"},{"lineNumber":33,"author":{"gitId":"jiaaaqi"},"content":"        case OUT_OF_NUS:"},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"            str \u003d \"Out of NUS\";"},{"lineNumber":35,"author":{"gitId":"jiaaaqi"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"jiaaaqi"},"content":"        default:"},{"lineNumber":37,"author":{"gitId":"jiaaaqi"},"content":"            str \u003d \"ERROR\";"},{"lineNumber":38,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":40,"author":{"gitId":"jiaaaqi"},"content":"        return str;"},{"lineNumber":41,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":43,"author":{"gitId":"jiaaaqi"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"        return \"(\" + printType() + \")\" + name;"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"     * All location class objects should have this methods, except BusStop."},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the string to be wrote in the file."},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"        return null;"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean equals(Object object) {"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"        boolean isEqual \u003d false;"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"        if (object instanceof Location) {"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"            isEqual \u003d (this.name.equals(((Location) object).name));"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"        return isEqual;"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":30,"jiaaaqi":36}},{"path":"src/main/java/location/LocationType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"public enum LocationType {"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"    BUILDING,"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"    HOSTEL,"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"    LT,"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    OUT_OF_NUS"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":8}},{"path":"src/main/java/location/OnlineLocation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import event.Assignment;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":" * Virtual location is also location!"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":" * This class represents the online meetings (e.g. zoom sessions) for people to attend, or the link to submit"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":" * assignment."},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":" * This format should be /o url /p pwd, or /o url, since not all sessions need a password, and the submission link"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":" * does not require a password."},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"public class OnlineLocation {"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    private final String link;"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"    private String password;"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"     * the constructor of the object if the meeting does not need pwd."},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"     * @param link the url of the online meeting"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    public OnlineLocation(String link) {"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"        assert link !\u003d null;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"        this.link \u003d link;"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"     * the constructor of the object if the meeting needs pwd."},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"     * @param link the url of the online meeting"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"     * @param pwd  the password of the online meeting"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"    public OnlineLocation(String link, String pwd) {"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"        assert link !\u003d null;"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"        assert pwd !\u003d null;"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"        this.link \u003d link;"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"        this.password \u003d pwd;"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"     * Returns the details of the online location."},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the link of the location. If there is password, return the password also."},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        return \"link: \" + link + (password !\u003d null ? \" password: \" + password : \"\");"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"     * Returns the details of the location to be printed in a file."},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the link of the meeting. If there is password, return the password also."},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"        return \"online//\" + link + (password !\u003d null ? \"//\" + password : \"\");"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean equals(Object object) {"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"        boolean isEqual \u003d false;"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"        if (object instanceof OnlineLocation) {"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"            isEqual \u003d (this.link.equals(((OnlineLocation) object).link));"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"        return isEqual;"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":68,"author":{"gitId":"xuche123"},"content":"    public String getLink() {"},{"lineNumber":69,"author":{"gitId":"xuche123"},"content":"        return link;"},{"lineNumber":70,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"xuche123":4,"Lee-Juntong":67}},{"path":"src/main/java/location/OutOfNuS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package location;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"public class OutOfNuS extends Location {"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"    public OutOfNuS(String name) {"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"        super(name);"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":"     * Prepares string to be printed in a list."},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":"     * @return object to be printed in a certain format."},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"        return \"(Out of NUS): \" + name;"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":18,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"madbeez"},"content":"     * Convert the information about this location to a string that is to be stored in a file."},{"lineNumber":20,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"madbeez"},"content":"     * @return the result string to be stored."},{"lineNumber":22,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"madbeez"},"content":"    public String fileString() {"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"        return \"OUT/\" + name;"},{"lineNumber":25,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"madbeez":13,"jiaaaqi":11,"Lee-Juntong":2}},{"path":"src/main/java/locationlist/BusStopList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package locationlist;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import location.BusStop;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"public class BusStopList {"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    private final ArrayList\u003cBusStop\u003e busStopList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"    public ArrayList\u003cBusStop\u003e getBusStopList() {"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"        return busStopList;"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"     * Flag to check if the bus stop exists."},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"     * @param name name of bus stop to be checked"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"     * @return boolean value of if the bus stop exist in the list"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"    public boolean checkExistence(String name) {"},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"        for (BusStop busStop : busStopList) {"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"            if (name.equals(busStop.getName())) {"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"                return true;"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":26,"Lee-Juntong":2}},{"path":"src/main/java/locationlist/LocationList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package locationlist;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import location.Location;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import location.OutOfNuS;"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"public class LocationList {"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"    private final ArrayList\u003cLocation\u003e locationList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"    public ArrayList\u003cLocation\u003e getLocationList() {"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"        return locationList;"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"     * Flag to check if location exists."},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"     * @param name name of the location to be checked"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"     * @return boolean value of if the location is found in the location list"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"    public boolean checkValidLocation(String name) {"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"        for (Location location : locationList) {"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"            String input \u003d name.toLowerCase().replaceAll(\"\\\\s\",\"\");"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"            if (input.equals(location.getName().toLowerCase().replaceAll(\"\\\\s\",\"\"))) {"},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"                return true;"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"        return false;"},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"jiaaaqi"},"content":"     * Finds location in the list based on the name input."},{"lineNumber":33,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"     * @param name String that represents name of location to find"},{"lineNumber":35,"author":{"gitId":"jiaaaqi"},"content":"     * @return Location that is found in the list to be returned"},{"lineNumber":36,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jiaaaqi"},"content":"    public Location findLocation(String name) {"},{"lineNumber":38,"author":{"gitId":"jiaaaqi"},"content":"        Location locationReturned \u003d null;"},{"lineNumber":39,"author":{"gitId":"jiaaaqi"},"content":"        int i \u003d 0;"},{"lineNumber":40,"author":{"gitId":"jiaaaqi"},"content":"        String input \u003d name.toLowerCase().replaceAll(\"\\\\s\",\"\");"},{"lineNumber":41,"author":{"gitId":"jiaaaqi"},"content":"        for (Location location : locationList) {"},{"lineNumber":42,"author":{"gitId":"jiaaaqi"},"content":"            if (input.equalsIgnoreCase(location.getName().toLowerCase().replaceAll(\"\\\\s\",\"\"))) {"},{"lineNumber":43,"author":{"gitId":"jiaaaqi"},"content":"                locationReturned \u003d locationList.get(i);"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"                return locationReturned;"},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"jiaaaqi"},"content":"            i++;"},{"lineNumber":47,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":49,"author":{"gitId":"jiaaaqi"},"content":"        if (locationReturned \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitId":"jiaaaqi"},"content":"            locationReturned \u003d new OutOfNuS(name);"},{"lineNumber":51,"author":{"gitId":"jiaaaqi"},"content":"            locationList.add(locationReturned);"},{"lineNumber":52,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"jiaaaqi"},"content":"        return locationReturned;"},{"lineNumber":54,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":56,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jiaaaqi"},"content":"     * Method to check if string can be converted to an integer."},{"lineNumber":58,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"jiaaaqi"},"content":"     * @param input String to be converted"},{"lineNumber":60,"author":{"gitId":"jiaaaqi"},"content":"     * @return flag if string can be converted"},{"lineNumber":61,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"jiaaaqi"},"content":"    public boolean checkIfInteger(String input) {"},{"lineNumber":63,"author":{"gitId":"jiaaaqi"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"jiaaaqi"},"content":"            Integer.parseInt(input);"},{"lineNumber":65,"author":{"gitId":"jiaaaqi"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"jiaaaqi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":67,"author":{"gitId":"jiaaaqi"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":68,"Lee-Juntong":2}},{"path":"src/main/java/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import command.ClearCommand;"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"import command.Command;"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"import command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"import command.EditCommand;"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"import command.ExitCommand;"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"import command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"import command.FindDateCommand;"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"import command.HelpCommand;"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"import command.LocateCommand;"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"import command.PrintAreaLocationsCommand;"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"import command.PrintFullListCommand;"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"import command.PrintLocationCommand;"},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":"import command.ReminderCommand;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":"import command.RepeatCommand;"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"import command.SortCommand;"},{"lineNumber":20,"author":{"gitId":"max-wunan"},"content":"import command.AutoClearCommand;"},{"lineNumber":21,"author":{"gitId":"max-wunan"},"content":"import command.ClearBeforeCommand;"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"import command.StudyTimeCommand;"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"import command.UserInfoCommand;"},{"lineNumber":25,"author":{"gitId":"madbeez"},"content":"import event.Assignment;"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"import event.Class;"},{"lineNumber":27,"author":{"gitId":"madbeez"},"content":"import event.PersonalEvent;"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"import event.SelfStudy;"},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"import exception.DateFormatException;"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"import exception.DeleteNumberFormatException;"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"import exception.DoneNumberFormatException;"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"import exception.DoubleTimeAssignmentException;"},{"lineNumber":33,"author":{"gitId":"jiaaaqi"},"content":"import exception.EmptyDeleteException;"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyDoneException;"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyEventException;"},{"lineNumber":36,"author":{"gitId":"jiaaaqi"},"content":"import exception.EmptyEventIndexException;"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyFindDateException;"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyFindException;"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyLocationException;"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyRepeatException;"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyStudyTimeDateException;"},{"lineNumber":42,"author":{"gitId":"jiaaaqi"},"content":"import exception.InvalidEditLocationException;"},{"lineNumber":43,"author":{"gitId":"xuche123"},"content":"import exception.InvalidEditTypeException;"},{"lineNumber":44,"author":{"gitId":"jiaaaqi"},"content":"import exception.InvalidEventIndexException;"},{"lineNumber":45,"author":{"gitId":"jiaaaqi"},"content":"import exception.InvalidLocationException;"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"import exception.InvalidNumWeekException;"},{"lineNumber":47,"author":{"gitId":"xuche123"},"content":"import exception.InvalidSortCriteriaException;"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WrongAutoClearArgumentException;"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoEndTimeClassException;"},{"lineNumber":50,"author":{"gitId":"jiaaaqi"},"content":"import exception.NoEventLocationException;"},{"lineNumber":51,"author":{"gitId":"jiaaaqi"},"content":"import exception.NoEventTimeException;"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoEventTimeMarkerException;"},{"lineNumber":53,"author":{"gitId":"jiaaaqi"},"content":"import exception.NoPasswordException;"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoRepeatWeekException;"},{"lineNumber":55,"author":{"gitId":"xuche123"},"content":"import exception.NoSortCriteriaException;"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NuScheduleException;"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"import exception.RepeatIndexFormatException;"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"import exception.TimeFormatException;"},{"lineNumber":59,"author":{"gitId":"xuche123"},"content":"import exception.UndefinedEventException;"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"import exception.UnknownErrorException;"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WrongCommandException;"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WrongEditFormatException;"},{"lineNumber":63,"author":{"gitId":"max-wunan"},"content":"import exception.EmptyClearDateException;"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"import location.Building;"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"import location.Hostel;"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"import location.LectureTheatre;"},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"import location.Location;"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"import location.OnlineLocation;"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":"import location.OutOfNuS;"},{"lineNumber":70,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":71,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":72,"author":{"gitId":"xuche123"},"content":"import java.time.DateTimeException;"},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":74,"author":{"gitId":"madbeez"},"content":"import java.time.LocalDateTime;"},{"lineNumber":75,"author":{"gitId":"madbeez"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":76,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":77,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":" * This class contains one function -- parse, to call the respective command function according to the user input."},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"public abstract class Parser {"},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String EXIT \u003d \"bye\";"},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String PRINT_EVENT_LIST \u003d \"list\";"},{"lineNumber":84,"author":{"gitId":"jiaaaqi"},"content":"    public static final String PRINT_LOCATION_LIST \u003d \"locations\";"},{"lineNumber":85,"author":{"gitId":"jiaaaqi"},"content":"    public static final String LOCATE_EVENT \u003d \"locate\";"},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String EVENT_DONE \u003d \"done\";"},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String ASSIGNMENT \u003d \"assignment\";"},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String CLASS \u003d \"class\";"},{"lineNumber":89,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String PERSONAL_EVENT \u003d \"personalEvent\";"},{"lineNumber":90,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String EVENT_DELETE \u003d \"delete\";"},{"lineNumber":91,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String EVENT_FIND \u003d \"find\";"},{"lineNumber":92,"author":{"gitId":"xuche123"},"content":"    public static final String EDIT \u003d \"edit\";"},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String TIME_MARKER \u003d \"/t\";"},{"lineNumber":94,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String SINGLE_SPACE \u003d \" \";"},{"lineNumber":95,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String LOCATION_MARKER \u003d \"/l\";"},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String EVENT_FIND_DATE \u003d \"date\";"},{"lineNumber":97,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String HELP \u003d \"help\";"},{"lineNumber":98,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String CLEAR \u003d \"clear\";"},{"lineNumber":99,"author":{"gitId":"xuche123"},"content":"    public static final String SORT \u003d \"sort\";"},{"lineNumber":100,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String END_TIME_MARKER \u003d \"/e\";"},{"lineNumber":101,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String ONLINE_LOCATION_MARKER \u003d \"/o\";"},{"lineNumber":102,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String PASSWORD_MARKER \u003d \"/p\";"},{"lineNumber":103,"author":{"gitId":"madbeez"},"content":"    public static final String REMIND \u003d \"reminder\";"},{"lineNumber":104,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String STUDY_TIME \u003d \"studyTime\";"},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String SELF_STUDY \u003d \"selfStudy\";"},{"lineNumber":106,"author":{"gitId":"max-wunan"},"content":"    public static final String REPEAT \u003d \"repeat\";"},{"lineNumber":107,"author":{"gitId":"max-wunan"},"content":"    public static final String ALL \u003d \"all\";"},{"lineNumber":108,"author":{"gitId":"max-wunan"},"content":"    public static final String AUTO_CLEAR \u003d \"autoClear\";"},{"lineNumber":109,"author":{"gitId":"max-wunan"},"content":"    public static final String CLEAR_BEFORE \u003d \"clearBefore\";"},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String FOS \u003d \"FOS\";"},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String FOE \u003d \"FOE\";"},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String SDE \u003d \"SDE\";"},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String SOC \u003d \"SOC\";"},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String BIZ \u003d \"BIZ\";"},{"lineNumber":115,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String HOSTEL \u003d \"HOSTEL\";"},{"lineNumber":116,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String FASS \u003d \"FASS\";"},{"lineNumber":117,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":118,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":119,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"Lee-Juntong"},"content":"     * This function calls the correct command the user want to perform, by returning a Command object."},{"lineNumber":121,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"Lee-Juntong"},"content":"     * @param fullCommand the full string of user input"},{"lineNumber":123,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the specific Command object to perform what the user want to do"},{"lineNumber":124,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws NuScheduleException includes all exceptions may happen during parsing"},{"lineNumber":125,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":127,"author":{"gitId":"xuche123"},"content":"    public static Command parse(String fullCommand, LocationList locations, int size) throws NuScheduleException {"},{"lineNumber":128,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":129,"author":{"gitId":"Lee-Juntong"},"content":"        //deletes all the starting and ending spaces"},{"lineNumber":130,"author":{"gitId":"Lee-Juntong"},"content":"        fullCommand \u003d fullCommand.trim();"},{"lineNumber":131,"author":{"gitId":"Lee-Juntong"},"content":"        // this block deals with single word command"},{"lineNumber":132,"author":{"gitId":"Lee-Juntong"},"content":"        switch (fullCommand) {"},{"lineNumber":133,"author":{"gitId":"Lee-Juntong"},"content":"        case EXIT:"},{"lineNumber":134,"author":{"gitId":"Lee-Juntong"},"content":"            return new ExitCommand();"},{"lineNumber":135,"author":{"gitId":"Lee-Juntong"},"content":"        case PRINT_EVENT_LIST:"},{"lineNumber":136,"author":{"gitId":"Lee-Juntong"},"content":"            return new PrintFullListCommand();"},{"lineNumber":137,"author":{"gitId":"Lee-Juntong"},"content":"        case PRINT_LOCATION_LIST:"},{"lineNumber":138,"author":{"gitId":"jiaaaqi"},"content":"            return new PrintLocationCommand();"},{"lineNumber":139,"author":{"gitId":"Lee-Juntong"},"content":"        case HELP:"},{"lineNumber":140,"author":{"gitId":"Lee-Juntong"},"content":"            return new HelpCommand();"},{"lineNumber":141,"author":{"gitId":"Lee-Juntong"},"content":"        case CLEAR:"},{"lineNumber":142,"author":{"gitId":"Lee-Juntong"},"content":"            return new ClearCommand();"},{"lineNumber":143,"author":{"gitId":"Lee-Juntong"},"content":"        case REMIND:"},{"lineNumber":144,"author":{"gitId":"Lee-Juntong"},"content":"            return new ReminderCommand();"},{"lineNumber":145,"author":{"gitId":"Lee-Juntong"},"content":"        default:"},{"lineNumber":146,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":147,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":149,"author":{"gitId":"Lee-Juntong"},"content":"        String[] words \u003d fullCommand.split(SINGLE_SPACE);"},{"lineNumber":150,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":151,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with user info"},{"lineNumber":152,"author":{"gitId":"Lee-Juntong"},"content":"        switch (words[0]) {"},{"lineNumber":153,"author":{"gitId":"Lee-Juntong"},"content":"        case \"student\":"},{"lineNumber":154,"author":{"gitId":"Lee-Juntong"},"content":"        case \"professor\":"},{"lineNumber":155,"author":{"gitId":"Lee-Juntong"},"content":"            return new UserInfoCommand(fullCommand.substring(words[0].length() + 1), words[0]);"},{"lineNumber":156,"author":{"gitId":"Lee-Juntong"},"content":"        default:"},{"lineNumber":157,"author":{"gitId":"Lee-Juntong"},"content":"            break;"},{"lineNumber":158,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":160,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with auto clear command"},{"lineNumber":161,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(AUTO_CLEAR)) {"},{"lineNumber":162,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":163,"author":{"gitId":"Lee-Juntong"},"content":"                fullCommand \u003d fullCommand.substring(AUTO_CLEAR.length() + 1).trim();"},{"lineNumber":164,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":165,"author":{"gitId":"Lee-Juntong"},"content":"                throw new WrongAutoClearArgumentException();"},{"lineNumber":166,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":167,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.equalsIgnoreCase(\"ON\")) {"},{"lineNumber":168,"author":{"gitId":"Lee-Juntong"},"content":"                return new AutoClearCommand(true);"},{"lineNumber":169,"author":{"gitId":"Lee-Juntong"},"content":"            } else if (fullCommand.equalsIgnoreCase(\"OFF\")) {"},{"lineNumber":170,"author":{"gitId":"Lee-Juntong"},"content":"                return new AutoClearCommand(false);"},{"lineNumber":171,"author":{"gitId":"Lee-Juntong"},"content":"            } else {"},{"lineNumber":172,"author":{"gitId":"Lee-Juntong"},"content":"                throw new WrongAutoClearArgumentException();"},{"lineNumber":173,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":176,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with print locations in the area command"},{"lineNumber":177,"author":{"gitId":"Lee-Juntong"},"content":"        if (fullCommand.equalsIgnoreCase(FOS) || fullCommand.equalsIgnoreCase(FOE)"},{"lineNumber":178,"author":{"gitId":"Lee-Juntong"},"content":"                || fullCommand.equalsIgnoreCase(SDE) || fullCommand.equalsIgnoreCase(SOC)"},{"lineNumber":179,"author":{"gitId":"Lee-Juntong"},"content":"                || fullCommand.equalsIgnoreCase(BIZ) || fullCommand.equalsIgnoreCase(HOSTEL)"},{"lineNumber":180,"author":{"gitId":"Lee-Juntong"},"content":"                || fullCommand.equalsIgnoreCase(FASS)) {"},{"lineNumber":181,"author":{"gitId":"Lee-Juntong"},"content":"            return new PrintAreaLocationsCommand(fullCommand);"},{"lineNumber":182,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":184,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with locate command"},{"lineNumber":185,"author":{"gitId":"jiaaaqi"},"content":"        if (words[0].equalsIgnoreCase(LOCATE_EVENT)) {"},{"lineNumber":186,"author":{"gitId":"jiaaaqi"},"content":"            String input \u003d \"\";"},{"lineNumber":187,"author":{"gitId":"jiaaaqi"},"content":"            int i;"},{"lineNumber":188,"author":{"gitId":"jiaaaqi"},"content":"            for (i \u003d 1; i \u003c words.length; i++) {"},{"lineNumber":189,"author":{"gitId":"jiaaaqi"},"content":"                input \u003d input.concat(words[i]);"},{"lineNumber":190,"author":{"gitId":"jiaaaqi"},"content":"                int j \u003d i;"},{"lineNumber":191,"author":{"gitId":"jiaaaqi"},"content":"                if (j++ !\u003d words.length) {"},{"lineNumber":192,"author":{"gitId":"jiaaaqi"},"content":"                    input \u003d input.concat(\" \");"},{"lineNumber":193,"author":{"gitId":"jiaaaqi"},"content":"                }"},{"lineNumber":194,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"jiaaaqi"},"content":"            if (words.length \u003d\u003d 1) {"},{"lineNumber":196,"author":{"gitId":"jiaaaqi"},"content":"                throw new EmptyLocationException();"},{"lineNumber":197,"author":{"gitId":"jiaaaqi"},"content":"            } else if (locations.checkIfInteger(words[1])) {"},{"lineNumber":198,"author":{"gitId":"jiaaaqi"},"content":"                int eventNum \u003d Integer.parseInt(words[1]) - 1;"},{"lineNumber":199,"author":{"gitId":"jiaaaqi"},"content":"                if (eventNum \u003e\u003d size || eventNum \u003c 0) {"},{"lineNumber":200,"author":{"gitId":"jiaaaqi"},"content":"                    throw new InvalidEventIndexException();"},{"lineNumber":201,"author":{"gitId":"jiaaaqi"},"content":"                } else {"},{"lineNumber":202,"author":{"gitId":"jiaaaqi"},"content":"                    return new LocateCommand(words[1]);"},{"lineNumber":203,"author":{"gitId":"jiaaaqi"},"content":"                }"},{"lineNumber":204,"author":{"gitId":"jiaaaqi"},"content":"            } else if (!locations.checkValidLocation(input)) {"},{"lineNumber":205,"author":{"gitId":"jiaaaqi"},"content":"                throw new InvalidLocationException();"},{"lineNumber":206,"author":{"gitId":"jiaaaqi"},"content":"            } else {"},{"lineNumber":207,"author":{"gitId":"jiaaaqi"},"content":"                return new LocateCommand(input);"},{"lineNumber":208,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":209,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"jiaaaqi"},"content":"        if (words[0].equalsIgnoreCase(LOCATE_EVENT) \u0026\u0026 words.length \u003e 1) {"},{"lineNumber":211,"author":{"gitId":"jiaaaqi"},"content":"            return new LocateCommand(words[1]);"},{"lineNumber":212,"author":{"gitId":"jiaaaqi"},"content":"        } else if (words[0].equalsIgnoreCase(LOCATE_EVENT) \u0026\u0026 words.length \u003d\u003d 1) {"},{"lineNumber":213,"author":{"gitId":"jiaaaqi"},"content":"            throw new EmptyLocationException();"},{"lineNumber":214,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":216,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with find command"},{"lineNumber":217,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(EVENT_FIND)) {"},{"lineNumber":218,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(4).isBlank()) {"},{"lineNumber":219,"author":{"gitId":"Lee-Juntong"},"content":"                throw new EmptyFindException();"},{"lineNumber":220,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":221,"author":{"gitId":"Lee-Juntong"},"content":"            return new FindCommand(fullCommand.substring(5));"},{"lineNumber":222,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":224,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with find date command"},{"lineNumber":225,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(EVENT_FIND_DATE)) {"},{"lineNumber":226,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(4).isBlank()) {"},{"lineNumber":227,"author":{"gitId":"Lee-Juntong"},"content":"                throw new EmptyFindDateException();"},{"lineNumber":228,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":230,"author":{"gitId":"Lee-Juntong"},"content":"                return new FindDateCommand(LocalDate.parse(fullCommand.substring(5)));"},{"lineNumber":231,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":232,"author":{"gitId":"Lee-Juntong"},"content":"                throw new DateFormatException();"},{"lineNumber":233,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":234,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":236,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with study time command"},{"lineNumber":237,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(STUDY_TIME)) {"},{"lineNumber":238,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(9).isBlank()) {"},{"lineNumber":239,"author":{"gitId":"Lee-Juntong"},"content":"                throw new EmptyStudyTimeDateException();"},{"lineNumber":240,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":241,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":242,"author":{"gitId":"Lee-Juntong"},"content":"                return new StudyTimeCommand(LocalDate.parse(fullCommand.substring(10)));"},{"lineNumber":243,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":244,"author":{"gitId":"Lee-Juntong"},"content":"                throw new DateFormatException();"},{"lineNumber":245,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":246,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":248,"author":{"gitId":"xuche123"},"content":"        int eventIndex;"},{"lineNumber":249,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":250,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with done command"},{"lineNumber":251,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(EVENT_DONE)) {"},{"lineNumber":252,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(4).isBlank()) {"},{"lineNumber":253,"author":{"gitId":"Lee-Juntong"},"content":"                throw new EmptyDoneException();"},{"lineNumber":254,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":255,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":256,"author":{"gitId":"Lee-Juntong"},"content":"                eventIndex \u003d Integer.parseInt(fullCommand.substring(5).trim()) - 1;"},{"lineNumber":257,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":258,"author":{"gitId":"Lee-Juntong"},"content":"                throw new DoneNumberFormatException();"},{"lineNumber":259,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":260,"author":{"gitId":"Lee-Juntong"},"content":"            return new DoneCommand(eventIndex);"},{"lineNumber":261,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":263,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with delete command"},{"lineNumber":264,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(EVENT_DELETE)) {"},{"lineNumber":265,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(6).isBlank()) {"},{"lineNumber":266,"author":{"gitId":"Lee-Juntong"},"content":"                throw new EmptyDeleteException();"},{"lineNumber":267,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":268,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":269,"author":{"gitId":"Lee-Juntong"},"content":"                eventIndex \u003d Integer.parseInt(fullCommand.substring(7)) - 1;"},{"lineNumber":270,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":271,"author":{"gitId":"Lee-Juntong"},"content":"                throw new DeleteNumberFormatException();"},{"lineNumber":272,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":273,"author":{"gitId":"Lee-Juntong"},"content":"            return new DeleteCommand(eventIndex);"},{"lineNumber":274,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":276,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with sorting"},{"lineNumber":277,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(SORT)) {"},{"lineNumber":278,"author":{"gitId":"xuche123"},"content":"            if (fullCommand.length() \u003d\u003d 4) {"},{"lineNumber":279,"author":{"gitId":"xuche123"},"content":"                throw new NoSortCriteriaException();"},{"lineNumber":280,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":281,"author":{"gitId":"xuche123"},"content":"            String type \u003d words[1].trim().toLowerCase();"},{"lineNumber":282,"author":{"gitId":"xuche123"},"content":"            switch (type) {"},{"lineNumber":283,"author":{"gitId":"xuche123"},"content":"            case \"description\":"},{"lineNumber":284,"author":{"gitId":"xuche123"},"content":"            case \"time\":"},{"lineNumber":285,"author":{"gitId":"xuche123"},"content":"            case \"location\":"},{"lineNumber":286,"author":{"gitId":"xuche123"},"content":"                return new SortCommand(type);"},{"lineNumber":287,"author":{"gitId":"xuche123"},"content":"            default:"},{"lineNumber":288,"author":{"gitId":"xuche123"},"content":"                throw new InvalidSortCriteriaException();"},{"lineNumber":289,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":290,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":292,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with repeat Events"},{"lineNumber":293,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(REPEAT)) {"},{"lineNumber":294,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(6).isBlank()) {"},{"lineNumber":295,"author":{"gitId":"Lee-Juntong"},"content":"                throw new EmptyRepeatException();"},{"lineNumber":296,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":297,"author":{"gitId":"Lee-Juntong"},"content":"            fullCommand \u003d fullCommand.substring(6).trim();"},{"lineNumber":298,"author":{"gitId":"Lee-Juntong"},"content":"            String[] controlWords \u003d fullCommand.split(SINGLE_SPACE);"},{"lineNumber":299,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(controlWords[0].length()).isBlank()) {"},{"lineNumber":300,"author":{"gitId":"Lee-Juntong"},"content":"                throw new NoRepeatWeekException();"},{"lineNumber":301,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":302,"author":{"gitId":"Lee-Juntong"},"content":"            int numWeeks;"},{"lineNumber":303,"author":{"gitId":"Lee-Juntong"},"content":"            try {"},{"lineNumber":304,"author":{"gitId":"Lee-Juntong"},"content":"                numWeeks \u003d Integer.parseInt(fullCommand.substring(controlWords[0].length()).trim());"},{"lineNumber":305,"author":{"gitId":"Lee-Juntong"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":306,"author":{"gitId":"Lee-Juntong"},"content":"                throw new InvalidNumWeekException();"},{"lineNumber":307,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":308,"author":{"gitId":"Lee-Juntong"},"content":"            if (numWeeks \u003c\u003d 0 || numWeeks \u003e 50) {"},{"lineNumber":309,"author":{"gitId":"Lee-Juntong"},"content":"                throw new InvalidNumWeekException();"},{"lineNumber":310,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":311,"author":{"gitId":"Lee-Juntong"},"content":"            if (controlWords[0].equalsIgnoreCase(ALL)) {"},{"lineNumber":312,"author":{"gitId":"Lee-Juntong"},"content":"                return new RepeatCommand(true, numWeeks);"},{"lineNumber":313,"author":{"gitId":"Lee-Juntong"},"content":"            } else {"},{"lineNumber":314,"author":{"gitId":"Lee-Juntong"},"content":"                int index;"},{"lineNumber":315,"author":{"gitId":"Lee-Juntong"},"content":"                try {"},{"lineNumber":316,"author":{"gitId":"Lee-Juntong"},"content":"                    index \u003d Integer.parseInt(controlWords[0]);"},{"lineNumber":317,"author":{"gitId":"Lee-Juntong"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":318,"author":{"gitId":"Lee-Juntong"},"content":"                    throw new RepeatIndexFormatException();"},{"lineNumber":319,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":320,"author":{"gitId":"Lee-Juntong"},"content":"                return new RepeatCommand(index - 1, numWeeks);"},{"lineNumber":321,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":322,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":323,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":324,"author":{"gitId":"max-wunan"},"content":"        //this block deals with clear before"},{"lineNumber":325,"author":{"gitId":"max-wunan"},"content":"        if (words[0].equalsIgnoreCase(CLEAR_BEFORE)) {"},{"lineNumber":326,"author":{"gitId":"max-wunan"},"content":"            if (fullCommand.substring(11).isBlank()) {"},{"lineNumber":327,"author":{"gitId":"max-wunan"},"content":"                throw new EmptyClearDateException();"},{"lineNumber":328,"author":{"gitId":"max-wunan"},"content":"            }"},{"lineNumber":329,"author":{"gitId":"max-wunan"},"content":"            try {"},{"lineNumber":330,"author":{"gitId":"max-wunan"},"content":"                return new ClearBeforeCommand(LocalDate.parse(fullCommand.substring(12)));"},{"lineNumber":331,"author":{"gitId":"max-wunan"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":332,"author":{"gitId":"max-wunan"},"content":"                throw new DateFormatException();"},{"lineNumber":333,"author":{"gitId":"max-wunan"},"content":"            }"},{"lineNumber":334,"author":{"gitId":"max-wunan"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":336,"author":{"gitId":"Lee-Juntong"},"content":"        //these variables are used by either Edit or Add"},{"lineNumber":337,"author":{"gitId":"Lee-Juntong"},"content":"        //the position of /t"},{"lineNumber":338,"author":{"gitId":"Lee-Juntong"},"content":"        int startTimeDividerPosition \u003d fullCommand.indexOf(TIME_MARKER);"},{"lineNumber":339,"author":{"gitId":"Lee-Juntong"},"content":"        //the position of the space when the user enters a date time in the format yyyy-mm-dd HH:mm"},{"lineNumber":340,"author":{"gitId":"madbeez"},"content":"        int timeDivider;"},{"lineNumber":341,"author":{"gitId":"Lee-Juntong"},"content":"        //the position of /et"},{"lineNumber":342,"author":{"gitId":"Lee-Juntong"},"content":"        int endTimeDividerPosition \u003d fullCommand.indexOf(END_TIME_MARKER);"},{"lineNumber":343,"author":{"gitId":"Lee-Juntong"},"content":"        //the position of /l"},{"lineNumber":344,"author":{"gitId":"Lee-Juntong"},"content":"        int locationDividerPosition \u003d fullCommand.indexOf(LOCATION_MARKER);"},{"lineNumber":345,"author":{"gitId":"Lee-Juntong"},"content":"        //the position of /o"},{"lineNumber":346,"author":{"gitId":"Lee-Juntong"},"content":"        int onlineLocationDividerPosition \u003d fullCommand.indexOf(ONLINE_LOCATION_MARKER);"},{"lineNumber":347,"author":{"gitId":"Lee-Juntong"},"content":"        //the position of /p"},{"lineNumber":348,"author":{"gitId":"Lee-Juntong"},"content":"        int pwdDividerPosition \u003d fullCommand.indexOf(PASSWORD_MARKER);"},{"lineNumber":349,"author":{"gitId":"Lee-Juntong"},"content":"        String startDateTime;"},{"lineNumber":350,"author":{"gitId":"xuche123"},"content":"        Location location \u003d null;"},{"lineNumber":351,"author":{"gitId":"xuche123"},"content":"        OnlineLocation onlineLocation \u003d null;"},{"lineNumber":352,"author":{"gitId":"Lee-Juntong"},"content":"        String endDateTime;"},{"lineNumber":353,"author":{"gitId":"Lee-Juntong"},"content":"        //the position of the space when the user enters an ending date time in the format yyyy-mm-dd HH:mm"},{"lineNumber":354,"author":{"gitId":"Lee-Juntong"},"content":"        int endingTimeDivider;"},{"lineNumber":355,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":356,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":357,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with edit command"},{"lineNumber":358,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equalsIgnoreCase(EDIT)) {"},{"lineNumber":359,"author":{"gitId":"xuche123"},"content":"            if (fullCommand.length() \u003d\u003d 4) {"},{"lineNumber":360,"author":{"gitId":"xuche123"},"content":"                throw new EmptyEventIndexException();"},{"lineNumber":361,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":362,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":363,"author":{"gitId":"xuche123"},"content":"            try {"},{"lineNumber":364,"author":{"gitId":"xuche123"},"content":"                eventIndex \u003d Integer.parseInt(fullCommand.substring(5).trim()) - 1;"},{"lineNumber":365,"author":{"gitId":"xuche123"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":366,"author":{"gitId":"Lee-Juntong"},"content":"                throw new WrongEditFormatException();"},{"lineNumber":367,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":368,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":369,"author":{"gitId":"xuche123"},"content":"            // Check if the index exists"},{"lineNumber":370,"author":{"gitId":"xuche123"},"content":"            if (eventIndex + 1 \u003e size || eventIndex \u003d\u003d -1) {"},{"lineNumber":371,"author":{"gitId":"xuche123"},"content":"                throw new UndefinedEventException(eventIndex + 1);"},{"lineNumber":372,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":373,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":374,"author":{"gitId":"xuche123"},"content":"            String[] editInformation \u003d EditCommand.newEditInformation();"},{"lineNumber":375,"author":{"gitId":"xuche123"},"content":"            LocalDateTime[] startEnd \u003d new LocalDateTime[2];"},{"lineNumber":376,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":377,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":378,"author":{"gitId":"xuche123"},"content":"            if (!editInformation[0].isBlank()) {"},{"lineNumber":379,"author":{"gitId":"Lee-Juntong"},"content":"                if (!editInformation[0].equalsIgnoreCase(ASSIGNMENT) \u0026\u0026 !editInformation[0].equalsIgnoreCase(CLASS)"},{"lineNumber":380,"author":{"gitId":"Lee-Juntong"},"content":"                        \u0026\u0026 !editInformation[0].equalsIgnoreCase(PERSONAL_EVENT)"},{"lineNumber":381,"author":{"gitId":"Lee-Juntong"},"content":"                        \u0026\u0026 !editInformation[0].equalsIgnoreCase(SELF_STUDY)) {"},{"lineNumber":382,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":383,"author":{"gitId":"xuche123"},"content":"                    throw new InvalidEditTypeException();"},{"lineNumber":384,"author":{"gitId":"madbeez"},"content":"                }"},{"lineNumber":385,"author":{"gitId":"madbeez"},"content":"            }"},{"lineNumber":386,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":387,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":388,"author":{"gitId":"xuche123"},"content":"            // user input validation for location"},{"lineNumber":389,"author":{"gitId":"xuche123"},"content":"            if (!editInformation[2].isBlank()) {"},{"lineNumber":390,"author":{"gitId":"xuche123"},"content":"                editInformation[2] \u003d editInformation[2].trim();"},{"lineNumber":391,"author":{"gitId":"xuche123"},"content":"                if (editInformation[2].startsWith(LOCATION_MARKER)) {"},{"lineNumber":392,"author":{"gitId":"xuche123"},"content":"                    location \u003d parseLocation(editInformation[2].substring(3), locations);"},{"lineNumber":393,"author":{"gitId":"xuche123"},"content":"                } else if (editInformation[2].startsWith(ONLINE_LOCATION_MARKER)) {"},{"lineNumber":394,"author":{"gitId":"xuche123"},"content":"                    int pwdPos \u003d editInformation[2].indexOf(PASSWORD_MARKER);"},{"lineNumber":395,"author":{"gitId":"xuche123"},"content":"                    if (pwdPos \u003d\u003d -1) {"},{"lineNumber":396,"author":{"gitId":"xuche123"},"content":"                        onlineLocation \u003d"},{"lineNumber":397,"author":{"gitId":"xuche123"},"content":"                                new OnlineLocation(editInformation[2].substring(3).trim());"},{"lineNumber":398,"author":{"gitId":"Lee-Juntong"},"content":"                    } else {"},{"lineNumber":399,"author":{"gitId":"xuche123"},"content":"                        onlineLocation \u003d"},{"lineNumber":400,"author":{"gitId":"xuche123"},"content":"                                new OnlineLocation(editInformation[2].substring(3, pwdPos - 1).trim(),"},{"lineNumber":401,"author":{"gitId":"xuche123"},"content":"                                        editInformation[2].substring(pwdPos + 3).trim());"},{"lineNumber":402,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":403,"author":{"gitId":"Lee-Juntong"},"content":"                } else {"},{"lineNumber":404,"author":{"gitId":"xuche123"},"content":"                    throw new InvalidEditLocationException();"},{"lineNumber":405,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":406,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":407,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":408,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":409,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":410,"author":{"gitId":"xuche123"},"content":"            // user input validation for start and end time"},{"lineNumber":411,"author":{"gitId":"xuche123"},"content":"            if (!editInformation[3].isBlank()) {"},{"lineNumber":412,"author":{"gitId":"xuche123"},"content":"                if (editInformation[3].length() !\u003d 16) {"},{"lineNumber":413,"author":{"gitId":"Lee-Juntong"},"content":"                    throw new TimeFormatException();"},{"lineNumber":414,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":415,"author":{"gitId":"xuche123"},"content":"                startDateTime \u003d editInformation[3].substring(0, 10) + \"T\" + editInformation[3].substring(11);"},{"lineNumber":416,"author":{"gitId":"Lee-Juntong"},"content":"                try {"},{"lineNumber":417,"author":{"gitId":"xuche123"},"content":"                    startEnd[0] \u003d LocalDateTime.parse(startDateTime);"},{"lineNumber":418,"author":{"gitId":"xuche123"},"content":"                    //System.out.println(startEnd[0]);"},{"lineNumber":419,"author":{"gitId":"xuche123"},"content":"                } catch (DateTimeException e) {"},{"lineNumber":420,"author":{"gitId":"xuche123"},"content":"                    throw new TimeFormatException();"},{"lineNumber":421,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":422,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":423,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":424,"author":{"gitId":"xuche123"},"content":"            if (!editInformation[4].isBlank()) {"},{"lineNumber":425,"author":{"gitId":"xuche123"},"content":"                if (!editInformation[4].equals(\"nil\")) {"},{"lineNumber":426,"author":{"gitId":"xuche123"},"content":"                    if (editInformation[4].length() !\u003d 16) {"},{"lineNumber":427,"author":{"gitId":"madbeez"},"content":"                        throw new TimeFormatException();"},{"lineNumber":428,"author":{"gitId":"madbeez"},"content":"                    }"},{"lineNumber":429,"author":{"gitId":"xuche123"},"content":"                    startDateTime \u003d editInformation[4].substring(0, 10) + \"T\" + editInformation[4].substring(11);"},{"lineNumber":430,"author":{"gitId":"xuche123"},"content":"                    try {"},{"lineNumber":431,"author":{"gitId":"xuche123"},"content":"                        startEnd[1] \u003d LocalDateTime.parse(startDateTime);"},{"lineNumber":432,"author":{"gitId":"xuche123"},"content":"                        //System.out.println(startEnd[1]);"},{"lineNumber":433,"author":{"gitId":"xuche123"},"content":"                    } catch (DateTimeException e) {"},{"lineNumber":434,"author":{"gitId":"xuche123"},"content":"                        throw new TimeFormatException();"},{"lineNumber":435,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":436,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":437,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":438,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":439,"author":{"gitId":"xuche123"},"content":"            return new EditCommand(eventIndex, editInformation, startEnd, location, onlineLocation);"},{"lineNumber":440,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":441,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":442,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":443,"author":{"gitId":"Lee-Juntong"},"content":"        String description;"},{"lineNumber":444,"author":{"gitId":"Lee-Juntong"},"content":"        //this block deals with add command"},{"lineNumber":445,"author":{"gitId":"Lee-Juntong"},"content":"        //we shall check that the user input is not meant for any other command beforehand"},{"lineNumber":446,"author":{"gitId":"Lee-Juntong"},"content":"        //because the default block will throw an exception."},{"lineNumber":447,"author":{"gitId":"Lee-Juntong"},"content":"        // i.e. when this block is entered, the parser will not go to any other blocks"},{"lineNumber":448,"author":{"gitId":"Lee-Juntong"},"content":"        if (words[0].equals(ASSIGNMENT) || words[0].equals(CLASS)"},{"lineNumber":449,"author":{"gitId":"Lee-Juntong"},"content":"                || words[0].equals(PERSONAL_EVENT) || words[0].equals(SELF_STUDY)) {"},{"lineNumber":450,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(words[0].length()).isBlank()) {"},{"lineNumber":451,"author":{"gitId":"Lee-Juntong"},"content":"                throw new EmptyEventException();"},{"lineNumber":452,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":453,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":454,"author":{"gitId":"Lee-Juntong"},"content":"            if (startTimeDividerPosition \u003d\u003d -1) {"},{"lineNumber":455,"author":{"gitId":"Lee-Juntong"},"content":"                throw new NoEventTimeMarkerException();"},{"lineNumber":456,"author":{"gitId":"madbeez"},"content":"            }"},{"lineNumber":457,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":458,"author":{"gitId":"Lee-Juntong"},"content":"            if (locationDividerPosition \u003d\u003d -1 \u0026\u0026 onlineLocationDividerPosition \u003d\u003d -1) {"},{"lineNumber":459,"author":{"gitId":"Lee-Juntong"},"content":"                throw new NoEventLocationException();"},{"lineNumber":460,"author":{"gitId":"madbeez"},"content":"            }"},{"lineNumber":461,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":462,"author":{"gitId":"Lee-Juntong"},"content":"            if (fullCommand.substring(words[0].length(), startTimeDividerPosition).isBlank()) {"},{"lineNumber":463,"author":{"gitId":"madbeez"},"content":"                throw new EmptyEventException();"},{"lineNumber":464,"author":{"gitId":"madbeez"},"content":"            }"},{"lineNumber":465,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":466,"author":{"gitId":"Lee-Juntong"},"content":"            if (locationDividerPosition !\u003d -1) {"},{"lineNumber":467,"author":{"gitId":"Lee-Juntong"},"content":"                if (fullCommand.substring(startTimeDividerPosition + 2, locationDividerPosition - 1).isBlank()) {"},{"lineNumber":468,"author":{"gitId":"madbeez"},"content":"                    throw new NoEventTimeException();"},{"lineNumber":469,"author":{"gitId":"madbeez"},"content":"                }"},{"lineNumber":470,"author":{"gitId":"Lee-Juntong"},"content":"                if (fullCommand.substring(locationDividerPosition + 2).isBlank()) {"},{"lineNumber":471,"author":{"gitId":"madbeez"},"content":"                    throw new NoEventLocationException();"},{"lineNumber":472,"author":{"gitId":"madbeez"},"content":"                }"},{"lineNumber":473,"author":{"gitId":"Lee-Juntong"},"content":"            } else {"},{"lineNumber":474,"author":{"gitId":"Lee-Juntong"},"content":"                if (fullCommand.substring(startTimeDividerPosition + 2, onlineLocationDividerPosition - 1)"},{"lineNumber":475,"author":{"gitId":"Lee-Juntong"},"content":"                        .isBlank()) {"},{"lineNumber":476,"author":{"gitId":"Lee-Juntong"},"content":"                    throw new NoEventTimeException();"},{"lineNumber":477,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":478,"author":{"gitId":"Lee-Juntong"},"content":"                if (fullCommand.substring(onlineLocationDividerPosition + 2).isBlank()) {"},{"lineNumber":479,"author":{"gitId":"Lee-Juntong"},"content":"                    throw new NoEventLocationException();"},{"lineNumber":480,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":481,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":482,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":483,"author":{"gitId":"Lee-Juntong"},"content":"            description \u003d fullCommand.substring(words[0].length() + 1, startTimeDividerPosition - 1).trim();"},{"lineNumber":484,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":485,"author":{"gitId":"Lee-Juntong"},"content":"            //this deals with the event holding offline"},{"lineNumber":486,"author":{"gitId":"Lee-Juntong"},"content":"            if (locationDividerPosition !\u003d -1) {"},{"lineNumber":487,"author":{"gitId":"madbeez"},"content":"                try {"},{"lineNumber":488,"author":{"gitId":"Lee-Juntong"},"content":"                    timeDivider \u003d fullCommand.substring(startTimeDividerPosition + 3).indexOf(SINGLE_SPACE);"},{"lineNumber":489,"author":{"gitId":"Lee-Juntong"},"content":"                    location \u003d parseLocation(fullCommand.substring(locationDividerPosition + 3), locations);"},{"lineNumber":490,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":491,"author":{"gitId":"Lee-Juntong"},"content":"                    switch (words[0]) {"},{"lineNumber":492,"author":{"gitId":"Lee-Juntong"},"content":"                    case ASSIGNMENT:"},{"lineNumber":493,"author":{"gitId":"Lee-Juntong"},"content":"                        if (endTimeDividerPosition !\u003d -1) {"},{"lineNumber":494,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new DoubleTimeAssignmentException();"},{"lineNumber":495,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":496,"author":{"gitId":"Lee-Juntong"},"content":"                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":497,"author":{"gitId":"Lee-Juntong"},"content":"                                locationDividerPosition);"},{"lineNumber":498,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":499,"author":{"gitId":"Lee-Juntong"},"content":"                        return new AddCommand(new Assignment(description, location,"},{"lineNumber":500,"author":{"gitId":"Lee-Juntong"},"content":"                                LocalDateTime.parse(startDateTime)));"},{"lineNumber":501,"author":{"gitId":"Lee-Juntong"},"content":"                    case CLASS:"},{"lineNumber":502,"author":{"gitId":"Lee-Juntong"},"content":"                        if (endTimeDividerPosition \u003d\u003d -1) {"},{"lineNumber":503,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new NoEndTimeClassException();"},{"lineNumber":504,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":505,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":506,"author":{"gitId":"Lee-Juntong"},"content":"                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":507,"author":{"gitId":"Lee-Juntong"},"content":"                                endTimeDividerPosition);"},{"lineNumber":508,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":509,"author":{"gitId":"Lee-Juntong"},"content":"                        endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"},{"lineNumber":510,"author":{"gitId":"Lee-Juntong"},"content":"                                locationDividerPosition - 1).indexOf(SINGLE_SPACE);"},{"lineNumber":511,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":512,"author":{"gitId":"Lee-Juntong"},"content":"                        //if the user does not input the date of the ending time, by default it ends at the same"},{"lineNumber":513,"author":{"gitId":"Lee-Juntong"},"content":"                        // day as the starting time"},{"lineNumber":514,"author":{"gitId":"Lee-Juntong"},"content":"                        endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":515,"author":{"gitId":"Lee-Juntong"},"content":"                                endTimeDividerPosition, locationDividerPosition, endingTimeDivider);"},{"lineNumber":516,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":517,"author":{"gitId":"Lee-Juntong"},"content":"                        return new AddCommand(new Class(description, location, LocalDateTime.parse(startDateTime),"},{"lineNumber":518,"author":{"gitId":"Lee-Juntong"},"content":"                                LocalDateTime.parse(endDateTime)));"},{"lineNumber":519,"author":{"gitId":"Lee-Juntong"},"content":"                    case PERSONAL_EVENT:"},{"lineNumber":520,"author":{"gitId":"Lee-Juntong"},"content":"                    case SELF_STUDY:"},{"lineNumber":521,"author":{"gitId":"Lee-Juntong"},"content":"                        if (endTimeDividerPosition \u003d\u003d -1) {"},{"lineNumber":522,"author":{"gitId":"Lee-Juntong"},"content":"                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":523,"author":{"gitId":"Lee-Juntong"},"content":"                                    locationDividerPosition);"},{"lineNumber":524,"author":{"gitId":"Lee-Juntong"},"content":"                            if (words[0].equalsIgnoreCase(PERSONAL_EVENT)) {"},{"lineNumber":525,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new PersonalEvent(description, location,"},{"lineNumber":526,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime)));"},{"lineNumber":527,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":528,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new SelfStudy(description, location,"},{"lineNumber":529,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime)));"},{"lineNumber":530,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":531,"author":{"gitId":"Lee-Juntong"},"content":"                        } else {"},{"lineNumber":532,"author":{"gitId":"Lee-Juntong"},"content":"                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":533,"author":{"gitId":"Lee-Juntong"},"content":"                                    endTimeDividerPosition);"},{"lineNumber":534,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":535,"author":{"gitId":"Lee-Juntong"},"content":"                            endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"},{"lineNumber":536,"author":{"gitId":"Lee-Juntong"},"content":"                                    locationDividerPosition - 1).indexOf(SINGLE_SPACE);"},{"lineNumber":537,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":538,"author":{"gitId":"Lee-Juntong"},"content":"                            //if the user does not input the date of the ending time, by default it ends at the same"},{"lineNumber":539,"author":{"gitId":"Lee-Juntong"},"content":"                            // day as the starting time"},{"lineNumber":540,"author":{"gitId":"Lee-Juntong"},"content":"                            endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":541,"author":{"gitId":"Lee-Juntong"},"content":"                                    endTimeDividerPosition, locationDividerPosition, endingTimeDivider);"},{"lineNumber":542,"author":{"gitId":"Lee-Juntong"},"content":"                            if (words[0].equalsIgnoreCase(PERSONAL_EVENT)) {"},{"lineNumber":543,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new PersonalEvent(description, location,"},{"lineNumber":544,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime),"},{"lineNumber":545,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(endDateTime)));"},{"lineNumber":546,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":547,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new SelfStudy(description, location,"},{"lineNumber":548,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime),"},{"lineNumber":549,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(endDateTime)));"},{"lineNumber":550,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":551,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":552,"author":{"gitId":"Lee-Juntong"},"content":"                    default:"},{"lineNumber":553,"author":{"gitId":"Lee-Juntong"},"content":"                        break;"},{"lineNumber":554,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":555,"author":{"gitId":"madbeez"},"content":"                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"},{"lineNumber":556,"author":{"gitId":"madbeez"},"content":"                    throw new TimeFormatException();"},{"lineNumber":557,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":558,"author":{"gitId":"madbeez"},"content":"                }"},{"lineNumber":559,"author":{"gitId":"Lee-Juntong"},"content":"            } else { //this deals with the event holding online"},{"lineNumber":560,"author":{"gitId":"Lee-Juntong"},"content":"                try {"},{"lineNumber":561,"author":{"gitId":"Lee-Juntong"},"content":"                    timeDivider \u003d fullCommand.substring(startTimeDividerPosition + 3).indexOf(SINGLE_SPACE);"},{"lineNumber":562,"author":{"gitId":"Lee-Juntong"},"content":"                    OnlineLocation virtualLocation;"},{"lineNumber":563,"author":{"gitId":"Lee-Juntong"},"content":"                    if (pwdDividerPosition \u003d\u003d -1) {"},{"lineNumber":564,"author":{"gitId":"Lee-Juntong"},"content":"                        virtualLocation \u003d"},{"lineNumber":565,"author":{"gitId":"Lee-Juntong"},"content":"                                new OnlineLocation(fullCommand.substring(onlineLocationDividerPosition + 3));"},{"lineNumber":566,"author":{"gitId":"Lee-Juntong"},"content":"                    } else {"},{"lineNumber":567,"author":{"gitId":"Lee-Juntong"},"content":"                        try {"},{"lineNumber":568,"author":{"gitId":"Lee-Juntong"},"content":"                            if (fullCommand.substring(onlineLocationDividerPosition + 2, pwdDividerPosition - 1)"},{"lineNumber":569,"author":{"gitId":"Lee-Juntong"},"content":"                                    .isBlank()) {"},{"lineNumber":570,"author":{"gitId":"Lee-Juntong"},"content":"                                throw new NoEventLocationException();"},{"lineNumber":571,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":572,"author":{"gitId":"Lee-Juntong"},"content":"                        } catch (NullPointerException | StringIndexOutOfBoundsException e) {"},{"lineNumber":573,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new NoEventLocationException();"},{"lineNumber":574,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":575,"author":{"gitId":"Lee-Juntong"},"content":"                        if (fullCommand.substring(pwdDividerPosition + 2).isBlank()) {"},{"lineNumber":576,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new NoPasswordException();"},{"lineNumber":577,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":578,"author":{"gitId":"Lee-Juntong"},"content":"                        virtualLocation \u003d"},{"lineNumber":579,"author":{"gitId":"Lee-Juntong"},"content":"                                new OnlineLocation(fullCommand.substring(onlineLocationDividerPosition + 3,"},{"lineNumber":580,"author":{"gitId":"Lee-Juntong"},"content":"                                        pwdDividerPosition - 1), fullCommand.substring(pwdDividerPosition + 3));"},{"lineNumber":581,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":582,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":583,"author":{"gitId":"Lee-Juntong"},"content":"                    switch (words[0]) {"},{"lineNumber":584,"author":{"gitId":"Lee-Juntong"},"content":"                    case ASSIGNMENT:"},{"lineNumber":585,"author":{"gitId":"Lee-Juntong"},"content":"                        if (endTimeDividerPosition !\u003d -1) {"},{"lineNumber":586,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new DoubleTimeAssignmentException();"},{"lineNumber":587,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":588,"author":{"gitId":"Lee-Juntong"},"content":"                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":589,"author":{"gitId":"Lee-Juntong"},"content":"                                onlineLocationDividerPosition);"},{"lineNumber":590,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":591,"author":{"gitId":"Lee-Juntong"},"content":"                        return new AddCommand(new Assignment(description, virtualLocation,"},{"lineNumber":592,"author":{"gitId":"Lee-Juntong"},"content":"                                LocalDateTime.parse(startDateTime)));"},{"lineNumber":593,"author":{"gitId":"Lee-Juntong"},"content":"                    case CLASS:"},{"lineNumber":594,"author":{"gitId":"Lee-Juntong"},"content":"                        if (endTimeDividerPosition \u003d\u003d -1) {"},{"lineNumber":595,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new NoEndTimeClassException();"},{"lineNumber":596,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":597,"author":{"gitId":"Lee-Juntong"},"content":"                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":598,"author":{"gitId":"Lee-Juntong"},"content":"                                endTimeDividerPosition);"},{"lineNumber":599,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":600,"author":{"gitId":"Lee-Juntong"},"content":"                        endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"},{"lineNumber":601,"author":{"gitId":"Lee-Juntong"},"content":"                                onlineLocationDividerPosition - 1).indexOf(SINGLE_SPACE);"},{"lineNumber":602,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":603,"author":{"gitId":"Lee-Juntong"},"content":"                        endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":604,"author":{"gitId":"Lee-Juntong"},"content":"                                endTimeDividerPosition, onlineLocationDividerPosition, endingTimeDivider);"},{"lineNumber":605,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":606,"author":{"gitId":"Lee-Juntong"},"content":"                        return new AddCommand(new Class(description, virtualLocation,"},{"lineNumber":607,"author":{"gitId":"Lee-Juntong"},"content":"                                LocalDateTime.parse(startDateTime),"},{"lineNumber":608,"author":{"gitId":"Lee-Juntong"},"content":"                                LocalDateTime.parse(endDateTime)));"},{"lineNumber":609,"author":{"gitId":"Lee-Juntong"},"content":"                    case PERSONAL_EVENT:"},{"lineNumber":610,"author":{"gitId":"Lee-Juntong"},"content":"                    case SELF_STUDY:"},{"lineNumber":611,"author":{"gitId":"Lee-Juntong"},"content":"                        if (endTimeDividerPosition \u003d\u003d -1) {"},{"lineNumber":612,"author":{"gitId":"Lee-Juntong"},"content":"                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":613,"author":{"gitId":"Lee-Juntong"},"content":"                                    onlineLocationDividerPosition);"},{"lineNumber":614,"author":{"gitId":"Lee-Juntong"},"content":"                            if (words[0].equalsIgnoreCase(PERSONAL_EVENT)) {"},{"lineNumber":615,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new PersonalEvent(description, virtualLocation,"},{"lineNumber":616,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime)));"},{"lineNumber":617,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":618,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new SelfStudy(description, virtualLocation,"},{"lineNumber":619,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime)));"},{"lineNumber":620,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":621,"author":{"gitId":"Lee-Juntong"},"content":"                        } else {"},{"lineNumber":622,"author":{"gitId":"Lee-Juntong"},"content":"                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":623,"author":{"gitId":"Lee-Juntong"},"content":"                                    endTimeDividerPosition);"},{"lineNumber":624,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":625,"author":{"gitId":"Lee-Juntong"},"content":"                            endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"},{"lineNumber":626,"author":{"gitId":"Lee-Juntong"},"content":"                                    onlineLocationDividerPosition - 1).indexOf(SINGLE_SPACE);"},{"lineNumber":627,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":628,"author":{"gitId":"Lee-Juntong"},"content":"                            endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"},{"lineNumber":629,"author":{"gitId":"Lee-Juntong"},"content":"                                    endTimeDividerPosition, onlineLocationDividerPosition, endingTimeDivider);"},{"lineNumber":630,"author":{"gitId":"Lee-Juntong"},"content":"                            if (words[0].equalsIgnoreCase(PERSONAL_EVENT)) {"},{"lineNumber":631,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new PersonalEvent(description, virtualLocation,"},{"lineNumber":632,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime),"},{"lineNumber":633,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(endDateTime)));"},{"lineNumber":634,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":635,"author":{"gitId":"Lee-Juntong"},"content":"                                return new AddCommand(new SelfStudy(description, virtualLocation,"},{"lineNumber":636,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(startDateTime),"},{"lineNumber":637,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(endDateTime)));"},{"lineNumber":638,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":639,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":640,"author":{"gitId":"madbeez"},"content":"                    default:"},{"lineNumber":641,"author":{"gitId":"Lee-Juntong"},"content":"                        break;"},{"lineNumber":642,"author":{"gitId":"madbeez"},"content":"                    }"},{"lineNumber":643,"author":{"gitId":"Lee-Juntong"},"content":"                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"},{"lineNumber":644,"author":{"gitId":"Lee-Juntong"},"content":"                    throw new TimeFormatException();"},{"lineNumber":645,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":646,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":647,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":648,"author":{"gitId":"Lee-Juntong"},"content":"        } else {"},{"lineNumber":649,"author":{"gitId":"Lee-Juntong"},"content":"            throw new WrongCommandException();"},{"lineNumber":650,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":651,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":652,"author":{"gitId":"Lee-Juntong"},"content":"        assert false;//nothing should reach here"},{"lineNumber":653,"author":{"gitId":"Lee-Juntong"},"content":"        throw new UnknownErrorException();"},{"lineNumber":654,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":655,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":656,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":657,"author":{"gitId":"Lee-Juntong"},"content":"     * return the EndDateTime. if the date is not specified, by default, it ends at the same date as the starting date."},{"lineNumber":658,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":659,"author":{"gitId":"Lee-Juntong"},"content":"     * @param fullCommand              the full command provided by user"},{"lineNumber":660,"author":{"gitId":"Lee-Juntong"},"content":"     * @param startTimeDividerPosition index of \"/t\""},{"lineNumber":661,"author":{"gitId":"Lee-Juntong"},"content":"     * @param timeDivider              index of \" \" in the start time"},{"lineNumber":662,"author":{"gitId":"Lee-Juntong"},"content":"     * @param endTimeDividerPosition   index of \"/e\""},{"lineNumber":663,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locationDividerPosition  index of \"/o\" or \"/l\""},{"lineNumber":664,"author":{"gitId":"Lee-Juntong"},"content":"     * @param endingTimeDivider        index of \" \" in the end date time, may be -1"},{"lineNumber":665,"author":{"gitId":"Lee-Juntong"},"content":"     * @return a string in the format \"yyyy-MM-dd HH:mm\" that can be parsed into a LocalDateTime object"},{"lineNumber":666,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":667,"author":{"gitId":"Lee-Juntong"},"content":"    private static String getEndDateTime(String fullCommand, int startTimeDividerPosition, int timeDivider,"},{"lineNumber":668,"author":{"gitId":"Lee-Juntong"},"content":"                                         int endTimeDividerPosition, int locationDividerPosition,"},{"lineNumber":669,"author":{"gitId":"Lee-Juntong"},"content":"                                         int endingTimeDivider) {"},{"lineNumber":670,"author":{"gitId":"Lee-Juntong"},"content":"        return (endingTimeDivider !\u003d -1 ? fullCommand.substring(endTimeDividerPosition + 3,"},{"lineNumber":671,"author":{"gitId":"Lee-Juntong"},"content":"                endTimeDividerPosition + 3 + endingTimeDivider) :"},{"lineNumber":672,"author":{"gitId":"Lee-Juntong"},"content":"                fullCommand.substring(startTimeDividerPosition + 3,"},{"lineNumber":673,"author":{"gitId":"Lee-Juntong"},"content":"                        startTimeDividerPosition + 3 + timeDivider))"},{"lineNumber":674,"author":{"gitId":"Lee-Juntong"},"content":"                + \"T\""},{"lineNumber":675,"author":{"gitId":"Lee-Juntong"},"content":"                + (endingTimeDivider !\u003d -1 ? fullCommand.substring(endTimeDividerPosition + 3 + endingTimeDivider + 1,"},{"lineNumber":676,"author":{"gitId":"Lee-Juntong"},"content":"                locationDividerPosition - 1) : fullCommand.substring(endTimeDividerPosition + 3,"},{"lineNumber":677,"author":{"gitId":"Lee-Juntong"},"content":"                locationDividerPosition - 1));"},{"lineNumber":678,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":679,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":680,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":681,"author":{"gitId":"Lee-Juntong"},"content":"     * return the StartDateTime."},{"lineNumber":682,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":683,"author":{"gitId":"Lee-Juntong"},"content":"     * @param fullCommand              the full command provided by user"},{"lineNumber":684,"author":{"gitId":"Lee-Juntong"},"content":"     * @param startTimeDividerPosition index of \"/t\""},{"lineNumber":685,"author":{"gitId":"Lee-Juntong"},"content":"     * @param timeDivider              index of \" \" in the start time"},{"lineNumber":686,"author":{"gitId":"Lee-Juntong"},"content":"     * @param endTimeDividerPosition   index of \"/e\""},{"lineNumber":687,"author":{"gitId":"Lee-Juntong"},"content":"     * @return a string in the format \"yyyy-MM-dd HH:mm\" that can be parsed into a LocalDateTime object"},{"lineNumber":688,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":689,"author":{"gitId":"Lee-Juntong"},"content":"    private static String getStartDateTime(String fullCommand, int startTimeDividerPosition, int timeDivider,"},{"lineNumber":690,"author":{"gitId":"Lee-Juntong"},"content":"                                           int endTimeDividerPosition) {"},{"lineNumber":691,"author":{"gitId":"Lee-Juntong"},"content":"        return fullCommand.substring(startTimeDividerPosition + 3,"},{"lineNumber":692,"author":{"gitId":"Lee-Juntong"},"content":"                startTimeDividerPosition + 3 + timeDivider)"},{"lineNumber":693,"author":{"gitId":"Lee-Juntong"},"content":"                + \"T\""},{"lineNumber":694,"author":{"gitId":"Lee-Juntong"},"content":"                + fullCommand.substring(startTimeDividerPosition + 3 + timeDivider + 1,"},{"lineNumber":695,"author":{"gitId":"Lee-Juntong"},"content":"                endTimeDividerPosition - 1);"},{"lineNumber":696,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":697,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":698,"author":{"gitId":"madbeez"},"content":"    /**"},{"lineNumber":699,"author":{"gitId":"Lee-Juntong"},"content":"     * This method parses the inputted location."},{"lineNumber":700,"author":{"gitId":"madbeez"},"content":"     *"},{"lineNumber":701,"author":{"gitId":"Lee-Juntong"},"content":"     * @param input the string inputted by the user."},{"lineNumber":702,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the parsed location."},{"lineNumber":703,"author":{"gitId":"madbeez"},"content":"     */"},{"lineNumber":704,"author":{"gitId":"jiaaaqi"},"content":"    public static Location parseLocation(String input, LocationList locations) {"},{"lineNumber":705,"author":{"gitId":"Lee-Juntong"},"content":"        assert locations !\u003d null;"},{"lineNumber":706,"author":{"gitId":"Lee-Juntong"},"content":"        Location location;"},{"lineNumber":707,"author":{"gitId":"madbeez"},"content":"        String[] info \u003d input.split(\"/\");"},{"lineNumber":708,"author":{"gitId":"jiaaaqi"},"content":"        // parse location from event.txt file"},{"lineNumber":709,"author":{"gitId":"madbeez"},"content":"        try {"},{"lineNumber":710,"author":{"gitId":"madbeez"},"content":"            String[] additionalInfo \u003d info[2].split(\",\");"},{"lineNumber":711,"author":{"gitId":"madbeez"},"content":"            switch (info[0]) {"},{"lineNumber":712,"author":{"gitId":"madbeez"},"content":"            case \"BLK\":"},{"lineNumber":713,"author":{"gitId":"madbeez"},"content":"                location \u003d new Building(info[1], additionalInfo);"},{"lineNumber":714,"author":{"gitId":"madbeez"},"content":"                break;"},{"lineNumber":715,"author":{"gitId":"madbeez"},"content":"            case \"H\":"},{"lineNumber":716,"author":{"gitId":"madbeez"},"content":"                location \u003d new Hostel(info[1], additionalInfo);"},{"lineNumber":717,"author":{"gitId":"madbeez"},"content":"                break;"},{"lineNumber":718,"author":{"gitId":"madbeez"},"content":"            case \"L\":"},{"lineNumber":719,"author":{"gitId":"madbeez"},"content":"                location \u003d new LectureTheatre(info[1], info[2]);"},{"lineNumber":720,"author":{"gitId":"madbeez"},"content":"                break;"},{"lineNumber":721,"author":{"gitId":"madbeez"},"content":"            case \"OUT\":"},{"lineNumber":722,"author":{"gitId":"Lee-Juntong"},"content":"                location \u003d new OutOfNuS(info[1]);"},{"lineNumber":723,"author":{"gitId":"madbeez"},"content":"                break;"},{"lineNumber":724,"author":{"gitId":"madbeez"},"content":"            default:"},{"lineNumber":725,"author":{"gitId":"madbeez"},"content":"                location \u003d new OutOfNuS(info[0]);"},{"lineNumber":726,"author":{"gitId":"Lee-Juntong"},"content":"                break;"},{"lineNumber":727,"author":{"gitId":"madbeez"},"content":"            }"},{"lineNumber":728,"author":{"gitId":"madbeez"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":729,"author":{"gitId":"jiaaaqi"},"content":"            if (input.contains(\"/\")) {"},{"lineNumber":730,"author":{"gitId":"jiaaaqi"},"content":"                location \u003d new OutOfNuS(info[1]);"},{"lineNumber":731,"author":{"gitId":"jiaaaqi"},"content":"                locations.getLocationList().add(location);"},{"lineNumber":732,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":733,"author":{"gitId":"jiaaaqi"},"content":"            // parse location from user input"},{"lineNumber":734,"author":{"gitId":"jiaaaqi"},"content":"            // System.out.print(\"Invalid Location Format.\");"},{"lineNumber":735,"author":{"gitId":"jiaaaqi"},"content":"            location \u003d locations.findLocation(input.trim());"},{"lineNumber":736,"author":{"gitId":"jiaaaqi"},"content":"            if (location \u003d\u003d null) {"},{"lineNumber":737,"author":{"gitId":"jiaaaqi"},"content":"                location \u003d new OutOfNuS(input.trim());"},{"lineNumber":738,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":739,"author":{"gitId":"madbeez"},"content":"        }"},{"lineNumber":740,"author":{"gitId":"madbeez"},"content":"        return location;"},{"lineNumber":741,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":742,"author":{"gitId":"Lee-Juntong"},"content":"}"},{"lineNumber":743,"author":{"gitId":"Lee-Juntong"},"content":""}],"authorContributionMap":{"xuche123":77,"madbeez":56,"max-wunan":19,"Lee-Juntong":519,"jiaaaqi":72}},{"path":"src/main/java/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package storage;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import event.Event;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import event.Assignment;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import event.Class;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import event.PersonalEvent;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import event.SelfStudy;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import exception.CreatingFileException;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import exception.DataFileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EndBeforeStartEventException;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import exception.LoadingException;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"import exception.WritingFileException;"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"import location.Building;"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"import location.BusStop;"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"import location.Hostel;"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"import location.LectureTheatre;"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"import location.Location;"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"import location.OnlineLocation;"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"import location.OutOfNuS;"},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"import parser.Parser;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"import java.io.File;"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"import java.io.FileWriter;"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"import java.io.IOException;"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"import java.util.ArrayList;"},{"lineNumber":32,"author":{"gitId":"jiaaaqi"},"content":"import java.util.Scanner;"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":" * This class creates the folder and file path if it\u0027s not already created, and"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":" * prepare the data in the file to be used."},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"public class Storage {"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String REGEX_IN_FILE \u003d \"//\";"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String ONLINE \u003d \"online\";"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"    private final String[] filePaths;"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"    //filePaths[0] will be the events data file. filePath[1] will be the user info file"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"     * Set the \u003ccode\u003efilepath \u003c/code\u003e according to the user input."},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":"     * @param filePaths is the paths of the files"},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"    public Storage(String... filePaths) throws CreatingFileException {"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"        this.filePaths \u003d filePaths;"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"        createFolderAndFIle(this.filePaths[0]);"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"        createFolderAndFIle(this.filePaths[1]);"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"     * Creates the folder and file if not already crated."},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":"     * @param filePath the String of the relative path"},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"    private static void createFolderAndFIle(String filePath) throws CreatingFileException {"},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"        File dataFile \u003d new File(filePath);"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"        File directory \u003d dataFile.getParentFile();"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"        if (!directory.exists()) {"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"            directory.mkdirs();"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"            dataFile.createNewFile();"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (IOException e) {"},{"lineNumber":70,"author":{"gitId":"Lee-Juntong"},"content":"            throw new CreatingFileException(filePath);"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"     * Save the data of the Event list to the file."},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events the list of Events provided by a variable from a EventList object"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException represents the file is not correctly written"},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"    public void writeFile(ArrayList\u003cEvent\u003e events) throws WritingFileException {"},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"            FileWriter fw \u003d new FileWriter(filePaths[0]);"},{"lineNumber":84,"author":{"gitId":"Lee-Juntong"},"content":"            for (Event event : events) {"},{"lineNumber":85,"author":{"gitId":"Lee-Juntong"},"content":"                fw.write(event.fileString());"},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":"                fw.write(System.lineSeparator());"},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":"            fw.close();"},{"lineNumber":89,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"Lee-Juntong"},"content":"            throw new WritingFileException();"},{"lineNumber":91,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":94,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"Lee-Juntong"},"content":"     * Save the data of the user info."},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"Lee-Juntong"},"content":"     * @param userInfo name and type of the user"},{"lineNumber":98,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws WritingFileException Represents the exception when the file is not correctly written."},{"lineNumber":99,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Lee-Juntong"},"content":"    public void writeUserInfo(UserInfo userInfo) throws WritingFileException {"},{"lineNumber":101,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"Lee-Juntong"},"content":"            FileWriter fw \u003d new FileWriter(filePaths[1]);"},{"lineNumber":103,"author":{"gitId":"Lee-Juntong"},"content":"            fw.write(userInfo.fileString());"},{"lineNumber":104,"author":{"gitId":"Lee-Juntong"},"content":"            fw.close();"},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (IOException e) {"},{"lineNumber":106,"author":{"gitId":"Lee-Juntong"},"content":"            throw new WritingFileException();"},{"lineNumber":107,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepares the data in the file as an UserInfo, which is used to construct the userInfo."},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the name and type of the user"},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws LoadingException represents the Events is not correctly created"},{"lineNumber":115,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Lee-Juntong"},"content":"    public UserInfo loadUserInfo() throws LoadingException {"},{"lineNumber":117,"author":{"gitId":"Lee-Juntong"},"content":"        UserInfo userInfo \u003d new UserInfo();"},{"lineNumber":118,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"Lee-Juntong"},"content":"            Scanner s \u003d new Scanner(new File(filePaths[1]));"},{"lineNumber":120,"author":{"gitId":"Lee-Juntong"},"content":"            if (s.hasNext()) {"},{"lineNumber":121,"author":{"gitId":"Lee-Juntong"},"content":"                String[] words \u003d s.nextLine().split(REGEX_IN_FILE);"},{"lineNumber":122,"author":{"gitId":"Lee-Juntong"},"content":"                userInfo \u003d new UserInfo(words[0], words[1], (Integer.parseInt(words[2]) !\u003d 0));"},{"lineNumber":123,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":125,"author":{"gitId":"Lee-Juntong"},"content":"            System.out.println(\"file not found\");"},{"lineNumber":126,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":127,"author":{"gitId":"Lee-Juntong"},"content":"            throw new LoadingException();"},{"lineNumber":128,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Lee-Juntong"},"content":"        return userInfo;"},{"lineNumber":130,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":132,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"Lee-Juntong"},"content":"     * Prepares the data in the file as an ArrayList, which is used to construct the EventList."},{"lineNumber":134,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the Events in an ArrayList"},{"lineNumber":136,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws LoadingException             represents the Events is not correctly created"},{"lineNumber":137,"author":{"gitId":"Lee-Juntong"},"content":"     * @throws EndBeforeStartEventException Represents the case when the user want to create an Event that ends"},{"lineNumber":138,"author":{"gitId":"Lee-Juntong"},"content":"     *                                      before it starts."},{"lineNumber":139,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"Lee-Juntong"},"content":"    public ArrayList\u003cEvent\u003e loadEvents(LocationList locations) throws LoadingException, EndBeforeStartEventException {"},{"lineNumber":141,"author":{"gitId":"Lee-Juntong"},"content":"        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":142,"author":{"gitId":"Lee-Juntong"},"content":"        File dataFile \u003d new File(filePaths[0]);"},{"lineNumber":143,"author":{"gitId":"Lee-Juntong"},"content":"        String description;"},{"lineNumber":144,"author":{"gitId":"Lee-Juntong"},"content":"        try {"},{"lineNumber":145,"author":{"gitId":"Lee-Juntong"},"content":"            Scanner s \u003d new Scanner(dataFile);"},{"lineNumber":146,"author":{"gitId":"Lee-Juntong"},"content":"            while (s.hasNext()) {"},{"lineNumber":147,"author":{"gitId":"Lee-Juntong"},"content":"                String[] words \u003d s.nextLine().split(REGEX_IN_FILE);"},{"lineNumber":148,"author":{"gitId":"Lee-Juntong"},"content":"                description \u003d words[2].trim();"},{"lineNumber":149,"author":{"gitId":"Lee-Juntong"},"content":"                switch (words[0]) {"},{"lineNumber":150,"author":{"gitId":"Lee-Juntong"},"content":"                case \"C\":"},{"lineNumber":151,"author":{"gitId":"Lee-Juntong"},"content":"                    try {"},{"lineNumber":152,"author":{"gitId":"Lee-Juntong"},"content":"                        if (!words[5].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":153,"author":{"gitId":"Lee-Juntong"},"content":"                            events.add(new Class(description, Parser.parseLocation(words[5], locations),"},{"lineNumber":154,"author":{"gitId":"Lee-Juntong"},"content":"                                    LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":155,"author":{"gitId":"Lee-Juntong"},"content":"                        } else {"},{"lineNumber":156,"author":{"gitId":"Lee-Juntong"},"content":"                            if (words.length \u003e\u003d 8) {"},{"lineNumber":157,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new Class(description, new OnlineLocation(words[6], words[7]),"},{"lineNumber":158,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":159,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":160,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new Class(description, new OnlineLocation(words[6]),"},{"lineNumber":161,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":162,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":163,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":164,"author":{"gitId":"Lee-Juntong"},"content":"                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"},{"lineNumber":165,"author":{"gitId":"Lee-Juntong"},"content":"                        throw new LoadingException();"},{"lineNumber":166,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":167,"author":{"gitId":"Lee-Juntong"},"content":"                    if (Integer.parseInt(words[1]) \u003d\u003d 1) {"},{"lineNumber":168,"author":{"gitId":"Lee-Juntong"},"content":"                        events.get(events.size() - 1).markAsDone();"},{"lineNumber":169,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":170,"author":{"gitId":"Lee-Juntong"},"content":"                    break;"},{"lineNumber":171,"author":{"gitId":"Lee-Juntong"},"content":"                case \"A\":"},{"lineNumber":172,"author":{"gitId":"Lee-Juntong"},"content":"                    try {"},{"lineNumber":173,"author":{"gitId":"Lee-Juntong"},"content":"                        if (!words[4].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":174,"author":{"gitId":"Lee-Juntong"},"content":"                            events.add(new Assignment(description, Parser.parseLocation(words[4], locations),"},{"lineNumber":175,"author":{"gitId":"Lee-Juntong"},"content":"                                    LocalDateTime.parse(words[3])));"},{"lineNumber":176,"author":{"gitId":"Lee-Juntong"},"content":"                        } else {"},{"lineNumber":177,"author":{"gitId":"Lee-Juntong"},"content":"                            events.add(new Assignment(description, new OnlineLocation(words[5]),"},{"lineNumber":178,"author":{"gitId":"Lee-Juntong"},"content":"                                    LocalDateTime.parse(words[3])));"},{"lineNumber":179,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":180,"author":{"gitId":"Lee-Juntong"},"content":"                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"},{"lineNumber":181,"author":{"gitId":"Lee-Juntong"},"content":"                        throw new LoadingException();"},{"lineNumber":182,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":183,"author":{"gitId":"Lee-Juntong"},"content":"                    if (Integer.parseInt(words[1]) \u003d\u003d 1) {"},{"lineNumber":184,"author":{"gitId":"Lee-Juntong"},"content":"                        events.get(events.size() - 1).markAsDone();"},{"lineNumber":185,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":186,"author":{"gitId":"Lee-Juntong"},"content":"                    break;"},{"lineNumber":187,"author":{"gitId":"Lee-Juntong"},"content":"                case \"P\":"},{"lineNumber":188,"author":{"gitId":"Lee-Juntong"},"content":"                    try {"},{"lineNumber":189,"author":{"gitId":"Lee-Juntong"},"content":"                        switch (words.length) {"},{"lineNumber":190,"author":{"gitId":"Lee-Juntong"},"content":"                        case 5:"},{"lineNumber":191,"author":{"gitId":"Lee-Juntong"},"content":"                            events.add(new PersonalEvent(description, Parser.parseLocation(words[4], locations),"},{"lineNumber":192,"author":{"gitId":"Lee-Juntong"},"content":"                                    LocalDateTime.parse(words[3])));"},{"lineNumber":193,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":194,"author":{"gitId":"Lee-Juntong"},"content":"                        case 6:"},{"lineNumber":195,"author":{"gitId":"Lee-Juntong"},"content":"                            if (!words[4].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":196,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new PersonalEvent(description, Parser.parseLocation(words[5], locations),"},{"lineNumber":197,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":198,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":199,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new PersonalEvent(description, new OnlineLocation(words[5]),"},{"lineNumber":200,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3])));"},{"lineNumber":201,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":202,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":203,"author":{"gitId":"Lee-Juntong"},"content":"                        case 7:"},{"lineNumber":204,"author":{"gitId":"Lee-Juntong"},"content":"                            if (words[4].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":205,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new PersonalEvent(description, new OnlineLocation(words[5], words[6]),"},{"lineNumber":206,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3])));"},{"lineNumber":207,"author":{"gitId":"Lee-Juntong"},"content":"                            } else if (words[5].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":208,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new PersonalEvent(description, new OnlineLocation(words[6]),"},{"lineNumber":209,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":210,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":211,"author":{"gitId":"Lee-Juntong"},"content":"                                throw new LoadingException();"},{"lineNumber":212,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":213,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":214,"author":{"gitId":"Lee-Juntong"},"content":"                        case 8:"},{"lineNumber":215,"author":{"gitId":"Lee-Juntong"},"content":"                            events.add(new PersonalEvent(description, new OnlineLocation(words[6], words[7]),"},{"lineNumber":216,"author":{"gitId":"Lee-Juntong"},"content":"                                    LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":217,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":218,"author":{"gitId":"Lee-Juntong"},"content":"                        default:"},{"lineNumber":219,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new LoadingException();"},{"lineNumber":220,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":221,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":222,"author":{"gitId":"Lee-Juntong"},"content":"                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"},{"lineNumber":223,"author":{"gitId":"Lee-Juntong"},"content":"                        throw new LoadingException();"},{"lineNumber":224,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":225,"author":{"gitId":"Lee-Juntong"},"content":"                    if (Integer.parseInt(words[1]) \u003d\u003d 1) {"},{"lineNumber":226,"author":{"gitId":"Lee-Juntong"},"content":"                        events.get(events.size() - 1).markAsDone();"},{"lineNumber":227,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":228,"author":{"gitId":"Lee-Juntong"},"content":"                    break;"},{"lineNumber":229,"author":{"gitId":"Lee-Juntong"},"content":"                case \"S\":"},{"lineNumber":230,"author":{"gitId":"Lee-Juntong"},"content":"                    try {"},{"lineNumber":231,"author":{"gitId":"Lee-Juntong"},"content":"                        switch (words.length) {"},{"lineNumber":232,"author":{"gitId":"Lee-Juntong"},"content":"                        case 5:"},{"lineNumber":233,"author":{"gitId":"Lee-Juntong"},"content":"                            events.add(new SelfStudy(description, Parser.parseLocation(words[4], locations),"},{"lineNumber":234,"author":{"gitId":"Lee-Juntong"},"content":"                                    LocalDateTime.parse(words[3])));"},{"lineNumber":235,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":236,"author":{"gitId":"Lee-Juntong"},"content":"                        case 6:"},{"lineNumber":237,"author":{"gitId":"Lee-Juntong"},"content":"                            if (!words[4].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":238,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new SelfStudy(description, Parser.parseLocation(words[5], locations),"},{"lineNumber":239,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":240,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":241,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new SelfStudy(description, new OnlineLocation(words[5]),"},{"lineNumber":242,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3])));"},{"lineNumber":243,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":244,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":245,"author":{"gitId":"Lee-Juntong"},"content":"                        case 7:"},{"lineNumber":246,"author":{"gitId":"Lee-Juntong"},"content":"                            if (words[4].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":247,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new SelfStudy(description, new OnlineLocation(words[5], words[6]),"},{"lineNumber":248,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3])));"},{"lineNumber":249,"author":{"gitId":"Lee-Juntong"},"content":"                            } else if (words[5].equalsIgnoreCase(ONLINE)) {"},{"lineNumber":250,"author":{"gitId":"Lee-Juntong"},"content":"                                events.add(new SelfStudy(description, new OnlineLocation(words[6]),"},{"lineNumber":251,"author":{"gitId":"Lee-Juntong"},"content":"                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":252,"author":{"gitId":"Lee-Juntong"},"content":"                            } else {"},{"lineNumber":253,"author":{"gitId":"Lee-Juntong"},"content":"                                throw new LoadingException();"},{"lineNumber":254,"author":{"gitId":"Lee-Juntong"},"content":"                            }"},{"lineNumber":255,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":256,"author":{"gitId":"Lee-Juntong"},"content":"                        case 8:"},{"lineNumber":257,"author":{"gitId":"Lee-Juntong"},"content":"                            events.add(new SelfStudy(description, new OnlineLocation(words[6], words[7]),"},{"lineNumber":258,"author":{"gitId":"Lee-Juntong"},"content":"                                    LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"},{"lineNumber":259,"author":{"gitId":"Lee-Juntong"},"content":"                            break;"},{"lineNumber":260,"author":{"gitId":"Lee-Juntong"},"content":"                        default:"},{"lineNumber":261,"author":{"gitId":"Lee-Juntong"},"content":"                            throw new LoadingException();"},{"lineNumber":262,"author":{"gitId":"Lee-Juntong"},"content":"                        }"},{"lineNumber":263,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":264,"author":{"gitId":"Lee-Juntong"},"content":"                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"},{"lineNumber":265,"author":{"gitId":"Lee-Juntong"},"content":"                        throw new LoadingException();"},{"lineNumber":266,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":267,"author":{"gitId":"Lee-Juntong"},"content":"                    if (Integer.parseInt(words[1]) \u003d\u003d 1) {"},{"lineNumber":268,"author":{"gitId":"Lee-Juntong"},"content":"                        events.get(events.size() - 1).markAsDone();"},{"lineNumber":269,"author":{"gitId":"Lee-Juntong"},"content":"                    }"},{"lineNumber":270,"author":{"gitId":"Lee-Juntong"},"content":"                    break;"},{"lineNumber":271,"author":{"gitId":"Lee-Juntong"},"content":"                default:"},{"lineNumber":272,"author":{"gitId":"Lee-Juntong"},"content":"                    throw new LoadingException();"},{"lineNumber":273,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":274,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":275,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":276,"author":{"gitId":"Lee-Juntong"},"content":"            System.out.println(\"file not found\");"},{"lineNumber":277,"author":{"gitId":"Lee-Juntong"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":278,"author":{"gitId":"Lee-Juntong"},"content":"            throw new LoadingException();"},{"lineNumber":279,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":280,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":281,"author":{"gitId":"Lee-Juntong"},"content":"        return events;"},{"lineNumber":282,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":284,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"Lee-Juntong"},"content":"     * Loads data from bus_stop text file to an ArrayList, which is stored in a BusStopList."},{"lineNumber":286,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":287,"author":{"gitId":"jiaaaqi"},"content":"     * @param busStopList ArrayList of BusStops in BusStopList"},{"lineNumber":288,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":289,"author":{"gitId":"jiaaaqi"},"content":"    public void loadBusStopData(ArrayList\u003cBusStop\u003e busStopList) {"},{"lineNumber":290,"author":{"gitId":"jiaaaqi"},"content":"        Scanner s \u003d new Scanner(busStopData);"},{"lineNumber":291,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":292,"author":{"gitId":"jiaaaqi"},"content":"        while (s.hasNext()) {"},{"lineNumber":293,"author":{"gitId":"jiaaaqi"},"content":"            String input \u003d s.nextLine();"},{"lineNumber":294,"author":{"gitId":"jiaaaqi"},"content":"            String[] split \u003d input.split(\":\", 2);"},{"lineNumber":295,"author":{"gitId":"jiaaaqi"},"content":"            String name \u003d split[0];"},{"lineNumber":296,"author":{"gitId":"jiaaaqi"},"content":"            String[] buses \u003d split[1].split(\",\");"},{"lineNumber":297,"author":{"gitId":"jiaaaqi"},"content":"            BusStop stop \u003d new BusStop(name, buses);"},{"lineNumber":298,"author":{"gitId":"jiaaaqi"},"content":"            busStopList.add(stop);"},{"lineNumber":299,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":300,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":302,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":303,"author":{"gitId":"Lee-Juntong"},"content":"     * Loads data from location text file into an ArrayList, which is stored in a LocationList."},{"lineNumber":304,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":305,"author":{"gitId":"jiaaaqi"},"content":"     * @param locationList ArrayList of Locations in LocationList"},{"lineNumber":306,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":307,"author":{"gitId":"jiaaaqi"},"content":"    public void loadLocationData(ArrayList\u003cLocation\u003e locationList) {"},{"lineNumber":308,"author":{"gitId":"jiaaaqi"},"content":"        Scanner s \u003d new Scanner(locationData);"},{"lineNumber":309,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":310,"author":{"gitId":"jiaaaqi"},"content":"        while (s.hasNext()) {"},{"lineNumber":311,"author":{"gitId":"jiaaaqi"},"content":"            String input \u003d s.nextLine();"},{"lineNumber":312,"author":{"gitId":"jiaaaqi"},"content":"            // info[0] \u003d type, info[1] \u003d name, info[2] \u003d nearest buildings/bus stops"},{"lineNumber":313,"author":{"gitId":"jiaaaqi"},"content":"            String[] info \u003d input.split(\"/\");"},{"lineNumber":314,"author":{"gitId":"jiaaaqi"},"content":"            String[] additionalInfo \u003d info[2].split(\",\");"},{"lineNumber":315,"author":{"gitId":"jiaaaqi"},"content":"            Location location \u003d null;"},{"lineNumber":316,"author":{"gitId":"jiaaaqi"},"content":"            switch (info[0]) {"},{"lineNumber":317,"author":{"gitId":"jiaaaqi"},"content":"            case \"BLK\":"},{"lineNumber":318,"author":{"gitId":"jiaaaqi"},"content":"                location \u003d new Building(info[1], additionalInfo);"},{"lineNumber":319,"author":{"gitId":"jiaaaqi"},"content":"                break;"},{"lineNumber":320,"author":{"gitId":"jiaaaqi"},"content":"            case \"H\":"},{"lineNumber":321,"author":{"gitId":"jiaaaqi"},"content":"                location \u003d new Hostel(info[1], additionalInfo);"},{"lineNumber":322,"author":{"gitId":"jiaaaqi"},"content":"                break;"},{"lineNumber":323,"author":{"gitId":"jiaaaqi"},"content":"            case \"L\":"},{"lineNumber":324,"author":{"gitId":"jiaaaqi"},"content":"                location \u003d new LectureTheatre(info[1], info[2]);"},{"lineNumber":325,"author":{"gitId":"jiaaaqi"},"content":"                break;"},{"lineNumber":326,"author":{"gitId":"jiaaaqi"},"content":"            case \"OUT\":"},{"lineNumber":327,"author":{"gitId":"Lee-Juntong"},"content":"                location \u003d new OutOfNuS(info[1]);"},{"lineNumber":328,"author":{"gitId":"Lee-Juntong"},"content":"                break;"},{"lineNumber":329,"author":{"gitId":"Lee-Juntong"},"content":"            default:"},{"lineNumber":330,"author":{"gitId":"jiaaaqi"},"content":"                break;"},{"lineNumber":331,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":332,"author":{"gitId":"jiaaaqi"},"content":"            if (location !\u003d null) {"},{"lineNumber":333,"author":{"gitId":"jiaaaqi"},"content":"                locationList.add(location);"},{"lineNumber":334,"author":{"gitId":"jiaaaqi"},"content":"            } else {"},{"lineNumber":335,"author":{"gitId":"jiaaaqi"},"content":"                System.out.println(\"Invalid Location Type\");"},{"lineNumber":336,"author":{"gitId":"jiaaaqi"},"content":"            }"},{"lineNumber":337,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":338,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":340,"author":{"gitId":"jiaaaqi"},"content":"    private String locationData \u003d \"BLK/EA/EA\\n\""},{"lineNumber":341,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/EA/Information Technology\\n\" + \"BLK/E1A/EA\\n\" + \"BLK/EW1/EA,Information Technology\\n\""},{"lineNumber":342,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/EW1A/EA\\n\" + \"BLK/E2/EA\\n\" + \"BLK/E3/EA,Raffles Hall\\n\" + \"BLK/E3A/EA\\n\""},{"lineNumber":343,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/E4/Information Technology\\n\" + \"BLK/E4A/Opp YIH,YIH\\n\" + \"BLK/E5/Information Technology\\n\""},{"lineNumber":344,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/E5A/Raffles Hall\\n\" + \"BLK/E6/Opp YIH,YIH\\n\" + \"BLK/IT/Information Technology,CLB\\n\""},{"lineNumber":345,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/AS1/CLB,LT13\\n\" + \"BLK/AS2/Ventus,LT13\\n\" + \"BLK/AS3/Ventus,LT13\\n\""},{"lineNumber":346,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/AS4/LT13,AS5\\n\" + \"BLK/AS5/AS5\\n\" + \"BLK/AS6/CLB,COM2\\n\" + \"BLK/AS7/Ventus,LT13\\n\" + \"BLK/AS8/CLB\\n\""},{"lineNumber":347,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/SDE1/IT\\n\" + \"BLK/SDE2/IT\\n\" + \"BLK/SDE3/EA\\n\" + \"BLK/SDE4/IT\\n\" + \"BLK/CELC/IT\\n\" + \"BLK/S1/LT27\\n\""},{"lineNumber":348,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/S2/LT27\\n\" + \"BLK/S3/LT27\\n\" + \"BLK/S4/LT27\\n\" + \"BLK/S5/LT27\\n\" + \"BLK/S6/LT27\\n\" + \"BLK/S7/LT27\\n\""},{"lineNumber":349,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/S8/LT27\\n\" + \"BLK/S9/LT27\\n\" + \"BLK/S10/LT27\\n\" + \"BLK/S11/LT27\\n\" + \"BLK/S12/LT27\\n\""},{"lineNumber":350,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/S13/LT27\\n\" + \"BLK/S14/LT27\\n\" + \"BLK/S15/LT27\\n\" + \"BLK/S16/LT27\\n\" + \"BLK/S17/S17,LT27\\n\""},{"lineNumber":351,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/MD1/LT27\\n\" + \"BLK/MD2/LT27\\n\" + \"BLK/MD3/LT27\\n\" + \"BLK/MD4/LT27\\n\" + \"BLK/MD5/LT27\\n\""},{"lineNumber":352,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/MD6/LT27\\n\" + \"BLK/MD7/LT27\\n\" + \"BLK/MD8/LT27\\n\" + \"BLK/MD9/LT27\\n\" + \"BLK/MD10/LT27\\n\""},{"lineNumber":353,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/MD11/LT27\\n\" + \"BLK/COM1/COM2\\n\" + \"BLK/COM2/COM2\\n\" + \"BLK/BIZ1/BIZ2,COM2\\n\" + \"BLK/BIZ2/BIZ2\\n\""},{"lineNumber":354,"author":{"gitId":"jiaaaqi"},"content":"            + \"BLK/Shaw Foundation Alumni House/Opp NUSSU\\n\" + \"H/Raffles Hall/Raffles Hall,NUS Museum\\n\""},{"lineNumber":355,"author":{"gitId":"jiaaaqi"},"content":"            + \"H/Kent Ridge Hall/Opp HSSML\\n\" + \"H/King Edward VII Hall/PGP\\n\" + \"H/Sheares Hall/Opp HSSML\\n\""},{"lineNumber":356,"author":{"gitId":"jiaaaqi"},"content":"            + \"H/Eusoff Hall/Ventus\\n\" + \"H/Temasek Hall/Opp NUSSU\\n\" + \"H/Cinnamon College/UTown\\n\""},{"lineNumber":357,"author":{"gitId":"jiaaaqi"},"content":"            + \"H/College of Alice and Peter Tan/UTown\\n\" + \"H/Residental College 4/UTown\\n\" + \"H/RVRC/Opp UHC\\n\""},{"lineNumber":358,"author":{"gitId":"jiaaaqi"},"content":"            + \"H/Tembusu College/UTown\\n\" + \"H/Prince George\u0027s Park/PGP\\n\" + \"H/UTown Residence/UTown\\n\""},{"lineNumber":359,"author":{"gitId":"jiaaaqi"},"content":"            + \"L/LT1/E2\\n\" + \"L/LT2/E2\\n\" + \"L/LT6/E4\\n\" + \"L/LT7/EA\\n\" + \"L/LT7A/EA\\n\" + \"L/LT8/AS5\\n\" + \"L/LT9/AS1\\n\""},{"lineNumber":360,"author":{"gitId":"jiaaaqi"},"content":"            + \"L/LT10/AS1\\n\" + \"L/LT11/AS2\\n\" + \"L/LT12/AS3\\n\" + \"L/LT13/AS3\\n\" + \"L/LT14/AS6\\n\" + \"L/LT15/AS6\\n\""},{"lineNumber":361,"author":{"gitId":"jiaaaqi"},"content":"            + \"L/LT16/COM2\\n\" + \"L/LT17/COM2\\n\" + \"L/LT18/COM2\\n\" + \"L/LT19/COM2\\n\" + \"L/LT20/S3\\n\" + \"L/LT21/S5\\n\""},{"lineNumber":362,"author":{"gitId":"jiaaaqi"},"content":"            + \"L/LT24/MD4\\n\" + \"L/LT25/MD7\\n\" + \"L/LT26/MD9\\n\" + \"L/LT27/LT27\\n\" + \"L/LT28/LT27\\n\" + \"L/LT29/LT27\\n\""},{"lineNumber":363,"author":{"gitId":"jiaaaqi"},"content":"            + \"L/LT31/S16\\n\" + \"L/LT32/S1\\n\" + \"L/LT33/S17\\n\" + \"L/LT34/S17\";"},{"lineNumber":364,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":365,"author":{"gitId":"jiaaaqi"},"content":"    private String busStopData \u003d \"EA:B2,C,BTC2\\n\""},{"lineNumber":366,"author":{"gitId":"jiaaaqi"},"content":"            + \"Raffles Hall:B2,C\\n\" + \"Information Technology:A2,B1,B2,D1\\n\" + \"Opp YIH:A2,B1,B2,D1\\n\""},{"lineNumber":367,"author":{"gitId":"jiaaaqi"},"content":"            + \"NUS Museum:A2,BTC1,BTC2,C,D1,D2\\n\" + \"YIH:A1,B1,BTC1,D1\\n\" + \"CLB:A1,B1,BTC1,D1\\n\""},{"lineNumber":368,"author":{"gitId":"jiaaaqi"},"content":"            + \"LT13:A1,B,D1,BTC1\\n\" + \"AS5:A1,B,D1,BTC1\\n\" + \"Ventus:A2,A2E,B,D1\\n\" + \"BIZ2:A1,A1E,D1,BTC1\\n\""},{"lineNumber":369,"author":{"gitId":"jiaaaqi"},"content":"            + \"Opp NUSSU:A2,D1\\n\" + \"Opp HSSML:A2,D1\\n\" + \"Opp UHC:A1,C,D2\\n\" + \"COM2:A1,A2,B,D1\\n\""},{"lineNumber":370,"author":{"gitId":"jiaaaqi"},"content":"            + \"UTown:D1,D2,B1,B1,C,BTC\\n\" + \"PGP:A1\\n\" + \"LT27:A1,A1E,C,D2\\n\" + \"S17:A2,A2E,C,D2\";"},{"lineNumber":371,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":286,"jiaaaqi":85}},{"path":"src/main/java/ui/UI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import event.Event;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyEventListException;"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"import location.BusStop;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import location.Location;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":" * UI receives all user inputs, and produces outputs show to the user."},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"public class UI {"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String LOGO \u003d"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"            \" _       _ _        _   ____       _                    _        _\\n\""},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"| |     | | |      | | / ___|     | |                  | |      | |\\n\""},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"|  \\\\    | | |      | |/ /         | |                  | |      | |\\n\""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"| |\\\\\\\\   | | |      | |\\\\ \\\\         | |        ___       | |      | | ___\\n\""},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"| | \\\\\\\\  | | |      | | \\\\ \\\\     ___| |______ /___\\\\  ____| |_    _| |/___\\\\\\n\""},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"| |  \\\\\\\\ | | |      | |  \\\\ \\\\   /___|  ____  ||___|||  __  | |  | | ||___||\\n\""},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"| |   \\\\\\\\| | |      | |   \\\\ \\\\ //   | |    | | ___/ | |  | | |  | | | ___/\\n\""},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"| |    \\\\  | |______| |___/ / \\\\\\\\___| |    | |\\\\____ | |__| | |__| | |\\\\____\\n\""},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"                    + \"|_|     |_|__________|____/   \\\\___|_|    |_|\\\\___/ |______|\\\\___,_|_|\\\\___/\\n\";"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String LINE_DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"    public static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"    private final Scanner in;"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    public UI() {"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"        in \u003d new Scanner(System.in);"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":37,"author":{"gitId":"xuche123"},"content":"    public String[] readEditCommand() {"},{"lineNumber":38,"author":{"gitId":"xuche123"},"content":"        String[] editFields \u003d {\"TYPE: \", \"DESC: \", \"LOCATION: \", \"START: \", \"END: \"};"},{"lineNumber":39,"author":{"gitId":"xuche123"},"content":"        String[] editInformation \u003d new String[5];"},{"lineNumber":40,"author":{"gitId":"xuche123"},"content":"        System.out.println(\"Enter the edits for each component. Leave as blank if no edits are to be made.\");"},{"lineNumber":41,"author":{"gitId":"xuche123"},"content":"        // populate edit information with user data"},{"lineNumber":42,"author":{"gitId":"xuche123"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":43,"author":{"gitId":"xuche123"},"content":"            System.out.print(editFields[i]);"},{"lineNumber":44,"author":{"gitId":"xuche123"},"content":"            editInformation[i] \u003d in.nextLine().trim();"},{"lineNumber":45,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"xuche123"},"content":"        return editInformation;"},{"lineNumber":47,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":49,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"     * Reads the user input line by line."},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"     * @return the string of the line"},{"lineNumber":54,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"    public String readCommand() {"},{"lineNumber":56,"author":{"gitId":"Lee-Juntong"},"content":"        return in.nextLine();"},{"lineNumber":57,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":59,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the logo of NUSchedule and greet the user."},{"lineNumber":61,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Lee-Juntong"},"content":"    public void printGreetingMessage(UserInfo userInfo) {"},{"lineNumber":63,"author":{"gitId":"Lee-Juntong"},"content":"        printLine();"},{"lineNumber":64,"author":{"gitId":"Lee-Juntong"},"content":"        if (userInfo.getName().isBlank()) {"},{"lineNumber":65,"author":{"gitId":"Lee-Juntong"},"content":"            System.out.println(\"I am NUSchedule! What\u0027s your name?\");"},{"lineNumber":66,"author":{"gitId":"Lee-Juntong"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"Lee-Juntong"},"content":"            helloWithName(userInfo.getName());"},{"lineNumber":68,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":70,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":72,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":74,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the separator."},{"lineNumber":76,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Lee-Juntong"},"content":"    public void printLine() {"},{"lineNumber":78,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(LINE_DIVIDER);"},{"lineNumber":79,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":81,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints all the events with labels, based on the input list."},{"lineNumber":83,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events an ArrayList of events to be printed one by one."},{"lineNumber":85,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Lee-Juntong"},"content":"    public void printEventList(ArrayList\u003cEvent\u003e events) throws EmptyEventListException {"},{"lineNumber":87,"author":{"gitId":"Lee-Juntong"},"content":"        int numPrintedEvents \u003d 0;"},{"lineNumber":88,"author":{"gitId":"madbeez"},"content":"        if (events.size() \u003d\u003d 0) {"},{"lineNumber":89,"author":{"gitId":"Lee-Juntong"},"content":"            throw new EmptyEventListException();"},{"lineNumber":90,"author":{"gitId":"madbeez"},"content":"        } else {"},{"lineNumber":91,"author":{"gitId":"madbeez"},"content":"            try {"},{"lineNumber":92,"author":{"gitId":"Lee-Juntong"},"content":"                System.out.println(\"Here are the Events in your list:\");"},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":"                for (Event event : events) {"},{"lineNumber":94,"author":{"gitId":"Lee-Juntong"},"content":"                    numPrintedEvents++;"},{"lineNumber":95,"author":{"gitId":"Lee-Juntong"},"content":"                    System.out.println(numPrintedEvents + \". \" + event.toString());"},{"lineNumber":96,"author":{"gitId":"Lee-Juntong"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"madbeez"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":98,"author":{"gitId":"madbeez"},"content":"                System.out.println(\"The list is empty.\");"},{"lineNumber":99,"author":{"gitId":"madbeez"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"madbeez"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":103,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints all the Events of the filtered list with labels, based on the input list."},{"lineNumber":105,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"Lee-Juntong"},"content":"     * @param events an ArrayList of Events to be printed one by one."},{"lineNumber":107,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Lee-Juntong"},"content":"    public void printFilteredEventList(ArrayList\u003cEvent\u003e events) {"},{"lineNumber":109,"author":{"gitId":"Lee-Juntong"},"content":"        int numPrintedEvents \u003d 0;"},{"lineNumber":110,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":111,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Here are the matching Events in your list:\");"},{"lineNumber":112,"author":{"gitId":"Lee-Juntong"},"content":"        for (Event event : events) {"},{"lineNumber":113,"author":{"gitId":"Lee-Juntong"},"content":"            numPrintedEvents++;"},{"lineNumber":114,"author":{"gitId":"Lee-Juntong"},"content":"            System.out.println(numPrintedEvents + \". \" + event.toString());"},{"lineNumber":115,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":118,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Lee-Juntong"},"content":"     * Shows the error message when experiencing exceptions."},{"lineNumber":120,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"Lee-Juntong"},"content":"     * @param message the message get from the error."},{"lineNumber":122,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Lee-Juntong"},"content":"    public void showError(String message) {"},{"lineNumber":124,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(message);"},{"lineNumber":125,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":127,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"Lee-Juntong"},"content":"     * Shows the error message during loading. Since the general IO exception is"},{"lineNumber":129,"author":{"gitId":"Lee-Juntong"},"content":"     * handled when executing the process, the error leads to this would be the file"},{"lineNumber":130,"author":{"gitId":"Lee-Juntong"},"content":"     * is edited in a wrong way."},{"lineNumber":131,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"Lee-Juntong"},"content":"    public void showLoadingError() {"},{"lineNumber":133,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"You edit the file in a wrong format. Please check.\");"},{"lineNumber":134,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":136,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"Lee-Juntong"},"content":"     * Call when exit the program."},{"lineNumber":138,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"Lee-Juntong"},"content":"    public void printExitMessage() {"},{"lineNumber":140,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(EXIT_MESSAGE);"},{"lineNumber":141,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":143,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"Lee-Juntong"},"content":"     * Take in a size and prints the total number of Events."},{"lineNumber":145,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"Lee-Juntong"},"content":"     * @param size number of events in the list."},{"lineNumber":147,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"Lee-Juntong"},"content":"    public void printNumEvent(int size) {"},{"lineNumber":149,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Now you have \" + size + \" Events in the list.\");"},{"lineNumber":150,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":152,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the message when the user mark some Event as done."},{"lineNumber":154,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"Lee-Juntong"},"content":"     * @param event the Event being done"},{"lineNumber":156,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"Lee-Juntong"},"content":"    public void printDoneMessage(Event event) {"},{"lineNumber":158,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Nice! I\u0027ve marked this Event as done: \");"},{"lineNumber":159,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(event.toString());"},{"lineNumber":160,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":162,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the message when the user deletes some Event."},{"lineNumber":164,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"Lee-Juntong"},"content":"     * @param event the Event being deleted"},{"lineNumber":166,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"Lee-Juntong"},"content":"    public void printDeleteMessage(Event event) {"},{"lineNumber":168,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Noted. I\u0027ve removed this Event: \");"},{"lineNumber":169,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(event.toString());"},{"lineNumber":170,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":172,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the message when the user adds some Event."},{"lineNumber":174,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"Lee-Juntong"},"content":"     * @param eventAdded the Event being added"},{"lineNumber":176,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"Lee-Juntong"},"content":"    public void printAddEventMessage(Event eventAdded) {"},{"lineNumber":178,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"I\u0027ve added this Event: \");"},{"lineNumber":179,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(eventAdded.toString());"},{"lineNumber":180,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":182,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"xuche123"},"content":"     * Prints the message when the user adds some Event."},{"lineNumber":184,"author":{"gitId":"xuche123"},"content":"     *"},{"lineNumber":185,"author":{"gitId":"xuche123"},"content":"     * @param eventEdited the Event being edited"},{"lineNumber":186,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"xuche123"},"content":"    public void printEditEventMessage(Event eventEdited) {"},{"lineNumber":188,"author":{"gitId":"xuche123"},"content":"        System.out.println(\"The event has been edited.\");"},{"lineNumber":189,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":191,"author":{"gitId":"xuche123"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"xuche123"},"content":"     * Prints the message when the user sorts the events."},{"lineNumber":193,"author":{"gitId":"xuche123"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"xuche123"},"content":"    public void printSortEventMessage() {"},{"lineNumber":195,"author":{"gitId":"xuche123"},"content":"        System.out.println(\"Got it. The events have been sorted.\");"},{"lineNumber":196,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":198,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints all the Events of the filtered list with labels, based on the input list."},{"lineNumber":200,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":201,"author":{"gitId":"Lee-Juntong"},"content":"     * @param filteredEventList an ArrayList of Events to be printed one by one."},{"lineNumber":202,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"Lee-Juntong"},"content":"    public void printFilteredDateEventList(ArrayList\u003cEvent\u003e filteredEventList) {"},{"lineNumber":204,"author":{"gitId":"Lee-Juntong"},"content":"        int numPrintedEvents \u003d 0;"},{"lineNumber":205,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":206,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\" Here are the Events on the given date in your list:\");"},{"lineNumber":207,"author":{"gitId":"Lee-Juntong"},"content":"        for (Event event : filteredEventList) {"},{"lineNumber":208,"author":{"gitId":"Lee-Juntong"},"content":"            numPrintedEvents++;"},{"lineNumber":209,"author":{"gitId":"Lee-Juntong"},"content":"            System.out.println(numPrintedEvents + \". \" + event.toString());"},{"lineNumber":210,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":213,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints all the locations stored in the location list with nearest bus stops."},{"lineNumber":215,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":216,"author":{"gitId":"Lee-Juntong"},"content":"     * @param locationsList an Array List of Locations to be printed."},{"lineNumber":217,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"jiaaaqi"},"content":"    public void printLocationList(ArrayList\u003cLocation\u003e locationsList) {"},{"lineNumber":219,"author":{"gitId":"jiaaaqi"},"content":"        int i \u003d 1;"},{"lineNumber":220,"author":{"gitId":"jiaaaqi"},"content":"        System.out.println(\"Lists of locations: \");"},{"lineNumber":221,"author":{"gitId":"jiaaaqi"},"content":"        for (Location location : locationsList) {"},{"lineNumber":222,"author":{"gitId":"jiaaaqi"},"content":"            System.out.println(i + \". \" + location);"},{"lineNumber":223,"author":{"gitId":"jiaaaqi"},"content":"            i++;"},{"lineNumber":224,"author":{"gitId":"jiaaaqi"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":227,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":228,"author":{"gitId":"jiaaaqi"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints all the bus stops stored in the bus stop list with buses that goes there."},{"lineNumber":230,"author":{"gitId":"jiaaaqi"},"content":"     *"},{"lineNumber":231,"author":{"gitId":"jiaaaqi"},"content":"     * @param busStopList an Array List of Bus Stops to be printed"},{"lineNumber":232,"author":{"gitId":"jiaaaqi"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"jiaaaqi"},"content":"    public void printBusStopList(ArrayList\u003cBusStop\u003e busStopList) {"},{"lineNumber":234,"author":{"gitId":"jiaaaqi"},"content":"        int i \u003d 1;"},{"lineNumber":235,"author":{"gitId":"jiaaaqi"},"content":"        System.out.println(\"List of bus stops: \");"},{"lineNumber":236,"author":{"gitId":"jiaaaqi"},"content":"        for (BusStop busStop : busStopList) {"},{"lineNumber":237,"author":{"gitId":"jiaaaqi"},"content":"            System.out.println(i + \". \" + busStop);"},{"lineNumber":238,"author":{"gitId":"jiaaaqi"},"content":"            i++;"},{"lineNumber":239,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":242,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the help information when user input command \u0027help\u0027."},{"lineNumber":244,"author":{"gitId":"Lee-Juntong"},"content":"     * Relevant command information with reference to the current user guide draft."},{"lineNumber":245,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"max-wunan"},"content":"    public void printHelp() {"},{"lineNumber":247,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"Current version: v2.1\");"},{"lineNumber":248,"author":{"gitId":"xuche123"},"content":"        System.out.println(\"Below are all the commands and brief descriptions of their functions in the form of \""},{"lineNumber":249,"author":{"gitId":"xuche123"},"content":"                + \"command - function: \");"},{"lineNumber":250,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"help - view all the commands\");"},{"lineNumber":251,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"assignment - add an assignment event with content, deadline and location\");"},{"lineNumber":252,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"class - add a class event with content, deadline and location\");"},{"lineNumber":253,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"personalEvent - add a personal event with content, deadline and location\");"},{"lineNumber":254,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"selfStudy - add a self directed study event\");"},{"lineNumber":255,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"edit - edit event information\");"},{"lineNumber":256,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"locate - find location information\");"},{"lineNumber":257,"author":{"gitId":"jiaaaqi"},"content":"        System.out.println(\"locations - view all the locations available\");"},{"lineNumber":258,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"list - view all events added\");"},{"lineNumber":259,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"clear - clear all events\");"},{"lineNumber":260,"author":{"gitId":"jiaaaqi"},"content":"        System.out.println(\"reminder - show events of the day\");"},{"lineNumber":261,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"autoClear - clear all events one month ago\");"},{"lineNumber":262,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"clearBefore - clear all events before the date input\");"},{"lineNumber":263,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"studyTime - show the amount of study time detected by the program of the day\");"},{"lineNumber":264,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"sort - sort all events according to the criteria given\");"},{"lineNumber":265,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"repeat - repeat events that have previously happened\");"},{"lineNumber":266,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"done - mark a certain task/event as done\");"},{"lineNumber":267,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"date - show all events on the date given\");"},{"lineNumber":268,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"There will be more upcoming features in later versions.\");"},{"lineNumber":269,"author":{"gitId":"xuche123"},"content":"        System.out.println(\"For more information, please refer to detailed user guide: \""},{"lineNumber":270,"author":{"gitId":"xuche123"},"content":"                + \"https://ay2021s1-cs2113t-f14-4.github.io/tp/\");"},{"lineNumber":271,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":273,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the message when the user clears the list."},{"lineNumber":275,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":276,"author":{"gitId":"Lee-Juntong"},"content":"    public void printClearEventsSuccessful() {"},{"lineNumber":277,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Clear successful. The list is now empty.\");"},{"lineNumber":278,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":280,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":281,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints all the Events of the filtered list with labels, based on the input list."},{"lineNumber":282,"author":{"gitId":"Lee-Juntong"},"content":"     * Called for printing the events that having conflict timing with the new event added."},{"lineNumber":283,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":284,"author":{"gitId":"Lee-Juntong"},"content":"     * @param conflictEvents an ArrayList of Events to be printed one by one."},{"lineNumber":285,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":286,"author":{"gitId":"Lee-Juntong"},"content":"    public void printConflictEvents(ArrayList\u003cEvent\u003e conflictEvents) {"},{"lineNumber":287,"author":{"gitId":"Lee-Juntong"},"content":"        if (conflictEvents \u003d\u003d null) {"},{"lineNumber":288,"author":{"gitId":"Lee-Juntong"},"content":"            return;"},{"lineNumber":289,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"Lee-Juntong"},"content":"        if (conflictEvents.size() \u003d\u003d 0) {"},{"lineNumber":291,"author":{"gitId":"Lee-Juntong"},"content":"            return;"},{"lineNumber":292,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":293,"author":{"gitId":"Lee-Juntong"},"content":"        int numPrintedEvents \u003d 0;"},{"lineNumber":294,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"You have some events that happen concurrently. Please prepared for multi-thread. \""},{"lineNumber":295,"author":{"gitId":"Lee-Juntong"},"content":"                + \"\\n\""},{"lineNumber":296,"author":{"gitId":"Lee-Juntong"},"content":"                + \"Here are the Events in your list that have overlaps with your newly added/edited event:\");"},{"lineNumber":297,"author":{"gitId":"Lee-Juntong"},"content":"        for (Event event : conflictEvents) {"},{"lineNumber":298,"author":{"gitId":"Lee-Juntong"},"content":"            numPrintedEvents++;"},{"lineNumber":299,"author":{"gitId":"Lee-Juntong"},"content":"            System.out.println(numPrintedEvents + \". \" + event.toString());"},{"lineNumber":300,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"\\nBut nonetheless...\");"},{"lineNumber":302,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":304,"author":{"gitId":"Lee-Juntong"},"content":"    public void helloWithName(String name) {"},{"lineNumber":305,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Hi \" + name + \", nice to see you.\");"},{"lineNumber":306,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":308,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":309,"author":{"gitId":"Lee-Juntong"},"content":"     * Prints the amount of time the person spent on study on that day."},{"lineNumber":310,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":311,"author":{"gitId":"Lee-Juntong"},"content":"     * @param filteredEventList the list that contains events that are academic related, happen on that day, and have"},{"lineNumber":312,"author":{"gitId":"Lee-Juntong"},"content":"     *                          been done."},{"lineNumber":313,"author":{"gitId":"Lee-Juntong"},"content":"     * @param date              the date that the user want to know his or her study time."},{"lineNumber":314,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":315,"author":{"gitId":"Lee-Juntong"},"content":"    public void printStudyTime(ArrayList\u003cEvent\u003e filteredEventList, LocalDate date) {"},{"lineNumber":316,"author":{"gitId":"Lee-Juntong"},"content":"        int hour \u003d 0;"},{"lineNumber":317,"author":{"gitId":"Lee-Juntong"},"content":"        int minute \u003d 0;"},{"lineNumber":318,"author":{"gitId":"Lee-Juntong"},"content":"        int startHour;"},{"lineNumber":319,"author":{"gitId":"Lee-Juntong"},"content":"        int endHour;"},{"lineNumber":320,"author":{"gitId":"Lee-Juntong"},"content":"        int startMinute;"},{"lineNumber":321,"author":{"gitId":"Lee-Juntong"},"content":"        int endMinute;"},{"lineNumber":322,"author":{"gitId":"Lee-Juntong"},"content":"        for (Event event : filteredEventList) {"},{"lineNumber":323,"author":{"gitId":"Lee-Juntong"},"content":"            if (event.getDate().isBefore(date)) {"},{"lineNumber":324,"author":{"gitId":"Lee-Juntong"},"content":"                startHour \u003d 0;"},{"lineNumber":325,"author":{"gitId":"Lee-Juntong"},"content":"                startMinute \u003d 0;"},{"lineNumber":326,"author":{"gitId":"Lee-Juntong"},"content":"            } else {"},{"lineNumber":327,"author":{"gitId":"Lee-Juntong"},"content":"                startHour \u003d event.getStartDateTime().getHour();"},{"lineNumber":328,"author":{"gitId":"Lee-Juntong"},"content":"                startMinute \u003d event.getStartDateTime().getMinute();"},{"lineNumber":329,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":330,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":331,"author":{"gitId":"Lee-Juntong"},"content":"            if (event.getEndDate().isAfter(date)) {"},{"lineNumber":332,"author":{"gitId":"Lee-Juntong"},"content":"                endHour \u003d 24;"},{"lineNumber":333,"author":{"gitId":"Lee-Juntong"},"content":"                endMinute \u003d 0;"},{"lineNumber":334,"author":{"gitId":"Lee-Juntong"},"content":"            } else {"},{"lineNumber":335,"author":{"gitId":"Lee-Juntong"},"content":"                endHour \u003d event.getEndDateTime().getHour();"},{"lineNumber":336,"author":{"gitId":"Lee-Juntong"},"content":"                endMinute \u003d event.getEndDateTime().getMinute();"},{"lineNumber":337,"author":{"gitId":"Lee-Juntong"},"content":"            }"},{"lineNumber":338,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":339,"author":{"gitId":"Lee-Juntong"},"content":"            hour +\u003d endHour - startHour;"},{"lineNumber":340,"author":{"gitId":"Lee-Juntong"},"content":"            minute +\u003d endMinute - startMinute;"},{"lineNumber":341,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":343,"author":{"gitId":"Lee-Juntong"},"content":"        hour +\u003d minute / 60;"},{"lineNumber":344,"author":{"gitId":"Lee-Juntong"},"content":"        minute %\u003d 60;"},{"lineNumber":345,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":346,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"The amount of time you spent on study on that day is:\\n\""},{"lineNumber":347,"author":{"gitId":"Lee-Juntong"},"content":"                + hour + \" hour(s) \" + minute + \" minute(s)\");"},{"lineNumber":348,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":349,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":350,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":351,"author":{"gitId":"Lee-Juntong"},"content":"     * Print the Not Done events today."},{"lineNumber":352,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":353,"author":{"gitId":"Lee-Juntong"},"content":"     * @param filteredEventList The events that are not done today."},{"lineNumber":354,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":355,"author":{"gitId":"Lee-Juntong"},"content":"    public void printRemindEventList(ArrayList\u003cEvent\u003e filteredEventList) {"},{"lineNumber":356,"author":{"gitId":"Lee-Juntong"},"content":"        int numPrintedEvents \u003d 0;"},{"lineNumber":357,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":358,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Here are the events that you should do today:\");"},{"lineNumber":359,"author":{"gitId":"Lee-Juntong"},"content":"        for (Event event : filteredEventList) {"},{"lineNumber":360,"author":{"gitId":"Lee-Juntong"},"content":"            numPrintedEvents++;"},{"lineNumber":361,"author":{"gitId":"Lee-Juntong"},"content":"            System.out.println(numPrintedEvents + \". \" + event.toString());"},{"lineNumber":362,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":363,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":365,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":366,"author":{"gitId":"Lee-Juntong"},"content":"     * Print the success message after repeating all classes in the current week."},{"lineNumber":367,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":368,"author":{"gitId":"Lee-Juntong"},"content":"     * @param numWeeks number of weeks to repeat."},{"lineNumber":369,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":370,"author":{"gitId":"Lee-Juntong"},"content":"    public void printRepeatAll(int numWeeks) {"},{"lineNumber":371,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"All classes in this week have been repeated for \" + numWeeks + \" weeks.\");"},{"lineNumber":372,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":373,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":374,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":375,"author":{"gitId":"Lee-Juntong"},"content":"     * Print the success message after repeating the selected event."},{"lineNumber":376,"author":{"gitId":"Lee-Juntong"},"content":"     *"},{"lineNumber":377,"author":{"gitId":"Lee-Juntong"},"content":"     * @param numWeeks number of weeks to repeat."},{"lineNumber":378,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":379,"author":{"gitId":"Lee-Juntong"},"content":"    public void printRepeatEvent(int numWeeks) {"},{"lineNumber":380,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"The selected event has been repeated for \" + numWeeks + \" weeks.\");"},{"lineNumber":381,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":383,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":384,"author":{"gitId":"Lee-Juntong"},"content":"     * Print the success message after the user input autoClear on."},{"lineNumber":385,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":386,"author":{"gitId":"max-wunan"},"content":"    public void printAutoClearOn() {"},{"lineNumber":387,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Great! Your event happens one month ago will be auto-cleared from the next time you open \""},{"lineNumber":388,"author":{"gitId":"Lee-Juntong"},"content":"                + \"this app onwards.\");"},{"lineNumber":389,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":390,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":391,"author":{"gitId":"max-wunan"},"content":"    /**"},{"lineNumber":392,"author":{"gitId":"max-wunan"},"content":"     * Print the success message after the user successfully clear all events before a certain date."},{"lineNumber":393,"author":{"gitId":"max-wunan"},"content":"     */"},{"lineNumber":394,"author":{"gitId":"max-wunan"},"content":"    public void printClearBefore(LocalDate clearDate) {"},{"lineNumber":395,"author":{"gitId":"max-wunan"},"content":"        System.out.println(\"Great! You have cleared all events before \" + clearDate.toString());"},{"lineNumber":396,"author":{"gitId":"max-wunan"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"max-wunan"},"content":""},{"lineNumber":398,"author":{"gitId":"Lee-Juntong"},"content":"    public void printFassLocations() {"},{"lineNumber":399,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Locations exist at FASS are: \\n\""},{"lineNumber":400,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/AS1~8 \\n\""},{"lineNumber":401,"author":{"gitId":"Lee-Juntong"},"content":"                + \"L/LT8~15\""},{"lineNumber":402,"author":{"gitId":"Lee-Juntong"},"content":"        );"},{"lineNumber":403,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":404,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":405,"author":{"gitId":"Lee-Juntong"},"content":"    public void printSdeLocations() {"},{"lineNumber":406,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Locations exist at SDE are: \\n\""},{"lineNumber":407,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/SDE1~4 \\n\""},{"lineNumber":408,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/CELC\""},{"lineNumber":409,"author":{"gitId":"Lee-Juntong"},"content":"        );"},{"lineNumber":410,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":411,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":412,"author":{"gitId":"Lee-Juntong"},"content":"    public void printFosLocations() {"},{"lineNumber":413,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Locations exist at FOS are: \\n\""},{"lineNumber":414,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/S1~17 \\n\""},{"lineNumber":415,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/MD1~11 \\n\""},{"lineNumber":416,"author":{"gitId":"Lee-Juntong"},"content":"                + \"L/LT20~34\""},{"lineNumber":417,"author":{"gitId":"Lee-Juntong"},"content":"        );"},{"lineNumber":418,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":419,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":420,"author":{"gitId":"Lee-Juntong"},"content":"    public void printFoeLocations() {"},{"lineNumber":421,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Locations exist at FOE are: \\n\""},{"lineNumber":422,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/E1~E6 \\n\""},{"lineNumber":423,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/EA \\n\""},{"lineNumber":424,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/E1A \\n\""},{"lineNumber":425,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/E2A \\n\""},{"lineNumber":426,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/E3A \\n\""},{"lineNumber":427,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/E4A \\n\""},{"lineNumber":428,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/EW1 \\n\""},{"lineNumber":429,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/EW2 \\n\""},{"lineNumber":430,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/IT \\n\""},{"lineNumber":431,"author":{"gitId":"Lee-Juntong"},"content":"                + \"L/LT1~7 \\n\""},{"lineNumber":432,"author":{"gitId":"Lee-Juntong"},"content":"                + \"L/LT7A\""},{"lineNumber":433,"author":{"gitId":"Lee-Juntong"},"content":"        );"},{"lineNumber":434,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":435,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":436,"author":{"gitId":"Lee-Juntong"},"content":"    public void printHostelLocations() {"},{"lineNumber":437,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Hostels in NUS are: \\n\""},{"lineNumber":438,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Raffles Hall \\n\""},{"lineNumber":439,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Kent Ridge Hall \\n\""},{"lineNumber":440,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/King Edward VII Hall \\n\""},{"lineNumber":441,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Sheares Hall \\n\""},{"lineNumber":442,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Temasek Hall \\n\""},{"lineNumber":443,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Eusoff Hall \\n\""},{"lineNumber":444,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Cinnamon College \\n\""},{"lineNumber":445,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/College of Alice \u0026 Peter Tan \\n\""},{"lineNumber":446,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Residential College 4 \\n\""},{"lineNumber":447,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Ridge View Residential College \\n\""},{"lineNumber":448,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Tembusu College \\n\""},{"lineNumber":449,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Kuok Foundation House \\n\""},{"lineNumber":450,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/Prince George’s Park \\n\""},{"lineNumber":451,"author":{"gitId":"Lee-Juntong"},"content":"                + \"H/UTown Residence\""},{"lineNumber":452,"author":{"gitId":"Lee-Juntong"},"content":"        );"},{"lineNumber":453,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":455,"author":{"gitId":"Lee-Juntong"},"content":"    public void printSocAndBizLocations() {"},{"lineNumber":456,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Locations exist at SOC or BIZ are: \\n\""},{"lineNumber":457,"author":{"gitId":"Lee-Juntong"},"content":"                + \"L/LT16~LT19 \\n\""},{"lineNumber":458,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/COM1 \\n\""},{"lineNumber":459,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/COM2 \\n\""},{"lineNumber":460,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/BIZ1 \\n\""},{"lineNumber":461,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/BIZ2 \\n\""},{"lineNumber":462,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/Shaw Foundation Alumni House \\n\""},{"lineNumber":463,"author":{"gitId":"Lee-Juntong"},"content":"                + \"BLK/I Cube\");"},{"lineNumber":464,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":465,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":466,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":467,"author":{"gitId":"Lee-Juntong"},"content":"    /**"},{"lineNumber":468,"author":{"gitId":"Lee-Juntong"},"content":"     * Print the success message after the user input autoClear off."},{"lineNumber":469,"author":{"gitId":"Lee-Juntong"},"content":"     */"},{"lineNumber":470,"author":{"gitId":"Lee-Juntong"},"content":"    public void printAutoClearOff() {"},{"lineNumber":471,"author":{"gitId":"Lee-Juntong"},"content":"        System.out.println(\"Great! Your event happens one month ago will not be auto-cleared now.\");"},{"lineNumber":472,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":473,"author":{"gitId":"Lee-Juntong"},"content":"}"},{"lineNumber":474,"author":{"gitId":"Lee-Juntong"},"content":""}],"authorContributionMap":{"xuche123":32,"madbeez":7,"max-wunan":36,"Lee-Juntong":373,"jiaaaqi":26}},{"path":"src/main/java/usercommunication/UserInfo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package usercommunication;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":" * Represents the personal information about the user."},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"public class UserInfo {"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"    protected String name \u003d \"\";"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"    protected UserType type \u003d UserType.UNKNOWN;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"    protected boolean isAutoClear \u003d false;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"    public boolean isAutoClear() {"},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":"        return isAutoClear;"},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    public void setAutoClear(boolean isAutoClear) {"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"        this.isAutoClear \u003d isAutoClear;"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"    public void setName(String name) {"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"        this.name \u003d name;"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    public void setType(String userType) {"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"        if (userType.equalsIgnoreCase(\"PROFESSOR\")) {"},{"lineNumber":25,"author":{"gitId":"Lee-Juntong"},"content":"            this.type \u003d UserType.PROFESSOR;"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"        } else if (userType.equalsIgnoreCase(\"STUDENT\")) {"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"            this.type \u003d UserType.STUDENT;"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"    public String getName() {"},{"lineNumber":32,"author":{"gitId":"Lee-Juntong"},"content":"        return name;"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"    public UserInfo() {"},{"lineNumber":36,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":38,"author":{"gitId":"Lee-Juntong"},"content":"    public UserInfo(String name, String type, boolean isAutoClear) {"},{"lineNumber":39,"author":{"gitId":"Lee-Juntong"},"content":"        this.name \u003d name;"},{"lineNumber":40,"author":{"gitId":"Lee-Juntong"},"content":"        if (type.equalsIgnoreCase(\"PROFESSOR\")) {"},{"lineNumber":41,"author":{"gitId":"Lee-Juntong"},"content":"            this.type \u003d UserType.PROFESSOR;"},{"lineNumber":42,"author":{"gitId":"Lee-Juntong"},"content":"        } else if (type.equalsIgnoreCase(\"STUDENT\")) {"},{"lineNumber":43,"author":{"gitId":"Lee-Juntong"},"content":"            this.type \u003d UserType.STUDENT;"},{"lineNumber":44,"author":{"gitId":"Lee-Juntong"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Lee-Juntong"},"content":"        this.isAutoClear \u003d isAutoClear;"},{"lineNumber":46,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":48,"author":{"gitId":"Lee-Juntong"},"content":"    public String fileString() {"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"        return name + \"//\" + type + \"//\" + (isAutoClear ? 1 : 0);"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":51}},{"path":"src/main/java/usercommunication/UserType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package usercommunication;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"public enum UserType {"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"    PROFESSOR,"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"    STUDENT,"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"    UNKNOWN"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"Lee-Juntong":7}},{"path":"src/test/java/command/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":3,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyEventException;"},{"lineNumber":4,"author":{"gitId":"Lee-Juntong"},"content":"import exception.EmptyEventIndexException;"},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoEventLocationException;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoEventLocationMarkerException;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import exception.NoEventTimeMarkerException;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"Lee-Juntong"},"content":"import parser.Parser;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":12,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":13,"author":{"gitId":"Lee-Juntong"},"content":"class AddCommandTest {"},{"lineNumber":14,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"    void execute_NoDescriptionGiven_EmptyEventException() {"},{"lineNumber":17,"author":{"gitId":"Lee-Juntong"},"content":"        Assertions.assertThrows(EmptyEventException.class, () -\u003e {"},{"lineNumber":18,"author":{"gitId":"xuche123"},"content":"            Command d \u003d Parser.parse(\"class\",  null, 0);"},{"lineNumber":19,"author":{"gitId":"Lee-Juntong"},"content":"        });"},{"lineNumber":20,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"    void execute_NoTimeMarkerGiven_NoEventTimeMarkerException() {"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"        Assertions.assertThrows(NoEventTimeMarkerException.class, () -\u003e {"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":"            Command d \u003d Parser.parse(\"class something\",  null,0);"},{"lineNumber":26,"author":{"gitId":"Lee-Juntong"},"content":"        });"},{"lineNumber":27,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":29,"author":{"gitId":"Lee-Juntong"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"Lee-Juntong"},"content":"    void execute_NoLocationMarkerGiven_NoEventLocationException() {"},{"lineNumber":31,"author":{"gitId":"Lee-Juntong"},"content":"        Assertions.assertThrows(NoEventLocationException.class, () -\u003e {"},{"lineNumber":32,"author":{"gitId":"xuche123"},"content":"            Command d \u003d Parser.parse(\"class something /t 2020-02-02 20:00\",  null,0);"},{"lineNumber":33,"author":{"gitId":"Lee-Juntong"},"content":"        });"},{"lineNumber":34,"author":{"gitId":"Lee-Juntong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Lee-Juntong"},"content":"}"}],"authorContributionMap":{"xuche123":3,"Lee-Juntong":32}},{"path":"src/test/java/command/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"import exception.DeleteException;"},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":"import exception.DeleteNumberFormatException;"},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":"import exception.UndefinedEventException;"},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"import parser.Parser;"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"public class DeleteCommandTest {"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"madbeez"},"content":"    void execute_InvalidIndexGiven_DeleteNumberFormatException() {"},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":"        Assertions.assertThrows(DeleteNumberFormatException.class,() -\u003e {"},{"lineNumber":17,"author":{"gitId":"xuche123"},"content":"            Command c \u003d Parser.parse(\"delete f\", null,0);"},{"lineNumber":18,"author":{"gitId":"madbeez"},"content":"        });"},{"lineNumber":19,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"xuche123":1,"madbeez":19}},{"path":"src/test/java/command/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"import event.Assignment;"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"import event.Class;"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"import event.PersonalEvent;"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"import event.SelfStudy;"},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"import eventlist.EventList;"},{"lineNumber":8,"author":{"gitId":"Lee-Juntong"},"content":"import exception.CreatingFileException;"},{"lineNumber":9,"author":{"gitId":"Lee-Juntong"},"content":"import exception.DataFileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"xuche123"},"content":"import exception.EmptyEventIndexException;"},{"lineNumber":11,"author":{"gitId":"Lee-Juntong"},"content":"import exception.UndefinedEventException;"},{"lineNumber":12,"author":{"gitId":"xuche123"},"content":"import exception.WrongEditFormatException;"},{"lineNumber":13,"author":{"gitId":"xuche123"},"content":"import location.Location;"},{"lineNumber":14,"author":{"gitId":"xuche123"},"content":"import location.OnlineLocation;"},{"lineNumber":15,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.BusStopList;"},{"lineNumber":16,"author":{"gitId":"Lee-Juntong"},"content":"import locationlist.LocationList;"},{"lineNumber":17,"author":{"gitId":"xuche123"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":18,"author":{"gitId":"xuche123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":20,"author":{"gitId":"xuche123"},"content":"import exception.NuScheduleException;"},{"lineNumber":21,"author":{"gitId":"xuche123"},"content":"import parser.Parser;"},{"lineNumber":22,"author":{"gitId":"Lee-Juntong"},"content":"import storage.Storage;"},{"lineNumber":23,"author":{"gitId":"Lee-Juntong"},"content":"import ui.UI;"},{"lineNumber":24,"author":{"gitId":"Lee-Juntong"},"content":"import usercommunication.UserInfo;"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":26,"author":{"gitId":"xuche123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":27,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":28,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":29,"author":{"gitId":"xuche123"},"content":"class EditCommandTest {"},{"lineNumber":30,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":31,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"xuche123"},"content":"    void execute_NoIndexSpecified_emptyEventIndexException() throws NuScheduleException {"},{"lineNumber":33,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":34,"author":{"gitId":"xuche123"},"content":"        Assertions.assertThrows(EmptyEventIndexException.class, () -\u003e {"},{"lineNumber":35,"author":{"gitId":"xuche123"},"content":"            Command d \u003d Parser.parse(\"edit\", null, 0);"},{"lineNumber":36,"author":{"gitId":"xuche123"},"content":"        });"},{"lineNumber":37,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":38,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":40,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"xuche123"},"content":"    void execute_InputIsNotInteger_WrongEditFormatException() {"},{"lineNumber":42,"author":{"gitId":"xuche123"},"content":"        Assertions.assertThrows(WrongEditFormatException.class, () -\u003e {"},{"lineNumber":43,"author":{"gitId":"xuche123"},"content":"            Command c \u003d Parser.parse(\"edit c\", null, 0);"},{"lineNumber":44,"author":{"gitId":"xuche123"},"content":"        });"},{"lineNumber":45,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":47,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":48,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Lee-Juntong"},"content":"    void execute_IndexOutOfBounds_UndefinedEventException() throws CreatingFileException, DataFileNotFoundException {"},{"lineNumber":50,"author":{"gitId":"Lee-Juntong"},"content":"        Storage storage \u003d new Storage(\"data/events.txt\", \"data/UserInfo.txt\");"},{"lineNumber":51,"author":{"gitId":"Lee-Juntong"},"content":"        LocationList locations \u003d new LocationList();"},{"lineNumber":52,"author":{"gitId":"Lee-Juntong"},"content":"        storage.loadLocationData(locations.getLocationList());"},{"lineNumber":53,"author":{"gitId":"Lee-Juntong"},"content":"        Assertions.assertThrows(UndefinedEventException.class, () -\u003e {"},{"lineNumber":54,"author":{"gitId":"xuche123"},"content":"            Parser.parse(\"edit 1\", locations, 0)"},{"lineNumber":55,"author":{"gitId":"Lee-Juntong"},"content":"                    .execute(new EventList(), new LocationList(), new BusStopList(), new UI(), storage, new UserInfo());"},{"lineNumber":56,"author":{"gitId":"xuche123"},"content":"        });"},{"lineNumber":57,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":59,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"xuche123"},"content":"    void execute_ChangeDescription_DescriptionChanged() throws NuScheduleException {"},{"lineNumber":61,"author":{"gitId":"xuche123"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":62,"author":{"gitId":"xuche123"},"content":"        Location location \u003d new Location(\"location\");"},{"lineNumber":63,"author":{"gitId":"xuche123"},"content":"        LocalDateTime by \u003d LocalDateTime.parse(\"2020-02-02T20:00\");"},{"lineNumber":64,"author":{"gitId":"xuche123"},"content":"        event.Event existing \u003d new Assignment(\"existing\", location, by);"},{"lineNumber":65,"author":{"gitId":"xuche123"},"content":"        events.addEvent(existing);"},{"lineNumber":66,"author":{"gitId":"xuche123"},"content":"        String[] editInformation \u003d {\"\", \"something\", \"\", \"\", \"\"};"},{"lineNumber":67,"author":{"gitId":"xuche123"},"content":"        LocalDateTime[] startEnd \u003d new LocalDateTime[2];"},{"lineNumber":68,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":69,"author":{"gitId":"xuche123"},"content":"        Command c \u003d new EditCommand(0, editInformation, startEnd, null, null);"},{"lineNumber":70,"author":{"gitId":"xuche123"},"content":"        Storage storage \u003d new Storage(\"data/events.txt\", \"data/UserInfo.txt\");"},{"lineNumber":71,"author":{"gitId":"Lee-Juntong"},"content":"        c.execute(events, new LocationList(), new BusStopList(), new UI(), storage, new UserInfo());"},{"lineNumber":72,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(\"something\", events.get(0).getDescription());"},{"lineNumber":73,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":75,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"xuche123"},"content":"    void execute_ChangeType_EventTypeChanged() throws NuScheduleException {"},{"lineNumber":77,"author":{"gitId":"xuche123"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":78,"author":{"gitId":"xuche123"},"content":"        Location location \u003d new Location(\"location\");"},{"lineNumber":79,"author":{"gitId":"xuche123"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-02-02T20:00\");"},{"lineNumber":80,"author":{"gitId":"xuche123"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-02-02T21:00\");"},{"lineNumber":81,"author":{"gitId":"xuche123"},"content":"        event.Event existing \u003d new Class(\"existing\", location, start, end);"},{"lineNumber":82,"author":{"gitId":"xuche123"},"content":"        events.addEvent(existing);"},{"lineNumber":83,"author":{"gitId":"xuche123"},"content":"        String[] editInformation \u003d {\"personalEvent\", \"\", \"\", \"\", \"\"};"},{"lineNumber":84,"author":{"gitId":"xuche123"},"content":"        LocalDateTime[] startEnd \u003d new LocalDateTime[2];"},{"lineNumber":85,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":86,"author":{"gitId":"xuche123"},"content":"        Command c \u003d new EditCommand(0, editInformation, startEnd, null, null);"},{"lineNumber":87,"author":{"gitId":"xuche123"},"content":"        Storage storage \u003d new Storage(\"data/events.txt\", \"data/UserInfo.txt\");"},{"lineNumber":88,"author":{"gitId":"Lee-Juntong"},"content":"        c.execute(events, new LocationList(), new BusStopList(), new UI(), storage, new UserInfo());"},{"lineNumber":89,"author":{"gitId":"xuche123"},"content":"        Assertions.assertTrue(events.get(0) instanceof PersonalEvent);"},{"lineNumber":90,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":91,"author":{"gitId":"xuche123"},"content":"        editInformation[0] \u003d \"class\";"},{"lineNumber":92,"author":{"gitId":"xuche123"},"content":"        Command d \u003d new EditCommand(0, editInformation, startEnd, null, null);"},{"lineNumber":93,"author":{"gitId":"Lee-Juntong"},"content":"        d.execute(events, new LocationList(), new BusStopList(), new UI(), storage, new UserInfo());"},{"lineNumber":94,"author":{"gitId":"xuche123"},"content":"        Assertions.assertTrue(events.get(0) instanceof Class);"},{"lineNumber":95,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":96,"author":{"gitId":"xuche123"},"content":"        editInformation[0] \u003d \"selfStudy\";"},{"lineNumber":97,"author":{"gitId":"xuche123"},"content":"        Command e \u003d new EditCommand(0, editInformation, startEnd, null, null);"},{"lineNumber":98,"author":{"gitId":"Lee-Juntong"},"content":"        e.execute(events, new LocationList(), new BusStopList(), new UI(), storage, new UserInfo());"},{"lineNumber":99,"author":{"gitId":"xuche123"},"content":"        Assertions.assertTrue(events.get(0) instanceof SelfStudy);"},{"lineNumber":100,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":101,"author":{"gitId":"xuche123"},"content":"        editInformation[0] \u003d \"assignment\";"},{"lineNumber":102,"author":{"gitId":"xuche123"},"content":"        Command f \u003d new EditCommand(0, editInformation, startEnd, null, null);"},{"lineNumber":103,"author":{"gitId":"Lee-Juntong"},"content":"        f.execute(events, new LocationList(), new BusStopList(), new UI(), storage, new UserInfo());"},{"lineNumber":104,"author":{"gitId":"xuche123"},"content":"        Assertions.assertTrue(events.get(0) instanceof Assignment);"},{"lineNumber":105,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":107,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"xuche123"},"content":"    void editEvent_changeLocation_LocationChanged() throws NuScheduleException {"},{"lineNumber":109,"author":{"gitId":"xuche123"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":110,"author":{"gitId":"xuche123"},"content":"        Location location \u003d new Location(\"location\");"},{"lineNumber":111,"author":{"gitId":"xuche123"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-02-02T20:00\");"},{"lineNumber":112,"author":{"gitId":"xuche123"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-02-02T21:00\");"},{"lineNumber":113,"author":{"gitId":"xuche123"},"content":"        event.Event existing \u003d new Class(\"existing\", location, start, end);"},{"lineNumber":114,"author":{"gitId":"xuche123"},"content":"        events.addEvent(existing);"},{"lineNumber":115,"author":{"gitId":"xuche123"},"content":"        String[] editInformation \u003d {\"\", \"\", \"\", \"\", \"\"};"},{"lineNumber":116,"author":{"gitId":"xuche123"},"content":"        LocalDateTime[] startEnd \u003d new LocalDateTime[2];"},{"lineNumber":117,"author":{"gitId":"xuche123"},"content":"        Location location1 \u003d new Location(\"location1\");"},{"lineNumber":118,"author":{"gitId":"xuche123"},"content":"        OnlineLocation onlineLocation \u003d new OnlineLocation(\"zoom.com\");"},{"lineNumber":119,"author":{"gitId":"xuche123"},"content":"        events.editEvent(0, editInformation, startEnd, location1, null);"},{"lineNumber":120,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(events.get(0).getLocation().getName(), \"location1\");"},{"lineNumber":121,"author":{"gitId":"xuche123"},"content":"        events.editEvent(0, editInformation, startEnd, null, onlineLocation);"},{"lineNumber":122,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(events.get(0).getLink().getLink(), \"zoom.com\");"},{"lineNumber":123,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":125,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"xuche123"},"content":"    void editEvent_changeTime_StartEndTimeChanged() throws NuScheduleException {"},{"lineNumber":127,"author":{"gitId":"xuche123"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":128,"author":{"gitId":"xuche123"},"content":"        Location location \u003d new Location(\"location\");"},{"lineNumber":129,"author":{"gitId":"xuche123"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-02-02T20:00\");"},{"lineNumber":130,"author":{"gitId":"xuche123"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-02-02T21:00\");"},{"lineNumber":131,"author":{"gitId":"xuche123"},"content":"        event.Event existing \u003d new PersonalEvent(\"existing\", location, start, end);"},{"lineNumber":132,"author":{"gitId":"xuche123"},"content":"        events.addEvent(existing);"},{"lineNumber":133,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":134,"author":{"gitId":"xuche123"},"content":"        start \u003d LocalDateTime.parse(\"2020-02-02T19:00\");"},{"lineNumber":135,"author":{"gitId":"xuche123"},"content":"        end \u003d LocalDateTime.parse(\"2020-02-02T22:00\");"},{"lineNumber":136,"author":{"gitId":"xuche123"},"content":"        LocalDateTime[] startEnd \u003d new LocalDateTime[2];"},{"lineNumber":137,"author":{"gitId":"xuche123"},"content":"        startEnd[0] \u003d start;"},{"lineNumber":138,"author":{"gitId":"xuche123"},"content":"        startEnd[1] \u003d end;"},{"lineNumber":139,"author":{"gitId":"xuche123"},"content":"        String[] editInformation \u003d {\"\", \"\", \"\", \"\", \"\"};"},{"lineNumber":140,"author":{"gitId":"xuche123"},"content":"        events.editEvent(0, editInformation, startEnd, null, null);"},{"lineNumber":141,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(events.get(0).getStartDateTime(), start);"},{"lineNumber":142,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(events.get(0).getEndDateTime(), end);"},{"lineNumber":143,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":144,"author":{"gitId":"xuche123"},"content":"        editInformation[4] \u003d \"nil\";"},{"lineNumber":145,"author":{"gitId":"xuche123"},"content":"        Command c \u003d new EditCommand(0, editInformation, startEnd, null, null);"},{"lineNumber":146,"author":{"gitId":"xuche123"},"content":"        Storage storage \u003d new Storage(\"data/events.txt\", \"data/UserInfo.txt\");"},{"lineNumber":147,"author":{"gitId":"Lee-Juntong"},"content":"        c.execute(events, new LocationList(), new BusStopList(), new UI(), storage, new UserInfo());"},{"lineNumber":148,"author":{"gitId":"xuche123"},"content":"        // end set to null, getEndDate will get start if end is null"},{"lineNumber":149,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(start, events.get(0).getEndDateTime());"},{"lineNumber":150,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":130,"Lee-Juntong":21}},{"path":"src/test/java/command/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"madbeez"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":3,"author":{"gitId":"madbeez"},"content":"import exception.DateFormatException;"},{"lineNumber":4,"author":{"gitId":"madbeez"},"content":"import exception.EmptyFindDateException;"},{"lineNumber":5,"author":{"gitId":"madbeez"},"content":"import exception.EmptyFindException;"},{"lineNumber":6,"author":{"gitId":"madbeez"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":7,"author":{"gitId":"madbeez"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"madbeez"},"content":"import parser.Parser;"},{"lineNumber":9,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":10,"author":{"gitId":"madbeez"},"content":"public class FindCommandTest {"},{"lineNumber":11,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":12,"author":{"gitId":"madbeez"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"madbeez"},"content":"    void execute_NoDescriptionGiven_EmptyEventException() {"},{"lineNumber":14,"author":{"gitId":"madbeez"},"content":"        Assertions.assertThrows(EmptyFindException.class, () -\u003e {"},{"lineNumber":15,"author":{"gitId":"xuche123"},"content":"            Command c \u003d Parser.parse(\"find\",  null,0);"},{"lineNumber":16,"author":{"gitId":"madbeez"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":19,"author":{"gitId":"madbeez"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"madbeez"},"content":"    void execute_NoDateGiven_EmptyFindDateException() {"},{"lineNumber":21,"author":{"gitId":"madbeez"},"content":"        Assertions.assertThrows(EmptyFindDateException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"xuche123"},"content":"            Command c \u003d Parser.parse(\"date\",  null,0);"},{"lineNumber":23,"author":{"gitId":"madbeez"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"madbeez"},"content":""},{"lineNumber":26,"author":{"gitId":"madbeez"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"madbeez"},"content":"    void execute_InvalidTimeDate_DateFormatException() {"},{"lineNumber":28,"author":{"gitId":"madbeez"},"content":"        Assertions.assertThrows(DateFormatException.class, () -\u003e {"},{"lineNumber":29,"author":{"gitId":"xuche123"},"content":"            Command c \u003d Parser.parse(\"date 2100\",  null,0);"},{"lineNumber":30,"author":{"gitId":"madbeez"},"content":"        });"},{"lineNumber":31,"author":{"gitId":"madbeez"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"madbeez"},"content":"}"}],"authorContributionMap":{"xuche123":3,"madbeez":29}},{"path":"src/test/java/command/LocateCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"import exception.EmptyLocationException;"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"import exception.InvalidEventIndexException;"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"import exception.InvalidLocationException;"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"import locationlist.LocationList;"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"import parser.Parser;"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"public class LocateCommandTest {"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"    private LocationList locations \u003d new LocationList();"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"    void execute_EmptyLocation_EmptyLocationException() {"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"        Assertions.assertThrows(EmptyLocationException.class, () -\u003e {"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"            Command d \u003d Parser.parse(\"locate\", null, 0);"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"        });"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":21,"author":{"gitId":"jiaaaqi"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"jiaaaqi"},"content":"    void execute_InvalidEventIndex_InvalidEventIndexException() {"},{"lineNumber":23,"author":{"gitId":"jiaaaqi"},"content":"        Assertions.assertThrows(InvalidEventIndexException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"jiaaaqi"},"content":"            Command d \u003d Parser.parse(\"locate -1\", locations, 0);"},{"lineNumber":25,"author":{"gitId":"jiaaaqi"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jiaaaqi"},"content":""},{"lineNumber":28,"author":{"gitId":"jiaaaqi"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"jiaaaqi"},"content":"    void execute_LocationNotFound_InvalidLocationException() {"},{"lineNumber":30,"author":{"gitId":"jiaaaqi"},"content":"        Assertions.assertThrows(InvalidLocationException.class, () -\u003e {"},{"lineNumber":31,"author":{"gitId":"jiaaaqi"},"content":"            Command d \u003d Parser.parse(\"locate home\", locations, 0);"},{"lineNumber":32,"author":{"gitId":"jiaaaqi"},"content":"        });"},{"lineNumber":33,"author":{"gitId":"jiaaaqi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jiaaaqi"},"content":"}"}],"authorContributionMap":{"jiaaaqi":34}},{"path":"src/test/java/command/SortCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xuche123"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":3,"author":{"gitId":"xuche123"},"content":"import event.Assignment;"},{"lineNumber":4,"author":{"gitId":"xuche123"},"content":"import event.Class;"},{"lineNumber":5,"author":{"gitId":"xuche123"},"content":"import eventlist.EventList;"},{"lineNumber":6,"author":{"gitId":"xuche123"},"content":"import exception.InvalidSortCriteriaException;"},{"lineNumber":7,"author":{"gitId":"xuche123"},"content":"import exception.NoSortCriteriaException;"},{"lineNumber":8,"author":{"gitId":"xuche123"},"content":"import exception.NuScheduleException;"},{"lineNumber":9,"author":{"gitId":"xuche123"},"content":"import location.Location;"},{"lineNumber":10,"author":{"gitId":"xuche123"},"content":"import location.OnlineLocation;"},{"lineNumber":11,"author":{"gitId":"xuche123"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":12,"author":{"gitId":"xuche123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"xuche123"},"content":"import parser.Parser;"},{"lineNumber":14,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":15,"author":{"gitId":"xuche123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":16,"author":{"gitId":"xuche123"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":18,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":19,"author":{"gitId":"xuche123"},"content":"class SortCommandTest {"},{"lineNumber":20,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":21,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"xuche123"},"content":"    void execute_NoSortCriteria_NoSortCriteriaException() {"},{"lineNumber":23,"author":{"gitId":"xuche123"},"content":"        Assertions.assertThrows(NoSortCriteriaException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"xuche123"},"content":"            Command d \u003d Parser.parse(\"sort\",  null,0);"},{"lineNumber":25,"author":{"gitId":"xuche123"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":28,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"xuche123"},"content":"    void execute_InvalidSortCriteria_InvalidSortCriteriaException() {"},{"lineNumber":30,"author":{"gitId":"xuche123"},"content":"        Assertions.assertThrows(InvalidSortCriteriaException.class, () -\u003e {"},{"lineNumber":31,"author":{"gitId":"xuche123"},"content":"            Command d \u003d Parser.parse(\"sort something\",  null,0);"},{"lineNumber":32,"author":{"gitId":"xuche123"},"content":"        });"},{"lineNumber":33,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":35,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"xuche123"},"content":"    void execute_descriptionCriteriaGiven_SortByDescription() throws NuScheduleException {"},{"lineNumber":37,"author":{"gitId":"xuche123"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":38,"author":{"gitId":"xuche123"},"content":"        Location location \u003d new Location(\"location\");"},{"lineNumber":39,"author":{"gitId":"xuche123"},"content":"        String[] descriptions \u003d {\"eeeee\", \"ddddd\", \"ccccc\", \"bbbbb\", \"aaaaa\"};"},{"lineNumber":40,"author":{"gitId":"xuche123"},"content":"        LocalDateTime by \u003d LocalDateTime.parse(\"2020-02-02T20:00\");"},{"lineNumber":41,"author":{"gitId":"xuche123"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":42,"author":{"gitId":"xuche123"},"content":"            events.addEvent(new Assignment(descriptions[i], location, by));"},{"lineNumber":43,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"xuche123"},"content":"        events.sortEvent(\"description\");"},{"lineNumber":45,"author":{"gitId":"xuche123"},"content":"        Arrays.sort(descriptions);"},{"lineNumber":46,"author":{"gitId":"xuche123"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":47,"author":{"gitId":"xuche123"},"content":"            Assertions.assertEquals(descriptions[i], events.get(i).getDescription());"},{"lineNumber":48,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":51,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"xuche123"},"content":"    void execute_timeCriteriaGiven_SortByEndTime() throws NuScheduleException {"},{"lineNumber":53,"author":{"gitId":"xuche123"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":54,"author":{"gitId":"xuche123"},"content":"        Location location \u003d new Location(\"location\");"},{"lineNumber":55,"author":{"gitId":"xuche123"},"content":"        LocalDateTime[] bys \u003d {LocalDateTime.parse(\"2020-02-02T20:00\"), LocalDateTime.parse(\"2020-02-02T19:00\"),"},{"lineNumber":56,"author":{"gitId":"xuche123"},"content":"                LocalDateTime.parse(\"2020-02-02T18:00\")};"},{"lineNumber":57,"author":{"gitId":"xuche123"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":58,"author":{"gitId":"xuche123"},"content":"            events.addEvent(new Assignment(\"description\", location, bys[i]));"},{"lineNumber":59,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"xuche123"},"content":"        events.sortEvent(\"time\");"},{"lineNumber":61,"author":{"gitId":"xuche123"},"content":"        Arrays.sort(bys);"},{"lineNumber":62,"author":{"gitId":"xuche123"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":63,"author":{"gitId":"xuche123"},"content":"            Assertions.assertEquals(bys[i], events.get(i).getStartDateTime());"},{"lineNumber":64,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"xuche123"},"content":""},{"lineNumber":67,"author":{"gitId":"xuche123"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"xuche123"},"content":"    void execute_locationCriteriaGiven_SortByLocation() throws NuScheduleException {"},{"lineNumber":69,"author":{"gitId":"xuche123"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":70,"author":{"gitId":"xuche123"},"content":"        Location[] locations \u003d {new Location(\"cccc\"), new Location(\"bbbb\"), new Location(\"aaaa\")};"},{"lineNumber":71,"author":{"gitId":"xuche123"},"content":"        OnlineLocation[] onlineLocation \u003d {new OnlineLocation(\"cccc.com\"), new OnlineLocation(\"bbbb.com\"),"},{"lineNumber":72,"author":{"gitId":"xuche123"},"content":"            new OnlineLocation(\"aaaa.com\")};"},{"lineNumber":73,"author":{"gitId":"xuche123"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-02-02T20:00\");"},{"lineNumber":74,"author":{"gitId":"xuche123"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-02-02T21:00\");"},{"lineNumber":75,"author":{"gitId":"xuche123"},"content":"        int j \u003d 0;"},{"lineNumber":76,"author":{"gitId":"xuche123"},"content":"        int k \u003d 0;"},{"lineNumber":77,"author":{"gitId":"xuche123"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":78,"author":{"gitId":"xuche123"},"content":"            if (i % 2 \u003d\u003d 0) {"},{"lineNumber":79,"author":{"gitId":"xuche123"},"content":"                events.addEvent(new Class(\"description\", locations[j], start, end));"},{"lineNumber":80,"author":{"gitId":"xuche123"},"content":"                j++;"},{"lineNumber":81,"author":{"gitId":"xuche123"},"content":"            } else {"},{"lineNumber":82,"author":{"gitId":"xuche123"},"content":"                events.addEvent(new Class(\"description\", onlineLocation[k], start, end));"},{"lineNumber":83,"author":{"gitId":"xuche123"},"content":"                k++;"},{"lineNumber":84,"author":{"gitId":"xuche123"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"xuche123"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"xuche123"},"content":"        events.sortEvent(\"location\");"},{"lineNumber":87,"author":{"gitId":"xuche123"},"content":"        // by locations will be sorted on top of online locations"},{"lineNumber":88,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(\"aaaa\", events.get(0).getLocation().getName());"},{"lineNumber":89,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(\"bbbb\", events.get(1).getLocation().getName());"},{"lineNumber":90,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(\"cccc\", events.get(2).getLocation().getName());"},{"lineNumber":91,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(\"aaaa.com\", events.get(3).getLink().getLink());"},{"lineNumber":92,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(\"bbbb.com\", events.get(4).getLink().getLink());"},{"lineNumber":93,"author":{"gitId":"xuche123"},"content":"        Assertions.assertEquals(\"cccc.com\", events.get(5).getLink().getLink());"},{"lineNumber":94,"author":{"gitId":"xuche123"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"xuche123"},"content":"}"}],"authorContributionMap":{"xuche123":95}},{"path":"src/test/java/test/NuScheduleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Lee-Juntong"},"content":"package test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Lee-Juntong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Lee-Juntong"},"content":""},{"lineNumber":7,"author":{"gitId":"Lee-Juntong"},"content":"class NuScheduleTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":8,"Lee-Juntong":4}},{"path":"text-ui-test/data/bus_stops.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"EA:B2,C,BTC2"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":"Raffles Hall:B2,C"},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"Information Technology:A2,B1,B2,D1"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"Opp YIH:A2,B1,B2,D1"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"NUS Museum:A2,BTC1,BTC2,C,D1,D2"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"YIH:A1,B1,BTC1,D1"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"CLB:A1,B1,BTC1,D1"}],"authorContributionMap":{"jiaaaqi":7}},{"path":"text-ui-test/data/locations.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"jiaaaqi"},"content":"BLK/EA/EA"},{"lineNumber":2,"author":{"gitId":"jiaaaqi"},"content":"BLK/EA/Information Technology"},{"lineNumber":3,"author":{"gitId":"jiaaaqi"},"content":"BLK/E1A/EA"},{"lineNumber":4,"author":{"gitId":"jiaaaqi"},"content":"BLK/EW1/EA,Information Technology"},{"lineNumber":5,"author":{"gitId":"jiaaaqi"},"content":"BLK/EW1A/EA"},{"lineNumber":6,"author":{"gitId":"jiaaaqi"},"content":"BLK/E2/EA"},{"lineNumber":7,"author":{"gitId":"jiaaaqi"},"content":"BLK/E3/EA,Raffles Hall"},{"lineNumber":8,"author":{"gitId":"jiaaaqi"},"content":"BLK/E3A/EA"},{"lineNumber":9,"author":{"gitId":"jiaaaqi"},"content":"BLK/E4/Information Technology"},{"lineNumber":10,"author":{"gitId":"jiaaaqi"},"content":"BLK/E4A/Opp YIH,YIH"},{"lineNumber":11,"author":{"gitId":"jiaaaqi"},"content":"BLK/E5/Information Technology"},{"lineNumber":12,"author":{"gitId":"jiaaaqi"},"content":"BLK/E5A/Raffles Hall"},{"lineNumber":13,"author":{"gitId":"jiaaaqi"},"content":"BLK/E6/Opp YIH,YIH"},{"lineNumber":14,"author":{"gitId":"jiaaaqi"},"content":"BLK/IT/Information Technology,CLB"},{"lineNumber":15,"author":{"gitId":"jiaaaqi"},"content":"H/Raffles Hall/Raffles Hall,NUS Museum"},{"lineNumber":16,"author":{"gitId":"jiaaaqi"},"content":"L/LT1/E2"},{"lineNumber":17,"author":{"gitId":"jiaaaqi"},"content":"L/LT2/E2"},{"lineNumber":18,"author":{"gitId":"jiaaaqi"},"content":"L/LT6/E4"},{"lineNumber":19,"author":{"gitId":"jiaaaqi"},"content":"L/LT7/EA"},{"lineNumber":20,"author":{"gitId":"jiaaaqi"},"content":"L/LT7A/EA"}],"authorContributionMap":{"jiaaaqi":20}}]
