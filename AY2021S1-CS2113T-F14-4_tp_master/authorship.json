[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/test/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/test/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Lee-Juntong": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    mainClassName \u003d \"NuSchedule\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    archiveBaseName \u003d \"NUSchedule\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "data/bus_stops.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "EA:B2,C,BTC2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Raffles Hall:B2,C"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Information Technology:A2,B1,B2,D1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Opp YIH:A2,B1,B2,D1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "NUS Museum:A2,BTC1,BTC2,C,D1,D2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "YIH:A1,B1,BTC1,D1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "CLB:A1,B1,BTC1,D1"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 7
    }
  },
  {
    "path": "data/events.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "A//0// a //2020-10-10T20:00"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 1
    }
  },
  {
    "path": "data/locations.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/EA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/Information Technology"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E1A/EA"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1/EA,Information Technology"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1A/EA"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E2/EA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3/EA,Raffles Hall"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3A/EA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4/Information Technology"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4A/Opp YIH,YIH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5/Information Technology"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5A/Raffles Hall"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E6/Opp YIH,YIH"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/IT/Information Technology,CLB"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "H/Raffles Hall/Raffles Hall,NUS Museum"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT1/E2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT2/E2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT6/E4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7/EA"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7A/EA"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 20
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wu Nan | [Github](https://github.com/max-wunan/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xu Che | [Github](https://github.com/xuche123) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Jiaqi | [Github](https://github.com/jiaaaqi) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brendan Wan | [Github](https://github.com/madbeez) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhuang Mengjin | [Github](https://github.com/Lee-Juntong) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 1,
      "madbeez": 1,
      "max-wunan": 1,
      "-": 4,
      "jiaaaqi": 1,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "# test"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "Lee-Juntong": 1
    }
  },
  {
    "path": "src/main/java/NuSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.CreatingFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.LoadingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  * Main entry-point for the NUSchedule application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NuSchedule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static BusStopList busStops;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static LocationList locations;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public NuSchedule(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        busStops \u003d new BusStopList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        locations \u003d new LocationList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //busStops.loadBusStopData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //locations.loadLocationData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (CreatingFileException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events \u003d new EventList(storage.loadEvents());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (NuScheduleException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events \u003d new EventList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        storage.loadBusStopData(busStops.getBusStopList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        storage.loadLocationData(locations.getLocationList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // ui.printBusStopList(busStops.getBusStopList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // ui.printLocationList(locations.getLocationList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printGreetingMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                c.execute(events, locations, busStops, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NuScheduleException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        new NuSchedule(\"data/events.txt\").run();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //todo add more files for different purposes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 1,
      "madbeez": 1,
      "Lee-Juntong": 63,
      "jiaaaqi": 12
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the command call when the user adds a new event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Sets the task to be added to the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param event The event to be added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public AddCommand(Event event){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Adds the appropriate type of event/task to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param events   the list of events."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locations the list of Locations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStops the list of BusStops"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) throws NuScheduleException{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        events.addEvent(event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        ui.printAddEventMessage(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        ui.printNumEvent(events.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(events.getEventList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 37,
      "jiaaaqi": 5,
      "Lee-Juntong": 1
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events  the list of Events."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NuScheduleException the exceptions can happen in this program,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                             to be handled based on the specific exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public abstract void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) throws NuScheduleException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 27,
      "jiaaaqi": 3
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuche123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuche123"
        },
        "content": " * Represents the command call when the user adds a new event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuche123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuche123"
        },
        "content": "public class EditCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public EditCommand(Event event, int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * Edits the corresponding event/task in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param events   the list of events."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) throws NuScheduleException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        events.editEvent(this.event, this.index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        ui.printEditEventMessage(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        ui.printNumEvent(events.getSize());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 33,
      "Lee-Juntong": 3
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user exits this program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark the status of the program, isExit, as true."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Also prints the exit message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locations the list of Locations"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStops the list of BusStops"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void execute(EventList tasks, LocationList locations, BusStopList busStops, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 24,
      "jiaaaqi": 5
    }
  },
  {
    "path": "src/main/java/command/PrintFullListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class PrintFullListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the list of Events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events  the list of Events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locations the list of Locations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStops the list of BusStops"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NuScheduleException the exceptions can happen in this function,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                             to be handled based on the specific exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) throws NuScheduleException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printEventList(events.getEventList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 22,
      "jiaaaqi": 5
    }
  },
  {
    "path": "src/main/java/command/PrintLocationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class PrintLocationCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Prints list of locations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param events  the list of Events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locations the list of Locations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStops the list of BusStops"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        ui.printLocationList(locations.getLocationList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 24
    }
  },
  {
    "path": "src/main/java/event/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Assignment Events."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Assignment extends Event {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this deadline to a string that is to be stored in a file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"A//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + by + \"//\" + location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public Assignment(String description, Location location, LocalDateTime by) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Assignment."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(by);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *         Example of the format: [C][✘]a  (by: Feb 20 2020 08:00)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[A]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH\u0027:\u0027mm\")) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 4,
      "Lee-Juntong": 45,
      "jiaaaqi": 1
    }
  },
  {
    "path": "src/main/java/event/Class.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Class events."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Class extends Event {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public Class(String description, Location location, LocalDateTime at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this Class to a string that is to be stored in a file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"C//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *         Example of the format: [C][✘]a."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"[C]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH\u0027:\u0027mm\")) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 10,
      "Lee-Juntong": 28,
      "jiaaaqi": 1
    }
  },
  {
    "path": "src/main/java/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the event objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains a String \u003c\\code\u003edescription\u003c\\code\u003e , which is the description of the event,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * and a boolean \u003c\\code\u003eisDone\u003c\\code\u003e, which is the status of the Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Provides methods to mark an event as done(either during user input or reading from file),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * get the value of \u003c\\code\u003eisDone\u003c\\code\u003e,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * convert the \u003c\\code\u003eevent\u003c\\code\u003e object to a string to be printed out or write to a file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected Location location;//to be implemented"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a Event\u0027s status as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract String fileString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the status of the Event as a icon."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return returns a tick if the Event is done, and returns a cross if the Event is not done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return (isDone ? \"Done\" : \"Not Done\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the common part for Event, Assignment, Class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the String variable of the description of this Event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the description of this Event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 73,
      "jiaaaqi": 4
    }
  },
  {
    "path": "src/main/java/event/PersonalEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Event Events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class PersonalEvent extends Event {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this event to a string that is to be stored in a file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"P//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(at);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public PersonalEvent(String description, Location location, LocalDateTime at) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *     Example of the format: [P][✘]a  (at: Feb 20 2020 08:00)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[P]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH\u0027:\u0027mm\")) + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 4,
      "Lee-Juntong": 47
    }
  },
  {
    "path": "src/main/java/eventlist/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package eventlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.DoneUndefinedEventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains the list of the events and provides ways to delete/add/mark as done events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Construct the events as an empty ArrayList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * When loading from the file, create the list as provided in the file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events provided by \u003ccode\u003eStorage::load()\u003c/code\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @see storage.Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public EventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param eventToBeAdded may be Assignment/Class/Personal Event based on the usage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void addEvent(Event eventToBeAdded) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.add(eventToBeAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a event as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventIndex the index of the event being done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                   //     * @throws DoneUndefinedEventException the event is not defined but"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                   // the user want to mark it as done"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void doneEvent(int eventIndex) throws DoneUndefinedEventException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events.get(eventIndex).markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DoneUndefinedEventException(eventIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public void editEvent(Event event, int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        events.set(index, event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Gives the access to the list of events."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the list to be printed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns how many events are in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the size of the ArrayList in the EventList object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Remove the event indicated by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void remove(int eventIndex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.remove(eventIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns the element at the specified position in this list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventIndex index of the event to return."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the event at the specified position in this list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event get(int eventIndex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events.get(eventIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the event list to find the events contain the information looking for by the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filterString the keyword that the user is looking for."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the events that satisfy the requirement."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e filterWith(String filterString) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDescription().contains(filterString))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredEventList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the event list to find the events happen on the date looking for by the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param date the date that the user is looking for."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the events that satisfy the requirement."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e filterDateWith(LocalDate date) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDate().isEqual(date))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredEventList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Clear the ArrayList events if it is not empty."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void clearEvents() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        events.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 4,
      "madbeez": 2,
      "max-wunan": 7,
      "Lee-Juntong": 119
    }
  },
  {
    "path": "src/main/java/exception/AssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to Assignment class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class AssignmentException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/ClassException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to Class class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class ClassException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/CreatingFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happen when the file is not created successfully."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class CreatingFileException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public CreatingFileException(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"The file \\\"\" + filePath + \"\\\" is not created\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 21
    }
  },
  {
    "path": "src/main/java/exception/DateFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find the tasks on a certain date"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * but the date is not given in the correct format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DateFormatException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * gives suggestion to the user on how to solve the error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You entered a date in a format that is not accepted by this function.\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"The format should be \\\"yyyy-MM-dd\\\"\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"For example, 2000-01-01\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 18
    }
  },
  {
    "path": "src/main/java/exception/DeleteException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing delete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class DeleteException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/DeleteNumberFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing delete to a task not labeled with an int."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteNumberFormatException extends DeleteException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please enter an integer after delete.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/DeleteUndefinedTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the the user trying to delete"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * some tasks that does not exist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteUndefinedTaskException extends DeleteException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private int label;//Task label of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DeleteUndefinedTaskException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Create an exception according to the input of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param label the label of the task that the user want to delete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DeleteUndefinedTaskException(int label) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! There isn\u0027t a task labeled \" + label;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 31
    }
  },
  {
    "path": "src/main/java/exception/DoneException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class DoneException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/DoneNumberFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing done to a task not labeled with an int."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneNumberFormatException extends DoneException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please enter an integer after done.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/DoneUndefinedEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the the user trying to done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * some tasks that does not exist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneUndefinedEventException extends DoneException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private int label;//Task label of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DoneUndefinedEventException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Create an exception according to the input of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param label the label of the task that the user want to mark as done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DoneUndefinedEventException(int label) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! There isn\u0027t a task labeled \" + label;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 31
    }
  },
  {
    "path": "src/main/java/exception/EmptyAssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyAssignmentException extends AssignmentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/EmptyClassException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyClassException extends ClassException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/EmptyDeleteException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types delete but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the task that should be deleted."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDeleteException extends DeleteException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the index of the task you want to delete.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyDoneException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types done but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the task that should be done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDoneException extends DoneException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the index of the task you have done.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the exception when no description is provided for the event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class EmptyEventException extends NuScheduleException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Your input is incomplete. Please enter an event description.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 15
    }
  },
  {
    "path": "src/main/java/exception/EmptyEventIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyEventIndexException extends NuScheduleException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please provide a valid index.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/EmptyFindDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types date but do not specify"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyFindDateException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the date you are looking for.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/EmptyFindException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types find but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the keyword."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyFindException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the keyword of the tasks you want to find.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyPersonalEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyPersonalEventException extends PersonalEventException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions happen when the user input invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class InvalidCommandException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/LoadingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the user edit the file in a wrong way."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class LoadingException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"You edited the file in a wrong format. Please check.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 1,
      "Lee-Juntong": 14
    }
  },
  {
    "path": "src/main/java/exception/NoClassTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create a class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without giving it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoClassTimeException extends ClassException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter a time for class.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoClassTimeMarkerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create a Class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without using \\at to give it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoClassTimeMarkerException extends ClassException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should mark the time for a class with \\\"/at\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoEventLocationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the exception when no location is provided when adding a new event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class NoEventLocationException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Please input a valid location.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 15
    }
  },
  {
    "path": "src/main/java/exception/NoEventTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the exception when no date/time is inputted as expected."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class NoEventTimeException extends NuScheduleException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Please input the date/time.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 15
    }
  },
  {
    "path": "src/main/java/exception/NoEventTimeMarkerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception where there is no time marker in the command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventTimeMarkerException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Please enter your command in the correct format.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 12,
      "Lee-Juntong": 3
    }
  },
  {
    "path": "src/main/java/exception/NoMatchingTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find a Task with a certain keyword, but such"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * task does not exist in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoMatchingTaskException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Sorry, there isn\u0027t such task in the list with the given keyword.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoPersonalEventTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without giving it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoPersonalEventTimeException extends PersonalEventException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter a time for event.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoPersonalEventTimeMakerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without using \\by to give it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoPersonalEventTimeMakerException extends PersonalEventException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should mark the time for an event with \\\"/at\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoTaskDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find a Task with a certain date, but such"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * task does not exist in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoTaskDateException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Sorry, there isn\u0027t such task in the list on the given date.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/NuScheduleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class NuScheduleException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract String getMessage();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 5
    }
  },
  {
    "path": "src/main/java/exception/PersonalEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to PersonalEvent class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class PersonalEventException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/TimeFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the date/time are entered incorrectly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class TimeFormatException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * gives suggestion to the user on how to solve the error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You entered the time in a format that is not accepted by this program.\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"The format should be \\\"yyyy-MM-dd HH:mm\\\"\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"For example, 2000-01-01 00:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 10,
      "Lee-Juntong": 8
    }
  },
  {
    "path": "src/main/java/exception/WritingFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the file is not correctly written."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WritingFileException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Something went wrong when writing to the file.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 1,
      "Lee-Juntong": 14
    }
  },
  {
    "path": "src/main/java/exception/WrongCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the exception when an invalid command is inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WrongCommandException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 12,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/location/Building.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents Building objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains an array of Strings nearestBusStops which represents the bus stops nearby."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Building extends Location{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String[] nearestBusStops;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Building(String name, String[] nearestBusStops) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.nearestBusStops \u003d nearestBusStops;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.type \u003d locationType.BUILDING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Building): \" + name + \"\\nNearest bus stop(s): \" + printNearestBusStops();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String printNearestBusStops() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String str \u003d Arrays.toString(nearestBusStops);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        str \u003d str.substring(1, str.indexOf(\"]\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 29,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/location/BusStop.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents bus stop objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * Contains String name which is the name of the bus stop and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * an array of Strings which is the list of buses available at the bus stop."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class BusStop {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String[] buses;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public BusStop(String name, String[] buses) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.buses \u003d buses;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return name + \"\\nBuses Available: \" + Arrays.toString(buses);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 27,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/location/Hostel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents Hostel objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains an array of Strings nearestBusStops which represents the bus stops nearby."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Hostel extends Location{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    String[] nearestBusStops;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Hostel(String name, String[] nearestBusStops) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.type \u003d locationType.HOSTEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.nearestBusStops \u003d nearestBusStops;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Hostel): \" + name + \"\\nNearest bus stop(s): \" + printNearestBusStops();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String printNearestBusStops() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String str \u003d Arrays.toString(nearestBusStops);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        str \u003d str.substring(1, str.indexOf(\"]\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 29,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/location/LectureTheatre.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents lecture theatre objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains a String nearestBuilding which represents the name of nearest building."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class LectureTheatre extends Location{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String nearestBuilding;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public LectureTheatre(String name, String nearestBuilding) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.type \u003d locationType.LT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.nearestBuilding \u003d nearestBuilding;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Lecture Theatre): \" + name + \"\\nNearest building: \" + nearestBuilding;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 21,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/location/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "enum locationType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    BUILDING,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    HOSTEL,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    LT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    OUT_OF_NUS"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * Represents location objects"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * Contains String name, which is the name of location, and type of location"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected locationType type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    // private int[] coordinates \u003d new int[2];  // will implement in version 2.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Location(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected String printType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String str;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case BUILDING:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                str \u003d \"Building\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case HOSTEL:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                str \u003d \"Hostel\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case LT:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                str \u003d \"Lecture Theatre\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case OUT_OF_NUS:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                str \u003d \"Out of NUS\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                str \u003d \"ERROR\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(\" + printType() + \")\" + name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 6,
      "jiaaaqi": 47
    }
  },
  {
    "path": "src/main/java/location/OutOfNUS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class OutOfNUS extends Location {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public OutOfNUS(String name) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Out of NUS): \" + name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 12
    }
  },
  {
    "path": "src/main/java/locationlist/BusStopList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package locationlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.BusStop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class BusStopList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static final String filePath \u003d \"data/bus_stops.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private ArrayList\u003cBusStop\u003e busStopList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public ArrayList\u003cBusStop\u003e getBusStopList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return busStopList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Flag to check if the bus stop exists"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param name name of bus stop to be checked"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return boolean value of if the bus stop exist in the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public boolean checkExistence(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (BusStop busStop : busStopList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (name.equals(busStop.getName())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 29
    }
  },
  {
    "path": "src/main/java/locationlist/LocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package locationlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class LocationList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static final String filePath \u003d \"data/locations.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private ArrayList\u003cLocation\u003e locationList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public ArrayList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return locationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Flag to check if location exists"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param name name of the location to be checked"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return boolean value of if the location is found in the location list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public boolean checkValidLocation(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (Location location : locationList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (name.equals(location.getName())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 29
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.PersonalEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Class;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.NoEventTimeMarkerException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.TimeFormatException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.EmptyEventException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.NoEventTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.WrongCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class contains one function -- parse, to call the respective command function according to the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String PRINT_Event_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public static final String PRINT_LOCATION_LIST \u003d \"locations\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public static final String LOCATE_EVENT \u003d \"locate\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String Event_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_ASSIGNMENT \u003d \"assignment\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_PERSONAL_EVENT \u003d \"personalEvent\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String Event_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String Event_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String TIME_MARKER \u003d \"/t\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String SINGLE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public static final String LOCATION \u003d \"/l\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static final String Event_FIND_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EDIT_INSTRUCTION \u003d \"Enter new event:\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function calls the correct command the user want to perform, by returning a \u003c\\code\u003eCommand\u003c\\code\u003e object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param fullCommand the full string of user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the specific \u003c\\code\u003eCommand\u003c\\code\u003e object to perform what the user want to do"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * //     * @throws NuScheduleException includes all exceptions may happen during parsing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public static Command parse(String fullCommand) throws NuScheduleException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        // this block deals with exit and list command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        switch (fullCommand) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case PRINT_Event_LIST:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                return new PrintFullListCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case PRINT_LOCATION_LIST:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return new PrintLocationCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String[] words \u003d fullCommand.split(SINGLE_SPACE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        //this block deals with find command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        if (words[0].equals(Event_FIND)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                throw new EmptyFindException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            return new FindCommand(fullCommand.substring(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        //this block deals with find date command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        if (words[0].equals(Event_FIND_DATE)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                throw new EmptyFindDateException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                return new FindDateCommand(LocalDate.parse(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                throw new DateFormatException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        int EventIndex;//to indicate what is the Event we are dealing with. may not be used."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        //this block deals with done command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        if (words[0].equals(Event_DONE)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                throw new EmptyDoneException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                EventIndex \u003d Integer.parseInt(fullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                throw new DoneNumberFormatException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            return new DoneCommand(EventIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        //this block deals with delete command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        if (words[0].equals(Event_DELETE)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            if (fullCommand.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                throw new EmptyDeleteException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                EventIndex \u003d Integer.parseInt(fullCommand.substring(7)) - 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //                throw new DeleteNumberFormatException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //            return new DeleteCommand(EventIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        //this block deals with add command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        //we shall check that the user input is not meant for any other command beforehand"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        //because the default block will throw an exception."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        // i.e. when this block is entered, the parser will not go to any other blocks"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        int dividerPosition;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        int timeDivider;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        String dateTime;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            case EDIT:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                UI ui \u003d new UI();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                int index \u003d -1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                if (fullCommand.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyEventIndexException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyEventIndexException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    index \u003d Integer.parseInt(fullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyEventIndexException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.print(EDIT_INSTRUCTION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                String newCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                int firstDivider;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (newCommand.startsWith(ADD_ASSIGNMENT)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    firstDivider \u003d 10;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } else if (newCommand.startsWith(ADD_CLASS)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    firstDivider \u003d 5;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } else if (newCommand.startsWith(ADD_PERSONAL_EVENT)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    firstDivider \u003d 13;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    firstDivider \u003d 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                if (firstDivider !\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    dividerPosition \u003d newCommand.indexOf(TIME_MARKER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    if (newCommand.substring(firstDivider).isBlank()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        throw new EmptyEventException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    if (newCommand.substring(firstDivider, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        throw new EmptyEventException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        newCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        throw new NoEventTimeException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        timeDivider \u003d newCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        dateTime \u003d newCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                                + \"T\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                                + newCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        return new EditCommand(new Assignment(newCommand.substring(firstDivider, dividerPosition)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                , LocalDateTime.parse(dateTime), new Location()), index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                        throw new TimeFormatException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            case ADD_ASSIGNMENT:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                dividerPosition \u003d fullCommand.indexOf(TIME_MARKER);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (fullCommand.substring(10).isBlank()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (fullCommand.substring(10, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    fullCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    timeDivider \u003d fullCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    dateTime \u003d fullCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            + \"T\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            + fullCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    return new AddCommand(new Assignment(fullCommand.substring(10, dividerPosition)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            , LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            case ADD_CLASS:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                dividerPosition \u003d fullCommand.indexOf(TIME_MARKER);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (fullCommand.substring(5, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    fullCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    timeDivider \u003d fullCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    dateTime \u003d fullCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            + \"T\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            + fullCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    return new AddCommand(new Class(fullCommand.substring(5, dividerPosition)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            , LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            case ADD_PERSONAL_EVENT:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                dividerPosition \u003d fullCommand.indexOf(TIME_MARKER);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (fullCommand.substring(13).isBlank()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                if (fullCommand.substring(13, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    fullCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    timeDivider \u003d fullCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    dateTime \u003d fullCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            + \"T\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                            + fullCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    return new AddCommand(new PersonalEvent(fullCommand.substring(13, dividerPosition)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            , LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case LOCATE_EVENT:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                throw new WrongCommandException();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (timeDividerPosition \u003d\u003d -1 | locationDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (fullCommand.substring(10, timeDividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            fullCommand.substring(timeDividerPosition + 4);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new NoEventTimeException();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            fullCommand.substring(locationDividerPosition + 3);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new NoEventLocationException();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            timeDivider \u003d fullCommand.substring(timeDividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            dateTime \u003d fullCommand.substring(timeDividerPosition + 4, timeDividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    + \"T\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    + fullCommand.substring(timeDividerPosition + 4 + timeDivider + 1, locationDividerPosition - 1);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            location \u003d parseLocation(fullCommand.substring(locationDividerPosition + 3));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            return new AddCommand(new Assignment(fullCommand.substring(10, timeDividerPosition)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    , location, LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new TimeFormatException();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        case ADD_CLASS:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        timeDividerPosition \u003d fullCommand.indexOf(TIME_MARKER);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        locationDividerPosition \u003d fullCommand.indexOf(LOCATION);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (timeDividerPosition \u003d\u003d -1 | locationDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (fullCommand.substring(5, timeDividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            fullCommand.substring(timeDividerPosition + 4);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new NoEventTimeException();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            fullCommand.substring(locationDividerPosition + 3);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new NoEventLocationException();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            timeDivider \u003d fullCommand.substring(timeDividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            dateTime \u003d fullCommand.substring(timeDividerPosition + 4, timeDividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    + \"T\""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    + fullCommand.substring(timeDividerPosition + 4 + timeDivider + 1, locationDividerPosition - 1);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            location \u003d parseLocation(fullCommand.substring(locationDividerPosition + 3));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                throw new NoEventLocationException();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            return new AddCommand(new event.Class(fullCommand.substring(5, timeDividerPosition)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    , location, LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new TimeFormatException();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        case ADD_PERSONAL_EVENT:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        timeDividerPosition \u003d fullCommand.indexOf(TIME_MARKER);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        locationDividerPosition \u003d fullCommand.indexOf(LOCATION);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (fullCommand.substring(13).isBlank()) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (timeDividerPosition \u003d\u003d -1 | locationDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (fullCommand.substring(13, timeDividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            fullCommand.substring(timeDividerPosition + 4);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new NoEventTimeException();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            fullCommand.substring(locationDividerPosition + 3);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new NoEventLocationException();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            timeDivider \u003d fullCommand.substring(timeDividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            dateTime \u003d fullCommand.substring(timeDividerPosition + 4, timeDividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    + \"T\""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    + fullCommand.substring(timeDividerPosition + 4 + timeDivider + 1, locationDividerPosition - 1);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            location \u003d parseLocation(fullCommand.substring(locationDividerPosition + 3));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            return new AddCommand(new PersonalEvent(fullCommand.substring(13, timeDividerPosition)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    , location, LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new TimeFormatException();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        throw new WrongCommandException();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * This method parses the inputted location"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param input the string inputted by the user"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the parsed location"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public static Location parseLocation(String input) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        Location location \u003d null;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            String[] info \u003d input.split(\"/\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            String[] additionalInfo \u003d info[2].split(\",\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            switch (info[0]) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                case \"BLK\":"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    location \u003d new Building(info[1], additionalInfo);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                case \"H\":"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    location \u003d new Hostel(info[1], additionalInfo);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                case \"L\":"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    location \u003d new LectureTheatre(info[1], info[2]);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                case \"OUT\":"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    location \u003d new OutOfNUS(info[1]);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    location \u003d null;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            location \u003d null;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 55,
      "madbeez": 247,
      "Lee-Juntong": 126,
      "jiaaaqi": 6
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Class;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.PersonalEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.CreatingFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.LoadingException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WritingFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class creates the folder and file path if it\u0027s not already created, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * prepare the data in the file to be used."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String REGEX_IN_FILE \u003d \"//\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Set the \u003ccode\u003efilepath \u003c/code\u003e according to the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePath is the path of the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Storage(String filePath) throws CreatingFileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        createFolderAndFIle(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Creates the folder and file if not already crated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePath the String of the relative path"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void createFolderAndFIle(String filePath) throws CreatingFileException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File directory \u003d dataFile.getParentFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new CreatingFileException(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Save the data of the Event list to the file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events the list of Events provided by a variable from a EventList object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException represents the file is not correctly written"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void writeFile(ArrayList\u003cEvent\u003e events) throws WritingFileException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(event.fileString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new WritingFileException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares the data in the file as an ArrayList, which is used to construct the EventList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the Events in an ArrayList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws LoadingException represents the \u003ccode\u003eEvents\u003c/code\u003e is not correctly created"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e loadEvents() throws LoadingException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Scanner s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String[] words \u003d s.nextLine().split(REGEX_IN_FILE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                switch (words[0]) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"C\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        events.add(new Class(words[2],LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.get(events.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"A\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.add(new Assignment(words[2], LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            throw new LoadingException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.get(events.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"P\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.add(new PersonalEvent(words[2], LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            throw new LoadingException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.get(events.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new LoadingException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"file not found\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new LoadingException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Loads data from bus_stop text file to an ArrayList, which is stored in a BusStopList"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStopList ArrayList of BusStops in BusStopList"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void loadBusStopData(ArrayList\u003cBusStop\u003e busStopList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File f \u003d new File(\"data/bus_stops.txt\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Scanner s \u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(f.getName() + \" not found: \" + e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        while(s.hasNext()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] split \u003d input.split(\":\",2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String name \u003d split[0];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] buses \u003d split[1].split(\",\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            BusStop stop \u003d new BusStop(name, buses);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            busStopList.add(stop);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Loads data from location text file into an ArrayList, which is stored in a LocationList"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locationList ArrayList of Locations in LocationList"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void loadLocationData(ArrayList\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File f \u003d new File(\"data/locations.txt\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Scanner s \u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(f.getName() + \"not found: \" + e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        while(s.hasNext()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            // info[0] \u003d type, info[1] \u003d name, info[2] \u003d nearest buildings/bus stops"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] info \u003d input.split(\"/\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] additionalInfo \u003d info[2].split(\",\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            Location location \u003d null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            switch(info[0]) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                case \"BLK\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    location \u003d new Building(info[1], additionalInfo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                case \"H\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    location \u003d new Hostel(info[1], additionalInfo);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                case \"L\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    location \u003d new LectureTheatre(info[1], info[2]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                case \"OUT\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    location \u003d new OutOfNUS(info[1]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (location!\u003dnull) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                locationList.add(location);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(\"Invalid Location Type\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 126,
      "jiaaaqi": 69
    }
  },
  {
    "path": "src/main/java/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.BusStop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * UI receives all user inputs, and produces outputs show to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            \" _       _ _        _   ____       _                    _        _\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |     | | |      | | / ___|     | |                  | |      | |\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"|  \\\\    | | |      | |/ /         | |                  | |      | |\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |\\\\\\\\   | | |      | |\\\\ \\\\         | |        ___       | |      | | ___\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| | \\\\\\\\  | | |      | | \\\\ \\\\     ___| |______ /___\\\\  ____| |_    _| |/___\\\\\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |  \\\\\\\\ | | |      | |  \\\\ \\\\   /___|  ____  ||___|||  __  | |  | | ||___||\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |   \\\\\\\\| | |      | |   \\\\ \\\\ //   | |    | | ___/ | |  | | |  | | | ___/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |    \\\\  | |______| |___/ / \\\\\\\\___| |    | |\\\\____ | |__| | |__| | |\\\\____\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"|_|     |_|__________|____/   \\\\___|_|    |_|\\\\___/ |______|\\\\___,_|_|\\\\___/\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LINE_DIVIDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Reads the user input line by line."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string of the line"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the logo of DUKE and greet the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printGreetingMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the separator."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(LINE_DIVIDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the events with labels, based on the input list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events an \u003c\\code\u003eArrayList\u003c\\code\u003e of events to be printed one by one."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printEventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (events.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            System.out.println(\"The list is empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"Here are the Events in your list:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                for (Event event : events) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    numPrintedEvents++;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    System.out.println(numPrintedEvents + \". \" + event.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            } catch (NullPointerException e){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                System.out.println(\"The list is empty.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the Events of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events an \u003c\\code\u003eArrayList\u003c\\code\u003e of Events to be printed one by one."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredEventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the matching Events in your list:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + event.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message when experiencing exceptions."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message the message get from the error."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message during loading. Since the general IO exception is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * handled when executing the process, the error leads to this would be the file"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * is edited in a wrong way."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"You edit the file in a wrong format. Please check.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message during executing commands."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function is used to make all printing being done in UI."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message determined by the command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.print(message);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Call when exit the program."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Take in a size and prints the total number of Events."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param size number of events in the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printNumEvent(int size) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" Events in the list.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user mark some Event as done."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param event the Event being done"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDoneMessage(Event event) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this Event as done: \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user deletes some Event."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param event the Event being deleted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDeleteMessage(Event event) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this Event: \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user adds some Event."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventAdded the Event being added"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printAddEventMessage(Event eventAdded) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this Event: \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(eventAdded.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * Prints the message when the user adds some Event."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param eventEdited the Event being edited"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public void printEditEventMessage(Event eventEdited) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve edited this Event: \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        System.out.println(eventEdited.toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the Events of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filteredEventList an \u003c\\code\u003eArrayList\u003c\\code\u003e of Events to be printed one by one."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredDateEventList(ArrayList\u003cEvent\u003e filteredEventList) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the Events on the given date in your list:\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event event : filteredEventList) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + event.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Prints all the locations stored in the location list with nearest bus stops"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locationsList an Array List of Locations to be printed"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printLocationList(ArrayList\u003cLocation\u003e locationsList) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"Lists of locations: \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (Location location : locationsList) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(i + \". \" + location);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Prints all the bus stops stored in the bus stop list with buses that goes there"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStopList an Array List of Bus Stops to be printed"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printBusStopList(ArrayList\u003cBusStop\u003e busStopList) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"List of bus stops: \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for(BusStop busStop : busStopList) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(i + \". \" + busStop);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Prints the help information when user inpur command \u0027help\u0027"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * relevant command information with reference to the current user guide draft"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Below are all the commands and their functions in the form of command - function: \");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"help - view all the commands\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"add - add any type of event\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"edit - edit event information\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"locate - find location information\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"list - view all events added\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"clear - clear all events\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 9,
      "madbeez": 8,
      "max-wunan": 15,
      "Lee-Juntong": 179,
      "jiaaaqi": 28
    }
  },
  {
    "path": "src/test/java/test/NuScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "class NuScheduleTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "text-ui-test/data/bus_stops.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "EA:B2,C,BTC2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Raffles Hall:B2,C"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Information Technology:A2,B1,B2,D1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Opp YIH:A2,B1,B2,D1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "NUS Museum:A2,BTC1,BTC2,C,D1,D2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "YIH:A1,B1,BTC1,D1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "CLB:A1,B1,BTC1,D1"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 7
    }
  },
  {
    "path": "text-ui-test/data/locations.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/EA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/Information Technology"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E1A/EA"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1/EA,Information Technology"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1A/EA"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E2/EA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3/EA,Raffles Hall"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3A/EA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4/Information Technology"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4A/Opp YIH,YIH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5/Information Technology"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5A/Raffles Hall"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E6/Opp YIH,YIH"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/IT/Information Technology,CLB"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "H/Raffles Hall/Raffles Hall,NUS Museum"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT1/E2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT2/E2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT6/E4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7/EA"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7A/EA"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 1
    }
  }
]
