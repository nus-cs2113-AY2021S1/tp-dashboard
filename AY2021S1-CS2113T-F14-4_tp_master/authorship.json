[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/NUSchedule/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/NUSchedule/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Lee-Juntong": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    mainClassName \u003d \"NUSchedule.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "Lee-Juntong": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xu Che | [Github](https://github.com/xuche123) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Jiaqi | [Github](https://github.com/jiaaaqi) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brendan Wan | [Github](https://github.com/madbeez) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhuang Mengjin | [Github](https://github.com/Lee-Juntong) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 1,
      "madbeez": 1,
      "-": 5,
      "jiaaaqi": 1,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "# NUSchedule"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "Lee-Juntong": 1
    }
  },
  {
    "path": "src/main/java/NUSchedule/NUSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.eventList.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.exception.CreatingFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.exception.NUScheduleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NUSchedule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private EventList Events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public NUSchedule(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (CreatingFileException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        try {todo after implement load, uncomment it"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            Events \u003d new EventList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        } catch (NUScheduleException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            Events \u003d new EventList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printGreetingMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                c.execute(Events, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NUScheduleException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        new NUSchedule(\"data/events.txt\").run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 58
    }
  },
  {
    "path": "src/main/java/NUSchedule/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.eventList.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.exception.NUScheduleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param Events   the list of Events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NUScheduleException the exceptions can happen in this program, to be handled based on the specific exception."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract void execute(EventList Events, UI ui, Storage storage) throws NUScheduleException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 27
    }
  },
  {
    "path": "src/main/java/NUSchedule/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.eventList.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user exits this program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark the status of the program, isExit, as true."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Also prints the exit message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 25
    }
  },
  {
    "path": "src/main/java/NUSchedule/command/PrintFullListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.eventList.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.exception.NUScheduleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class PrintFullListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the list of Events."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param Events   the list of Events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NUScheduleException the exceptions can happen in this function, to be handled based on the specific exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList Events, UI ui, Storage storage) throws NUScheduleException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printEventList(Events.getEventList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 22
    }
  },
  {
    "path": "src/main/java/NUSchedule/event/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Assignment Events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Assignment extends Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this deadline to a string that is to be stored in a file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"A//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Assignment(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Assignment."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(by);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Example of the format: [C][✘]a  (by: Feb 20 2020 08:00)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[A]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH\u0027:\u0027mm\")) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 47
    }
  },
  {
    "path": "src/main/java/NUSchedule/event/Class.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Class events."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Class extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Class(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this Class to a string that is to be stored in a file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"C//\" + (isDone ? 1 : 0) + \"//\" + description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Example of the format: [C][✘]a."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[C]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 31
    }
  },
  {
    "path": "src/main/java/NUSchedule/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the event objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains a String \u003c\\code\u003edescription\u003c/\\code\u003e , which is the description of the event,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * and a boolean \u003c\\code\u003eisDone\u003c/\\code\u003e, which is the status of the Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Provides methods to mark an event as done(either during user input or reading from file),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * get the value of \u003c\\code\u003eisDone\u003c/\\code\u003e,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * convert the \u003c\\code\u003eevent\u003c/\\code\u003e object to a string to be printed out or write to a file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Event {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected Location location;//to be implemented"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a Event\u0027s status as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract String fileString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the status of the Event as a icon."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return returns a tick if the Event is done, and returns a cross if the Event is not done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the common part for Event, Assignment, Class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the String variable of the description of this Event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the description of this Event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 73
    }
  },
  {
    "path": "src/main/java/NUSchedule/event/PersonalEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Event Events."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class PersonalEvent extends Event {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this event to a string that is to be stored in a file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"E//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public PersonalEvent(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Example of the format: [P][✘]a  (at: Feb 20 2020 08:00)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[P]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH\u0027:\u0027mm\")) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 48
    }
  },
  {
    "path": "src/main/java/NUSchedule/eventList/eventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.eventList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains the list of the events and provides ways to delete/add/mark as done events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Construct the events as an empty ArrayList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * When loading from the file, create the list as provided in the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events provided by \u003ccode\u003eStorage::load()\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @see NUSchedule.storage.Storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public EventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventToBeAdded may be Todo/Event/Deadline based on the usage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void addEvent(Event eventToBeAdded) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.add(eventToBeAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a event as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventIndex the index of the event being done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//     * @throws DoneUndefinedEventException the event is not defined but the user want to mark it as done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void doneEvent(int eventIndex) /*throws DoneUndefinedEventException*/ {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events.get(eventIndex).markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            throw new DoneUndefinedEventException(eventIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Gives the access to the list of events."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the \u003ccode\u003eArrayList\u003cevent\u003e\u003c/code\u003e object to be printed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns how many events are in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the size of the ArrayList in the EventList object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Remove the event indicated by the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void remove(int eventIndex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.remove(eventIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns the element at the specified position in this list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventIndex index of the event to return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the event at the specified position in this list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event get(int eventIndex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events.get(eventIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the event list to find the events contain the information looking for by the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filterString the keyword that the user is looking for"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the events that satisfy the requirement"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e filterWith(String filterString) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDescription().contains(filterString))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredEventList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the event list to find the events happen on the date looking for by the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param date the date that the user is looking for"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the events that satisfy the requirement"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e filterDateWith(LocalDate date) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDate().isEqual(date))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredEventList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 118
    }
  },
  {
    "path": "src/main/java/NUSchedule/exception/CreatingFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happen when the file is not created successfully."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class CreatingFileException extends NUScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public CreatingFileException(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"The file \\\"\" + filePath + \"\\\" is not created\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 21
    }
  },
  {
    "path": "src/main/java/NUSchedule/exception/LoadingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the user edit the file in a wrong way."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class LoadingException extends NUScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You edit the file in a wrong format. Please check.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/NUSchedule/exception/NUScheduleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class NUScheduleException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract String getMessage();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 5
    }
  },
  {
    "path": "src/main/java/NUSchedule/exception/WritingFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the file is not correctly written."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WritingFileException extends NUScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"something went wrong when writing to file\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/NUSchedule/location/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private String location\u003d\"\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Location(String location){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.location\u003dlocation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 8
    }
  },
  {
    "path": "src/main/java/NUSchedule/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.command.PrintFullListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class contains one function -- parse, to call the respective command function according to the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String PRINT_Event_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String Event_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_ASSIGNMENT \u003d \"assignment\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_PERSONAL_EVENT \u003d \"personal event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String Event_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String Event_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String BY \u003d \"/by\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String SINGLE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String AT \u003d \"/at\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static final String Event_FIND_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function calls the correct command the user want to perform, by returning a \u003c\\code\u003eCommand\u003c/\\code\u003e object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param fullCommand the full string of user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the specific \u003c\\code\u003eCommand\u003c/\\code\u003e object to perform what the user want to do"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//     * @throws NUScheduleException includes all exceptions may happen during parsing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static Command parse(String fullCommand) /*throws NUScheduleException*/ {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        // this block deals with exit and list command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (fullCommand.equals(EXIT)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } else if (fullCommand.equals(PRINT_Event_LIST)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new PrintFullListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String[] words \u003d fullCommand.split(SINGLE_SPACE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with find command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        if (words[0].equals(Event_FIND)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new EmptyFindException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            return new FindCommand(fullCommand.substring(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        //this block deals with find date command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        if (words[0].equals(Event_FIND_DATE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new EmptyFindDateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                return new FindDateCommand(LocalDate.parse(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new DateFormatException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        int EventIndex;//to indicate what is the Event we are dealing with. may not be used."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        //this block deals with done command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        if (words[0].equals(Event_DONE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new EmptyDoneException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                EventIndex \u003d Integer.parseInt(fullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new DoneNumberFormatException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            return new DoneCommand(EventIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        //this block deals with delete command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        if (words[0].equals(Event_DELETE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            if (fullCommand.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new EmptyDeleteException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                EventIndex \u003d Integer.parseInt(fullCommand.substring(7)) - 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new DeleteNumberFormatException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            return new DeleteCommand(EventIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        //this block deals with add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        //we shall check that the user input is not meant for any other command beforehand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        //because the default block will throw an exception."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        // i.e. when enter this block, the parser will not go to any other blocks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        int dividerPosition;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        int timeDivider;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        String dateTime;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        switch (words[0]) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            case ADD_ASSIGNMENT:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                dividerPosition \u003d fullCommand.indexOf(AT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new NoEventTimeMakerException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                if (fullCommand.substring(5, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    fullCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    timeDivider \u003d fullCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    dateTime \u003d fullCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                            + \"T\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                            + fullCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    return new AddCommand(new NUSchedule.Event.PersonalEvent(fullCommand.substring(6, dividerPosition), LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            case ADD_CLASS:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                dividerPosition \u003d fullCommand.indexOf(BY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                if (fullCommand.substring(8).isBlank()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new NoDeadlineTimeMarkerException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                if (fullCommand.substring(8, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    fullCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new NoDeadlineTimeException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    timeDivider \u003d fullCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    dateTime \u003d fullCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                            + \"T\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                            + fullCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    return new AddCommand(new NUSchedule.Event.Assignment(fullCommand.substring(9, dividerPosition), LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            case ADD_PERSONAL_EVENT:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                        throw new EmptyTodoException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    return new AddCommand(new Todo(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                    throw new EmptyTodoException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//                throw new WrongCommandException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;//delete later"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 173
    }
  },
  {
    "path": "src/main/java/NUSchedule/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.exception.CreatingFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.exception.LoadingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.exception.WritingFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class creates the folder and file path if it\u0027s not already created, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * prepare the data in the file to be used."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String REGEX_IN_FILE \u003d \"//\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Set the \u003ccode\u003efilepath \u003c/code\u003e according to the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePath is the path of the file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Storage(String filePath) throws CreatingFileException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        createFolderAndFIle(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Creates the folder and file if not already crated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePath the String of the relative path"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void createFolderAndFIle(String filePath) throws CreatingFileException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File directory \u003d dataFile.getParentFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new CreatingFileException(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Save the data of the Event list to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param Events the list of Events provided by a variable from a EventList object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException represents the file is not correctly written"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void writeFile(ArrayList\u003cEvent\u003e Events) throws WritingFileException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            for (Event Event : Events) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(Event.fileString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new WritingFileException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares the data in the file as an ArrayList, which is used to construct the EventList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the Events in an ArrayList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws LoadingException represents the \u003ccode\u003eEvents\u003c/code\u003e is not correctly created"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//    public ArrayList\u003cEvent\u003e load() throws LoadingException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//todo to be implement"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 80
    }
  },
  {
    "path": "src/main/java/NUSchedule/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import NUSchedule.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * UI receives all user inputs, and produces outputs show to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LOGO \u003d \" _       _ _        _   ____       _                    _        _     \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"| |     | | |      | | / ___|     | |                  | |      | |   \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"|  \\\\    | | |      | |/ /         | |                  | |      | |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"| |\\\\\\\\   | | |      | |\\\\ \\\\         | |        ___       | |      | | ___ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"| | \\\\\\\\  | | |      | | \\\\ \\\\     ___| |______ /___\\\\  ____| |_    _| |/___\\\\       \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"| |  \\\\\\\\ | | |      | |  \\\\ \\\\   /___|  ____  ||___|||  __  | |  | | ||___|| \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"| |   \\\\\\\\| | |      | |   \\\\ \\\\ //   | |    | | ___/ | |  | | |  | | | ___/    \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"| |    \\\\  | |______| |___/ / \\\\\\\\___| |    | |\\\\____ | |__| | |__| | |\\\\____\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    + \"|_|     |_|__________|____/   \\\\___|_|    |_|\\\\___/ |______|\\\\___,_|_|\\\\___/           \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LINE_DIVIDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Reads the user input line by line."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string of the line"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the logo of DUKE and greet the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printGreetingMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the separator."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(LINE_DIVIDER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the events with labels, based on the input list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param Events an \u003c\\code\u003eArrayList\u003c/\\code\u003e of events to be printed one by one."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printEventList(ArrayList\u003cEvent\u003e Events) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the Events in your list:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event Event : Events) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + Event.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the Events of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param Events an \u003c\\code\u003eArrayList\u003c/\\code\u003e of Events to be printed one by one"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredEventList(ArrayList\u003cEvent\u003e Events) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the matching Events in your list:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event Event : Events) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + Event.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message when experiencing exceptions."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message the message get from the error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message during loading. Since the general IO exception is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * handled when executing the process, the error leads to this would be the file"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * is edited in a wrong way."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"You edit the file in a wrong format. Please check.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message during executing commands."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function is used to make all printing being done in UI."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message determined by the command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.print(message);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Call when exit the program"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Take in a size and prints the total number of Events."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param size get by calling \u003ccode\u003eArrayList\u003cEvent\u003e::Size()\u003c/code\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printNumEvent(int size) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" Events in the list.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user mark some Event as done."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param Event the Event being done"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDoneMessage(Event Event) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this Event as done: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(Event.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user deletes some Event."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param Event the Event being deleted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDeleteMessage(Event Event) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this Event: \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(Event.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user adds some Event."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param EventAdded the Event being added"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printAddEventMessage(Event EventAdded) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this Event: \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(EventAdded.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the Events of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filteredEventList an \u003c\\code\u003eArrayList\u003c/\\code\u003e of Events to be printed one by one"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredDateEventList(ArrayList\u003cEvent\u003e filteredEventList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the Events on the given date in your list:\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event Event : filteredEventList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + Event.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 180
    }
  },
  {
    "path": "src/test/java/seedu/duke/NUScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package NUSchedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "class NUScheduleTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Lee-Juntong": 2
    }
  }
]
