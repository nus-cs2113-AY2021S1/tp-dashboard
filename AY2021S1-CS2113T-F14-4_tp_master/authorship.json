[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/test/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   \u003e Event :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/test/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Lee-Juntong": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    mainClassName \u003d \"NuSchedule\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    archiveBaseName \u003d \"TPv1.0\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "data/bus_stops.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "EA:B2,C,BTC2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Raffles Hall:B2,C"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Information Technology:A2,B1,B2,D1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Opp YIH:A2,B1,B2,D1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "NUS Museum:A2,BTC1,BTC2,C,D1,D2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "YIH:A1,B1,BTC1,D1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "CLB:A1,B1,BTC1,D1"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 7
    }
  },
  {
    "path": "data/locations.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/EA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/Information Technology"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E1A/EA"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1/EA,Information Technology"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1A/EA"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E2/EA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3/EA,Raffles Hall"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3A/EA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4/Information Technology"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4A/Opp YIH,YIH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5/Information Technology"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5A/Raffles Hall"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E6/Opp YIH,YIH"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/IT/Information Technology,CLB"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "H/Raffles Hall/Raffles Hall,NUS Museum"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT1/E2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT2/E2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT6/E4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7/EA"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7A/EA"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 20
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wu Nan | [Github](https://github.com/max-wunan/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xu Che | [Github](https://github.com/xuche123) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Jiaqi | [Github](https://github.com/jiaaaqi) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brendan Wan | [Github](https://github.com/madbeez) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhuang Mengjin | [Github](https://github.com/Lee-Juntong) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 1,
      "madbeez": 1,
      "max-wunan": 1,
      "-": 4,
      "jiaaaqi": 1,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![](diagrams/Logo.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Yang Jiaqi\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Zhuang Mengjin\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Xu Che\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Wu Nan\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Wan Shi Jie Brendan\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. [Introduction](#intro)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "2. [Getting Started](#getting_started)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "2.1 [Prerequisites](#prerequisites)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "2.2 [Setting Up](#setting_up)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "3. [Design](#design) \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "3.1 [Architecture](#architecture) \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "3.2 [UI](#ui) \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "3.3 [Storage](#storage) \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "3.4 [Logic](#logic) \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "3.5 [Model](#model) \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.5.1 [Event](#event) \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.5.2 [Location](#location) \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4. [Implementation](#implementation) \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.1 [Add events](#add_events) \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.2 [Clear events](#clear) \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.3 [Edit events](#edit) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.4 [Locate](#locate) \u003cbr\u003e "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.5 [Reminders](#reminder) \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.6 [Sort events](#sort) \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.7 [View events](#view) \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "4.8 [Help](#help) \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "5. [Documentation](#documentation) \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "5.1 [Product scope](#product_scope) \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "5.2 [Value Proposition](#value_proposition) \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "5.3 [User Stories](#stories)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "## 1. Introduction\u003ca id\u003d\"intro\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xuche123"
        },
        "content": "NUSchedule is a Command-Line based application that manages all of your commitments. Built with a clean and intuitive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xuche123"
        },
        "content": "interface, NUSchedule will help you manage your commitments without any hassle. If you are a proficient in typing, "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xuche123"
        },
        "content": "NUSchedule will prove itself to be the most efficient way to manage your commitments.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This developer guide provides information on the architecture and design of the application, NUSchedule. This guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xuche123"
        },
        "content": "provides information that will not only help you get started as a NUSchedule contributor, but that you will find useful"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "to refer to even if you are already a contributor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "## 2. Getting Started \u003ca id\u003d\"getting_started\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This section provides information to help you get NUSchedule up and running on your own computers."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 2.1 Prerequisites\u003ca id\u003d\"prerequisites\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuche123"
        },
        "content": "1. JDK 11"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xuche123"
        },
        "content": "2. Intellij IDEA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 2.2 Setting Up\u003ca id\u003d\"setting_up\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xuche123"
        },
        "content": "1. Fork [this repo](https://github.com/AY2021S1-CS2113T-F14-4/tp), and clone the fork onto your computer.   "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xuche123"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click File \u003e Close Project"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xuche123"
        },
        "content": "to close the existing project dialog "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xuche123"
        },
        "content": "first).   "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xuche123"
        },
        "content": "3. Set up the correct JDK version for Gradle  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    1. Click Configure \u003e Project Defaults \u003e Project Structure"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    2. Click New… and set it to the directory of the JDK."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xuche123"
        },
        "content": "4. Click Import Project (or Open or Import in newer version of Intellij)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xuche123"
        },
        "content": "5. Locate the build.gradle file (not the root folder as you would do in a normal importing) and select it. Click OK."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xuche123"
        },
        "content": "   If asked, choose to Open as Project (not Open as File)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xuche123"
        },
        "content": "6. Click OK to accept the default settings but do ensure that the selected version of Gradle JVM matches the JDK "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xuche123"
        },
        "content": "   being used for the project."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "## 3. Design\u003ca id\u003d\"design\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "This section describes the different components of the application and how each component interact with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "each other to run the program. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 3.1 Architecture\u003ca id\u003d\"architecture\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![architecture](diagrams/architecture.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xuche123"
        },
        "content": "The Architecture Diagram above provides a high-level view of the design of NUSchedule. The app can be broken down into "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xuche123"
        },
        "content": "5 different components:  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xuche123"
        },
        "content": "1. Main: Initializes the other components and connects them with each other."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xuche123"
        },
        "content": "2. UI: Manages the User Interface that the user interacts with."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xuche123"
        },
        "content": "3. Logic: Interprets user commands."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xuche123"
        },
        "content": "4. Storage: Reads data from and writes data to the hard disk."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xuche123"
        },
        "content": "5. Model: Stores the data the app uses in memory."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 3.2 UI\u003ca id\u003d\"ui\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![UI Class Diagram](diagrams/Ui.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madbeez"
        },
        "content": "*Figure 3.2.1 Class diagram for UI component*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xuche123"
        },
        "content": " __API__:`UI.java`  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xuche123"
        },
        "content": "The UI consists of various parts, e.g. `printGreetingMessage`, `printEventList`, `showError`, `printNumEvent`, etc."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madbeez"
        },
        "content": "The `UI` component reads user input using readCommand() and executes user commands according to the Logic component."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 3.3 Storage\u003ca id\u003d\"storage\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xuche123"
        },
        "content": "__API__:`Storage.java`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xuche123"
        },
        "content": "The `Storage` component can save the list of event data in .txt format and read it back.   "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 3.4 Logic\u003ca id\u003d\"logic\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xuche123"
        },
        "content": "__API__:`Parser.java`  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![Logic Class Diagram](diagrams/LogicClass.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madbeez"
        },
        "content": "*Figure 3.4.1 Class diagram for Logic component*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xuche123"
        },
        "content": "The `logic` component parses the user input and executes commands based on the given input."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madbeez"
        },
        "content": " 1.\tParser reads the user input and returns a command to be executed by `NuSchedule`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xuche123"
        },
        "content": " 2.\tThe command execution affects the EventList (e.g. clearing the list)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xuche123"
        },
        "content": " 3.\tThe result passes back to the UI, which then displays relevant feedback to the user.  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 3.5 Model\u003ca id\u003d\"model\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "The `Model` component stores an ArrayList, events, that represents the current list of events and available locations."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### 3.5.1 Event\u003ca id\u003d\"event\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xuche123"
        },
        "content": "__API__:`EventList.java`   "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 3.5.2 Location\u003ca id\u003d\"location\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "![location class diagram](diagrams/LocationClass.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "*Figure 3.6.1 Class diagram for location component*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "__API:__ `LocationList.java`  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "The `LocationList` is made up of an ArrayList of Locations, which is a type of variable that stores different information "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "for different types of location (eg. `Building`, `Hostel`, etc.). However, do note that any place that is "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "not within the list of saved locations will be saved as type `OutOfNUS`, and would not be saved into the `location.txt` "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "file. The location will still be part of the location list before the app closes, and it will also be "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "saved as part of the Event information."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eThere is a separate api for bus stops (`BusStopList.java`), which stores all available bus stops "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "and their information. Although the variable is declared in the main NUSchedule class, it is only referenced "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "and not edited in any part of the program."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "\u003cbr\u003eThe `Location` component "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* stores information about various types of locations "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* prints the list of locations that is saved in the data file "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* checks if a location is being saved in the list and returns the location when asked"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "## 4. Implementation\u003ca id\u003d\"implementation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This section describes the implementation of some noteworthy features. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.1 Add events\u003ca id\u003d\"add_events\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This feature allows users to add events and relevant information about them (description, time and location) to the list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xuche123"
        },
        "content": ". There are three possible types of events that can be added: classes, assignments, and personal events."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Step 1. The user launches the application to add a class to his schedule. The user executes "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "`class CS1010 Lecture /t 2020-05-05 10:00 /e 2020-05-05 12:00 /l LT27` to add a new class to the list.  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Step 2. The Parser class parses the input as a new class with description ‘CS1010 Lecture’,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "starting time ‘2020-05-05 at 10:00’, ending time ’2020-05-05 at 12:00’, and location ‘LT27’.  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Step 3. `addCommand()` is then called with the above parameters, and adds it to the list of events. This also checks "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "whether there is any event has overlap timing with the newly added event."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madbeez"
        },
        "content": "The sequence diagram below shows the process of adding a new event."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![AddCommand Sequence Diagram](diagrams/AddCommand.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "*Figure 4.1 Sequence Diagram for add function*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.2 Clear events\u003ca id\u003d\"clear\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This feature allows users to completely delete the existing event information that is previously typed in by users. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Step 1. The user launches the application and wants to delete everything previously stored by using `clear` command.  "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Step 2. If there is no information stored before the user input the `clear` command, the user will be reminded about "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xuche123"
        },
        "content": "that the list is already empty. "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "The sequence diagram below shows the process of clearing all events."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![ClearCommand Sequence Diagram](diagrams/ClearCommand.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "*Figure 4.2 Sequence Diagram for clear function*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "max-wunan"
        },
        "content": " "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.3 Edit events\u003ca id\u003d\"edit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This feature allows users to edit the information of events that was previously added. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Step 1. The user launches the application and inputs a command to add one event.  "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Step 2. The user realises that there was a mistake in the event added and decides to edit the task information by "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xuche123"
        },
        "content": "entering `edit 1 class \u003cnew event description\u003e` to edit the one existing event."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Step 3. `editCommand()` function replaces the original event with the edited one. "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![EditCommand Sequence Diagram](diagrams/EditCommand.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xuche123"
        },
        "content": "*Figure 4.3 Sequence Diagram for EditCommand()*"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.4 Locate\u003ca id\u003d\"locate\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This feature allows users to add locations as part of the event information. If the place is located within the school, "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xuche123"
        },
        "content": "additional information about the location will be provided such as nearest bus stops or buildings. If the place is a "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "bus stop, the buses available will be provided instead. The user will add location name as the last piece of information "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "when adding an event. The LocationList has a method that searches for the place with the exact same name, if such a "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "place is not found, it will create a location and allocate it to be OutOfNUS.  "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "This feature also allows users to search for a location based on a given location name, or the location where an event "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "is held. It will print out additional information about the location to the user. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "The `locate` command executes with the following steps: "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "  "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Step 1. When the user type in `locate [input]`, the Parser class will extract the input from the command and call a "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "`LocateCommand` object.  "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* `input` will always be a String when passed into the command object. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Step 2. `LocateCommand` will then try to convert the input into an integer, if possible.  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Step 3. If conversion is possible, the method will obtain the event at the given index and return its location "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "information.  "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* Tries to catch `IndexOutOfBoundException` to check if the given index is within the range of the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "event list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Step 4. If conversion is not possible, then it will check if the given string is a valid location.  "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* Returns the location if valid"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* Prints an error message if invalid   "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "The sequence diagram below shows exactly which methods, from which classes, are called to obtain the required location. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "![locate sequence diagram](diagrams/LocateSequence.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "*Figure 4.4 Sequence diagram for locate function*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.5 Reminder\u003ca id\u003d\"reminder\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "madbeez"
        },
        "content": "This feature allows users to get a reminder of the events that will occur today."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Step 1. The user wants to see all the events that are happening today. He inputs the command `reminder`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Step 2. The command filters the list of all events based on the current date."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Step 3. It then calls `UI` to print the filtered list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "madbeez"
        },
        "content": "The sequence diagram belows shows the process of executing the reminder command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "madbeez"
        },
        "content": "![ReminderCommand Sequence Diagram](diagrams/ReminderCommand.png)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "madbeez"
        },
        "content": "*Figure 4.5 Sequence Diagram for reminder function*"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.6 Sort events\u003ca id\u003d\"sort\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xuche123"
        },
        "content": "This feature allows users to sort the available task by a sorting criteria. Currently, the sorting criteria available"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xuche123"
        },
        "content": "are sorting by time, description and location.  "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Step 1. The user wants to view the events in a chronological order. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Step 2. The user enters `sort time`, which will call the `sortCommand()` function which will sort all events.  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![](diagrams/SortCommand.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xuche123"
        },
        "content": "*Figure 4.6 Sequence diagram for SortCommand()*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.7 View events\u003ca id\u003d\"view\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "madbeez"
        },
        "content": "This feature allows users to view a numbered list of all the events/tasks they have added so far,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "madbeez"
        },
        "content": "in the order which they were added."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Given below is an example usage scenario:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Step 1. The user wants to see a list of all the events he has added so far, and executes the command `list`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Step 2. The command calls the `printEventList` function from `UI`, which then prints the list of events."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "madbeez"
        },
        "content": "The sequence diagram below shows what happens when the list command is executed"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "madbeez"
        },
        "content": "![ListCommand Sequence Diagram](diagrams/ListCommand.png)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "madbeez"
        },
        "content": "*Figure 4.7 Sequence Diagram for list function*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 4.8 Help\u003ca id\u003d\"help\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "This feature allows users to view a summary of all the features available for the current version of NUSchedule. "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "When the user inputs `help`, all available commands and a simple description for each of them will be printed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "The sequence diagram below shows what happens when user enters `help`:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![HelpCommand Sequence Diagram](diagrams/HelpCommand.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "*Figure 4.8 Sequence Diagram for help function*"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "## 5. Documentation\u003ca id\u003d\"documentation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "madbeez"
        },
        "content": "This section provides other relevant information about the application."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 5.1 Product scope\u003ca id\u003d\"product_scope\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "__Target user profile:__"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* NUS student or staff"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* able to type quickly"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* has quite a number of events to keep track of  "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* prefers to use desktop apps"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* prefers using Command Line Interface (CLI) apps"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* prefers typing instead of mouse interactions"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 5.2 Value proposition\u003ca id\u003d\"value_proposition\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "NUSchedule aims to assist the target audience with:  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* managing all their events in one application (personal or work)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "* easily finding out about the location of their events "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### 5.3 User stories\u003ca id\u003d\"stories\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|1.0|busy individual|keep track of both personal and school activities|avoid clashing events"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|1.0|freshman|know module details and lesson venues|be on time for my activities"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|1.0|forgetful person|be reminded of the deadlines for my assignments|submit on time"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|1.0|tutor|know the estimated time for my students to travel to their next class|pace my lesson suitably"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "|1.0|hardworking student|track how much time I have spent studying|allocate my time efficiently"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|2.0|exchange student|know the optimal path to reach my next destination|avoid getting lost"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|2.0|professor|Know whether my students have another lesson after mine and the expected time of travelling|Pace my lesson appropriately"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "|2.0|student using zoom for lessons|record the virtual locations|store the links and passwords of the meetings"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Try different inputs with variations of the format, to check whether the exceptions are being correctly thrown.  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Also edit the stored data of events.txt to see whether the reaction is correct. Do not touch bus_stops.txt and "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "locations.txt for test purposes as they form the data base."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 84,
      "madbeez": 39,
      "max-wunan": 27,
      "-": 27,
      "jiaaaqi": 75,
      "Lee-Juntong": 60
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "# NUSchedule"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "A scheduler help you, who live in NUS, to manage your classes, assignments, personal events easily."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "![](diagrams/Logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Yang Jiaqi"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Zhuang Mengjin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Xu Che"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Wu Nan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "Wan Shi Jie Brendan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "NuSchedule is a straightforward yet sophisticated application that helps you manage your events. It allows you "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": " to keep track of not only your school events or activities (eg. lectures, tutorials, assignments), but "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": "also your personal activities. It utilises a command line interface (CLI), which accepts user input in the form of text. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": "This gives the application both simplicity and speed, setting it apart from other apps such as NUSMods and Luminus. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuche123"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuche123"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [View available commands](#view-available-commands)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [Add an event](#add-an-event)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [Edit an event](#edit-an-event)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [Sort Events](#sort-events)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [Find location](#find-a-location)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [List all events](#list-all-events)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [Clear events](#clear-events)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [Mark event as done](#mark-event-as-done)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    * [Reminder of deadlines](#reminder-of-deadlines)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuche123"
        },
        "content": "* [FAQs](#FAQ)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuche123"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuche123"
        },
        "content": "1. Ensure that you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xuche123"
        },
        "content": "2. Download the latest `nuschedule.jar` from here."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "3. Copy the file into a new folder, which will serve as the home folder for NuSchedule. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "4. Copy the latest `location.txt` and `bus_stops.txt` files into a directory named `data` in the home folder."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "5. Open the command prompt and navigate to the home folder."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "6. Run `nuschedule.jar` using the following command: `java -jar nuschedule.jar`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### View available commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Shows list of commands and provides a link to the user guide for more details. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### Add an event"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Adds events/tasks to the schedule. Can support various types of tasks: "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "In the following description, `DATE` refers to the date in the format yyyy-MM-dd. e.g. `2020-10-31` "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "`TIME` refers to the time in the format HH:mm. e.g. `10:00`  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xuche123"
        },
        "content": "* Personal events  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  Format: `personalEvent EVENTNAME /t DATE TIME /e DATE TIME /l LOCATION` for underline event.  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  OR `personalEvent EVENTNAME /t DATE TIME /e DATE TIME /o MEETING_LINK /p MEETING_PASSWORD` for online events.  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  Note that `/e DATE TIME` is optional. You have a personal event without an ending time.  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  In `/e DATE TIME`, `DATE` is optional. If you enter `/e TIME`, the default date will be the same "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  as the date that the event starts.  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  For online events, `/p MEETING_PASSWORD` is optional, since not all online events require a password."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xuche123"
        },
        "content": "* Assignments  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xuche123"
        },
        "content": "  Format: `assignment EVENTNAME /t DATE TIME /l LOCATION`  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  OR `assignment EVENTNAME /t DATE TIME /o SUBMISSION_LINK`  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xuche123"
        },
        "content": "* Classes  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  Format: `class CLASSNAME /t DATE TIME /e DATE TIME /l LOCATION`  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  OR `class CLASSNAME /t DATE TIME /e DATE TIME /o MEETING_LINK /p MEETING_PASSWORD`  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  Same as in personal events, in `/e DATE TIME`, `DATE` is optional. For online events,`/p MEETING_PASSWORD` is optional.  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  However, `/e DATE TIME` or `/e TIME` is required, since any class should end at some time. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xuche123"
        },
        "content": "`personalEvent Mom’s Birthday /t 2020-10-26 19:00 /l home`  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "`class CS2113 Lecture /t 2020-09-23 10:00 /e 12:00 /l LT27`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### Edit an event"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Edits existing events/tasks.  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Format: `edit INDEX EVENT_TYPE DESCRIPTION /t YYYY-MM-DD HH:MM /l LOCATION`  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "`edit INDEX ` the later part of the format is the same as adding an event. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Example: `edit 1 assignment cs2113t homework /t 2020-02-02 20:00 /l home`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### Sort events"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Sorts events based on a sorting criteria. Supported criteria includes time, description and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xuche123"
        },
        "content": "location."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Format: `sort SORT_CRITERIA`  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Example: `sort description`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### Find a location"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Shows you the location of the specified event/task.  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Format: `locate n/EVENTNAME`  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Example: `locate n/CS2113t Tutorial`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### List all events"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Shows you a list of all events.  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Format: `list`  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### Clear events"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Deletes events based on their index in the list.  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Format: `clear NUMBER` OR `clear ALL`  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Example: `clear 3`  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### Mark event as done"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Mark an event that has been completed with `DONE`.  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Format: `done INDEX`  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xuche123"
        },
        "content": "Example: `done 1`  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xuche123"
        },
        "content": "### Reminder of deadlines"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Shows a list of all events for today\u0027s date."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madbeez"
        },
        "content": "Format: `reminder`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xuche123"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xuche123"
        },
        "content": "the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|Action|Command|Example|"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|------|-------|-------|"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "|add|`EVENTTYPE EVENTNAME /t DATE TIME` `/e DATE TIME`(optional personal event, compulsory for class, must not have for assignment) `/l LOCATION` OR `/o LINK` `/p PASSWORD`(optional)|`personalEvent Mom’s Birthday /t 2020-10-26 19:00 /l home`|"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|clear|`clear NUMBER` OR `clear ALL` |`clear 3`|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|done|`done INDEX` |`done 1` |"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|edit|`edit INDEX EVENT_TYPE DESCRIPTION /t YYYY-MM-DD HH:MM /l LOCATION`|`edit 1 assignment cs2113t homework /t 2020-02-02 20:00 /l home`|"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|help|`help`||"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|list|`list`||"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|locate|`locate n/EVENTNAME` |`locate n/CS2113t Tutorial`|"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xuche123"
        },
        "content": "|sort|`sort SORT_CRITERIA` |`sort description`|"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "|delete|`delete INDEX`|`delete 1`|"
      }
    ],
    "authorContributionMap": {
      "xuche123": 80,
      "madbeez": 10,
      "max-wunan": 13,
      "-": 30,
      "jiaaaqi": 4,
      "Lee-Juntong": 20
    }
  },
  {
    "path": "src/main/java/NuSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.CreatingFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.DataFileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import usercommunication.UserInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Main entry-point for the NUSchedule application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NuSchedule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static BusStopList busStops;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private static LocationList locations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final UI ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private UserInfo userInfo \u003d new UserInfo(\"\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public NuSchedule(String... filePaths) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        busStops \u003d new BusStopList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        locations \u003d new LocationList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //busStops.loadBusStopData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //locations.loadLocationData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            storage \u003d new Storage(filePaths);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            storage.loadBusStopData(busStops.getBusStopList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            storage.loadLocationData(locations.getLocationList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (CreatingFileException | DataFileNotFoundException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            events \u003d new EventList(storage.loadEvents(locations));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            userInfo \u003d storage.loadUserInfo();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (NuScheduleException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events \u003d new EventList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // ui.printBusStopList(busStops.getBusStopList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // ui.printLocationList(locations.getLocationList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printGreetingMessage(userInfo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand, locations);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                c.execute(events, locations, busStops, ui, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NuScheduleException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        new NuSchedule(\"data/events.txt\", \"data/UserInfo.txt\").run();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "max-wunan": 1,
      "Lee-Juntong": 68,
      "jiaaaqi": 11
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WritingFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the command call when the user adds a new event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Sets the task to be added to the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param event The event to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public AddCommand(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Adds the appropriate type of event/task to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param events    the list of events."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException the file is not correctly written."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws WritingFileException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printConflictEvents(events.checkConflictTiming(event));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        events.addEvent(event);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        ui.printAddEventMessage(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        ui.printNumEvent(events.getSize());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(events.getEventList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 34,
      "Lee-Juntong": 11,
      "jiaaaqi": 2
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WritingFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user clears all events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws EmptyEventListException the exceptions when the user try to clear an empty list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws EmptyEventListException, WritingFileException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (events.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new EmptyEventListException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.clearEvents();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(events.getEventList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printClearEventsSuccessful();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 36
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NuScheduleException the exceptions can happen in this program,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                             to be handled based on the specific exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws NuScheduleException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 31,
      "jiaaaqi": 2
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.UndefinedEventException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WritingFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user deletes some event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final int eventIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DeleteCommand(int eventIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Delete the event, and update the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws UndefinedEventException the user trying to operate (delete/edit/done) some events that does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException    the file is not correctly written."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws UndefinedEventException, WritingFileException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (eventIndex \u003c\u003d -1 || eventIndex \u003e\u003d events.getSize()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new UndefinedEventException(eventIndex + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printDeleteMessage(events.get(eventIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.remove(eventIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printNumEvent(events.getSize());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(events.getEventList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 45
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.UndefinedEventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WritingFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user mark a task as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final int eventIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DoneCommand(int eventIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark the task as done, and update the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws UndefinedEventException the case when the the user trying to operate (delete/edit/done) some events"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                                 that does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException    the file is not correctly written."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws UndefinedEventException, WritingFileException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (eventIndex \u003c\u003d -1 || eventIndex \u003e\u003d events.getSize()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new UndefinedEventException(eventIndex + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.doneEvent(eventIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printDoneMessage(events.get(eventIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(events.getEventList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 44
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EditIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.UndefinedEventException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WritingFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuche123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuche123"
        },
        "content": " * Represents the command call when the user adds a new event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuche123"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuche123"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public EditCommand(Event event, int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * Edits the corresponding event/task in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param events    the list of events."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws UndefinedEventException the user trying to operate (delete/edit/done) some events that does not"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                                 exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException    Represents the exception when the file is not correctly written."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws UndefinedEventException, WritingFileException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (index \u003e\u003d events.getSize() || index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new UndefinedEventException(index + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.editEvent(event, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printConflictEvents(events.checkConflictTiming(event));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        ui.printEditEventMessage(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        ui.printNumEvent(events.getSize());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(events.getEventList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 30,
      "Lee-Juntong": 20
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user exits this program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark the status of the program, isExit, as true."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Also prints the exit message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 26,
      "jiaaaqi": 2
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoMatchingEventException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user want to find the tasks having a certain keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filterString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public FindCommand(String filterString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filterString \u003d filterString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Find the tasks having the keyword provided by the user, and print that filtered list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NoMatchingEventException the user trying to find a Task with a certain keyword, but such task does not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                                  exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws NoMatchingEventException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterWith(filterString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (filteredEventList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new NoMatchingEventException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printFilteredEventList(filteredEventList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 45
    }
  },
  {
    "path": "src/main/java/command/FindDateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEventDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user want to find the tasks in certain date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class FindDateCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public FindDateCommand(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NoEventDateException the user trying to find a Event with a certain date, but such Event does not"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                              exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws NoEventDateException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterDateWith(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (filteredEventList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new NoEventDateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printFilteredDateEventList(filteredEventList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 46
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user asking for helps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 27
    }
  },
  {
    "path": "src/main/java/command/LocateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * Represents the command call when the user wants to locate an event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class LocateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public LocateCommand(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Provides location information when user gives a number within size of EventList or name of a location."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        int eventNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            eventNum \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            Location location \u003d events.get(eventNum).getLocation();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(events.get(eventNum).getDescription() + \" is located at:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(location);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (locations.checkValidLocation(input)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                Location location \u003d locations.findLocation(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(\"Location Information: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(location);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(\"Please input a valid location or event number.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(\"Please input an event number that is within the event list.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 50
    }
  },
  {
    "path": "src/main/java/command/PrintFullListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class PrintFullListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the list of Events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws EmptyEventListException the exception when the user want to print an empty list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws EmptyEventListException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printEventList(events.getEventList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 26,
      "jiaaaqi": 2
    }
  },
  {
    "path": "src/main/java/command/PrintLocationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class PrintLocationCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints list of locations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        ui.printLocationList(locations.getLocationList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 21,
      "Lee-Juntong": 3
    }
  },
  {
    "path": "src/main/java/command/ReminderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.NoEventDateRemindException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the command call when the user wants a list of events within the day."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    private final LocalDate filterDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public ReminderCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        filterDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Command to print list of events within the day when called."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throws NoEventDateRemindException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d events.filterDateWith(filterDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (filteredEventList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            throw new NoEventDateRemindException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        ui.printFilteredEventList(filteredEventList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 21,
      "jiaaaqi": 21
    }
  },
  {
    "path": "src/main/java/command/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user wants to sort the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuche123"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public SortCommand(String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        events.sortEvent(type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        ui.printSortEventMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 20,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/command/UserInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import usercommunication.UserInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user wants to change the type of himself or herself."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UserInfoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private UserInfo userInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UserInfoCommand(UserInfo userInfo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.userInfo \u003d userInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events    the list of Events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locations the list of Locations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param busStops  the list of BusStops."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui        do outputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage   store the data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NuScheduleException the exceptions can happen in this program,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                             to be handled based on the specific exception."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(EventList events, LocationList locations, BusStopList busStops, UI ui, Storage storage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws NuScheduleException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeUserInfo(userInfo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.helloWithName(userInfo.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 38
    }
  },
  {
    "path": "src/main/java/event/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OnlineLocation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Assignment Events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Assignment extends Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this assignment to a string that is to be stored in a file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"A//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + by + \"//\" + (location !\u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ? location.fileString() : link.fileString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public Assignment(String description, Location location, LocalDateTime by) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, location);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Assignment(String description, OnlineLocation location, LocalDateTime by) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, location);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Assignment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(by);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[A]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"\\n\" + (location !\u003d null ? location : link);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 1,
      "madbeez": 3,
      "Lee-Juntong": 53
    }
  },
  {
    "path": "src/main/java/event/Class.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EndBeforeStartEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OnlineLocation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Class events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Class extends Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Class(String description, Location location, LocalDateTime at, LocalDateTime end)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws EndBeforeStartEventException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, location);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!end.isAfter(at)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new EndBeforeStartEventException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Class(String description, OnlineLocation meeting, LocalDateTime at, LocalDateTime end)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws EndBeforeStartEventException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, meeting);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!end.isAfter(at)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new EndBeforeStartEventException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this class to a string that is to be stored in a file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"C//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at + \"//\" + end + \"//\" + (location !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ? location.fileString() : link.fileString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(at);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date time of the class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDateTime get from LocalDateTime."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDateTime.from(at);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the end date time of the class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDateTime get from LocalDateTime."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDateTime.from(end);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[C]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\"))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \")\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"(end at: \" + end.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"\\n\" + (location !\u003d null ? location : link);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 1,
      "madbeez": 7,
      "Lee-Juntong": 80
    }
  },
  {
    "path": "src/main/java/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OnlineLocation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the event objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains a String description , which is the description of the event,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * and a boolean isDone, which is the status of the Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Provides methods to mark an event as done(either during user input or reading from file),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * get the value of isDone,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * convert the event object to a string to be printed out or write to a file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Event {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected Location location \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected OnlineLocation link \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event(String description, Location location) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event(String description, OnlineLocation location) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.link \u003d location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a Event\u0027s status as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract String fileString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the status of the Event as a icon."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return returns a tick if the Event is done, and returns a cross if the Event is not done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return (isDone ? \"Done\" : \"Not Done\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the common part for Event, Assignment, Class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the String variable of the description of this Event."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the description of this Event."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public static Comparator\u003cEvent\u003e descriptionComparator \u003d (o1, o2) -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            o1.getDescription().compareToIgnoreCase(o2.getDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public static Comparator\u003cEvent\u003e timeComparator \u003d (o1, o2) -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        LocalDate o2Date \u003d o2.getDate();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        LocalDate o1Date \u003d o1.getDate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        int comparator \u003d o1Date.getYear() - o2Date.getYear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        if (comparator \u003d\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            comparator \u003d o1Date.getMonthValue() - o2Date.getMonthValue();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            if (comparator \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                comparator \u003d o1Date.getDayOfMonth() - o2Date.getDayOfMonth();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        return comparator;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    };"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public static Comparator\u003cEvent\u003e locationComparator \u003d (o1, o2) -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            o1.getLocation().getName().compareToIgnoreCase(o2.getLocation().getName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 20,
      "Lee-Juntong": 92,
      "jiaaaqi": 4
    }
  },
  {
    "path": "src/main/java/event/PersonalEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EndBeforeStartEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OnlineLocation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the PersonalEvent Events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * PersonalEvent may or may not have an end time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class PersonalEvent extends Event {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime end \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this personal event to a string that is to be stored in a file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"P//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at + \"//\" + (location !\u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ? location.fileString() : link.fileString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the Event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(at);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public PersonalEvent(String description, Location location, LocalDateTime at) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, location);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public PersonalEvent(String description, Location location, LocalDateTime at, LocalDateTime end)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws EndBeforeStartEventException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, location);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!end.isAfter(at)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new EndBeforeStartEventException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public PersonalEvent(String description, OnlineLocation location, LocalDateTime at) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, location);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public PersonalEvent(String description, OnlineLocation location, LocalDateTime at, LocalDateTime end)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws EndBeforeStartEventException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description, location);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!end.isAfter(at)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new EndBeforeStartEventException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date time of the personal event."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDateTime get from LocalDateTime."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDateTime.from(at);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the end date time of the personal event."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDateTime get from LocalDateTime."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return LocalDateTime.from(end);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[P]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + (end !\u003d null ? \"\\n(end at: \" + at.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH\u0027:\u0027mm\")) + \")\" :"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"\\n\" + (location !\u003d null ? location : link);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 1,
      "madbeez": 3,
      "Lee-Juntong": 101
    }
  },
  {
    "path": "src/main/java/eventlist/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package eventlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "import exception.EmptyEventListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.UndefinedEventException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains the list of the events and provides ways to delete/add/mark as done events."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Construct the events as an empty ArrayList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * When loading from the file, create the list as provided in the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events provided by \u003ccode\u003eStorage::load()\u003c/code\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @see storage.Storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public EventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @param eventToBeAdded may be Assignment/Class/Personal Event based on the usage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void addEvent(Event eventToBeAdded) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.add(eventToBeAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a event as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventIndex the index of the event being done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                   //     * @throws UndefinedEventException the event is not defined but"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                   // the user want to mark it as done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void doneEvent(int eventIndex) throws UndefinedEventException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events.get(eventIndex).markAsDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new UndefinedEventException(eventIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * Edit the contents of an existing event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param event the new edited event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param index the index of the event being edited"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public void editEvent(Event event, int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert events !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        events.set(index, event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * Sorts the events alphabetically."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param type the sorting criteria."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public void sortEvent(String type) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        assert events !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events.sort(Event.descriptionComparator);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events.sort(Event.timeComparator);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            events.sort(Event.locationComparator);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Gives the access to the list of events."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the list to be printed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns how many events are in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the size of the ArrayList in the EventList object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Remove the event indicated by the user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void remove(int eventIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        assert events !\u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        events.remove(eventIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns the element at the specified position in this list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventIndex index of the event to return."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the event at the specified position in this list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event get(int eventIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events.get(eventIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the event list to find the events contain the information looking for by the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filterString the keyword that the user is looking for."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the events that satisfy the requirement."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e filterWith(String filterString) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDescription().contains(filterString))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredEventList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the event list to find the events happen on the date looking for by the user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param date the date that the user is looking for."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the events that satisfy the requirement."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e filterDateWith(LocalDate date) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDate().isEqual(date))"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredEventList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * Clear the ArrayList events if it is not empty."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     * @throws EmptyEventListException when the user tries to clear a list that is already empty."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void clearEvents() throws EmptyEventListException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        //assert events !\u003d null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        if (events \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            throw new EmptyEventListException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Checks whether there is any conflicting events in terms of timing."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param event the new added event."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered event arraylist. If there is no conflict, return null."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e checkConflictTiming(Event event) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        LocalDateTime eventStartDateTime \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        LocalDateTime eventEndDateTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            eventEndDateTime \u003d event.getEndDateTime();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            eventEndDateTime \u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e filteredEventList;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        filteredEventList \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getEndDateTime() !\u003d null)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e ((!(s instanceof Assignment))"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        \u0026\u0026 (s.getStartDateTime().isBefore(eventStartDateTime)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        || s.getStartDateTime().isEqual(eventStartDateTime))"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        \u0026\u0026 (s.getEndDateTime().isAfter(eventStartDateTime)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        || s.getEndDateTime().isEqual(eventStartDateTime))))"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (eventEndDateTime !\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            //this considers when the events already in the list lie in the duration of the new event"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            LocalDateTime finalEventEndDateTime \u003d eventEndDateTime;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ArrayList\u003cEvent\u003e filteredEventList2 \u003d (ArrayList\u003cEvent\u003e) events.stream()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    .filter(s -\u003e ((!(s instanceof Assignment))"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            \u0026\u0026 (s.getStartDateTime().isAfter(eventStartDateTime)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            || s.getStartDateTime().isEqual(eventStartDateTime))"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            \u0026\u0026 (s.getStartDateTime().isBefore(finalEventEndDateTime)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            || s.getStartDateTime().isEqual(finalEventEndDateTime))))"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    .collect(toList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            filteredEventList2.removeAll(filteredEventList);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            filteredEventList.addAll(filteredEventList2);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        filteredEventList.remove(event);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredEventList;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 29,
      "madbeez": 3,
      "max-wunan": 15,
      "Lee-Juntong": 167
    }
  },
  {
    "path": "src/main/java/exception/AssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to Assignment class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class AssignmentException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/ClassException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to Class class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class ClassException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/CreatingFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happen when the file is not created successfully."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class CreatingFileException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public CreatingFileException(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"The file \\\"\" + filePath + \"\\\" is not created\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 21
    }
  },
  {
    "path": "src/main/java/exception/DataFileNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happen when the data file is found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DataFileNotFoundException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DataFileNotFoundException(String fileName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return fileName + \"is not found. Did you forget to download the data folder provided in the release?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 22
    }
  },
  {
    "path": "src/main/java/exception/DateFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find the tasks on a certain date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * but the date is not given in the correct format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DateFormatException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * gives suggestion to the user on how to solve the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You entered a date in a format that is not accepted by this function.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"The format should be \\\"yyyy-MM-dd\\\"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"For example, 2000-01-01\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 19
    }
  },
  {
    "path": "src/main/java/exception/DeleteException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing delete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class DeleteException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/DeleteNumberFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing delete to a task not labeled with an int."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteNumberFormatException extends DeleteException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please enter an integer after delete.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/DoneException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class DoneException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/DoneNumberFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing done to a task not labeled with an int."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneNumberFormatException extends DoneException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please enter an integer after done.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/EditIndexOutOfBoundsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "public class EditIndexOutOfBoundsException extends NuScheduleException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        return \"Index provided is out of bound. Please provide a valid integer.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 8
    }
  },
  {
    "path": "src/main/java/exception/EmptyAssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyAssignmentException extends AssignmentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/EmptyClassException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyClassException extends ClassException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! The description of a class cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/EmptyDeleteException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types delete but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the task that should be deleted."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDeleteException extends DeleteException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the index of the task you want to delete.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyDoneException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types done but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the task that should be done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDoneException extends DoneException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the index of the task you have done.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when no description is provided for the event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class EmptyEventException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Your input is incomplete. Please enter an event description.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 14,
      "Lee-Juntong": 1
    }
  },
  {
    "path": "src/main/java/exception/EmptyEventIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyEventIndexException extends NuScheduleException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please provide a valid index.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/EmptyEventListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the event list is empty but the user want to print or clear the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyEventListException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Sorry, the list is empty.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 11
    }
  },
  {
    "path": "src/main/java/exception/EmptyFindDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types date but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyFindDateException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the date you are looking for.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyFindException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types find but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the keyword."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyFindException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter the keyword of the tasks you want to find.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyPersonalEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyPersonalEventException extends PersonalEventException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/EndBeforeStartEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an Event that ends before it starts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EndBeforeStartEventException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Just like you cannot die before you exist, an event cannot end before it starts.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 11
    }
  },
  {
    "path": "src/main/java/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions happen when the user input invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class InvalidCommandException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/InvalidSortCriteriaException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "public class InvalidSortCriteriaException extends NuScheduleException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        return \"Invalid sorting criteria given. Possible sorting criteria includes\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                + \" description, location and time.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 9
    }
  },
  {
    "path": "src/main/java/exception/LoadingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the user edit the file in a wrong way."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class LoadingException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"You edited the file in a wrong format. Please check.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 1,
      "Lee-Juntong": 14
    }
  },
  {
    "path": "src/main/java/exception/NoClassTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create a class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without giving it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoClassTimeException extends ClassException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter a time for class.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoClassTimeMarkerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create a Class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without using /t to give it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoClassTimeMarkerException extends ClassException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should mark the time for a class with \\\"/t\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoEditEventDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "public class NoEditEventDescriptionException extends ClassException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        return \"Please provide the details for the new event to be added.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 8
    }
  },
  {
    "path": "src/main/java/exception/NoEndTimeClassException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represent the user want to input a class without give it an ending time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEndTimeClassException extends ClassException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * The message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Every class should end at some time. Give it an ending, please. Mark it by \\\"/e\\\".\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/exception/NoEventDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find a Event with a certain date,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * but such Event does not exist in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventDateException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Sorry, there isn\u0027t any event in the list on the given date.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoEventDateRemindException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the exception happens when the user trying to find a Event with a certain date,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * but such Event does not exist in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class NoEventDateRemindException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Sorry, there are no events in the list for today.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 16
    }
  },
  {
    "path": "src/main/java/exception/NoEventLocationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when no location is provided when adding a new event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class NoEventLocationException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please input a valid location and mark it with \\\"/l\\\" underline locations or \\\"/o\\\" for online \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"location.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 13,
      "Lee-Juntong": 3
    }
  },
  {
    "path": "src/main/java/exception/NoEventLocationMarkerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without using /l to give it a location."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventLocationMarkerException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please mark the location of the event by \\\"/l\\\".\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoEventTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the exception when no date/time is inputted as expected."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class NoEventTimeException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Please input the date/time.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 15
    }
  },
  {
    "path": "src/main/java/exception/NoEventTimeMarkerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception where there is no time marker in the command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventTimeMarkerException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please mark the time of the event by \\\"/t\\\".\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 11,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/exception/NoMatchingEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find a Task with a certain keyword, but such"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * task does not exist in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoMatchingEventException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Sorry, there isn\u0027t such event in the list with the given keyword.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoPersonalEventTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without giving it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoPersonalEventTimeException extends PersonalEventException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should enter a time for event.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoPersonalEventTimeMakerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without using \\by to give it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoPersonalEventTimeMakerException extends PersonalEventException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! You should mark the time for an event with \\\"/at\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/exception/NoSortCriteriaException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "public class NoSortCriteriaException extends NuScheduleException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        return \"No sorting criteria given. Possible sorting criteria includes\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                + \" description, location and time.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 9
    }
  },
  {
    "path": "src/main/java/exception/NuScheduleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class NuScheduleException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract String getMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 10
    }
  },
  {
    "path": "src/main/java/exception/PersonalEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to PersonalEvent class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class PersonalEventException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/exception/TimeFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the date/time are entered incorrectly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class TimeFormatException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * gives suggestion to the user on how to solve the error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You entered the time in a format that is not accepted by this program.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"The format should be \\\"yyyy-MM-dd HH:mm\\\"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"For example, 2000-01-01 00:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 10,
      "Lee-Juntong": 8
    }
  },
  {
    "path": "src/main/java/exception/UndefinedEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the the user trying to operate (delete/edit/done)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * some events that does not exist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UndefinedEventException extends NuScheduleException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final int index;//Task label of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Create an exception according to the input of the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param index the label of the event that the user want to operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UndefinedEventException(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! There isn\u0027t a event labeled \" + index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 27
    }
  },
  {
    "path": "src/main/java/exception/UnknownErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when it should not happen."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UnknownErrorException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"There shouldn\u0027t be such error.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 11
    }
  },
  {
    "path": "src/main/java/exception/WritingFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the file is not correctly written."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WritingFileException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return \"Something went wrong when writing to the file.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 1,
      "Lee-Juntong": 14
    }
  },
  {
    "path": "src/main/java/exception/WrongCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": " * Represents the exception when an invalid command is inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WrongCommandException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"You may enter \\\"help\\\" for more information.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 12,
      "Lee-Juntong": 5
    }
  },
  {
    "path": "src/main/java/exception/WrongEditFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the index for edit is of a wrong format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WrongEditFormatException extends NuScheduleException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please enter the index of the event that you want to edit as an integer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/location/Building.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents Building objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains an array of Strings nearestBusStops which represents the bus stops nearby."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Building extends Location {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String[] nearestBusStops;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Building(String name, String[] nearestBusStops) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.nearestBusStops \u003d nearestBusStops;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.type \u003d LocationType.BUILDING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Building): \" + name + \"\\nNearest bus stop(s): \" + printNearestBusStops();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this Building to a string that is to be stored in a file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String busStops \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (String additionalInfo : nearestBusStops) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            busStops \u003d additionalInfo + \",\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert busStops !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"BLK/\" + name + \"/\" + busStops.substring(0, busStops.length() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String printNearestBusStops() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String str \u003d Arrays.toString(nearestBusStops);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        str \u003d str.substring(1, str.indexOf(\"]\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 27,
      "Lee-Juntong": 20
    }
  },
  {
    "path": "src/main/java/location/BusStop.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents bus stop objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " * Contains String name which is the name of the bus stop and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * an array of Strings which is the list of buses available at the bus stop."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class BusStop {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String[] buses;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public BusStop(String name, String[] buses) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.buses \u003d buses;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return name + \"\\nBuses Available: \" + Arrays.toString(buses);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 25,
      "Lee-Juntong": 6
    }
  },
  {
    "path": "src/main/java/location/Hostel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents Hostel objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains an array of Strings nearestBusStops which represents the bus stops nearby."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class Hostel extends Location {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    String[] nearestBusStops;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Hostel(String name, String[] nearestBusStops) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.type \u003d LocationType.HOSTEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.nearestBusStops \u003d nearestBusStops;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Hostel): \" + name + \"\\nNearest bus stop(s): \" + printNearestBusStops();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this Hostel to a string that is to be stored in a file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String busStops \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (String additionalInfo : nearestBusStops) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            busStops \u003d additionalInfo + \",\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert busStops !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"H/\" + name + \"/\" + busStops.substring(0, busStops.length() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    private String printNearestBusStops() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String str \u003d Arrays.toString(nearestBusStops);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        str \u003d str.substring(1, str.indexOf(\"]\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 28,
      "Lee-Juntong": 19
    }
  },
  {
    "path": "src/main/java/location/LectureTheatre.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents lecture theatre objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains a String nearestBuilding which represents the name of nearest building."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class LectureTheatre extends Location {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String nearestBuilding;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public LectureTheatre(String name, String nearestBuilding) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.type \u003d LocationType.LT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.nearestBuilding \u003d nearestBuilding;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Lecture Theatre): \" + name + \"\\nNearest building: \" + nearestBuilding;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this LT to a string that is to be stored in a file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"L/\" + name + \"/\" + nearestBuilding;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 19,
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/location/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents location objects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains String name, which is the name of location, and type of location."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocationType type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    // private int[] coordinates \u003d new int[2];  // will implement in version 2.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Location(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    protected String printType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        String str;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case BUILDING:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            str \u003d \"Building\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case HOSTEL:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            str \u003d \"Hostel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case LT:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            str \u003d \"Lecture Theatre\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        case OUT_OF_NUS:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            str \u003d \"Out of NUS\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            str \u003d \"ERROR\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(\" + printType() + \")\" + name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * All location class objects should have this methods, except BusStop."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string to be wrote in the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 19,
      "jiaaaqi": 36
    }
  },
  {
    "path": "src/main/java/location/LocationType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public enum LocationType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    BUILDING,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    HOSTEL,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    LT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    OUT_OF_NUS"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 8
    }
  },
  {
    "path": "src/main/java/location/OnlineLocation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Virtual location is also location!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class represents the online meetings (e.g. zoom sessions) for people to attend, or the link to submit"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * assignment."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This format should be /o url /p pwd, or /o url, since not all sessions need a password, and the submission link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * does not require a password."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class OnlineLocation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String link;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * the constructor of the object if the meeting does not need pwd."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param link the url of the online meeting"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public OnlineLocation(String link) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert link !\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * the constructor of the object if the meeting needs pwd."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param link the url of the online meeting"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param pwd  the password of the online meeting"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public OnlineLocation(String link, String pwd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert link !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert pwd !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.password \u003d pwd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns the details of the online location."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the link of the location. If there is password, return the password also."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"link:\" + link + (password !\u003d null ? \" password: \" + password : \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns the details of the location to be printed in a file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the link of the meeting. If there is password, return the password also."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"online//\" + link + (password !\u003d null ? \"//\" + password : \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 54
    }
  },
  {
    "path": "src/main/java/location/OutOfNuS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class OutOfNuS extends Location {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public OutOfNuS(String name) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Prepares string to be printed in a list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return object to be printed in a certain format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"(Out of NUS): \" + name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * Convert the information about this location to a string that is to be stored in a file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     * @return the result string to be stored."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return \"OUT/\" + name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 13,
      "jiaaaqi": 11,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "src/main/java/locationlist/BusStopList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package locationlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.BusStop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class BusStopList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final ArrayList\u003cBusStop\u003e busStopList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public ArrayList\u003cBusStop\u003e getBusStopList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return busStopList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Flag to check if the bus stop exists."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param name name of bus stop to be checked"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return boolean value of if the bus stop exist in the list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public boolean checkExistence(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (BusStop busStop : busStopList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (name.equals(busStop.getName())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 26,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "src/main/java/locationlist/LocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "package locationlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.OutOfNuS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "public class LocationList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final ArrayList\u003cLocation\u003e locationList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public ArrayList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return locationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Flag to check if location exists."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param name name of the location to be checked"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return boolean value of if the location is found in the location list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public boolean checkValidLocation(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (Location location : locationList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (name.equals(location.getName())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * Finds location in the list based on the name input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param name String that represents name of location to find"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @return Location that is found in the list to be returned"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public Location findLocation(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        Location locationReturned \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (Location location : locationList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (name.equals(location.getName())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                locationReturned \u003d locationList.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                return locationReturned;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (locationReturned \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            locationReturned \u003d new OutOfNuS(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            locationList.add(locationReturned);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        return locationReturned;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 51,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.FindDateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.LocateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.PrintFullListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.PrintLocationCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import command.ReminderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import command.SortCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import command.UserInfoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.Assignment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.PersonalEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.Assignment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Class;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import event.PersonalEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.DateFormatException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.DeleteNumberFormatException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.DoneNumberFormatException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyDeleteException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyDoneException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventIndexException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyFindDateException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyFindException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.InvalidSortCriteriaException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEndTimeClassException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.NoEditEventDescriptionException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEventLocationException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEventTimeException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEventTimeMarkerException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.NoSortCriteriaException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.TimeFormatException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.UnknownErrorException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WrongCommandException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WrongEditFormatException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Building;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Hostel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.LectureTheatre;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OnlineLocation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OutOfNuS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import usercommunication.UserInfo;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class contains one function -- parse, to call the respective command function according to the user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String PRINT_EVENT_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public static final String PRINT_LOCATION_LIST \u003d \"locations\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public static final String LOCATE_EVENT \u003d \"locate\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EVENT_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ASSIGNMENT \u003d \"assignment\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String PERSONAL_EVENT \u003d \"personalEvent\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EVENT_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EVENT_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String TIME_MARKER \u003d \"/t\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String SINGLE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LOCATION_MARKER \u003d \"/l\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EVENT_FIND_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public static final String SORT \u003d \"sort\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String END_TIME_MARKER \u003d \"/e\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ONLINE_LOCATION_MARKER \u003d \"/o\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String PASSWORD_MARKER \u003d \"/p\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    public static final String REMIND \u003d \"reminder\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function calls the correct command the user want to perform, by returning a Command object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param fullCommand the full string of user input"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the specific Command object to perform what the user want to do"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws NuScheduleException includes all exceptions may happen during parsing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static Command parse(String fullCommand, LocationList locations) throws NuScheduleException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //deletes all the starting and ending spaces"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        // this block deals with single word command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        switch (fullCommand) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        case PRINT_EVENT_LIST:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new PrintFullListCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        case PRINT_LOCATION_LIST:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return new PrintLocationCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String[] words \u003d fullCommand.split(SINGLE_SPACE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with user info"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        case \"student\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        case \"professor\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new UserInfoCommand(new UserInfo(fullCommand.substring(words[0].length() + 1), words[0]));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with locate command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        if (words[0].equals(LOCATE_EVENT)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            return new LocateCommand(words[1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with find command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(EVENT_FIND)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyFindException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new FindCommand(fullCommand.substring(5));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with find date command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(EVENT_FIND_DATE)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyFindDateException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                return new FindDateCommand(LocalDate.parse(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new DateFormatException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (words[0].equals(REMIND)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int eventIndex;//to indicate what is the Event we are dealing with. may not be used."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with done command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(EVENT_DONE)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyDoneException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                eventIndex \u003d Integer.parseInt(fullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new DoneNumberFormatException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new DoneCommand(eventIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with delete command"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(EVENT_DELETE)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyDeleteException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                eventIndex \u003d Integer.parseInt(fullCommand.substring(7)) - 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new DeleteNumberFormatException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new DeleteCommand(eventIndex);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with sorting"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        if (words[0].equals(SORT)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            if (fullCommand.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                throw new NoSortCriteriaException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            String type \u003d words[1];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            case \"location\":"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                return new SortCommand(type);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                throw new InvalidSortCriteriaException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //these variables are used by either Edit or Add"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //the position of /t"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int startTimeDividerPosition \u003d fullCommand.indexOf(TIME_MARKER);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //the position of the space when the user enters a date time in the format yyyy-mm-dd HH:mm"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        int timeDivider;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //the position of /et"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int endTimeDividerPosition \u003d fullCommand.indexOf(END_TIME_MARKER);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //the position of /l"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int locationDividerPosition \u003d fullCommand.indexOf(LOCATION_MARKER);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //the position of /o"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int onlineLocationDividerPosition \u003d fullCommand.indexOf(ONLINE_LOCATION_MARKER);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //the position of /p"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int pwdDividerPosition \u003d fullCommand.indexOf(PASSWORD_MARKER);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String startDateTime;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Location location;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String endDateTime;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //the position of the space when the user enters an ending date time in the format yyyy-mm-dd HH:mm"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int endingTimeDivider;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with edit command"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block will change fullCommand, but this does not affect the later block since"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //it either return an EditCommand, or throw an exception"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(EDIT)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            if (fullCommand.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                throw new EmptyEventIndexException();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyEventIndexException();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                eventIndex \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new WrongEditFormatException();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            //the following part is almost the same as AddCommand, but returns EditCommand"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            if (words.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                throw new NoEditEventDescriptionException();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (startTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (words[2].equals(ASSIGNMENT) || words[2].equals(CLASS) || words[2].equals(PERSONAL_EVENT)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (locationDividerPosition \u003d\u003d -1 \u0026\u0026 onlineLocationDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventLocationException();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                int prefixLength \u003d words[0].length() + words[1].length() + words[2].length();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(prefixLength, startTimeDividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (locationDividerPosition !\u003d -1) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (fullCommand.substring(startTimeDividerPosition + 3, locationDividerPosition - 1).isBlank()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                        throw new NoEventTimeException();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (fullCommand.substring(locationDividerPosition + 3).isBlank()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                        throw new NoEventLocationException();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (fullCommand.substring(startTimeDividerPosition + 3, onlineLocationDividerPosition - 1)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            .isBlank()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new NoEventTimeException();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (fullCommand.substring(onlineLocationDividerPosition + 3).isBlank()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new NoEventLocationException();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                //this deals with the event holding offline"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (locationDividerPosition !\u003d -1) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        timeDivider \u003d fullCommand.substring(startTimeDividerPosition + 3).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        location \u003d parseLocation(fullCommand.substring(locationDividerPosition + 3), locations);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        switch (words[2]) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case ASSIGNMENT:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    locationDividerPosition);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new EditCommand(new Assignment(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime)),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    eventIndex);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case CLASS:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                throw new NoEndTimeClassException();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    locationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            //if the user does not input the date of the ending time, by default it ends at the same"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            // day as the starting time"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition, locationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new EditCommand(new Class(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(endDateTime)),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    eventIndex);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case PERSONAL_EVENT:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        locationDividerPosition);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                return new EditCommand(new PersonalEvent(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime)),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        eventIndex);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        endTimeDividerPosition);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        locationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                //if the user does not input the date of the ending time, by default it ends at the"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                // same day as the starting time"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        endTimeDividerPosition, locationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                return new EditCommand(new PersonalEvent(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(endDateTime)),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        eventIndex);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new TimeFormatException();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        timeDivider \u003d fullCommand.substring(startTimeDividerPosition + 3).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        OnlineLocation virtualLocation;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (pwdDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            virtualLocation \u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    new OnlineLocation(fullCommand.substring(onlineLocationDividerPosition + 3));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            virtualLocation \u003d"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    new OnlineLocation(fullCommand.substring(onlineLocationDividerPosition + 3,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                            pwdDividerPosition - 1), fullCommand.substring(pwdDividerPosition + 3));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        switch (words[2]) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case ASSIGNMENT:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    onlineLocationDividerPosition);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new EditCommand(new Assignment(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), virtualLocation, LocalDateTime.parse(startDateTime)),"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    eventIndex);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case CLASS:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                throw new NoEndTimeClassException();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    onlineLocationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition, onlineLocationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new EditCommand(new Class(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), virtualLocation, LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(endDateTime)),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    eventIndex);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case PERSONAL_EVENT:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        onlineLocationDividerPosition);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                return new EditCommand(new PersonalEvent(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        startTimeDividerPosition - 1), virtualLocation,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(startDateTime)),"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        eventIndex);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        endTimeDividerPosition);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        onlineLocationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        endTimeDividerPosition, onlineLocationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                return new EditCommand(new PersonalEvent(fullCommand.substring(prefixLength + 1,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        startTimeDividerPosition - 1), virtualLocation,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(endDateTime)),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        eventIndex);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                        throw new TimeFormatException();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new WrongCommandException();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with add command"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //we shall check that the user input is not meant for any other command beforehand"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //because the default block will throw an exception."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        // i.e. when this block is entered, the parser will not go to any other blocks"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(ASSIGNMENT) || words[0].equals(CLASS) || words[0].equals(PERSONAL_EVENT)) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(words[0].length()).isBlank()) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyEventException();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (startTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new NoEventTimeMarkerException();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (locationDividerPosition \u003d\u003d -1 \u0026\u0026 onlineLocationDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new NoEventLocationException();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(words[0].length(), startTimeDividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                throw new EmptyEventException();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (locationDividerPosition !\u003d -1) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(startTimeDividerPosition + 3, locationDividerPosition - 1).isBlank()) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(locationDividerPosition + 3).isBlank()) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new NoEventLocationException();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(startTimeDividerPosition + 3, onlineLocationDividerPosition - 1)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        .isBlank()) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(onlineLocationDividerPosition + 3).isBlank()) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventLocationException();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            //this deals with the event holding offline"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (locationDividerPosition !\u003d -1) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(locationDividerPosition + 3).isBlank()) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventLocationException();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    timeDivider \u003d fullCommand.substring(startTimeDividerPosition + 3).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    location \u003d parseLocation(fullCommand.substring(locationDividerPosition + 3), locations);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    switch (words[0]) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case ASSIGNMENT:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                locationDividerPosition);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        return new AddCommand(new Assignment(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime)));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case CLASS:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            throw new NoEndTimeClassException();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endTimeDividerPosition);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                locationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        //if the user does not input the date of the ending time, by default it ends at the same"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        // day as the starting time"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endTimeDividerPosition, locationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        return new AddCommand(new Class(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                LocalDateTime.parse(endDateTime)));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case PERSONAL_EVENT:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    locationDividerPosition);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new AddCommand(new PersonalEvent(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime)));"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    locationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            //if the user does not input the date of the ending time, by default it ends at the same"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            // day as the starting time"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition, locationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new AddCommand(new PersonalEvent(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), location, LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(endDateTime)));"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } else { //this deals with the event holding online"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    timeDivider \u003d fullCommand.substring(startTimeDividerPosition + 3).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    OnlineLocation virtualLocation;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (pwdDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        virtualLocation \u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                new OnlineLocation(fullCommand.substring(onlineLocationDividerPosition + 3));"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        virtualLocation \u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                new OnlineLocation(fullCommand.substring(onlineLocationDividerPosition + 3,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        pwdDividerPosition - 1), fullCommand.substring(pwdDividerPosition + 3));"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    switch (words[0]) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case ASSIGNMENT:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                onlineLocationDividerPosition);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        return new AddCommand(new Assignment(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startTimeDividerPosition - 1), virtualLocation, LocalDateTime.parse(startDateTime)));"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case CLASS:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            throw new NoEndTimeClassException();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endTimeDividerPosition);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                onlineLocationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                endTimeDividerPosition, onlineLocationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        return new AddCommand(new Class(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                startTimeDividerPosition - 1), virtualLocation, LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                LocalDateTime.parse(endDateTime)));"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case PERSONAL_EVENT:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (endTimeDividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    onlineLocationDividerPosition);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new AddCommand(new PersonalEvent(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), virtualLocation,"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(startDateTime)));"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            startDateTime \u003d getStartDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endingTimeDivider \u003d fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    onlineLocationDividerPosition - 1).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            endDateTime \u003d getEndDateTime(fullCommand, startTimeDividerPosition, timeDivider,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    endTimeDividerPosition, onlineLocationDividerPosition, endingTimeDivider);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            return new AddCommand(new PersonalEvent(fullCommand.substring(words[0].length() + 1,"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    startTimeDividerPosition - 1), virtualLocation,"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(startDateTime),"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(endDateTime)));"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new WrongCommandException();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert false;//nothing should reach here"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        throw new UnknownErrorException();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * return the EndDateTime. if the date is not specified, by default, it ends at the same date as the starting date."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param fullCommand              the full command provided by user"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param startTimeDividerPosition index of \"/t\""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param timeDivider              index of \" \" in the start time"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param endTimeDividerPosition   index of \"/e\""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locationDividerPosition  index of \"/o\" or \"/l\""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param endingTimeDivider        index of \" \" in the end date time, may be -1"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return a string in the format \"yyyy-MM-dd HH:mm\" that can be parsed into a LocalDateTime object"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static String getEndDateTime(String fullCommand, int startTimeDividerPosition, int timeDivider,"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                         int endTimeDividerPosition, int locationDividerPosition,"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                         int endingTimeDivider) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return (endingTimeDivider !\u003d -1 ? fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                endTimeDividerPosition + 3 + endingTimeDivider) :"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fullCommand.substring(startTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        startTimeDividerPosition + 3 + timeDivider))"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"T\""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + (endingTimeDivider !\u003d -1 ? fullCommand.substring(endTimeDividerPosition + 3 + endingTimeDivider + 1,"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                locationDividerPosition - 1) : fullCommand.substring(endTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                locationDividerPosition - 1));"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * return the StartDateTime."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param fullCommand              the full command provided by user"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param startTimeDividerPosition index of \"/t\""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param timeDivider              index of \" \" in the start time"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param endTimeDividerPosition   index of \"/e\""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return a string in the format \"yyyy-MM-dd HH:mm\" that can be parsed into a LocalDateTime object"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static String getStartDateTime(String fullCommand, int startTimeDividerPosition, int timeDivider,"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                           int endTimeDividerPosition) {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return fullCommand.substring(startTimeDividerPosition + 3,"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                startTimeDividerPosition + 3 + timeDivider)"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"T\""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + fullCommand.substring(startTimeDividerPosition + 3 + timeDivider + 1,"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                endTimeDividerPosition - 1);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This method parses the inputted location."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param input the string inputted by the user."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the parsed location."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "madbeez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public static Location parseLocation(String input, LocationList locations) {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        assert locations !\u003d null;"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Location location;"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        String[] info \u003d input.split(\"/\");"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        // parse location from event.txt file"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            String[] additionalInfo \u003d info[2].split(\",\");"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            switch (info[0]) {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            case \"BLK\":"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                location \u003d new Building(info[1], additionalInfo);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            case \"H\":"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                location \u003d new Hostel(info[1], additionalInfo);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            case \"L\":"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                location \u003d new LectureTheatre(info[1], info[2]);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            case \"OUT\":"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                location \u003d new OutOfNuS(info[1]);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                location \u003d new OutOfNuS(info[0]);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (input.contains(\"/\")) {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                location \u003d new OutOfNuS(info[1]);"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                locations.getLocationList().add(location);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            // parse location from user input"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            // System.out.print(\"Invalid Location Format.\");"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            location \u003d locations.findLocation(input.trim());"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                location \u003d new OutOfNuS(input.trim());"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 35,
      "madbeez": 71,
      "Lee-Juntong": 541,
      "jiaaaqi": 35
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Class;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.PersonalEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.CreatingFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.DataFileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EndBeforeStartEventException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.LoadingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.WritingFileException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Building;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.BusStop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Hostel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.LectureTheatre;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OnlineLocation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import location.OutOfNuS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import usercommunication.UserInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class creates the folder and file path if it\u0027s not already created, and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * prepare the data in the file to be used."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String REGEX_IN_FILE \u003d \"//\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ONLINE \u003d \"online\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String[] filePaths;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    //filePaths[0] will be the events data file. filePath[1] will be the user info file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Set the \u003ccode\u003efilepath \u003c/code\u003e according to the user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePaths is the paths of the files"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Storage(String... filePaths) throws CreatingFileException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePaths \u003d filePaths;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        createFolderAndFIle(this.filePaths[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        createFolderAndFIle(this.filePaths[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Creates the folder and file if not already crated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePath the String of the relative path"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void createFolderAndFIle(String filePath) throws CreatingFileException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File directory \u003d dataFile.getParentFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new CreatingFileException(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Save the data of the Event list to the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events the list of Events provided by a variable from a EventList object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException represents the file is not correctly written"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void writeFile(ArrayList\u003cEvent\u003e events) throws WritingFileException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePaths[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(event.fileString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new WritingFileException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Save the data of the user info."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param userInfo name and type of the user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException Represents the exception when the file is not correctly written."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void writeUserInfo(UserInfo userInfo) throws WritingFileException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePaths[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            fw.write(userInfo.fileString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new WritingFileException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares the data in the file as an UserInfo, which is used to construct the userInfo."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the name and type of the user"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws LoadingException represents the Events is not correctly created"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UserInfo loadUserInfo() throws LoadingException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        UserInfo userInfo \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Scanner s \u003d new Scanner(new File(filePaths[1]));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (s.hasNext()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String[] words \u003d s.nextLine().split(REGEX_IN_FILE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                userInfo \u003d new UserInfo(words[0], words[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"file not found\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new LoadingException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return userInfo;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares the data in the file as an ArrayList, which is used to construct the EventList."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the Events in an ArrayList"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws LoadingException             represents the Events is not correctly created"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws EndBeforeStartEventException Represents the case when the user want to create an Event that ends"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *                                      before it starts."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cEvent\u003e loadEvents(LocationList locations) throws LoadingException, EndBeforeStartEventException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(filePaths[0]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Scanner s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String[] words \u003d s.nextLine().split(REGEX_IN_FILE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                switch (words[0]) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                case \"C\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (!words[5].equals(ONLINE)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.add(new Class(words[2], Parser.parseLocation(words[5], locations),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            if (words.length \u003e\u003d 8) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                events.add(new Class(words[2], new OnlineLocation(words[6], words[7]),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                events.add(new Class(words[2], new OnlineLocation(words[6]),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new LoadingException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        events.get(events.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                case \"A\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (!words[4].equals(ONLINE)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                            events.add(new Assignment(words[2], Parser.parseLocation(words[4], locations),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.add(new Assignment(words[2], new OnlineLocation(words[5]),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new LoadingException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        events.get(events.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                case \"P\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        switch (words.length) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case 5:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                            events.add(new PersonalEvent(words[2], Parser.parseLocation(words[4], locations),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case 6:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            if (!words[4].equals(ONLINE)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                events.add(new PersonalEvent(words[2], Parser.parseLocation(words[5], locations),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                events.add(new PersonalEvent(words[2], new OnlineLocation(words[5]),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case 7:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            if (words[4].equals(ONLINE)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                events.add(new PersonalEvent(words[2], new OnlineLocation(words[5], words[6]),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            } else if (words[5].equals(ONLINE)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                events.add(new PersonalEvent(words[2], new OnlineLocation(words[6]),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                        LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                throw new LoadingException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        case 8:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            events.add(new PersonalEvent(words[2], new OnlineLocation(words[6], words[7]),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                                    LocalDateTime.parse(words[3]), LocalDateTime.parse(words[4])));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            throw new LoadingException();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new LoadingException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        events.get(events.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new LoadingException();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"file not found\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new LoadingException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Loads data from bus_stop text file to an ArrayList, which is stored in a BusStopList."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStopList ArrayList of BusStops in BusStopList"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void loadBusStopData(ArrayList\u003cBusStop\u003e busStopList) throws DataFileNotFoundException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File f \u003d new File(\"./data/bus_stops.txt\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DataFileNotFoundException(f.getName());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] split \u003d input.split(\":\", 2);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String name \u003d split[0];"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] buses \u003d split[1].split(\",\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            BusStop stop \u003d new BusStop(name, buses);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            busStopList.add(stop);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Loads data from location text file into an ArrayList, which is stored in a LocationList."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param locationList ArrayList of Locations in LocationList"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void loadLocationData(ArrayList\u003cLocation\u003e locationList) throws DataFileNotFoundException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        File f \u003d new File(\"./data/locations.txt\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DataFileNotFoundException(f.getName());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            // info[0] \u003d type, info[1] \u003d name, info[2] \u003d nearest buildings/bus stops"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] info \u003d input.split(\"/\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            String[] additionalInfo \u003d info[2].split(\",\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            Location location \u003d null;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            switch (info[0]) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"BLK\":"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                location \u003d new Building(info[1], additionalInfo);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"H\":"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                location \u003d new Hostel(info[1], additionalInfo);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"L\":"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                location \u003d new LectureTheatre(info[1], info[2]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            case \"OUT\":"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                location \u003d new OutOfNuS(info[1]);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            if (location !\u003d null) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                locationList.add(location);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "                System.out.println(\"Invalid Location Type\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 245,
      "jiaaaqi": 61
    }
  },
  {
    "path": "src/main/java/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import location.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import usercommunication.UserInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * UI receives all user inputs, and produces outputs show to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            \" _       _ _        _   ____       _                    _        _\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |     | | |      | | / ___|     | |                  | |      | |\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"|  \\\\    | | |      | |/ /         | |                  | |      | |\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |\\\\\\\\   | | |      | |\\\\ \\\\         | |        ___       | |      | | ___\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| | \\\\\\\\  | | |      | | \\\\ \\\\     ___| |______ /___\\\\  ____| |_    _| |/___\\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |  \\\\\\\\ | | |      | |  \\\\ \\\\   /___|  ____  ||___|||  __  | |  | | ||___||\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |   \\\\\\\\| | |      | |   \\\\ \\\\ //   | |    | | ___/ | |  | | |  | | | ___/\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"| |    \\\\  | |______| |___/ / \\\\\\\\___| |    | |\\\\____ | |__| | |__| | |\\\\____\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    + \"|_|     |_|__________|____/   \\\\___|_|    |_|\\\\___/ |______|\\\\___,_|_|\\\\___/\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LINE_DIVIDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Reads the user input line by line."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string of the line"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the logo of DUKE and greet the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printGreetingMessage(UserInfo userInfo) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            helloWithName(userInfo.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"I am NUSchedule! What\u0027s your name?\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the separator."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(LINE_DIVIDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the events with labels, based on the input list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events an ArrayList of events to be printed one by one."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printEventList(ArrayList\u003cEvent\u003e events) throws EmptyEventListException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new EmptyEventListException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"Here are the Events in your list:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                for (Event event : events) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    numPrintedEvents++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    System.out.println(numPrintedEvents + \". \" + event.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madbeez"
        },
        "content": "                System.out.println(\"The list is empty.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the Events of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param events an ArrayList of Events to be printed one by one."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredEventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the matching Events in your list:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + event.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message when experiencing exceptions."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message the message get from the error."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message during loading. Since the general IO exception is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * handled when executing the process, the error leads to this would be the file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * is edited in a wrong way."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"You edit the file in a wrong format. Please check.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message during executing commands."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function is used to make all printing being done in UI."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message determined by the command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.print(message);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Call when exit the program."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Take in a size and prints the total number of Events."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param size number of events in the list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printNumEvent(int size) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" Events in the list.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user mark some Event as done."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param event the Event being done"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDoneMessage(Event event) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this Event as done: \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user deletes some Event."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param event the Event being deleted"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDeleteMessage(Event event) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this Event: \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user adds some Event."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param eventAdded the Event being added"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printAddEventMessage(Event eventAdded) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"I\u0027ve added this Event: \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(eventAdded.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * Prints the message when the user adds some Event."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * @param eventEdited the Event being edited"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public void printEditEventMessage(Event eventEdited) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"I\u0027ve edited this Event: \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        System.out.println(eventEdited.toString());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     * Prints the message when the user sorts the events."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xuche123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    public void printSortEventMessage() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        System.out.println(\"Got it. The events have been sorted.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the Events of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filteredEventList an ArrayList of Events to be printed one by one."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredDateEventList(ArrayList\u003cEvent\u003e filteredEventList) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the Events on the given date in your list:\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event event : filteredEventList) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + event.toString());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the locations stored in the location list with nearest bus stops."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param locationsList an Array List of Locations to be printed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printLocationList(ArrayList\u003cLocation\u003e locationsList) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"Lists of locations: \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (Location location : locationsList) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(i + \". \" + location);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the bus stops stored in the bus stop list with buses that goes there."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     * @param busStopList an Array List of Bus Stops to be printed"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    public void printBusStopList(ArrayList\u003cBusStop\u003e busStopList) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"List of bus stops: \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        for (BusStop busStop : busStopList) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            System.out.println(i + \". \" + busStop);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "max-wunan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the help information when user input command \u0027help\u0027."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Relevant command information with reference to the current user guide draft."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"Current version: v2.0\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        System.out.println(\"Below are all the commands and brief descriptions of their functions in the form of \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                + \"command - function: \");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"help - view all the commands\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"assignment - add an assignment event with content, deadline and location\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"class - add a class event with content, deadline and location\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"personalEvent - add a personal event with content, deadline and location\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"edit - edit event information\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"locate - find location information\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"locations - view all the locations available\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"list - view all events added\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"clear - clear all events\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "        System.out.println(\"reminder - show events of the day\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "        System.out.println(\"There will be more upcoming features in later versions.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        System.out.println(\"For more information, please refer to detailed user guide: \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xuche123"
        },
        "content": "                + \"https://ay2021s1-cs2113t-f14-4.github.io/tp/\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user clears the list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printClearEventsSuccessful() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Clear successful. The list is now empty.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "max-wunan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the Events of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Called for printing the events that having conflict timing with the new event added."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param conflictEvents an ArrayList of Events to be printed one by one."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printConflictEvents(ArrayList\u003cEvent\u003e conflictEvents) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (conflictEvents.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedEvents \u003d 0;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"You have some events that happen concurrently. Please prepared for multi-thread. \""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"Here are the Events in your list that have overlaps with your newly added/edited event:\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Event event : conflictEvents) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedEvents++;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedEvents + \". \" + event.toString());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"\\nBut nonetheless...\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void helloWithName(String name) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Hi \" + name + \", nice to see you.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuche123": 19,
      "madbeez": 7,
      "max-wunan": 15,
      "Lee-Juntong": 226,
      "jiaaaqi": 27
    }
  },
  {
    "path": "src/main/java/usercommunication/UserInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package usercommunication;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the personal information about the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UserInfo {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String name \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected UserType type \u003d UserType.UNKNOWN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UserInfo(String name, String type) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (type.equalsIgnoreCase(\"PROFESSOR\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            this.type \u003d UserType.PROFESSOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } else if (type.equalsIgnoreCase(\"STUDENT\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            this.type \u003d UserType.STUDENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return name + \"//\" + type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 26
    }
  },
  {
    "path": "src/main/java/usercommunication/UserType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package usercommunication;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public enum UserType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    PROFESSOR,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    STUDENT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    UNKNOWN"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/test/java/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.EmptyEventIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEventLocationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEventLocationMarkerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.NoEventTimeMarkerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    void execute_NoDescriptionGiven_EmptyEventException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Assertions.assertThrows(EmptyEventException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Command d \u003d Parser.parse(\"class\",  null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    void execute_NoTimeMarkerGiven_NoEventTimeMarkerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Assertions.assertThrows(NoEventTimeMarkerException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Command d \u003d Parser.parse(\"class something\",  null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    void execute_NoLocationMarkerGiven_NoEventLocationException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Assertions.assertThrows(NoEventLocationException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Command d \u003d Parser.parse(\"class something /t 2020-02-02 20:00\",  null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 35
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.DeleteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.DeleteNumberFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.UndefinedEventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    void execute_InvalidIndexGiven_DeleteNumberFormatException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        Assertions.assertThrows(DeleteNumberFormatException.class,() -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            Command c \u003d Parser.parse(\"delete f\", null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 20
    }
  },
  {
    "path": "src/test/java/command/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import eventlist.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.CreatingFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.DataFileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.EditIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.EmptyEventIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.NoEditEventDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import exception.UndefinedEventException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.WrongEditFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.BusStopList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import locationlist.LocationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.NuScheduleException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuche123"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    void execute_NoIndexSpecified_emptyEventIndexException() throws NuScheduleException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        Assertions.assertThrows(EmptyEventIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Command d \u003d Parser.parse(\"edit\", null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    void execute_InputIsNotInteger_WrongEditFormatException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        Assertions.assertThrows(WrongEditFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Command c \u003d Parser.parse(\"edit c\", null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    void execute_IndexOutOfBounds_UndefinedEventException() throws CreatingFileException, DataFileNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Storage storage \u003d new Storage(\"data/events.txt\",\"data/UserInfo.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        LocationList locations \u003d new LocationList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.loadLocationData(locations.getLocationList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Assertions.assertThrows(UndefinedEventException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Parser.parse(\"edit 1 assignment something /t 2020-02-02 20:00 /l somewhere\", locations)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    .execute(new EventList(), new LocationList(), new BusStopList(), new UI(), storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    void execute_NoEditDescriptionProvided_NoEditEventDescriptionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        Assertions.assertThrows(NoEditEventDescriptionException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            Command c \u003d Parser.parse(\"edit 1\", null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 40,
      "Lee-Juntong": 17
    }
  },
  {
    "path": "src/test/java/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madbeez"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.DateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.EmptyFindDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import exception.EmptyFindException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madbeez"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madbeez"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    void execute_NoDescriptionGiven_EmptyEventException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        Assertions.assertThrows(EmptyFindException.class, () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            Command c \u003d Parser.parse(\"find\",  null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    void execute_NoDateGiven_EmptyFindDateException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        Assertions.assertThrows(EmptyFindDateException.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            Command c \u003d Parser.parse(\"date\",  null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madbeez"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    void execute_InvalidTimeDate_DateFormatException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        Assertions.assertThrows(DateFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madbeez"
        },
        "content": "            Command c \u003d Parser.parse(\"date 2100\",  null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madbeez"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madbeez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madbeez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madbeez": 32
    }
  },
  {
    "path": "src/test/java/command/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuche123"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.InvalidSortCriteriaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import exception.NoSortCriteriaException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuche123"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuche123"
        },
        "content": "class SortCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    void execute_NoSortCriteria_NoSortCriteriaException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        Assertions.assertThrows(NoSortCriteriaException.class, () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            Command d \u003d Parser.parse(\"sort\",  null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuche123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    void execute_InvalidSortCriteria_InvalidSortCriteriaException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        Assertions.assertThrows(InvalidSortCriteriaException.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuche123"
        },
        "content": "            Command d \u003d Parser.parse(\"sort something\",  null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuche123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuche123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuche123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuche123": 25
    }
  },
  {
    "path": "src/test/java/test/NuScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "class NuScheduleTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "Lee-Juntong": 4
    }
  },
  {
    "path": "text-ui-test/data/bus_stops.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "EA:B2,C,BTC2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Raffles Hall:B2,C"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Information Technology:A2,B1,B2,D1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "Opp YIH:A2,B1,B2,D1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "NUS Museum:A2,BTC1,BTC2,C,D1,D2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "YIH:A1,B1,BTC1,D1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "CLB:A1,B1,BTC1,D1"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 7
    }
  },
  {
    "path": "text-ui-test/data/locations.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/EA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EA/Information Technology"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E1A/EA"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1/EA,Information Technology"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/EW1A/EA"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E2/EA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3/EA,Raffles Hall"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E3A/EA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4/Information Technology"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E4A/Opp YIH,YIH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5/Information Technology"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E5A/Raffles Hall"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/E6/Opp YIH,YIH"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "BLK/IT/Information Technology,CLB"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "H/Raffles Hall/Raffles Hall,NUS Museum"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT1/E2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT2/E2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT6/E4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7/EA"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaaaqi"
        },
        "content": "L/LT7A/EA"
      }
    ],
    "authorContributionMap": {
      "jiaaaqi": 20
    }
  }
]
