[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    mainClassName \u003d \"cheatlogs.CheatLogs\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    archiveBaseName \u003d \"CheatLogs\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "-": 44,
      "adhy-p": 2
    }
  },
  {
    "path": "data/preloaded/C/arrays.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Programming Language: C"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Contents:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Arrays a kind of data structure that can store a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "All arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Arrays in C"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Declaring Arrays"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "To declare an array in C, a programmer specifies the type of the elements and the number of elements required by an array as follows −"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "type arrayName [ arraySize ];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "This is called a single-dimensional array. The arraySize must be an integer constant greater than zero and type can be any valid C data type. For example, to declare a 10-element array called balance of type double, use this statement −"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "double balance[10];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Here balance is a variable array which is sufficient to hold up to 10 double numbers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Initializing Arrays"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You can initialize an array in C either one by one or using a single statement as follows −"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "double balance[5] \u003d {1000.0, 2.0, 3.4, 7.0, 50.0};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The number of values between braces { } cannot be larger than the number of elements that we declare for the array between square brackets [ ]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "If you omit the size of the array, an array just big enough to hold the initialization is created. Therefore, if you write −"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "double balance[] \u003d {1000.0, 2.0, 3.4, 7.0, 50.0};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You will create exactly the same array as you did in the previous example. Following is an example to assign a single element of the array −"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "balance[4] \u003d 50.0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The above statement assigns the 5th element in the array with a value of 50.0. All arrays have 0 as the index of their first element which is also called the base index and the last index of an array will be total size of the array minus 1. Shown below is the pictorial representation of the array we discussed above −"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Array Presentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Accessing Array Elements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "An element is accessed by indexing the array name. This is done by placing the index of the element within square brackets after the name of the array. For example −"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "double salary \u003d balance[9];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The above statement will take the 10th element from the array and assign the value to salary variable. The following example Shows how to use all the three above mentioned concepts viz. declaration, assignment, and accessing arrays −"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Live Demo"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstdio.h\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int main () {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int n[ 10 ]; /* n is an array of 10 integers */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int i,j;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* initialize elements of array n to 0 */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   for ( i \u003d 0; i \u003c 10; i++ ) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": "      n[ i ] \u003d i + 100; /* set element at location i to i + 100 */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* output each array element\u0027s value */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   for (j \u003d 0; j \u003c 10; j++ ) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": "      printf(\"Element[%d] \u003d %d\\n\", j, n[j] );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": "When the above code is compiled and executed, it produces the following result −"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[0] \u003d 100"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[1] \u003d 101"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[2] \u003d 102"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[3] \u003d 103"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[4] \u003d 104"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[5] \u003d 105"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[6] \u003d 106"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[7] \u003d 107"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[8] \u003d 108"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Element[9] \u003d 109"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Arrays in Detail"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Arrays are important to C and should need a lot more attention. The following important concepts related to array should be clear to a C programmer −"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Sr.No.\tConcept \u0026 Description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "domaxi"
        },
        "content": "1\tMulti-dimensional arrays"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "domaxi"
        },
        "content": "C supports multidimensional arrays. The simplest form of the multidimensional array is the two-dimensional array."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "domaxi"
        },
        "content": "2\tPassing arrays to functions"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You can pass to the function a pointer to an array by specifying the array\u0027s name without an index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "domaxi"
        },
        "content": "3\tReturn array from a function"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "C allows a function to return an array."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "domaxi"
        },
        "content": "4\tPointer to an array"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You can generate a pointer to the first element of an array by simply specifying the array name, without any index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Adapted from https://www.tutorialspoint.com/cprogramming/c_arrays.htm"
      }
    ],
    "authorContributionMap": {
      "domaxi": 88
    }
  },
  {
    "path": "data/preloaded/C/declarations.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Programming Language: C"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Contents:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "There are ways to declare the variables in  C program."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Declarations in C can be made by typing the datatype and the variable name."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The datatype of the variable must be a valid datatype, including char, int, double, or other user defined variables."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "data_type variable_name"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "For example, to declare an integer you can do:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int numberOne;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "During your declaration, you can also put in the initial value (initialize) of the variable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int numberOne \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "In a C program, a variable must be declared at the top of the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "This is to allocate specific amount of memory for the program."
      }
    ],
    "authorContributionMap": {
      "domaxi": 19
    }
  },
  {
    "path": "data/preloaded/C/functions.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Programming Language: C"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Contents:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A function is a group of statements that together perform a task. Every C program has at least one function, which is main(), and all the most trivial programs can define additional functions."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division is such that each function performs a specific task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A function declaration tells the compiler about a function\u0027s name, return type, and parameters. A function definition provides the actual body of the function."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The C standard library provides numerous built-in functions that your program can call. For example, strcat() to concatenate two strings, memcpy() to copy one memory location to another location, and many more functions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A function can also be referred as a method or a sub-routine or a procedure, etc."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Defining a Function"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The general form of a function definition in C programming language is as follows −"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "return_type function_name( parameter list ) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   body of the function"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A function definition in C programming consists of a function header and a function body. Here are all the parts of a function −"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Return Type − A function may return a value. The return_type is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword void."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Function Name − This is the actual name of the function. The function name and the parameter list together constitute the function signature."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Parameters − A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Function Body − The function body contains a collection of statements that define what the function does."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Example"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Given below is the source code for a function called max(). This function takes two parameters num1 and num2 and returns the maximum value between the two −"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "/* function returning the max between two numbers */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int max(int num1, int num2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* local variable declaration */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   if (num1 \u003e num2)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "      result \u003d num1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "      result \u003d num2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Function Declarations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A function declaration tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A function declaration has the following parts −"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "return_type function_name( parameter list );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": "For the above defined function max(), the function declaration is as follows −"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    int max(int num1, int num2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Parameter names are not important in function declaration only their type is required, so the following is also a valid declaration −"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    int max(int, int);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Calling a Function"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": "While creating a C function, you give a definition of what the function has to do. To use a function, you will have to call that function to perform the defined task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": "When a program calls a function, the program control is transferred to the called function. A called function performs a defined task and when its return statement is executed or when its function-ending closing brace is reached, it returns the program control back to the main program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "To call a function, you simply need to pass the required parameters along with the function name, and if the function returns a value, then you can store the returned value. For example −"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstdio.h\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "domaxi"
        },
        "content": "/* function declaration */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int max(int num1, int num2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int main () {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* local variable definition */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int a \u003d 100;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int b \u003d 200;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int ret;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* calling a function to get max value */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   ret \u003d max(a, b);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf( \"Max value is : %d\\n\", ret );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "domaxi"
        },
        "content": "/* function returning the max between two numbers */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int max(int num1, int num2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* local variable declaration */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int result;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   if (num1 \u003e num2)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "domaxi"
        },
        "content": "      result \u003d num1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   else"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "domaxi"
        },
        "content": "      result \u003d num2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return result;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "domaxi"
        },
        "content": "We have kept max() along with main() and compiled the source code. While running the final executable, it would produce the following result −"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Max value is : 200"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Function Arguments"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "domaxi"
        },
        "content": "If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the formal parameters of the function."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "domaxi"
        },
        "content": "While calling a function, there are two ways in which arguments can be passed to a function −"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Sr.No.\tCall Type \u0026 Description"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    1\tCall by value"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    2\tCall by reference"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "domaxi"
        },
        "content": "By default, C uses call by value to pass arguments. In general, it means the code within a function cannot alter the arguments used to call the function."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Adapted from https://www.tutorialspoint.com/cprogramming/c_functions.htm"
      }
    ],
    "authorContributionMap": {
      "domaxi": 113
    }
  },
  {
    "path": "data/preloaded/C/loops.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Programming Language: C"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Contents:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Programming languages provide various control structures that allow for more complicated execution paths."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A loop statement allows us to execute a statement or group of statements multiple times. Given below is the general form of a loop statement in most of the programming languages −"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Loop Architecture"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "C programming language provides the following types of loops to handle looping requirements."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Sr.No.\tLoop Type \u0026 Description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    1\twhile loop"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    2\tfor loop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    3\tdo...while loop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        It is more like a while statement, except that it tests the condition at the end of the loop body."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    4\tnested loops"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        You can use one or more loops inside any other while, for, or do..while loop."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Loop Control Statements"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "C supports the following control statements."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Sr.No.\tControl Statement \u0026 Description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": "1\tbreak statement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Terminates the loop or switch statement and transfers execution to the statement immediately following the loop or switch."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "2\tcontinue statement"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "3\tgoto statement"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Transfers control to the labeled statement."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Adapted from https://www.tutorialspoint.com/cprogramming/c_loops.htm"
      }
    ],
    "authorContributionMap": {
      "domaxi": 38
    }
  },
  {
    "path": "data/preloaded/C/pointers.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Programming Language: C"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Contents:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Pointers in C are easy and fun to learn. Some C programming tasks are performed more easily with pointers, and other tasks, such as dynamic memory allocation, cannot be performed without using pointers. So it becomes necessary to learn pointers to become a perfect C programmer. Let\u0027s start learning them in simple and easy steps."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "As you know, every variable is a memory location and every memory location has its address defined which can be accessed using ampersand (\u0026) operator, which denotes an address in memory. Consider the following example, which prints the address of the variables defined −"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Live Demo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstdio.h\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int main () {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int  var1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   char var2[10];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"Address of var1 variable: %x\\n\", \u0026var1  );"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"Address of var2 variable: %x\\n\", \u0026var2  );"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "When the above code is compiled and executed, it produces the following result −"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Address of var1 variable: bff5a400"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Address of var2 variable: bff5a3f6"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "What are Pointers?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "A pointer is a variable whose value is the address of another variable, i.e., direct address of the memory location. Like any variable or constant, you must declare a pointer before using it to store any variable address. The general form of a pointer variable declaration is −"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "type *var-name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Here, type is the pointer\u0027s base type; it must be a valid C data type and var-name is the name of the pointer variable. The asterisk * used to declare a pointer is the same asterisk used for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Take a look at some of the valid pointer declarations −"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int    *ip;    /* pointer to an integer */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "double *dp;    /* pointer to a double */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "float  *fp;    /* pointer to a float */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "char   *ch     /* pointer to a character */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "How to Use Pointers?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "There are a few important operations, which we will do with the help of pointers very frequently. (a) We define a pointer variable, (b) assign the address of a variable to a pointer and (c) finally access the value at the address available in the pointer variable. This is done by using unary operator * that returns the value of the variable located at the address specified by its operand. The following example makes use of these operations −"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Live Demo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstdio.h\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int main () {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int  var \u003d 20;   /* actual variable declaration */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int  *ip;        /* pointer variable declaration */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   ip \u003d \u0026var;  /* store address of var in pointer variable*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"Address of var variable: %x\\n\", \u0026var  );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* address stored in pointer variable */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"Address stored in ip variable: %x\\n\", ip );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* access the value using the pointer */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"Value of *ip variable: %d\\n\", *ip );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "When the above code is compiled and executed, it produces the following result −"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Address of var variable: bffd8b3c"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Address stored in ip variable: bffd8b3c"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Value of *ip variable: 20"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "domaxi"
        },
        "content": "NULL Pointers"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "domaxi"
        },
        "content": "It is always a good practice to assign a NULL value to a pointer variable in case you do not have an exact address to be assigned. This is done at the time of variable declaration. A pointer that is assigned NULL is called a null pointer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The NULL pointer is a constant with a value of zero defined in several standard libraries. Consider the following program −"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Live Demo"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstdio.h\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int main () {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int  *ptr \u003d NULL;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"The value of ptr is : %x\\n\", ptr  );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "domaxi"
        },
        "content": "When the above code is compiled and executed, it produces the following result −"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The value of ptr is 0"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "In most of the operating systems, programs are not permitted to access memory at address 0 because that memory is reserved by the operating system. However, the memory address 0 has special significance; it signals that the pointer is not intended to point to an accessible memory location. But by convention, if a pointer contains the null (zero) value, it is assumed to point to nothing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "domaxi"
        },
        "content": "To check for a null pointer, you can use an \u0027if\u0027 statement as follows −"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "domaxi"
        },
        "content": "if(ptr)     /* succeeds if p is not null */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "domaxi"
        },
        "content": "if(!ptr)    /* succeeds if p is null */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Pointers in Detail"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Pointers have many but easy concepts and they are very important to C programming. The following important pointer concepts should be clear to any C programmer −"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Sr.No.\tConcept \u0026 Description"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "domaxi"
        },
        "content": "1\tPointer arithmetic"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "domaxi"
        },
        "content": "There are four arithmetic operators that can be used in pointers: ++, --, +, -"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "domaxi"
        },
        "content": "2\tArray of pointers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You can define arrays to hold a number of pointers."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "domaxi"
        },
        "content": "3\tPointer to pointer"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "domaxi"
        },
        "content": "C allows you to have pointer on a pointer and so on."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "domaxi"
        },
        "content": "4\tPassing pointers to functions in C"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Passing an argument by reference or by address enable the passed argument to be changed in the calling function by the called function."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "domaxi"
        },
        "content": "5\tReturn pointer from functions in C"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "domaxi"
        },
        "content": "C allows a function to return a pointer to the local variable, static variable, and dynamically allocated memory as well."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Adapted from https://www.tutorialspoint.com/cprogramming/c_pointers.htm"
      }
    ],
    "authorContributionMap": {
      "domaxi": 107
    }
  },
  {
    "path": "data/preloaded/C/string.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Programming Language: C"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Contents:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Strings are actually one-dimensional array of characters terminated by a null character \u0027\\0\u0027. Thus a null-terminated string contains the characters that comprise the string followed by a null."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The following declaration and initialization create a string consisting of the word \"Hello\". To hold the null character at the end of the array, the size of the character array containing the string is one more than the number of characters in the word \"Hello.\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "char greeting[6] \u003d {\u0027H\u0027, \u0027e\u0027, \u0027l\u0027, \u0027l\u0027, \u0027o\u0027, \u0027\\0\u0027};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "If you follow the rule of array initialization then you can write the above statement as follows −"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "char greeting[] \u003d \"Hello\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Following is the memory presentation of the above defined string in C/C++ −"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "String Presentation in C/C++"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Actually, you do not place the null character at the end of a string constant. The C compiler automatically places the \u0027\\0\u0027 at the end of the string when it initializes the array. Let us try to print the above mentioned string −"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstdio.h\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int main () {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   char greeting[6] \u003d {\u0027H\u0027, \u0027e\u0027, \u0027l\u0027, \u0027l\u0027, \u0027o\u0027, \u0027\\0\u0027};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"Greeting message: %s\\n\", greeting );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "When the above code is compiled and executed, it produces the following result −"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Greeting message: Hello"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "C supports a wide range of functions that manipulate null-terminated strings −"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Sr.No.\tFunction \u0026 Purpose"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "1   strcpy(s1, s2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Copies string s2 into string s1."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": "2   strcat(s1, s2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Concatenates string s2 onto the end of string s1."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "3   strlen(s1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Returns the length of string s1."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "4   strcmp(s1, s2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Returns 0 if s1 and s2 are the same; less than 0 if s1\u003cs2; greater than 0 if s1\u003es2."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "5   strchr(s1, ch);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Returns a pointer to the first occurrence of character ch in string s1."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "6   strstr(s1, s2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    Returns a pointer to the first occurrence of string s2 in string s1."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "domaxi"
        },
        "content": "The following example uses some of the above-mentioned functions −"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstdio.h\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#include \u003cstring.h\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": "int main () {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   char str1[12] \u003d \"Hello\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   char str2[12] \u003d \"World\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   char str3[12];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   int  len ;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* copy str1 into str3 */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   strcpy(str3, str1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"strcpy( str3, str1) :  %s\\n\", str3 );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* concatenates str1 and str2 */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   strcat( str1, str2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"strcat( str1, str2):   %s\\n\", str1 );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   /* total lenghth of str1 after concatenation */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   len \u003d strlen(str1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   printf(\"strlen(str1) :  %d\\n\", len );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   return 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "domaxi"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "domaxi"
        },
        "content": "When the above code is compiled and executed, it produces the following result −"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    strcpy( str3, str1) :  Hello"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    strcat( str1, str2):   HelloWorld"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    strlen(str1) :  10"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Adapted from https://www.tutorialspoint.com/cprogramming/c_strings.htm"
      }
    ],
    "authorContributionMap": {
      "domaxi": 81
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://via.placeholder.com/100.png?text\u003dPhoto\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Tolentino Abner Jr Morales| [Github](https://github.com/abnermtj) | [Portfolio](docs/team/abner.md) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars2.githubusercontent.com/u/60168552?s\u003d400\u0026u\u003d70ed3bb19e26b16aadf133b9ff21ee01345defff\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Aldo Maximillian | [Github](https://github.com/domaxi) | [Portfolio](docs/team/aldomax.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/60382521?s\u003d400\u0026u\u003dcf1fd251902a9305731ac4732d85abb1f83c6755\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Toh Yong Xiang Brandon | [Github](https://github.com/brandontoh) | [Portfolio](docs/team/TohYongXiangBrandon.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/54772103?s\u003d460\u0026u\u003daaf323e6171a155d2080ea54e18a429e81d8bb55\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Hubertus Adhy Pratama Setiawan | [Github](https://github.com/adhy-p) | [Portfolio](docs/team/adhy-p.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://via.placeholder.com/100.png?text\u003dPhoto\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Theodore Pinto | [Github](https://github.com/theopin) | [Portfolio](docs/team/theopin.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 5,
      "-": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "# CheatLogs User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "**CheatLogs** is a Command Line Interface Application that is targeted at novice or beginner programmers "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "to help them develop their own applications. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "It has a text based interface that allows the user to "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "access cheat sheets and notes for various programming syntax and functions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "## Index"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [Quick Start](#quick-start) "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Adding a cheat sheet: `/add`](#adding-a-cheat-sheet-add)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Clearing all entries: `/clear`](#clearing-all-entries-clear)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Deleting a cheat sheet: `/delete`](#deleting-a-cheat-sheet-delete)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Editing a cheat sheet: `/edit` [coming in v2.0]](#editing-a-cheat-sheet-edit-coming-in-v20)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Exiting the program: `/exit`](#exiting-the-program-exit)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Locating a cheat sheet by name: `/find`](#locating-a-cheat-sheet-by-name-find)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Viewing help: `/help`](#viewing-help-help)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Listing all cheat sheets: `/list`](#listing-all-cheat-sheets-list)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Viewing the cheatsheet: `/view`](#viewing-the-cheatsheet-view)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Data storage](#data-storage)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * [Archiving data files [coming in v2.0]](#archiving-data-files-coming-in-v20)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "* FAQ"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "* Command Summary"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "2. Download the latest `cheatlogs.jar` from here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for this application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "4. Use java -jar `cheatlogs.jar` to run the program. A welcome message should appear, as shown below."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": " ________  ___  ___  _______   ________  _________  ________  ___  ___  _______   _______  _________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "|\\   ____\\|\\  \\|\\  \\|\\  ___ \\ |\\   __  \\|\\___   ___\\\\   ____\\|\\  \\|\\  \\|\\  ___ \\ |\\  ___ \\|\\___   ___\\"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "\\ \\  \\___|\\ \\  \\\\\\  \\ \\   __/|\\ \\  \\|\\  \\|___ \\  \\_\\ \\  \\___|\\ \\  \\\\\\  \\ \\   __/|\\ \\   __/\\|___ \\  \\_|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": " \\ \\  \\    \\ \\   __  \\ \\  \\_|/_\\ \\   __  \\   \\ \\  \\ \\ \\_____  \\ \\   __  \\ \\  \\_|/_\\ \\  \\_|/__  \\ \\  \\"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "  \\ \\  \\____\\ \\  \\ \\  \\ \\  \\_|\\ \\ \\  \\ \\  \\   \\ \\  \\ \\|____|\\  \\ \\  \\ \\  \\ \\  \\_|\\ \\ \\  \\_|\\ \\  \\ \\  \\"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "   \\ \\_______\\ \\__\\ \\__\\ \\_______\\ \\__\\ \\__\\   \\ \\__\\  ____\\_\\  \\ \\__\\ \\__\\ \\_______\\ \\_______\\  \\ \\__\\"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    \\|_______|\\|__|\\|__|\\|_______|\\|__|\\|__|    \\|__| |\\_________\\|__|\\|__|\\|_______|\\|_______|   \\|__|"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                      ___       ________  ________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                     |\\  \\     |\\   __  \\|\\   ____\\"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                     \\ \\  \\    \\ \\  \\|\\  \\ \\  \\___|"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                      \\ \\  \\    \\ \\  \\\\\\  \\ \\  \\  ___"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                       \\ \\  \\____\\ \\  \\\\\\  \\ \\  \\|\\  \\"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                        \\ \\_______\\ \\_______\\ \\_______\\"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                         \\|_______|\\|_______|\\|_______|"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "--------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "Welcome to CheatLogs, the one stop cheat sheet management systems"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "Your CAP is our upmost priority"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "--------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "Please Enter a Command:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "5. Type a command in the terminal and press Enter to execute it."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "   * `/list`: Lists all cheat sheets."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "   * `/find CS2113`: Find cheat sheet containing “CS2113T” in the name field. "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "   * `/exit`: Exits the app."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Adding a cheat sheet: `/add`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "Adds a new cheat sheet to the application and prompts user to include data into the cheat sheet. \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "This cheat sheet will be added to the `/data` folder."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `/add n/NAME d/DESCRIPTION`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/add n/Python d/”This my secret cheat sheet to success”`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/add n/Java d/version11`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/add n/Cpp`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Clearing all entries: `/clear`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "Clears all entries from the cheat sheet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `/clear`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Deleting a cheat sheet: `/delete`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "To be used after using /list, Deletes the cheat sheet at INDEX items down the list. The first cheat sheet has an index of 1. This cheatsheet will be deleted from the /data folder."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format 1: `/delete i/INDEX`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/delete i/2` "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format 2: `/delete n/CHEAT_SHEET_NAME` "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/delete n/MyPythonCheatSheet`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Editing a cheat sheet: `/edit` [coming in v2.0]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "TBC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Exiting the program: `/exit`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": " "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `/exit`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Locating a cheat sheet by name: `/find`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "Finds a cheat sheet whose names contain any of the given keywords."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `/find l/PROGRAMMING LANGUAGE k/KEYWORDS`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "* The search is **case-insensitive**. e.g python will match `Python`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "* The order of the keywords does not matter. e.g. `C++ guide` will match `guide C++`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * Only the name is searched."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "* Only full words will be matched e.g. `Java` will not match `Java11`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "* Cheat sheets matching at least one keyword will be returned (i.e. OR search). "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "  * e.g. `python` will return `Introduction to python`, `my python`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/find Java` returns `java - cheatsheet` and `JAVA11`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Listing all cheat sheets: `/list`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "Shows of all the cheat sheets that are stored in the application."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": " "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `/list`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Viewing help: `/help`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "Lists all the possible commands that can be executed in the application."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format: `/help`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Viewing the cheatsheet: `/view`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "View the contents of a cheat sheet either by the name or index"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format 1: `/view n/NAME` "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/view n/MyPythonCheatSheet`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": " "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format 2: `/list` followed by `/view i/INDEX` "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/list` "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/view i/2`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "Format 3: `/find KEYWORD` followed by `/view i/INDEX`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/find CheatSheet` "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theopin"
        },
        "content": "* `/view i/2`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Archiving data files [coming in v2.0]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theopin"
        },
        "content": "TBC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Data storage"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theopin"
        },
        "content": "Data related to this application is saved in the `/data` folder automatically after "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theopin"
        },
        "content": "any command that changes it is given. "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "There is no need to save manually. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theopin"
        },
        "content": "You can find this folder in the same directory as `cheatlogs.jar`. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theopin"
        },
        "content": " "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theopin"
        },
        "content": "To allow the application to safely read the files stored in the `/data` folder, "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theopin"
        },
        "content": "please refrain from modifying them externally. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theopin"
        },
        "content": "You can edit attributes associated to that cheatsheet through the application itself."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theopin"
        },
        "content": "**A**: Drag and drop the `cheatlogs.jar` file as well as the `/data` directory into the other"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theopin"
        },
        "content": "    computer."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theopin"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theopin"
        },
        "content": "-------- | ---------- | ------------"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theopin"
        },
        "content": "Add | `/add n/CHEAT_SHEET_NAME d/”DESCRIPTION”` | `/add n/Python d/”This my secret cheat sheet to success”` `/add n/Java d/version11` `/add n/Cpp`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theopin"
        },
        "content": "Clear | `clear` | -"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theopin"
        },
        "content": "Delete | `/delete i/\u003cCHEAT_SHEET_INDEX\u003e` | `/delete i/2`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theopin"
        },
        "content": "Edit | `/edit \u003cPROGRAMMING LANGUAGE\u003e \u003cSECTION\u003e` | `/edit l/python k/pointers` `/edit l/python`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theopin"
        },
        "content": "Find | `/find \u003cPROGRAMMING LANGUAGE\u003e \u003cKEYWORD\u003e` | `/find l/python k/functions`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theopin"
        },
        "content": "List | `/list` | -"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theopin"
        },
        "content": "Help | `/help` | -"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theopin"
        },
        "content": "View | `/view n/\u003cNAME\u003e` `/view i/\u003cINDEX\u003e` | `/view n/MyPythonCheatSheet` `/view i/2`"
      }
    ],
    "authorContributionMap": {
      "theopin": 154,
      "-": 27
    }
  },
  {
    "path": "docs/team/TohYongXiangBrandon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# Toh Yong Xiang Brandon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Y2 NUS CEG Student"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 6
    }
  },
  {
    "path": "docs/team/abner.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "A Nus student."
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1
    }
  },
  {
    "path": "docs/team/adhy-p.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "# Hubertus Adhy Pratama Setiawan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "adhy-p": 6
    }
  },
  {
    "path": "docs/team/aldomax.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "# Aldo Maximillian - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am a Y2 Computer Engineering student, currently enrolling in NUS."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am the alleged leader of the tem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I made the team repo, organization"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am in charge of the cheatSheet class"
      }
    ],
    "authorContributionMap": {
      "domaxi": 9
    }
  },
  {
    "path": "docs/team/theopin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "# Theodore Pinto - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "theopin": 6
    }
  },
  {
    "path": "src/main/java/cheatlogs/CheatLogs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatlogs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import ui.UserSession;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class CheatLogs {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    // Main Function"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        UserSession session \u003d new UserSession();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        session.runProgramSequence();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 10,
      "brandontoh": 2
    }
  },
  {
    "path": "src/main/java/cheatsheet/CheatSheet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class CheatSheet {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetDetails;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private boolean isFavorite;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private boolean isModifiable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private LocalDateTime dateCreated;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private LocalDateTime dateModified;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public CheatSheet(String cheatSheetName, String cheatSheetProgrammingLanguage, String cheatSheetDetails) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetName \u003d cheatSheetName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetProgrammingLanguage \u003d cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetDetails \u003d cheatSheetDetails;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.isFavorite \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.dateCreated \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getCheatSheetName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return cheatSheetName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getCheatSheetProgrammingLanguage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getCheatSheetDetails() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return cheatSheetDetails;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public LocalDateTime getDateCreated() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return dateCreated;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setCheatSheetName(String cheatSheetName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetName \u003d cheatSheetName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        dateModified \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setCheatSheetProgrammingLanguage(String cheatSheetProgrammingLanguage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetProgrammingLanguage \u003d cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        dateModified \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setCheatSheetDetails(String cheatSheetDetails) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetDetails \u003d cheatSheetDetails;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        dateModified \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setFavorite() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        isFavorite \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setDateCreated(LocalDateTime dateCreated) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return \"CheatSheet{\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"cheatSheetName\u003d\u0027\" + cheatSheetName + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \", cheatSheetProgrammingLanguage\u003d\u0027\" + cheatSheetProgrammingLanguage + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \", cheatSheetDetails\u003d\u0027\" + cheatSheetDetails + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "domaxi": 70
    }
  },
  {
    "path": "src/main/java/cheatsheet/CheatSheetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "public class CheatSheetList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private static ArrayList\u003cCheatSheet\u003e cheatSheets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public CheatSheetList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Gets the number of cheat sheet currently in the CheatSheetList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheets.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Gets all the cheat sheets in the cheatSheetList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return cheatSheets The current list of cheat sheets"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static ArrayList\u003cCheatSheet\u003e getCheatSheetList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheets;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Converts the cheatSheetName attribute for each cheat sheet into a string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * The string will be used by UI for printing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return printedByUI The string to be printed by UI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static String printCheatSheetNames() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        StringBuilder printedByUI \u003d new StringBuilder(\"Current list of cheat sheet:\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printedByUI.append(cs.getCheatSheetName()).append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return printedByUI.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Adds a new cheat sheet to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void add(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheets.add(cheatSheet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Deletes a cheat sheet from the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Prints an error message if name is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param name The name attribute of the desired cheat sheet"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void remove(String name) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (cs.getCheatSheetName().equals(name)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Deletes a cheat sheet from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Prints an error message if index is out of bound."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param index The index of the desired cheat sheet"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheets.remove(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            // todo: add error message in UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * Removes all cheat sheet in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void clear() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheets.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assert cheatSheets.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Retrieves a cheat sheet from the list using its index."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param index The index of desired cheat sheet"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static CheatSheet getCheatSheet(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet cheatSheet;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheet \u003d cheatSheets.get(index - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            // todo: add error message in UI"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheet;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Retrieves a cheat sheet from the list using its name."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param name The name attribute of desired cheat sheet"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static CheatSheet getCheatSheet(String name) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet cheatSheet;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (cs.getCheatSheetName().equals(name)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assert index \u003c cheatSheets.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return getCheatSheet(index + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "adhy-p": 124
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public AddCommand(Parser parser) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String name \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String programmingLanguage \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.PROGRAMMINGLANGUAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String description \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.DESCRIPTION);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a name\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        CheatSheet cheatSheet \u003d new CheatSheet(name, programmingLanguage, description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        CheatSheetList.add(cheatSheet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        Printer.printAddNewCheatSheetMessage(cheatSheet);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 7,
      "brandontoh": 21
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ClearCommand(Parser parser) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Printer.printClearCheatSheetMessage(CheatSheetList.getSize());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        fileDestroyer.executeFunction();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "brandontoh": 12,
      "adhy-p": 1
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * The base class for all commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static boolean isExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    protected Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    protected DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Command(Parser parser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        isExitCommand \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        fileDestroyer \u003d new DataFileDestroyer();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public abstract void execute() throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 11,
      "brandontoh": 11
    }
  },
  {
    "path": "src/main/java/command/CommandEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public enum CommandEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    CLEAR,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    VIEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "brandontoh": 6
    }
  },
  {
    "path": "src/main/java/command/CommandExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public CommandExecutor() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void execute(Parser parser) throws CommandException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assert parser !\u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Command commandToBeExecuted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        switch (parser.getCommandType()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new AddCommand(parser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ClearCommand(parser);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new DeleteCheatSheet(parser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ExitCommand(parser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new FindCommand(parser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new Help(parser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ListCommand(parser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case VIEW:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ViewCommand(parser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"THIS WILL NVR HAPPEN\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        commandToBeExecuted.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 35,
      "brandontoh": 9
    }
  },
  {
    "path": "src/main/java/command/DeleteCheatSheet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class DeleteCheatSheet extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public DeleteCheatSheet(Parser parser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        CheatSheet cheatSheetToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.NAME)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                name \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                cheatSheetToBeDeleted \u003d CheatSheetList.getCheatSheet(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            }  else if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.INDEX)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                index \u003d Integer.parseInt(parser.getDescriptionMap().get(ArgumentFlagEnum.INDEX));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                cheatSheetToBeDeleted \u003d CheatSheetList.getCheatSheet(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            assert cheatSheetToBeDeleted !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            CheatSheetList.remove(cheatSheetToBeDeleted.getCheatSheetName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            fileDestroyer.executeFunction(cheatSheetToBeDeleted.getCheatSheetName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printDeleteCheatSheetMessage(cheatSheetToBeDeleted);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Enter a valid argument or name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Enter a valid index\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 10,
      "brandontoh": 30
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ExitCommand(Parser parser) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        isExitCommand \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 8,
      "brandontoh": 6
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public FindCommand(Parser parser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String programmingLanguage \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String keyword \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cCheatSheet\u003e cheatSheetArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.PROGRAMMINGLANGUAGE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            programmingLanguage \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.PROGRAMMINGLANGUAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.SECTIONKEYWORD)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            keyword \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.SECTIONKEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (CheatSheet cs : CheatSheetList.getCheatSheetList()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (!programmingLanguage.isEmpty() \u0026\u0026 keyword.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (cs.getCheatSheetProgrammingLanguage().equals(programmingLanguage)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    cheatSheetArrayList.add(cs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (!keyword.isEmpty() \u0026\u0026 programmingLanguage.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (cs.getCheatSheetDetails().contains(keyword)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    cheatSheetArrayList.add(cs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (!programmingLanguage.isEmpty() \u0026\u0026 !keyword.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (cs.getCheatSheetProgrammingLanguage().equals(programmingLanguage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        \u0026\u0026 cs.getCheatSheetDetails().contains(keyword)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    cheatSheetArrayList.add(cs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                throw new CommandException(\"Please enter at least an argument\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (cheatSheetArrayList.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"No matching content found\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"Showing all matches: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (CheatSheet cs : cheatSheetArrayList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printCheatSheet(cs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            Printer.printWhiteSpace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 18,
      "brandontoh": 38
    }
  },
  {
    "path": "src/main/java/command/Help.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class Help extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Help(Parser parser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Printer.printHelpSheet();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 7,
      "brandontoh": 8
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ListCommand(Parser parser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    // todo: need to ask adhy whether he can attach index to cheatsheet"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        Printer.printCheatSheetList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "brandontoh": 16
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public ViewCommand(Parser parser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.NAME)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                String name \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                for (int i \u003d 0; i \u003c CheatSheetList.getSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    if (CheatSheetList.getCheatSheet(i).getCheatSheetName().equals(name)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        index \u003d i + 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.INDEX)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                index \u003d Integer.parseInt(parser.getDescriptionMap().get(ArgumentFlagEnum.INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printViewCheatSheetMessage(CheatSheetList.getCheatSheet(index));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 14,
      "brandontoh": 20
    }
  },
  {
    "path": "src/main/java/exception/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 7
    }
  },
  {
    "path": "src/main/java/exception/DirectoryIsEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DirectoryIsEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return \"Folder is Empty.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 9
    }
  },
  {
    "path": "src/main/java/exception/InvalidFileDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class InvalidFileDataException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private File cheatSheetDocument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public InvalidFileDataException(File cheatSheetDocument) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.cheatSheetDocument \u003d cheatSheetDocument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return \"Data in \" + cheatSheetDocument.getName() + \" is Invalid!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 16
    }
  },
  {
    "path": "src/main/java/parser/ArgumentFlagEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public enum ArgumentFlagEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    NAME(\"/n\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    DESCRIPTION(\"/d\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    INDEX(\"/i\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    PROGRAMMINGLANGUAGE(\"/l\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    SECTIONKEYWORD(\"/k\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private final String associatedKeyWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    ArgumentFlagEnum(String associatedKeyword) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.associatedKeyWord \u003d associatedKeyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public String getAssociatedKeyWord() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return this.associatedKeyWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 19
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.CommandEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private final CommandEnum commandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private final ArrayList\u003cArgumentFlagEnum\u003e argEnumSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private HashMap\u003cArgumentFlagEnum, String\u003e descriptionMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Parser(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        commandType \u003d parseTypeOfCommand(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        argEnumSet \u003d parseTypeOfArgument(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        descriptionMap \u003d parseDescription(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private CommandEnum parseTypeOfCommand(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String parsedInput \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        switch (parsedInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/add\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.ADD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/clear\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.CLEAR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/delete\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.DELETE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return CommandEnum.EXIT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/find\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.FIND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/help\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return CommandEnum.HELP;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/list\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.LIST;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/view\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.VIEW;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid command\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private ArrayList\u003cArgumentFlagEnum\u003e parseTypeOfArgument(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cArgumentFlagEnum\u003e argEnumList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\" /[dnilk] \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cString\u003e argList \u003d addMatchesToArgEnumSet(matcher);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (String arg : argList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (ArgumentFlagEnum ae : ArgumentFlagEnum.values()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (arg.equals(ae.getAssociatedKeyWord())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    argEnumList.add(ae);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return argEnumList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private HashMap\u003cArgumentFlagEnum, String\u003e parseDescription(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        descriptionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            String[] details \u003d userInput.split(\" /[ndilk ]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (int i \u003d 1; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                descriptionMap.put(argEnumSet.get(i - 1), details[i].trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return descriptionMap;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private ArrayList\u003cString\u003e addMatchesToArgEnumSet(Matcher matcher) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cString\u003e argList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            argList.add(matcher.group().trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return argList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public CommandEnum getCommandType() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ArrayList\u003cArgumentFlagEnum\u003e getArgEnumSet() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return argEnumSet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public HashMap\u003cArgumentFlagEnum, String\u003e getDescriptionMap() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return descriptionMap;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 23,
      "brandontoh": 74
    }
  },
  {
    "path": "src/main/java/storage/DataFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": " * A general class that stores certain constants regarding the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": " * file location of the /data directory, as well as a method that can be"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": " * executed based on the type of class that is a child of this class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "public abstract class DataFile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String USER_DIR \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String DATA \u003d \"data\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final Path DATA_DIR \u003d Paths.get(USER_DIR, DATA);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * A method that is to be run when its subclass is created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public abstract void executeFunction();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 22
    }
  },
  {
    "path": "src/main/java/storage/DataFileDestroyer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileDestroyer extends DataFile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String MULTIPLE \u003d \"multiple\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private Path debugPath \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "            clearDirectory(DATA_DIR);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction(String unwantedFile) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "            deleteFile(unwantedFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction(Path unwantedFilePath, String function) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.debugPath \u003d unwantedFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (function.equals(MULTIPLE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "                clearDirectory(unwantedFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "                deleteFile(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void deleteFile(String unwantedFile) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path unwantedFilePath \u003d (debugPath \u003d\u003d null)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "                ? Paths.get(USER_DIR, DATA, unwantedFile)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "                : debugPath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Files.delete(unwantedFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void clearDirectory(Path intendedDirectory) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Stream\u003cPath\u003e dataDirectoryFiles \u003d Files.list(intendedDirectory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "        dataDirectoryFiles.forEach(path -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.delete(path);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 63
    }
  },
  {
    "path": "src/main/java/storage/DataFileParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.InvalidFileDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String NAME \u003d \"Name: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String PROGRAMMING_LANGUAGE \u003d \"Programming Language: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String DETAILS \u003d \"Contents: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected CheatSheet convertedCheatSheet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final StringBuilder cheatSheetDetails \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String cheatSheetName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String cheatSheetProgrammingLanguage \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileParser(File cheatSheetDocument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseCheatSheet(cheatSheetDocument);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (FileNotFoundException | InvalidFileDataException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileParser() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Parses the given cheatSheet file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetDocument cheatSheet file to be parsed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is not found in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                               the user directory."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected void parseCheatSheet(File cheatSheetDocument) throws FileNotFoundException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            InvalidFileDataException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Scanner componentScanner \u003d new Scanner(cheatSheetDocument);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        while (componentScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "            extractCheatSheetComponents(componentScanner.nextLine());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (this.cheatSheetName.isEmpty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "                || this.cheatSheetProgrammingLanguage.isEmpty()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "                || cheatSheetDetails.toString().trim().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new InvalidFileDataException(cheatSheetDocument);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.convertedCheatSheet \u003d new CheatSheet(cheatSheetName,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "                cheatSheetProgrammingLanguage, cheatSheetDetails.toString().trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        componentScanner.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the contents of the cheatsheet from the specified file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetLine Line of the file being analyzed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractCheatSheetComponents(String cheatSheetLine) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (cheatSheetLine.startsWith(NAME)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetName \u003d cheatSheetLine.replace(NAME, EMPTY).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if (cheatSheetLine.startsWith(PROGRAMMING_LANGUAGE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetProgrammingLanguage \u003d cheatSheetLine"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .replace(PROGRAMMING_LANGUAGE, EMPTY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if (cheatSheetLine.startsWith(DETAILS)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String detailsFirstLine \u003d cheatSheetLine"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .replace(DETAILS, EMPTY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetDetails"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(detailsFirstLine)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if (this.cheatSheetDetails.length() \u003e 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetDetails"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(cheatSheetLine.trim())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 86,
      "brandontoh": 1
    }
  },
  {
    "path": "src/main/java/storage/DataFileReader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.DirectoryIsEmptyException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Allows the user to read data from the data directory and use it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": " * to insert the cheatsheets present in the folder to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileReader extends DataFile {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String folderPath \u003d String.valueOf(DATA_DIR);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private Path dataFolder \u003d DATA_DIR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Main Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileReader() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Constructor for debugging purposes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileReader(String folderPath, Path dataFolder) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.folderPath \u003d folderPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.dataFolder \u003d dataFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the file contents into tasks that can be added into"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * the list of tasks. Also handles an exception arising"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * from missing directory at the specified location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            insertStoredCheatSheets();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewDirectory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (DirectoryIsEmptyException d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the data obtained from the /data folder into cheatsheets and adds"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * them to the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws FileNotFoundException     Thrown if the /data folder is not found"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws DirectoryIsEmptyException Thrown if the /data folder is empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected void insertStoredCheatSheets() throws FileNotFoundException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "            DirectoryIsEmptyException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!Files.exists(dataFolder)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File dataDirectory \u003d new File(folderPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] directoryItems \u003d dataDirectory.list();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert directoryItems !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (directoryItems.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new DirectoryIsEmptyException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File[] cheatSheetFiles \u003d dataDirectory.listFiles();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert cheatSheetFiles !\u003d null : \"File Empty!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (File cheatSheetFile : cheatSheetFiles) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "            extractCheatSheet(cheatSheetFile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new directory and file at the specified location"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * if it currently does not exist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void createNewDirectory() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createDirectories(DATA_DIR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the contents of the cheatsheet from the specified file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetDocument File of the cheatSheet"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractCheatSheet(File cheatSheetDocument) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parsedData \u003d new DataFileParser(cheatSheetDocument);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (parsedData.convertedCheatSheet !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "            CheatSheetList.add(parsedData.convertedCheatSheet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "theopin": 98
    }
  },
  {
    "path": "src/main/java/storage/DataFileWriter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static storage.DataFileParser.NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static storage.DataFileParser.PROGRAMMING_LANGUAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static storage.DataFileParser.DETAILS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Allows the user to write data based on the cheatSheets currently present"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": " * in the list of cheatSheets into individual files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileWriter extends DataFile {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private ArrayList\u003cCheatSheet\u003e cheatSheets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private Path debugPath \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Main Constructor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileWriter() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Constructor for debugging purposes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileWriter(Path textFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.cheatSheets \u003d CheatSheetList.getCheatSheetList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.debugPath \u003d textFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheets present in the list of cheatSheet into"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a string. This string is then saved in a file, 1 file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * for each cheatSheet."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheets \u003d CheatSheetList.getCheatSheetList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        storeCheatSheet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheets present in the list of cheatSheets into"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void storeCheatSheet() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        if (cheatSheets !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "            for (CheatSheet cheatSheet : cheatSheets) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "                convertStringToFile(cheatSheet);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheet into a file format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void convertStringToFile(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path textFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StringBuilder cheatSheetFileBuild \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Build cheatsheet content"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        buildFileContents(cheatSheetFileBuild, cheatSheet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String fileName \u003d cheatSheet.getCheatSheetName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "        textFile \u003d (debugPath \u003d\u003d null) ? Paths.get(USER_DIR, DATA, fileName) : debugPath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!Files.exists(textFile)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.createFile(textFile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writeToFile(String.valueOf(textFile), cheatSheetFileBuild.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the contents for the respective cheatSheet file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetFileBuild the stringBuilder used to connect the contents of the file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void buildFileContents(StringBuilder cheatSheetFileBuild, CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "        cheatSheetFileBuild.append(NAME)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(cheatSheet.getCheatSheetName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(PROGRAMMING_LANGUAGE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(cheatSheet.getCheatSheetProgrammingLanguage())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(DETAILS)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(cheatSheet.getCheatSheetDetails());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Writes the values of textContent into a File."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param directory    Name of the file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param fileContents Contents of the file"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException Thrown if there are issues with writing the string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                     into a file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void writeToFile(String directory, String fileContents) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "        FileWriter fileEditor \u003d new FileWriter(directory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileEditor.write(fileContents);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileEditor.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 3,
      "theopin": 113
    }
  },
  {
    "path": "src/main/java/ui/Printer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * Handles printing of all outputs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String RED_TEXT \u003d \"\\u001b[31m\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String GREEN_TEXT \u003d \"\\u001b[32;1m\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String CYAN_TEXT \u003d \"\\u001b[36m\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String RESET_TEXT \u003d \"\\u001b[0m\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String LINE \u003d \"----------------------------------------------------------------\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            + \"----------------------------------------\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private static void print(Object obj) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        System.out.println(obj);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static void printWelcomeScreen() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(CYAN_TEXT + \" ________  ___  ___  _______   ________  _________  ________  \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"___  ___  _______   _______  _________\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"|\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\  ___ \\\\ |\\\\   __  \\\\|\\\\___   ___\\\\\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\  ___ \\\\ |\\\\  ___ \\\\|\\\\___   ___\\\\\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __/|\\\\ \\\\  \\\\|\\\\  \\\\|___ \\\\  \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\_\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __/|\\\\ \\\\   __/\\\\|___ \\\\  \\\\_|\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\ \\\\  \\\\    \\\\ \\\\   __  \\\\ \\\\  \\\\_|/_\\\\ \\\\   __  \\\\   \\\\ \\\\  \\\\ \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\_____  \\\\ \\\\   __  \\\\ \\\\  \\\\_|/_\\\\ \\\\  \\\\_|/__  \\\\ \\\\  \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"  \\\\ \\\\  \\\\____\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\ \\\\  \\\\   \\\\ \\\\  \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\|____|\\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\_|\\\\ \\\\  \\\\ \\\\  \\\\\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"   \\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\   \\\\ \\\\__\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\  ____\\\\_\\\\  \\\\ \\\\__\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\_______\\\\  \\\\ \\\\__\\\\\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"    \\\\|_______|\\\\|__|\\\\|__|\\\\|_______|\\\\|__|\\\\|__|    \\\\|__| |\\\\____\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"_____\\\\|__|\\\\|__|\\\\|_______|\\\\|_______|   \\\\|__|\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                      ___       ________  ________\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                     |\\\\  \\\\     |\\\\   __  \\\\|\\\\   ____\\\\\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                     \\\\ \\\\  \\\\    \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\___|\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                      \\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\  ___\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                       \\\\ \\\\  \\\\____\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                        \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                         \\\\|_______|\\\\|_______|\\\\|_______|\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + LINE + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"Welcome to CheatLogs, the one stop cheat sheet management systems\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"Your CAP is our upmost priority\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + RESET_TEXT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static void printExitLogo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\" ________  ________  ________  ________  ________      ___    ___ _______\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"|\\\\   ____\\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   ___ \\\\|\\\\   __  \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\    |\\\\  \\\\  /  /|\\\\  ___ \\\\\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\|\\\\ /_   \\\\ \\\\  \\\\/  / | \\\\   __/|\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\ \\\\  \\\\  __\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\ \\\\\\\\ \\\\ \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\   __  \\\\   \\\\ \\\\    / / \\\\ \\\\  \\\\_|/__\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\_\\\\\\\\ \\\\\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\  \\\\|\\\\  \\\\   \\\\/  /  /   \\\\ \\\\  \\\\_|\\\\ \\\\\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"   \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"__/  / /      \\\\ \\\\_______\\\\\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"    \\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\___\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"/ /        \\\\|_______|\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                                     \\\\|___|/\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static void printUserInputPrompt() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Please Enter a Command:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printWhiteSpace() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printHelpSheet() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/add /n \u003cCHEAT_SHEET_NAME\u003e /l \u003cPROGRAMMING_LANGUAGE\u003e /d \u003cDESCRIPTION\u003e \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tAdds a new cheat sheet to the application and prompts user to include data \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"into the cheat sheet.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"/clear\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tClears all entries from the cheat sheet.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/delete /i \u003cCHEAT_SHEET_INDEX\u003e\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tTo be used after using /list, Deletes the cheat sheet at INDEX items down the list. \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The first cheat sheet has an index of 1.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/find /l \u003cPROGRAMMING LANGUAGE\u003e k/ \u003cKEYWORD\u003e\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tFinds a cheat sheet whose names contain any of the given keywords.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/view /i \u003cCHEAT_SHEET_INDEX\u003e\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tView the contents of a cheat sheet either by the name or index\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"/list\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tLists all the possible commands that can be executed in the application.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"/exit\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tExits the application.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tName: \" + cheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tProgramming Language: \" + cheatSheet.getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tDetails: \" + cheatSheet.getCheatSheetDetails());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printCheatSheetList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d CheatSheetList.getSize(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            System.out.println(\"\\t\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                    + i + \". \" + CheatSheetList.getCheatSheet(i).getCheatSheetName()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                    + \" (Language: \" + CheatSheetList.getCheatSheet(i).getCheatSheetProgrammingLanguage() + \")\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                    + \" (Details: \" + CheatSheetList.getCheatSheet(i).getCheatSheetDetails() + \")\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printAddNewCheatSheetMessage(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"Added new cheat sheet:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Now you have \" + CheatSheetList.getSize() + \" cheatsheet(s)\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printClearCheatSheetMessage(int number) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"Cleared total of \" + number + \" cheat sheets\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Now you have no cheatsheets\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printDeleteCheatSheetMessage(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"This cheat sheet has been deleted: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Now you have \" + CheatSheetList.getSize() + \" cheatsheet(s)\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printViewCheatSheetMessage(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"This is your content for \" + cheatSheet.getCheatSheetName() + \": \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 42,
      "abnermtj": 57,
      "brandontoh": 36
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "brandontoh": 11,
      "adhy-p": 6
    }
  },
  {
    "path": "src/main/java/ui/UserSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.CommandExecutor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import storage.DataFileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import storage.DataFileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class UserSession {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * These are objects that will be passed to command subclasses"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * that allow them to execute helper functions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    DataFileReader fileReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    DataFileWriter fileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public UserSession() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        fileReader \u003d new DataFileReader();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        fileWriter \u003d new DataFileWriter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * Runs the program based on a given user commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void runProgramSequence() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Parser userCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Printer.printWelcomeScreen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        // Ask for new user input and executes it until user types an exit command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printUserInputPrompt();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                Parser parsedUserCommand \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                CommandExecutor.execute(parsedUserCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } catch (CommandException c) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                System.out.println(c.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            fileWriter.executeFunction();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } while (!Command.isExitCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Printer.printExitLogo();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 17,
      "abnermtj": 20,
      "theopin": 1,
      "brandontoh": 13,
      "adhy-p": 1
    }
  },
  {
    "path": "src/test/java/cheatlogs/CheatLogsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatlogs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "class CheatLogsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 2,
      "-": 10,
      "adhy-p": 1
    }
  },
  {
    "path": "src/test/java/cheatsheet/CheatSheetListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "class CheatSheetListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Tester\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetSize() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(10, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished GetSize test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetCheatSheetList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void testClear() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(0, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished Clear test\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testPrintCheatSheetNames() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        StringBuilder print \u003d new StringBuilder(\"Current list of cheat sheet:\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print.append(\"Name\").append(i).append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(print.toString(), CheatSheetList.printCheatSheetNames());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished PrintCheatSheetName test\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testAdd() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(10, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.remove(\"Name\" + i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(10, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished Add test\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testRemove() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // remove(String name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(\"Name1\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(\"Name3\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(\"Name5\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(7, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // remove(int index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(5);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(7, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished Remove test\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetCheatSheet() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet test \u003d new CheatSheet(\"Name1\", \"Language1\", \"Details1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                CheatSheetList.add(test);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(test, CheatSheetList.getCheatSheet(2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(test, CheatSheetList.getCheatSheet(\"Name1\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished GetCheatSheet test\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "adhy-p": 104
    }
  },
  {
    "path": "src/test/java/cheatsheet/CheatSheetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "class CheatSheetTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Test1\", cheatSheet1.getCheatSheetName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheet1.setCheatSheetName(\"Java 11 cheatsheet\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11 cheatsheet\", cheatSheet1.getCheatSheetName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetProgrammingLanguage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11\", cheatSheet1.getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetProgrammingLanguage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheet1.setCheatSheetProgrammingLanguage(\"C++ 11\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"C++ 11\", cheatSheet1.getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetDetails() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11 is a Java programming language.\", cheatSheet1.getCheatSheetDetails());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetDetails() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheet1.setCheatSheetDetails(\"Java 11 is an awesome language\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11 is an awesome language\", cheatSheet1.getCheatSheetDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 47
    }
  },
  {
    "path": "src/test/java/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ClearCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void testCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        // todo : implement this"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "brandontoh": 16
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/HelpTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class HelpTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ViewCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void execute(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "brandontoh": 13
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void parser() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void parser_incompleteInput_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 17
    }
  },
  {
    "path": "src/test/java/storage/DataFileDestroyerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileDestroyerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path removeTestDirectory \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_one_file\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path clearTestDirectory \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile5 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_one_file\", \"testFile5\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile6 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\", \"testFile6\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile7 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\", \"testFile7\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile8 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\", \"testFile8\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    static final String MULTIPLE \u003d \"multiple\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "    static final String SINGLE \u003d \"single\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void removeSingleFile_textFile5_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileDestroyer removeTest \u003d new DataFileDestroyer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File singleFileDirectory \u003d new File(String.valueOf(removeTestDirectory));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        removeTest.executeFunction(textFile5, \"single\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] presentFiles \u003d singleFileDirectory.list();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert presentFiles !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(presentFiles.length, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void clearDirectory_textFiles_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileDestroyer removeTest \u003d new DataFileDestroyer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File multipleFileDirectory \u003d new File(String.valueOf(clearTestDirectory));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        removeTest.executeFunction(clearTestDirectory, MULTIPLE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] presentFiles \u003d multipleFileDirectory.list();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile6);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile7);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile8);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert presentFiles !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(presentFiles.length, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 68
    }
  },
  {
    "path": "src/test/java/storage/DataFileParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.InvalidFileDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile1 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\", \"testFile1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile2 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_missing_parameter\", \"testFile2\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile3 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_missing_parameter\", \"testFile3\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile4 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_missing_parameter\", \"testFile4\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileName \u003d \"Sample1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileProgrammingLanguage \u003d \"C++\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileDetails \u003d \"Use case statements to check multiple conditions.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseDataName_textFile1_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser(textFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(fileName, parseTest.convertedCheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseDataLanguage_textFile1_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser(textFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(fileProgrammingLanguage, parseTest.convertedCheatSheet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseDataDetails_textFile1_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser(textFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(fileDetails, parseTest.convertedCheatSheet"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .getCheatSheetDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseEmptyDataName_textFile2_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(InvalidFileDataException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseTest.parseCheatSheet(textFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseEmptyProgrammingLanguage_textFile3_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(InvalidFileDataException.class, () -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseTest.parseCheatSheet(textFile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseEmptyDetails_textFile4_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile4));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(InvalidFileDataException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseTest.parseCheatSheet(textFile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 77
    }
  },
  {
    "path": "src/test/java/storage/DataFileReaderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileReaderTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path testNonEmptyFolder \u003d Paths.get(\"src\", \"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path testMissingFolder \u003d Paths.get(\"src\", \"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"missing_folder\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readDataFiles_nonEmptyFolder_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileReader readTest \u003d new DataFileReader(String.valueOf(testNonEmptyFolder),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "                testNonEmptyFolder);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "        readTest.executeFunction();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(1, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        removeCheatSheet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void removeCheatSheet() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int cheatSheetIndex \u003d CheatSheetList.getSize();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d CheatSheetList.getCheatSheet(cheatSheetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheetList.remove(testCheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readDataFiles_missingFolder_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileReader readTest \u003d new DataFileReader(String.valueOf(testMissingFolder),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "                testMissingFolder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(FileNotFoundException.class, readTest::insertStoredCheatSheets);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 41,
      "adhy-p": 1
    }
  },
  {
    "path": "src/test/java/storage/DataFileWriterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileWriterTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileName \u003d \"Sample1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileProgrammingLanguage \u003d \"C++\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileDetails \u003d \"Use case statements to check multiple conditions.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\", \"testFile1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textCompareFile \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\", \"Sample1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void writeDataFiles_cheatSheetObject_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheetList.add(new CheatSheet(fileName, fileProgrammingLanguage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "                fileDetails));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "        new DataFileWriter(textCompareFile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File createdFile \u003d new File(String.valueOf(textCompareFile));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String referenceFile \u003d Files.readString(textFile);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String actualFile \u003d Files.readString(textCompareFile);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "            assertEquals(referenceFile, actualFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createdFile.delete();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "            removeCheatSheet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void removeCheatSheet() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int cheatSheetIndex \u003d CheatSheetList.getSize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d CheatSheetList.getCheatSheet(cheatSheetIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheetList.remove(testCheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 49
    }
  },
  {
    "path": "src/test/java/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void displayWelcomeScreen() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void askForUserInput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void printExitMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void printCheatSheet() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/add /n name /l language /d details"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/clear"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/exit"
      }
    ],
    "authorContributionMap": {
      "adhy-p": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 echo \"Test passed!\" || echo \"Test failed!\""
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "adhy-p": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "# delete existing data directory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "rm -rf data"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "dos2unix -f EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1,
      "-": 22,
      "adhy-p": 4
    }
  }
]
