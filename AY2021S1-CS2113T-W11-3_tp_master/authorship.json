[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    mainClassName \u003d \"cheatlogs.CheatLogs\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "-": 45
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://via.placeholder.com/100.png?text\u003dPhoto\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Tolentino Abner Jr Morales| [Github](https://github.com/abnermtj) | [Portfolio](docs/team/abner.md) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars2.githubusercontent.com/u/60168552?s\u003d400\u0026u\u003d70ed3bb19e26b16aadf133b9ff21ee01345defff\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Aldo Maximillian | [Github](https://github.com/domaxi) | [Portfolio](docs/team/aldomax.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/60382521?s\u003d400\u0026u\u003dcf1fd251902a9305731ac4732d85abb1f83c6755\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Toh Yong Xiang Brandon | [Github](https://github.com/brandontoh) | [Portfolio](docs/team/TohYongXiangBrandon.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/54772103?s\u003d460\u0026u\u003daaf323e6171a155d2080ea54e18a429e81d8bb55\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Hubertus Adhy Pratama Setiawan | [Github](https://github.com/adhy-p) | [Portfolio](docs/team/adhy-p.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://via.placeholder.com/100.png?text\u003dPhoto\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Theodore Pinto | [Github](https://github.com/theopin) | [Portfolio](docs/team/theopin.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 5,
      "-": 4
    }
  },
  {
    "path": "docs/team/TohYongXiangBrandon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# Toh Yong Xiang Brandon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Y2 NUS CEG Student"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 6
    }
  },
  {
    "path": "docs/team/abner.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "A Nus student."
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1
    }
  },
  {
    "path": "docs/team/adhy-p.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "# Hubertus Adhy Pratama Setiawan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "adhy-p": 6
    }
  },
  {
    "path": "docs/team/aldomax.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "# Aldo Maximillian - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am a Y2 Computer Engineering student, currently enrolling in NUS."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am the alleged leader of the tem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I made the team repo, organization"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am in charge of the cheatSheet class"
      }
    ],
    "authorContributionMap": {
      "domaxi": 9
    }
  },
  {
    "path": "docs/team/theopin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "# Theodore Pinto - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "theopin": 6
    }
  },
  {
    "path": "src/main/java/cheatlogs/CheatLogs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatlogs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import ui.UserSession;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class CheatLogs {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    // Main Function"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        UserSession session \u003d new UserSession();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        session.runProgramSequence();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 9,
      "brandontoh": 2
    }
  },
  {
    "path": "src/main/java/cheatsheet/CheatSheet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class CheatSheet {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetDetails;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public CheatSheet(String cheatSheetName, String cheatSheetProgrammingLanguage, String cheatSheetDetails) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetName \u003d cheatSheetName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetProgrammingLanguage \u003d cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetDetails \u003d cheatSheetDetails;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getCheatSheetName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return cheatSheetName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setCheatSheetName(String cheatSheetName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetName \u003d cheatSheetName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getCheatSheetProgrammingLanguage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setCheatSheetProgrammingLanguage(String cheatSheetProgrammingLanguage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetProgrammingLanguage \u003d cheatSheetProgrammingLanguage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getCheatSheetDetails() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return cheatSheetDetails;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setCheatSheetDetails(String cheatSheetDetails) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        this.cheatSheetDetails \u003d cheatSheetDetails;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return \"CheatSheet{\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"cheatSheetName\u003d\u0027\" + cheatSheetName + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \", cheatSheetProgrammingLanguage\u003d\u0027\" + cheatSheetProgrammingLanguage + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \", cheatSheetDetails\u003d\u0027\" + cheatSheetDetails + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "domaxi": 48
    }
  },
  {
    "path": "src/main/java/cheatsheet/CheatSheetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "public class CheatSheetList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private static ArrayList\u003cCheatSheet\u003e cheatSheets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public CheatSheetList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Gets the number of cheat sheet currently in the CheatSheetList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheets.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Gets all the cheat sheets in the cheatSheetList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return cheatSheets The current list of cheat sheets"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static ArrayList\u003cCheatSheet\u003e getCheatSheetList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheets;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Converts the cheatSheetName attribute for each cheat sheet into a string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * The string will be used by UI for printing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return printedByUI The string to be printed by UI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static String printCheatSheetNames() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        StringBuilder printedByUI \u003d new StringBuilder(\"Current list of cheat sheet:\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printedByUI.append(cs.getCheatSheetName()).append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return printedByUI.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Adds a new cheat sheet to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void add(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheets.add(cheatSheet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Deletes a cheat sheet from the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Prints an error message if name is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param name The name attribute of the desired cheat sheet"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void remove(String name) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (cs.getCheatSheetName().equals(name)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Deletes a cheat sheet from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Prints an error message if index is out of bound."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param index The index of the desired cheat sheet"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheets.remove(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            // todo: add error message in UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * Removes all cheat sheet in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static void clear() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheets.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Retrieves a cheat sheet from the list using its index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param index The index of desired cheat sheet"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static CheatSheet getCheatSheet(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet cheatSheet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheet \u003d cheatSheets.get(index - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            // todo: add error message in UI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheet;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Retrieves a cheat sheet from the list using its name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param name The name attribute of desired cheat sheet"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static CheatSheet getCheatSheet(String name) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet cheatSheet;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (cs.getCheatSheetName().equals(name)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return getCheatSheet(index + 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "adhy-p": 122
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public AddCommand(Parser parser) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String name \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String programmingLanguage \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.PROGRAMMINGLANGUAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String description \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.DESCRIPTION);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a name\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        CheatSheet cheatSheet \u003d new CheatSheet(name, programmingLanguage, description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        CheatSheetList.add(cheatSheet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        Printer.printAddNewCheatSheetMessage(cheatSheet);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 6,
      "brandontoh": 22
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ClearCommand(Parser parser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Printer.printClearCheatSheetMessage(CheatSheetList.getSize());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        fileDestroyer.executeFunction();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "brandontoh": 13,
      "adhy-p": 1
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * The base class for all commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static boolean isExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    protected Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    protected DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Command(Parser parser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        isExitCommand \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        fileDestroyer \u003d new DataFileDestroyer();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public abstract void execute() throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 11,
      "brandontoh": 11
    }
  },
  {
    "path": "src/main/java/command/CommandEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public enum CommandEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    CLEAR,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    VIEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "brandontoh": 6
    }
  },
  {
    "path": "src/main/java/command/CommandExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public CommandExecutor() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void execute(Parser parser) throws CommandException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Command commandToBeExecuted;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        switch (parser.getCommandType()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new AddCommand(parser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ClearCommand(parser);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new DeleteCheatSheet(parser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ExitCommand(parser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new FindCommand(parser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new Help(parser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ListCommand(parser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case VIEW:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            commandToBeExecuted \u003d new ViewCommand(parser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"THIS WILL NVR HAPPEN\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        commandToBeExecuted.execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 33,
      "brandontoh": 9
    }
  },
  {
    "path": "src/main/java/command/DeleteCheatSheet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class DeleteCheatSheet extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public DeleteCheatSheet(Parser parser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        CheatSheet cheatSheetToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.NAME)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                name \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                cheatSheetToBeDeleted \u003d CheatSheetList.getCheatSheet(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            }  else if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.INDEX)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                index \u003d Integer.parseInt(parser.getDescriptionMap().get(ArgumentFlagEnum.INDEX));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                cheatSheetToBeDeleted \u003d CheatSheetList.getCheatSheet(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            assert cheatSheetToBeDeleted !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            CheatSheetList.remove(cheatSheetToBeDeleted.getCheatSheetName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            fileDestroyer.executeFunction(cheatSheetToBeDeleted.getCheatSheetName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printDeleteCheatSheetMessage(cheatSheetToBeDeleted);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Enter a valid argument or name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Enter a valid index\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 10,
      "brandontoh": 30
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ExitCommand(Parser parser) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        isExitCommand \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 8,
      "brandontoh": 6
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public FindCommand(Parser parser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String programmingLanguage \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String keyword \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cCheatSheet\u003e cheatSheetArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.PROGRAMMINGLANGUAGE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            programmingLanguage \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.PROGRAMMINGLANGUAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.SECTIONKEYWORD)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            keyword \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.SECTIONKEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (CheatSheet cs : CheatSheetList.getCheatSheetList()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (!programmingLanguage.isEmpty() \u0026\u0026 keyword.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (cs.getCheatSheetProgrammingLanguage().equals(programmingLanguage)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    cheatSheetArrayList.add(cs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (!keyword.isEmpty() \u0026\u0026 programmingLanguage.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (cs.getCheatSheetDetails().contains(keyword)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    cheatSheetArrayList.add(cs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (!programmingLanguage.isEmpty() \u0026\u0026 !keyword.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (cs.getCheatSheetProgrammingLanguage().equals(programmingLanguage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        \u0026\u0026 cs.getCheatSheetDetails().contains(keyword)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    cheatSheetArrayList.add(cs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                throw new CommandException(\"Please enter at least an argument\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (cheatSheetArrayList.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"No matching content found\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"Showing all matches: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (CheatSheet cs : cheatSheetArrayList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printCheatSheet(cs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            Printer.printWhiteSpace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 18,
      "brandontoh": 38
    }
  },
  {
    "path": "src/main/java/command/Help.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class Help extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Help(Parser parser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Printer.printHelpSheet();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 7,
      "brandontoh": 8
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ListCommand(Parser parser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    // todo: need to ask adhy whether he can attach index to cheatsheet"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        Printer.printCheatSheetList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "brandontoh": 16
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.ArgumentFlagEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public ViewCommand(Parser parser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(parser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.NAME)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                String name \u003d parser.getDescriptionMap().get(ArgumentFlagEnum.NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                for (int i \u003d 0; i \u003c CheatSheetList.getSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    if (CheatSheetList.getCheatSheet(i).getCheatSheetName().equals(name)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        index \u003d i + 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (parser.getDescriptionMap().containsKey(ArgumentFlagEnum.INDEX)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                index \u003d Integer.parseInt(parser.getDescriptionMap().get(ArgumentFlagEnum.INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printViewCheatSheetMessage(CheatSheetList.getCheatSheet(index));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 14,
      "brandontoh": 20
    }
  },
  {
    "path": "src/main/java/exception/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 7
    }
  },
  {
    "path": "src/main/java/exception/DirectoryIsEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DirectoryIsEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return \"Folder is Empty.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 9
    }
  },
  {
    "path": "src/main/java/exception/InvalidFileDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class InvalidFileDataException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private File cheatSheetDocument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public InvalidFileDataException(File cheatSheetDocument) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.cheatSheetDocument \u003d cheatSheetDocument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return \"Data in \" + cheatSheetDocument.getName() + \" is Invalid!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 16
    }
  },
  {
    "path": "src/main/java/parser/ArgumentFlagEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public enum ArgumentFlagEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    NAME(\"/n\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    DESCRIPTION(\"/d\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    INDEX(\"/i\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    PROGRAMMINGLANGUAGE(\"/l\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    SECTIONKEYWORD(\"/k\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private final String associatedKeyWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    ArgumentFlagEnum(String associatedKeyword) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.associatedKeyWord \u003d associatedKeyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public String getAssociatedKeyWord() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return this.associatedKeyWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 19
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.CommandEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private final CommandEnum commandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private final ArrayList\u003cArgumentFlagEnum\u003e argEnumSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private HashMap\u003cArgumentFlagEnum, String\u003e descriptionMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Parser(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        commandType \u003d parseTypeOfCommand(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        argEnumSet \u003d parseTypeOfArgument(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        descriptionMap \u003d parseDescription(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private CommandEnum parseTypeOfCommand(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String parsedInput \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        switch (parsedInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/add\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.ADD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/clear\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.CLEAR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/delete\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.DELETE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return CommandEnum.EXIT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/find\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.FIND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/help\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return CommandEnum.HELP;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/list\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.LIST;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case \"/view\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return CommandEnum.VIEW;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid command\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private ArrayList\u003cArgumentFlagEnum\u003e parseTypeOfArgument(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cArgumentFlagEnum\u003e argEnumList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\" /[dnilk] \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cString\u003e argList \u003d addMatchesToArgEnumSet(matcher);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (String arg : argList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (ArgumentFlagEnum ae : ArgumentFlagEnum.values()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (arg.equals(ae.getAssociatedKeyWord())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    argEnumList.add(ae);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return argEnumList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private HashMap\u003cArgumentFlagEnum, String\u003e parseDescription(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        descriptionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            String[] details \u003d userInput.split(\" /[ndilk ]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (int i \u003d 1; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                descriptionMap.put(argEnumSet.get(i - 1), details[i].trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return descriptionMap;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private ArrayList\u003cString\u003e addMatchesToArgEnumSet(Matcher matcher) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cString\u003e argList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            argList.add(matcher.group().trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return argList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public CommandEnum getCommandType() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public ArrayList\u003cArgumentFlagEnum\u003e getArgEnumSet() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return argEnumSet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public HashMap\u003cArgumentFlagEnum, String\u003e getDescriptionMap() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return descriptionMap;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 23,
      "brandontoh": 74
    }
  },
  {
    "path": "src/main/java/storage/DataFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": " * A general class that stores certain constants regarding the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": " * file location of the /data directory, as well as a method that can be"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": " * executed based on the type of class that is a child of this class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "public abstract class DataFile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String USER_DIR \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String DATA \u003d \"data\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final Path DATA_DIR \u003d Paths.get(USER_DIR, DATA);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * A method that is to be run when its subclass is created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public abstract void executeFunction();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 22
    }
  },
  {
    "path": "src/main/java/storage/DataFileDestroyer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileDestroyer extends DataFile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String MULTIPLE \u003d \"multiple\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private Path debugPath \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "            clearDirectory(DATA_DIR);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction(String unwantedFile) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "            deleteFile(unwantedFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction(Path unwantedFilePath, String function) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.debugPath \u003d unwantedFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (function.equals(MULTIPLE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "                clearDirectory(unwantedFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "                deleteFile(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void deleteFile(String unwantedFile) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path unwantedFilePath \u003d (debugPath \u003d\u003d null)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "                ? Paths.get(USER_DIR, DATA, unwantedFile)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "                : debugPath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Files.delete(unwantedFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void clearDirectory(Path intendedDirectory) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Stream\u003cPath\u003e dataDirectoryFiles \u003d Files.list(intendedDirectory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "        dataDirectoryFiles.forEach(path -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.delete(path);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 63
    }
  },
  {
    "path": "src/main/java/storage/DataFileParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.InvalidFileDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String NAME \u003d \"Name: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String PROGRAMMING_LANGUAGE \u003d \"Programming Language: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String DETAILS \u003d \"Contents: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected CheatSheet convertedCheatSheet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final StringBuilder cheatSheetDetails \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String cheatSheetName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String cheatSheetProgrammingLanguage \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileParser(File cheatSheetDocument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseCheatSheet(cheatSheetDocument);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (FileNotFoundException | InvalidFileDataException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileParser() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Parses the given cheatSheet file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetDocument cheatSheet file to be parsed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is not found in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                               the user directory."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected void parseCheatSheet(File cheatSheetDocument) throws FileNotFoundException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            InvalidFileDataException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Scanner componentScanner \u003d new Scanner(cheatSheetDocument);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        while (componentScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "            extractCheatSheetComponents(componentScanner.nextLine());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (this.cheatSheetName.isEmpty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "                || this.cheatSheetProgrammingLanguage.isEmpty()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "                || cheatSheetDetails.toString().trim().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new InvalidFileDataException(cheatSheetDocument);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.convertedCheatSheet \u003d new CheatSheet(cheatSheetName,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "                cheatSheetProgrammingLanguage, cheatSheetDetails.toString().trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        componentScanner.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the contents of the cheatsheet from the specified file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetLine Line of the file being analyzed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractCheatSheetComponents(String cheatSheetLine) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (cheatSheetLine.startsWith(NAME)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetName \u003d cheatSheetLine.replace(NAME, EMPTY).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if (cheatSheetLine.startsWith(PROGRAMMING_LANGUAGE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetProgrammingLanguage \u003d cheatSheetLine"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .replace(PROGRAMMING_LANGUAGE, EMPTY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if (cheatSheetLine.startsWith(DETAILS)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String detailsFirstLine \u003d cheatSheetLine"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .replace(DETAILS, EMPTY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetDetails"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(detailsFirstLine)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else if (this.cheatSheetDetails.length() \u003e 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "            this.cheatSheetDetails"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(cheatSheetLine.trim())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    .append(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 86,
      "brandontoh": 1
    }
  },
  {
    "path": "src/main/java/storage/DataFileReader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.DirectoryIsEmptyException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Allows the user to read data from the data directory and use it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": " * to insert the cheatsheets present in the folder to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileReader extends DataFile {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String folderPath \u003d String.valueOf(DATA_DIR);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private Path dataFolder \u003d DATA_DIR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Main Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileReader() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Constructor for debugging purposes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileReader(String folderPath, Path dataFolder) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.folderPath \u003d folderPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.dataFolder \u003d dataFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the file contents into tasks that can be added into"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * the list of tasks. Also handles an exception arising"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * from missing directory at the specified location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            insertStoredCheatSheets();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewDirectory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (DirectoryIsEmptyException d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the data obtained from the /data folder into cheatsheets and adds"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * them to the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws FileNotFoundException     Thrown if the /data folder is not found"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws DirectoryIsEmptyException Thrown if the /data folder is empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected void insertStoredCheatSheets() throws FileNotFoundException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "            DirectoryIsEmptyException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!Files.exists(dataFolder)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File dataDirectory \u003d new File(folderPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] directoryItems \u003d dataDirectory.list();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert directoryItems !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (directoryItems.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new DirectoryIsEmptyException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File[] cheatSheetFiles \u003d dataDirectory.listFiles();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert cheatSheetFiles !\u003d null : \"File Empty!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (File cheatSheetFile : cheatSheetFiles) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "            extractCheatSheet(cheatSheetFile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new directory and file at the specified location"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * if it currently does not exist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void createNewDirectory() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createDirectories(DATA_DIR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the contents of the cheatsheet from the specified file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetDocument File of the cheatSheet"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractCheatSheet(File cheatSheetDocument) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parsedData \u003d new DataFileParser(cheatSheetDocument);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (parsedData.convertedCheatSheet !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "            CheatSheetList.add(parsedData.convertedCheatSheet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "theopin": 98
    }
  },
  {
    "path": "src/main/java/storage/DataFileWriter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static storage.DataFileParser.NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static storage.DataFileParser.PROGRAMMING_LANGUAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static storage.DataFileParser.DETAILS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Allows the user to write data based on the cheatSheets currently present"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": " * in the list of cheatSheets into individual files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileWriter extends DataFile {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private ArrayList\u003cCheatSheet\u003e cheatSheets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private Path debugPath \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Main Constructor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileWriter() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    // Constructor for debugging purposes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DataFileWriter(Path textFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.cheatSheets \u003d CheatSheetList.getCheatSheetList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.debugPath \u003d textFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        executeFunction();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheets present in the list of cheatSheet into"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a string. This string is then saved in a file, 1 file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * for each cheatSheet."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheets \u003d CheatSheetList.getCheatSheetList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        storeCheatSheet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheets present in the list of cheatSheets into"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void storeCheatSheet() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        if (cheatSheets !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "            for (CheatSheet cheatSheet : cheatSheets) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "                convertStringToFile(cheatSheet);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheet into a file format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void convertStringToFile(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path textFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StringBuilder cheatSheetFileBuild \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        // Build cheatsheet content"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        buildFileContents(cheatSheetFileBuild, cheatSheet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String fileName \u003d cheatSheet.getCheatSheetName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "        textFile \u003d (debugPath \u003d\u003d null) ? Paths.get(USER_DIR, DATA, fileName) : debugPath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!Files.exists(textFile)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.createFile(textFile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writeToFile(String.valueOf(textFile), cheatSheetFileBuild.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the contents for the respective cheatSheet file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheetFileBuild the stringBuilder used to connect the contents of the file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void buildFileContents(StringBuilder cheatSheetFileBuild, CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "        cheatSheetFileBuild.append(NAME)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(cheatSheet.getCheatSheetName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(PROGRAMMING_LANGUAGE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(cheatSheet.getCheatSheetProgrammingLanguage())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(System.lineSeparator())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(DETAILS)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .append(cheatSheet.getCheatSheetDetails());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Writes the values of textContent into a File."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param directory    Name of the file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param fileContents Contents of the file"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException Thrown if there are issues with writing the string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                     into a file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void writeToFile(String directory, String fileContents) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "        FileWriter fileEditor \u003d new FileWriter(directory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileEditor.write(fileContents);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileEditor.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 3,
      "theopin": 113
    }
  },
  {
    "path": "src/main/java/ui/Printer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * Handles printing of all outputs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String RED_TEXT \u003d \"\\u001b[31m\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String GREEN_TEXT \u003d \"\\u001b[32;1m\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String CYAN_TEXT \u003d \"\\u001b[36m\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String RESET_TEXT \u003d \"\\u001b[0m\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String LINE \u003d \"----------------------------------------------------------------\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            + \"----------------------------------------\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private static void print(Object obj) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        System.out.println(obj);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static void printWelcomeScreen() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(CYAN_TEXT + \" ________  ___  ___  _______   ________  _________  ________  \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"___  ___  _______   _______  _________\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"|\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\  ___ \\\\ |\\\\   __  \\\\|\\\\___   ___\\\\\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\  ___ \\\\ |\\\\  ___ \\\\|\\\\___   ___\\\\\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __/|\\\\ \\\\  \\\\|\\\\  \\\\|___ \\\\  \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\_\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __/|\\\\ \\\\   __/\\\\|___ \\\\  \\\\_|\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\ \\\\  \\\\    \\\\ \\\\   __  \\\\ \\\\  \\\\_|/_\\\\ \\\\   __  \\\\   \\\\ \\\\  \\\\ \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\_____  \\\\ \\\\   __  \\\\ \\\\  \\\\_|/_\\\\ \\\\  \\\\_|/__  \\\\ \\\\  \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"  \\\\ \\\\  \\\\____\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\ \\\\  \\\\   \\\\ \\\\  \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\|____|\\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\_|\\\\ \\\\  \\\\ \\\\  \\\\\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"   \\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\   \\\\ \\\\__\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\  ____\\\\_\\\\  \\\\ \\\\__\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\_______\\\\  \\\\ \\\\__\\\\\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"    \\\\|_______|\\\\|__|\\\\|__|\\\\|_______|\\\\|__|\\\\|__|    \\\\|__| |\\\\____\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"_____\\\\|__|\\\\|__|\\\\|_______|\\\\|_______|   \\\\|__|\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                      ___       ________  ________\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                     |\\\\  \\\\     |\\\\   __  \\\\|\\\\   ____\\\\\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                     \\\\ \\\\  \\\\    \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\___|\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                      \\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\  ___\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                       \\\\ \\\\  \\\\____\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                        \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                         \\\\|_______|\\\\|_______|\\\\|_______|\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + LINE + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"Welcome to CheatLogs, the one stop cheat sheet management systems\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"Your CAP is our upmost priority\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + RESET_TEXT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static void printExitLogo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\" ________  ________  ________  ________  ________      ___    ___ _______\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"|\\\\   ____\\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   ___ \\\\|\\\\   __  \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\    |\\\\  \\\\  /  /|\\\\  ___ \\\\\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\|\\\\ /_   \\\\ \\\\  \\\\/  / | \\\\   __/|\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\ \\\\  \\\\  __\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\ \\\\\\\\ \\\\ \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\   __  \\\\   \\\\ \\\\    / / \\\\ \\\\  \\\\_|/__\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\_\\\\\\\\ \\\\\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\  \\\\|\\\\  \\\\   \\\\/  /  /   \\\\ \\\\  \\\\_|\\\\ \\\\\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"   \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"__/  / /      \\\\ \\\\_______\\\\\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"    \\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\___\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"/ /        \\\\|_______|\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                                     \\\\|___|/\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static void printUserInputPrompt() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Please Enter a Command:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printWhiteSpace() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printHelpSheet() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/add /n \u003cCHEAT_SHEET_NAME\u003e /l \u003cPROGRAMMING_LANGUAGE\u003e /d \u003cDESCRIPTION\u003e \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tAdds a new cheat sheet to the application and prompts user to include data \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"into the cheat sheet.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"/clear\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tClears all entries from the cheat sheet.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/delete /i \u003cCHEAT_SHEET_INDEX\u003e\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tTo be used after using /list, Deletes the cheat sheet at INDEX items down the list. \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The first cheat sheet has an index of 1.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/find /l \u003cPROGRAMMING LANGUAGE\u003e k/ \u003cKEYWORD\u003e\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tFinds a cheat sheet whose names contain any of the given keywords.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"/view /i \u003cCHEAT_SHEET_INDEX\u003e\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tView the contents of a cheat sheet either by the name or index\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"/list\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tLists all the possible commands that can be executed in the application.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"/exit\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tExits the application.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tName: \" + cheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tProgramming Language: \" + cheatSheet.getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"\\tDetails: \" + cheatSheet.getCheatSheetDetails());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printCheatSheetList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d CheatSheetList.getSize(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            System.out.println(\"\\t\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                    + i + \". \" + CheatSheetList.getCheatSheet(i).getCheatSheetName()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                    + \" (Language: \" + CheatSheetList.getCheatSheet(i).getCheatSheetProgrammingLanguage() + \")\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                    + \" (Details: \" + CheatSheetList.getCheatSheet(i).getCheatSheetDetails() + \")\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printAddNewCheatSheetMessage(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"Added new cheat sheet: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Now you have \" + CheatSheetList.getSize() + \" cheatsheet(s)\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printClearCheatSheetMessage(int number) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"Cleared total of \" + number + \" cheat sheets\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Now you have no cheatsheets\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void printDeleteCheatSheetMessage(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"This cheat sheet has been deleted: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        System.out.println(\"Now you have \" + CheatSheetList.getSize() + \" cheatsheet(s)\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public static void printViewCheatSheetMessage(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.println(\"This is your content for \" + cheatSheet.getCheatSheetName() + \": \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 42,
      "abnermtj": 57,
      "brandontoh": 36
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "brandontoh": 12
    }
  },
  {
    "path": "src/main/java/ui/UserSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.CommandExecutor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import storage.DataFileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import storage.DataFileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class UserSession {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * These are objects that will be passed to command subclasses"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * that allow them to execute helper functions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    DataFileReader fileReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    DataFileWriter fileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public UserSession() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        fileReader \u003d new DataFileReader();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        fileWriter \u003d new DataFileWriter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * Runs the program based on a given user commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void runProgramSequence() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Parser userCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Printer.printWelcomeScreen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        // Ask for new user input and executes it until user types an exit command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Printer.printUserInputPrompt();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                Parser parsedUserCommand \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                CommandExecutor.execute(parsedUserCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } catch (CommandException c) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                System.out.println(c.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            fileWriter.executeFunction();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } while (!Command.isExitCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Printer.printExitLogo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 17,
      "abnermtj": 20,
      "theopin": 1,
      "brandontoh": 13
    }
  },
  {
    "path": "src/test/java/cheatlogs/CheatLogsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatlogs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "class CheatLogsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 2,
      "-": 10,
      "adhy-p": 1
    }
  },
  {
    "path": "src/test/java/cheatsheet/CheatSheetListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "class CheatSheetListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetSize() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(10, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetCheatSheetList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // to be added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void testClear() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(0, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testPrintCheatSheetNames() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        StringBuilder print \u003d new StringBuilder(\"Current list of cheat sheet:\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print.append(\"Name\").append(i).append(\"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(print.toString(), CheatSheetList.printCheatSheetNames());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testAdd() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(10, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testRemove() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // remove(String name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(\"Name1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(\"Name3\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(\"Name5\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(7, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // remove(int index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.remove(5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(7, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetCheatSheet() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet test \u003d new CheatSheet(\"Name1\", \"Language1\", \"Details1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                CheatSheetList.add(test);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(test, CheatSheetList.getCheatSheet(2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(test, CheatSheetList.getCheatSheet(\"Name1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "adhy-p": 85
    }
  },
  {
    "path": "src/test/java/cheatsheet/CheatSheetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "class CheatSheetTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Test1\", cheatSheet1.getCheatSheetName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheet1.setCheatSheetName(\"Java 11 cheatsheet\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11 cheatsheet\", cheatSheet1.getCheatSheetName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetProgrammingLanguage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11\", cheatSheet1.getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetProgrammingLanguage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheet1.setCheatSheetProgrammingLanguage(\"C++ 11\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"C++ 11\", cheatSheet1.getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetDetails() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11 is a Java programming language.\", cheatSheet1.getCheatSheetDetails());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetDetails() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheet1.setCheatSheetDetails(\"Java 11 is an awesome language\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assertEquals(\"Java 11 is an awesome language\", cheatSheet1.getCheatSheetDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 47
    }
  },
  {
    "path": "src/test/java/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ClearCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void testCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        // todo : implement this"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "brandontoh": 16
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/HelpTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class HelpTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ViewCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void execute(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "brandontoh": 13
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void parser() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void parser_incompleteInput_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 17
    }
  },
  {
    "path": "src/test/java/storage/DataFileDestroyerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileDestroyerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path removeTestDirectory \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_one_file\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path clearTestDirectory \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile5 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_one_file\", \"testFile5\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile6 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\", \"testFile6\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile7 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\", \"testFile7\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile8 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_multiple_files\", \"testFile8\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    static final String MULTIPLE \u003d \"multiple\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "    static final String SINGLE \u003d \"single\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void removeSingleFile_textFile5_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileDestroyer removeTest \u003d new DataFileDestroyer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File singleFileDirectory \u003d new File(String.valueOf(removeTestDirectory));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        removeTest.executeFunction(textFile5, \"single\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] presentFiles \u003d singleFileDirectory.list();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert presentFiles !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(presentFiles.length, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void clearDirectory_textFiles_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileDestroyer removeTest \u003d new DataFileDestroyer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File multipleFileDirectory \u003d new File(String.valueOf(clearTestDirectory));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        removeTest.executeFunction(clearTestDirectory, MULTIPLE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] presentFiles \u003d multipleFileDirectory.list();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile6);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile7);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile8);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert presentFiles !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(presentFiles.length, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 68
    }
  },
  {
    "path": "src/test/java/storage/DataFileParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.InvalidFileDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile1 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\", \"testFile1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile2 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_missing_parameter\", \"testFile2\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile3 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_missing_parameter\", \"testFile3\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile4 \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_missing_parameter\", \"testFile4\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileName \u003d \"Sample1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileProgrammingLanguage \u003d \"C++\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileDetails \u003d \"Use case statements to check multiple conditions.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseDataName_textFile1_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser(textFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(fileName, parseTest.convertedCheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseDataLanguage_textFile1_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser(textFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(fileProgrammingLanguage, parseTest.convertedCheatSheet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .getCheatSheetProgrammingLanguage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseDataDetails_textFile1_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser(textFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(fileDetails, parseTest.convertedCheatSheet"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .getCheatSheetDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseEmptyDataName_textFile2_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(InvalidFileDataException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseTest.parseCheatSheet(textFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseEmptyProgrammingLanguage_textFile3_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(InvalidFileDataException.class, () -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseTest.parseCheatSheet(textFile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void parseEmptyDetails_textFile4_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File textFile \u003d new File(String.valueOf(this.textFile4));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileParser parseTest \u003d new DataFileParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(InvalidFileDataException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "            parseTest.parseCheatSheet(textFile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 77
    }
  },
  {
    "path": "src/test/java/storage/DataFileReaderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileReaderTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path testNonEmptyFolder \u003d Paths.get(\"src\", \"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path testMissingFolder \u003d Paths.get(\"src\", \"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"missing_folder\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readDataFiles_nonEmptyFolder_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileReader readTest \u003d new DataFileReader(String.valueOf(testNonEmptyFolder),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "                testNonEmptyFolder);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "        readTest.executeFunction();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(1, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        removeCheatSheet();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void removeCheatSheet() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int cheatSheetIndex \u003d CheatSheetList.getSize();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d CheatSheetList.getCheatSheet(cheatSheetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheetList.remove(testCheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readDataFiles_missingFolder_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DataFileReader readTest \u003d new DataFileReader(String.valueOf(testMissingFolder),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "                testMissingFolder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertThrows(FileNotFoundException.class, readTest::insertStoredCheatSheets);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 41
    }
  },
  {
    "path": "src/test/java/storage/DataFileWriterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileWriterTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileName \u003d \"Sample1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileProgrammingLanguage \u003d \"C++\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    final String fileDetails \u003d \"Use case statements to check multiple conditions.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textFile \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\", \"testFile1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path textCompareFile \u003d Paths.get(\"src\",\"test\", \"java\", \"storage\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "            \"data_present\", \"Sample1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void writeDataFiles_cheatSheetObject_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheetList.add(new CheatSheet(fileName, fileProgrammingLanguage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "                fileDetails));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "        new DataFileWriter(textCompareFile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File createdFile \u003d new File(String.valueOf(textCompareFile));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String referenceFile \u003d Files.readString(textFile);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String actualFile \u003d Files.readString(textCompareFile);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "            assertEquals(referenceFile, actualFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createdFile.delete();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "            removeCheatSheet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void removeCheatSheet() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int cheatSheetIndex \u003d CheatSheetList.getSize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d CheatSheetList.getCheatSheet(cheatSheetIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheetList.remove(testCheatSheet.getCheatSheetName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 49
    }
  },
  {
    "path": "src/test/java/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void displayWelcomeScreen() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void askForUserInput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void printExitMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void printCheatSheet() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brandontoh": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1,
      "-": 23
    }
  }
]
